/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2023-07-10 18:15:13.480419
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.138)*x3);
x13=((0.712)*x3);
x14=((1.0)*x11);
x15=((0.126)*x5);
x16=((1.0)*x6);
x17=((1.0)*x0);
x18=((0.712)*x11);
x19=((0.712)*x2);
x20=((1.0)*x5);
x21=((0.138)*x2);
x22=((1.0)*x9);
x23=((0.126)*x6);
x24=((1.0)*x2);
x25=(x0*x1);
x26=(x11*x9);
x27=(x0*x4);
x28=(x1*x3);
x29=(x2*x4);
x30=(x1*x11);
x31=(x3*x4);
x32=(x10*x14);
x33=(x17*x28);
x34=(x14*x28);
x35=((((-1.0)*x28))+x29);
x36=(((x1*x24))+(((1.0)*x31)));
x37=((-1.0)*x36);
x38=(x35*x6);
x39=(((x27*x3))+((x2*x25)));
x40=((((-1.0)*x33))+((x2*x27)));
x41=(((x11*x31))+((x2*x30)));
x42=((((-1.0)*x34))+((x11*x29)));
x43=(x40*x5);
x44=(x41*x6);
x45=(x38+((x37*x5)));
x46=(x43+((x39*x6)));
x47=(((x42*x5))+x44);
x48=(x47*x9);
x49=(x46*x9);
x50=((((-1.0)*x20*x39))+((x16*(((((-1.0)*x33))+((x17*x29)))))));
x51=((((-1.0)*x20*x41))+((x16*(((((-1.0)*x34))+((x14*x29)))))));
eerot[0]=(((x50*x8))+((x7*(((((-1.0)*x22*x46))+x32)))));
eerot[1]=(((x50*x7))+((x8*(((((-1.0)*x32))+x49)))));
eerot[2]=(((x10*x46))+x26);
eetrans[0]=(((x10*((((x23*x39))+((x15*x40))))))+(((0.126)*x26))+((x19*x27))+(((-1.0)*x13*x25))+(((-0.85)*x25))+(((0.179)*x11))+((x6*(((((-1.0)*x21*x27))+((x12*x25))))))+((x5*((((x21*x25))+((x12*x27)))))));
eerot[3]=(((x51*x8))+((x7*(((((-1.0)*x22*x47))+(((-1.0)*x10*x17)))))));
eerot[4]=(((x8*((((x0*x10))+x48))))+((x51*x7)));
eerot[5]=(((x10*x47))+(((-1.0)*x17*x9)));
IkReal x52=(x11*x4);
eetrans[1]=(((x18*x29))+((x10*((((x23*x41))+((x15*x42))))))+((x5*((((x12*x52))+((x21*x30))))))+((x6*((((x12*x30))+(((-1.0)*x21*x52))))))+(((-0.126)*x0*x9))+(((-0.179)*x0))+(((-0.85)*x30))+(((-1.0)*x13*x30)));
IkReal x53=((1.0)*x35);
eerot[6]=(((x7*x9*(((((-1.0)*x16*x53))+(((-1.0)*x20*x37))))))+((x8*(((((-1.0)*x5*x53))+(((-1.0)*x36*x6)))))));
eerot[7]=(((x7*(((((-1.0)*x20*x35))+(((-1.0)*x16*x36))))))+((x45*x8*x9)));
eerot[8]=(x10*x45);
IkReal x54=((1.0)*x1);
eetrans[2]=((0.171)+((x6*((((x1*x21))+((x12*x4))))))+(((-1.0)*x19*x54))+((x5*(((((-1.0)*x12*x54))+((x21*x4))))))+(((-0.85)*x4))+((x10*((((x23*x35))+((x15*x37))))))+(((-1.0)*x13*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=((((-0.126)*r02))+px);
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=((((-0.126)*r12))+py);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((-0.171)+(((-0.126)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*pz);
IkReal x57=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x57))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x56)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=((((-1.0)*r21*x57))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x56)));
rxp1_2=((((-1.0)*r11*x55))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x57)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x56)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x58=((0.138)*r20);
IkReal x59=((0.138)*r21);
IkReal x60=((0.138)*r22);
IkReal x61=((-0.276)*npx);
IkReal x62=((-0.276)*npy);
IkReal x63=((-1.0)*npz);
IkReal x64=((-1.0)*r21);
IkReal x65=((-1.0)*npy);
IkReal x66=((-0.138)*r21);
IkReal x67=((-1.0)*rxp0_2);
IkReal x68=((-1.0)*r22);
IkReal x69=((-0.138)*r22);
IkReal x70=((-1.0)*rxp1_2);
IkReal x71=((-1.0)*npx);
matrixinvcoeffs[0]=x58;
matrixinvcoeffs[1]=x61;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=r20;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x71;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x58;
matrixinvcoeffs[19]=x61;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=npx;
matrixinvcoeffs[26]=((-1.0)*r20);
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x67;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x59;
matrixinvcoeffs[33]=x62;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=r21;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x65;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x59;
matrixinvcoeffs[51]=x62;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=npy;
matrixinvcoeffs[58]=x64;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x70;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=x63;
matrixinvcoeffs[74]=r22;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x60;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=r22;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x63;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x60;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x64;
matrixinvcoeffs[101]=x65;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp1_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x66;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x64;
matrixinvcoeffs[119]=x65;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp1_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x66;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=r20;
matrixinvcoeffs[133]=npx;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x67;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x58;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=r20;
matrixinvcoeffs[151]=npx;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x67;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x58;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x68;
matrixinvcoeffs[165]=x63;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x69;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x68;
matrixinvcoeffs[183]=x63;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x69;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=npy;
matrixinvcoeffs[202]=x64;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x66;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x70;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=x64;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=npy;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x66;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x70;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=x71;
matrixinvcoeffs[234]=r20;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x58;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=r20;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x71;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x58;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_9=matrixinvcoeffs[148], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_8=matrixinvcoeffs[133], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_8=matrixinvcoeffs[137], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_8=matrixinvcoeffs[139], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_9=matrixinvcoeffs[156], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_8=matrixinvcoeffs[141], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_9=matrixinvcoeffs[158], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_8=matrixinvcoeffs[143], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x72=pz*pz;
IkReal x73=pp*pp;
IkReal x74=((0.276)*pz);
IkReal x75=((3.124)*pp);
IkReal x76=(gclwh4_2*r22);
IkReal x77=((0.431112)*rxp0_2);
IkReal x78=(gclwh7_0*r21);
IkReal x79=((0.008843316)*rxp2_2);
IkReal x80=((0.276)*rxp0_2);
IkReal x81=((3.124)*pz);
IkReal x82=(gclwh10_12*npz);
IkReal x83=(gclwh14_10*r20);
IkReal x84=(pp*r20);
IkReal x85=(npy*pz);
IkReal x86=((2.0)*gclwh6_10);
IkReal x87=(gclwh13_11*rxp1_2);
IkReal x88=(gclwh9_0*pz);
IkReal x89=((0.003408876)*r22);
IkReal x90=((0.029746728)*r21);
IkReal x91=(gclwh8_2*pz);
IkReal x92=((0.019044)*r20);
IkReal x93=(gclwh14_2*pz);
IkReal x94=((0.179)*pp);
IkReal x95=(pp*r21);
IkReal x96=(gclwh7_7*r21);
IkReal x97=((2.848)*npx);
IkReal x98=(gclwh4_3*rxp2_2);
IkReal x99=(npz*pz);
IkReal x100=((0.358)*gclwh5_15);
IkReal x101=(gclwh14_10*rxp0_2);
IkReal x102=(gclwh15_1*pp);
IkReal x103=((0.276)*rxp2_2);
IkReal x104=(gclwh3_2*r21);
IkReal x105=(gclwh4_10*r22);
IkReal x106=(gclwh3_3*r21);
IkReal x107=((4.0)*gclwh8_10);
IkReal x108=(gclwh9_13*npx);
IkReal x109=(pp*r22);
IkReal x110=((0.038088)*r22);
IkReal x111=((0.676984116)*rxp1_2);
IkReal x112=((0.038088)*rxp2_2);
IkReal x113=((0.003408876)*r20);
IkReal x114=((2.0)*gclwh8_10);
IkReal x115=(gclwh14_2*rxp0_2);
IkReal x116=((0.029746728)*r20);
IkReal x117=((1.0)*pz);
IkReal x118=((2.0)*pp);
IkReal x119=((0.358)*gclwh15_15);
IkReal x120=((0.049404)*rxp0_2);
IkReal x121=(gclwh10_2*rxp2_2);
IkReal x122=(gclwh12_14*r21);
IkReal x123=(gclwh6_12*rxp1_2);
IkReal x124=((0.358)*gclwh4_14);
IkReal x125=((4.0)*gclwh11_8);
IkReal x126=((0.393024)*rxp2_2);
IkReal x127=((0.276)*pp);
IkReal x128=((0.019044)*pz);
IkReal x129=(gclwh10_2*r22);
IkReal x130=(gclwh6_2*r21);
IkReal x131=(gclwh12_10*r21);
IkReal x132=((4.0)*gclwh9_8);
IkReal x133=((0.049404)*rxp1_2);
IkReal x134=(gclwh5_11*rxp2_2);
IkReal x135=(gclwh0_0*pz);
IkReal x136=(gclwh8_2*r20);
IkReal x137=((0.038088)*r20);
IkReal x138=((0.049404)*rxp2_2);
IkReal x139=(gclwh6_10*rxp1_2);
IkReal x140=(gclwh12_10*rxp1_2);
IkReal x141=(gclwh12_2*rxp1_2);
IkReal x142=((0.552)*rxp2_2);
IkReal x143=((1.0)*pp);
IkReal x144=(gclwh15_0*pz);
IkReal x145=((0.046711904004)*r21);
IkReal x146=((5.696)*pz);
IkReal x147=((0.029746728)*r22);
IkReal x148=((0.019044)*r21);
IkReal x149=(npx*pz);
IkReal x150=((2.0)*gclwh7_8);
IkReal x151=(gclwh11_0*r22);
IkReal x152=(gclwh4_14*rxp2_2);
IkReal x153=((2.0)*gclwh5_8);
IkReal x154=(gclwh9_0*r20);
IkReal x155=(gclwh15_0*rxp0_2);
IkReal x156=(gclwh2_0*r21);
IkReal x157=(gclwh13_15*r21);
IkReal x158=(gclwh5_1*r22);
IkReal x159=((0.0323748)*r22);
IkReal x160=((0.358)*gclwh12_14);
IkReal x161=((2.0)*gclwh13_8);
IkReal x162=((0.046711904004)*r20);
IkReal x163=(gclwh12_2*r21);
IkReal x164=(gclwh4_3*r22);
IkReal x165=(gclwh12_14*rxp1_2);
IkReal x166=((4.0)*gclwh10_10);
IkReal x167=((2.0)*gclwh10_10);
IkReal x168=((0.006817752)*r20);
IkReal x169=((0.038088)*r21);
IkReal x170=(gclwh13_0*rxp1_2);
IkReal x171=((0.393024)*rxp0_2);
IkReal x172=((6.248)*npx);
IkReal x173=((0.002628072)*r21);
IkReal x174=((2.0)*gclwh9_8);
IkReal x175=((0.054237312)*r21);
IkReal x176=(gclwh10_2*pz);
IkReal x177=(gclwh4_14*r22);
IkReal x178=(gclwh12_9*rxp1_2);
IkReal x179=((0.000610188804)*r21);
IkReal x180=(gclwh14_9*npx);
IkReal x181=(gclwh7_0*rxp1_2);
IkReal x182=(gclwh15_15*rxp0_2);
IkReal x183=(gclwh6_2*rxp1_2);
IkReal x184=(gclwh13_15*rxp1_2);
IkReal x185=((1.104)*rxp2_2);
IkReal x186=((0.076176)*rxp2_2);
IkReal x187=((0.076176)*r21);
IkReal x188=(gclwh5_15*r22);
IkReal x189=((0.276)*rxp1_2);
IkReal x190=(gclwh10_12*r22);
IkReal x191=(gclwh1_3*r20);
IkReal x192=(gclwh1_2*pz);
IkReal x193=((2.0)*gclwh15_8);
IkReal x194=(gclwh11_13*r22);
IkReal x195=((0.027118656)*r20);
IkReal x196=(gclwh15_11*rxp0_2);
IkReal x197=((0.038088)*rxp0_2);
IkReal x198=((0.358)*gclwh14_14);
IkReal x199=((0.019044)*r22);
IkReal x200=((0.358)*gclwh13_15);
IkReal x201=(gclwh13_0*r21);
IkReal x202=(gclwh9_13*r20);
IkReal x203=((0.008843316)*rxp1_2);
IkReal x204=((0.000610188804)*r20);
IkReal x205=((2.0)*gclwh11_8);
IkReal x206=((4.0)*gclwh7_8);
IkReal x207=(gclwh1_2*r20);
IkReal x208=((0.008843316)*rxp0_2);
IkReal x209=((0.431112)*rxp2_2);
IkReal x210=((0.076176)*r22);
IkReal x211=((4.0)*gclwh6_10);
IkReal x212=((0.552)*rxp0_2);
IkReal x213=((0.0323748)*r21);
IkReal x214=(gclwh14_9*r20);
IkReal x215=((0.552)*npx);
IkReal x216=(gclwh6_5*r21);
IkReal x217=((2.0)*gclwh12_10);
IkReal x218=(gclwh7_13*rxp1_2);
IkReal x219=(gclwh8_12*npx);
IkReal x220=(pp*pz);
IkReal x221=(gclwh15_11*npx);
IkReal x222=((1.424)*pp);
IkReal x223=(gclwh11_0*pz);
IkReal x224=((0.862224)*rxp2_2);
IkReal x225=(gclwh5_0*r22);
IkReal x226=(gclwh13_8*rxp1_2);
IkReal x227=(gclwh5_0*pz);
IkReal x228=(gclwh14_14*rxp0_2);
IkReal x229=(gclwh14_2*r20);
IkReal x230=((0.002628072)*r22);
IkReal x231=((0.676984116)*rxp0_2);
IkReal x232=(gclwh8_12*r20);
IkReal x233=(gclwh15_11*r20);
IkReal x234=(gclwh5_15*rxp2_2);
IkReal x235=((0.076176)*r20);
IkReal x236=((0.038088)*x178);
IkReal x237=(gclwh4_14*x138);
IkReal x238=(gclwh8_5*x113);
IkReal x239=(gclwh14_14*x120);
IkReal x240=(gclwh12_14*x133);
IkReal x241=(gclwh10_5*x89);
IkReal x242=(gclwh14_9*x197);
IkReal x243=((0.003408876)*x216);
IkReal x244=(gclwh4_9*x112);
IkReal x245=((0.276)*x140);
IkReal x246=(gclwh10_10*x199);
IkReal x247=(gclwh6_10*x148);
IkReal x248=(gclwh14_10*x80);
IkReal x249=(gclwh8_10*x92);
IkReal x250=(gclwh4_10*x103);
IkReal x251=(gclwh7_8*x148);
IkReal x252=(gclwh13_8*x189);
IkReal x253=((0.038088)*x196);
IkReal x254=(gclwh11_8*x199);
IkReal x255=(gclwh5_11*x112);
IkReal x256=(gclwh9_8*x92);
IkReal x257=(gclwh15_8*x80);
IkReal x258=((0.038088)*x87);
IkReal x259=(gclwh5_8*x103);
IkReal x260=(gclwh9_7*x113);
IkReal x261=(gclwh13_15*x133);
IkReal x262=((0.003408876)*x96);
IkReal x263=(gclwh11_7*x89);
IkReal x264=(gclwh5_15*x138);
IkReal x265=(gclwh15_15*x120);
IkReal x266=(gclwh8_5*x120);
IkReal x267=(gclwh4_9*x230);
IkReal x268=((0.003408876)*x122);
IkReal x269=((0.002628072)*x214);
IkReal x270=(gclwh10_5*x138);
IkReal x271=(gclwh12_9*x173);
IkReal x272=(gclwh4_14*x89);
IkReal x273=(gclwh14_14*x113);
IkReal x274=(gclwh6_5*x133);
IkReal x275=(gclwh10_10*x103);
IkReal x276=((0.019044)*x83);
IkReal x277=((0.276)*x139);
IkReal x278=((0.019044)*x105);
IkReal x279=(gclwh8_10*x80);
IkReal x280=((0.019044)*x131);
IkReal x281=(gclwh7_8*x189);
IkReal x282=(gclwh15_8*x92);
IkReal x283=(gclwh11_8*x103);
IkReal x284=(gclwh5_8*x199);
IkReal x285=(gclwh13_11*x173);
IkReal x286=(gclwh9_8*x80);
IkReal x287=(gclwh13_8*x148);
IkReal x288=(gclwh5_11*x230);
IkReal x289=((0.002628072)*x233);
IkReal x290=(gclwh15_15*x113);
IkReal x291=(gclwh9_7*x120);
IkReal x292=(gclwh5_15*x89);
IkReal x293=(gclwh7_7*x133);
IkReal x294=((0.003408876)*x157);
IkReal x295=(gclwh11_7*x138);
IkReal x296=(gclwh8_10*x137);
IkReal x297=(gclwh4_10*x142);
IkReal x298=((0.552)*x101);
IkReal x299=((0.098808)*x152);
IkReal x300=((0.098808)*x228);
IkReal x301=((0.098808)*x165);
IkReal x302=((0.552)*x140);
IkReal x303=(gclwh10_10*x110);
IkReal x304=(gclwh6_10*x169);
IkReal x305=((0.098808)*x182);
IkReal x306=((0.098808)*x234);
IkReal x307=((0.098808)*x184);
IkReal x308=(gclwh11_8*x110);
IkReal x309=(gclwh7_8*x169);
IkReal x310=((0.552)*x226);
IkReal x311=(gclwh5_8*x142);
IkReal x312=(gclwh15_8*x212);
IkReal x313=(gclwh9_8*x137);
IkReal x314=(gclwh8_10*x212);
IkReal x315=((0.038088)*x131);
IkReal x316=((0.006817752)*x122);
IkReal x317=(gclwh14_14*x168);
IkReal x318=((0.006817752)*x177);
IkReal x319=(rxp1_2*x127);
IkReal x320=((2.0)*x72);
IkReal x321=((0.064082)*x149);
IkReal x322=((1.0)*x73);
IkReal x323=(r21*x73);
IkReal x324=((0.358)*gclwh10_5*x99);
IkReal x325=((0.179)*gclwh8_5*x84);
IkReal x326=((0.358)*gclwh6_5*x85);
IkReal x327=((0.358)*gclwh8_5*x149);
IkReal x328=(gclwh10_5*r22*x94);
IkReal x329=(x216*x94);
IkReal x330=(x141*x74);
IkReal x331=(x127*x98);
IkReal x332=(gclwh6_2*pz*x95);
IkReal x333=(x114*x149);
IkReal x334=(gclwh14_3*pp*x80);
IkReal x335=(x109*x176);
IkReal x336=(x128*x130);
IkReal x337=(x128*x129);
IkReal x338=(gclwh12_3*x319);
IkReal x339=(x85*x86);
IkReal x340=(x91*x92);
IkReal x341=(x167*x99);
IkReal x342=(x115*x74);
IkReal x343=(gclwh4_2*rxp2_2*x74);
IkReal x344=(gclwh5_1*pp*x103);
IkReal x345=(x102*x80);
IkReal x346=(x220*x78);
IkReal x347=(x170*x74);
IkReal x348=(x128*x151);
IkReal x349=(x128*x78);
IkReal x350=(x109*x223);
IkReal x351=(x149*x174);
IkReal x352=(x205*x99);
IkReal x353=(x150*x85);
IkReal x354=(x155*x74);
IkReal x355=(gclwh5_0*rxp2_2*x74);
IkReal x356=(x88*x92);
IkReal x357=(gclwh13_1*x319);
IkReal x358=((0.358)*gclwh7_7*x85);
IkReal x359=((0.179)*gclwh9_7*x84);
IkReal x360=((0.358)*gclwh11_7*x99);
IkReal x361=(gclwh11_7*r22*x94);
IkReal x362=((0.358)*gclwh9_7*x149);
IkReal x363=(x94*x96);
IkReal x364=(gclwh12_9*npy*x74);
IkReal x365=(x149*x198);
IkReal x366=((0.138)*gclwh4_9*x109);
IkReal x367=((0.138)*gclwh14_9*x84);
IkReal x368=(x122*x94);
IkReal x369=(x124*x99);
IkReal x370=(x177*x94);
IkReal x371=(x180*x74);
IkReal x372=(x160*x85);
IkReal x373=(gclwh4_9*npz*x74);
IkReal x374=((0.179)*gclwh14_14*x84);
IkReal x375=((0.138)*gclwh12_9*x95);
IkReal x376=(x217*x85);
IkReal x377=(x84*x93);
IkReal x378=(x92*x93);
IkReal x379=(x183*x74);
IkReal x380=(gclwh12_3*x323);
IkReal x381=(x121*x74);
IkReal x382=(x192*x92);
IkReal x383=(x106*x73);
IkReal x384=(x191*x73);
IkReal x385=(x104*x128);
IkReal x386=(x128*x76);
IkReal x387=(x220*x76);
IkReal x388=(x128*x163);
IkReal x389=((2.0)*gclwh14_10*x149);
IkReal x390=(gclwh8_2*rxp0_2*x74);
IkReal x391=((2.0)*gclwh4_10*x99);
IkReal x392=(x144*x84);
IkReal x393=(gclwh13_1*x323);
IkReal x394=((0.138)*gclwh13_11*x95);
IkReal x395=(gclwh11_0*rxp2_2*x74);
IkReal x396=(x161*x85);
IkReal x397=(x109*x227);
IkReal x398=(gclwh2_0*pz*x95);
IkReal x399=(x135*x84);
IkReal x400=(x128*x225);
IkReal x401=(x221*x74);
IkReal x402=(x144*x92);
IkReal x403=(gclwh5_11*npz*x74);
IkReal x404=(x181*x74);
IkReal x405=(x128*x156);
IkReal x406=(x135*x92);
IkReal x407=(x153*x99);
IkReal x408=((0.138)*gclwh15_11*x84);
IkReal x409=(x128*x201);
IkReal x410=(gclwh13_11*npy*x74);
IkReal x411=((0.138)*gclwh5_11*x109);
IkReal x412=(gclwh9_0*rxp0_2*x74);
IkReal x413=(x149*x193);
IkReal x414=(x188*x94);
IkReal x415=((0.179)*gclwh15_15*x84);
IkReal x416=(x200*x85);
IkReal x417=(x157*x94);
IkReal x418=(x119*x149);
IkReal x419=(x100*x99);
IkReal x420=(x211*x85);
IkReal x421=(x166*x99);
IkReal x422=(x114*x84);
IkReal x423=(x86*x95);
IkReal x424=(x107*x149);
IkReal x425=(x109*x167);
IkReal x426=(x132*x149);
IkReal x427=(x150*x95);
IkReal x428=(x109*x205);
IkReal x429=(x206*x85);
IkReal x430=(x125*x99);
IkReal x431=(x174*x84);
IkReal x432=(x217*x95);
IkReal x433=((4.0)*gclwh14_10*x149);
IkReal x434=((4.0)*gclwh4_10*x99);
IkReal x435=(x160*x95);
IkReal x436=((0.716)*gclwh14_14*x149);
IkReal x437=((0.716)*gclwh4_14*x99);
IkReal x438=((0.716)*gclwh12_14*x85);
IkReal x439=(x109*x124);
IkReal x440=(x198*x84);
IkReal x441=(r20*x322);
IkReal x442=(gclwh8_2*npx*x320);
IkReal x443=(gclwh6_2*npy*x320);
IkReal x444=((1.0)*x84*x91);
IkReal x445=(gclwh10_2*npz*x320);
IkReal x446=(gclwh9_0*npx*x320);
IkReal x447=((1.0)*x84*x88);
IkReal x448=(gclwh11_0*npz*x320);
IkReal x449=(gclwh7_0*npy*x320);
IkReal x450=(gclwh12_2*npy*x320);
IkReal x451=(gclwh3_2*npy*x320);
IkReal x452=(gclwh4_3*x118*x99);
IkReal x453=(gclwh1_2*npx*x320);
IkReal x454=(gclwh14_3*x118*x149);
IkReal x455=(gclwh12_2*x117*x95);
IkReal x456=(gclwh1_2*x117*x84);
IkReal x457=(gclwh3_3*x118*x85);
IkReal x458=(gclwh1_3*x118*x149);
IkReal x459=(gclwh4_2*npz*x320);
IkReal x460=(gclwh3_2*x117*x95);
IkReal x461=(x164*x322);
IkReal x462=(gclwh12_3*x118*x85);
IkReal x463=(gclwh14_2*npx*x320);
IkReal x464=(gclwh14_3*x441);
IkReal x465=(gclwh2_1*x118*x85);
IkReal x466=(gclwh0_1*x118*x149);
IkReal x467=(gclwh13_0*npy*x320);
IkReal x468=(gclwh5_1*x118*x99);
IkReal x469=((2.0)*x102*x149);
IkReal x470=(gclwh5_0*npz*x320);
IkReal x471=(gclwh0_0*npx*x320);
IkReal x472=(gclwh2_0*npy*x320);
IkReal x473=(gclwh0_1*x441);
IkReal x474=(gclwh13_1*x118*x85);
IkReal x475=(gclwh2_1*r21*x322);
IkReal x476=(gclwh15_1*x441);
IkReal x477=(gclwh15_0*npx*x320);
IkReal x478=(x158*x322);
IkReal x479=(gclwh13_0*x117*x95);
IkReal x480=(x242+x244);
IkReal x481=(x255+x253);
IkReal x482=(x274+x270);
IkReal x483=(x293+x295);
IkReal x484=(x300+x299);
IkReal x485=(x306+x305);
IkReal x486=(x239+x237);
IkReal x487=(x265+x264);
IkReal x488=(x351+x254+x251+x252);
IkReal x489=(x333+x247+x246+x245);
IkReal x490=(x389+x391+x279+x280);
IkReal x491=(x287+x286+x407+x413);
IkReal x492=(x375+x373+x371+x271);
IkReal x493=(x359+x358+x360+x260);
IkReal x494=(x294+x417+x418+x419);
IkReal x495=(x394+x285+x401+x403);
IkReal x496=(x324+x325+x326+x238);
IkReal x497=(x368+x369+x365+x268);
IkReal x498=(x316+x435+x436+x437);
IkReal x499=(x396+x284+x283+x282+x281);
IkReal x500=(x376+x276+x277+x275+x278);
IkReal x501=(x339+x341+x250+x249+x248);
IkReal x502=(x353+x352+x259+x256+x257);
IkReal x503=(x327+x328+x329+x243+x241);
IkReal x504=(x374+x372+x370+x272+x273);
IkReal x505=(x315+x314+x432+x433+x434);
IkReal x506=(x290+x292+x416+x414+x415);
IkReal x507=(x318+x317+x438+x439+x440);
IkReal x508=(x361+x362+x363+x263+x262);
IkReal x509=(x364+x366+x367+x267+x269);
IkReal x510=(x304+x302+x303+x425+x424+x423);
IkReal x511=(x311+x313+x312+x429+x430+x431);
IkReal x512=(x298+x296+x297+x422+x421+x420);
IkReal x513=(x308+x309+x310+x428+x427+x426);
IkReal x514=((((0.038088)*x83))+((gclwh10_10*x142))+(((4.0)*gclwh12_10*x85))+(((0.552)*x139))+((x118*x83))+(((0.038088)*x105))+((x105*x118)));
IkReal x515=(x338+x342+x343+x340+x445+x444+x443);
IkReal x516=(x350+x346+x347+x344+x345+x348+x349+x446);
IkReal x517=(x355+x354+x357+x356+x258+x449+x448+x447);
IkReal x518=(x332+x331+x330+x337+x336+x335+x334+x236+x442);
IkReal x519=(x388+x390+x458+x459+x456+x457+x455+x463+x462+x461+x460+x464+x74);
IkReal x520=(x395+x397+x393+x392+x399+x398+x400+x402+x404+x469+x468+x467+x466+x465+x74);
IkReal x521=(x386+x387+x384+x385+x382+x383+x380+x381+x379+x378+x377+x454+x452+x453+x450+x451);
IkReal x522=(x289+x288+x405+x406+x409+x408+x412+x410+x411+x474+x475+x476+x477+x470+x471+x472+x473+x478+x479);
op[0]=(((gclwh4_9*x209))+(((-0.431112)*x178))+((gclwh8_12*x116))+(((-1.0)*x486))+((x81*x82))+(((-1.0)*x503))+(((-1.0)*x219*x81))+(((1.562)*gclwh8_12*x84))+(((-1.562)*gclwh10_12*x109))+((gclwh6_12*npy*x81))+x240+x496+(((-1.0)*gclwh10_12*x147))+(((-1.0)*gclwh6_12*x90))+(((-1.562)*gclwh6_12*x95))+((gclwh14_9*x77)));
op[1]=((((-0.676984116)*x98))+(((-1.0)*x489))+(((-1.0)*x480))+(((-1.0)*gclwh10_10*x109))+((gclwh8_10*x84))+((gclwh12_3*x111))+(((-1.0)*gclwh6_10*x95))+x501+x518+(((-1.0)*gclwh14_3*x231))+(((-1.0)*x515)));
op[2]=((-0.509792)+x512+(((-1.0)*x510)));
op[3]=((((-1.0)*gclwh4_2*x126))+(((-2.848)*gclwh10_2*x99))+(((0.027118656)*x129))+(((-2.848)*gclwh6_2*x85))+(((1.424)*gclwh6_2*x95))+(((0.4692)*x178))+(((0.027118656)*x130))+x484+(((-0.4692)*gclwh14_9*rxp0_2))+(((-0.4692)*gclwh4_9*rxp2_2))+(((0.393024)*x141))+(((-1.424)*gclwh8_2*x84))+(((-0.393024)*x115))+(((-0.027118656)*x136))+(((-1.0)*x301))+((x91*x97))+(((1.424)*gclwh10_2*x109)));
op[4]=((((-1.0)*gclwh6_12*x173))+(((-1.0)*x480))+(((-1.0)*x503))+(((-0.138)*gclwh6_12*x95))+((x74*x82))+x236+x486+x496+(((-1.0)*x219*x74))+(((-0.138)*gclwh10_12*x109))+((gclwh6_12*npy*x74))+(((-1.0)*x240))+(((-0.002628072)*x190))+(((0.138)*gclwh8_12*x84))+(((0.002628072)*x232)));
op[5]=((((-1.0)*gclwh8_10*x84))+(((-1.0)*x480))+(((-1.0)*x501))+((gclwh12_3*x203))+((gclwh10_10*x109))+((gclwh6_10*x95))+x489+x518+(((-1.0)*gclwh4_3*x79))+(((-1.0)*x515))+(((-1.0)*gclwh14_3*x208)));
op[6]=((((-1.0)*gclwh7_8*x95))+(((-1.0)*x488))+((gclwh13_1*x111))+x481+x502+x516+(((-1.0)*gclwh15_1*x231))+(((-0.676984116)*gclwh5_1*rxp2_2))+((gclwh9_8*x84))+(((-1.0)*x517))+(((-1.0)*gclwh11_8*x109)));
op[7]=((((-1.0)*x508))+((gclwh11_13*npz*x81))+((gclwh9_13*x116))+(((-1.0)*gclwh7_13*x90))+(((-0.431112)*x134))+(((1.562)*gclwh9_13*x84))+((gclwh7_13*npy*x81))+(((0.431112)*x87))+x487+x493+(((-1.562)*gclwh7_13*x95))+(((-1.0)*x108*x81))+(((-1.562)*gclwh11_13*x109))+(((-1.0)*gclwh15_11*x77))+(((-1.0)*x261))+(((-1.0)*gclwh11_13*x147)));
op[8]=((((0.4692)*x87))+(((-1.0)*gclwh5_0*x126))+(((0.027118656)*x78))+(((-0.027118656)*x154))+(((-2.848)*gclwh7_0*x85))+((x222*x78))+(((-0.393024)*x155))+x485+((x88*x97))+(((-2.848)*gclwh11_0*x99))+(((-0.4692)*x196))+(((1.424)*gclwh11_0*x109))+(((-1.424)*gclwh9_0*x84))+(((0.393024)*x170))+(((-1.0)*x307))+(((0.027118656)*x151))+(((-0.4692)*x134)));
op[9]=((-0.509792)+x513+(((-1.0)*x511)));
op[10]=(((gclwh13_1*x203))+(((-1.0)*gclwh9_8*x84))+((gclwh11_8*x109))+(((-1.0)*x502))+((gclwh7_8*x95))+x488+x481+(((-1.0)*gclwh15_1*x208))+x516+(((-1.0)*gclwh5_1*x79))+(((-1.0)*x517)));
op[11]=((((-0.138)*gclwh11_13*x109))+(((-1.0)*x487))+(((0.138)*gclwh9_13*x84))+(((-1.0)*x508))+(((-1.0)*x108*x74))+(((-0.138)*gclwh7_13*x95))+x261+(((-1.0)*gclwh7_13*x173))+((gclwh11_13*npz*x74))+x481+x493+((gclwh7_13*npy*x74))+(((-0.002628072)*x194))+(((0.002628072)*x202))+(((-1.0)*x258)));
op[12]=(((gclwh4_9*npz*x81))+(((-1.0)*gclwh4_9*x147))+(((-1.0)*x497))+(((-1.0)*x482))+((x180*x81))+(((1.562)*gclwh12_9*x95))+(((-0.431112)*x123))+(((-1.0)*gclwh14_9*x116))+x266+((gclwh8_12*x77))+x504+((gclwh12_9*x90))+(((-1.562)*gclwh14_9*x84))+(((-1.0)*gclwh10_12*x209))+(((-1.562)*gclwh4_9*x109))+(((-1.0)*gclwh12_9*npy*x81)));
op[13]=((2.471885)+(((0.046711904004)*x164))+(((-1.0)*x492))+(((4.905682)*gclwh12_3*x85))+(((4.905682)*gclwh3_3*x85))+(((-1.0)*x105*x143))+(((-1.0)*x500))+(((-4.905682)*gclwh4_3*x99))+(((2.433797)*gclwh14_3*x84))+(((-1.0)*x143*x83))+(((4.905682)*gclwh1_3*x149))+(((0.046711904004)*x106))+x490+x509+x521+(((-4.905682)*gclwh14_3*x149))+(((-2.471885)*gclwh1_3*x84))+((gclwh1_3*x162))+((gclwh14_3*x162))+(((2.433797)*gclwh4_3*x109))+(((-1.0)*x519))+(((-2.471885)*gclwh3_3*x95))+((gclwh12_10*x95))+(((-1.0)*gclwh12_3*x145))+(((-2.433797)*gclwh12_3*x95)));
op[14]=((0.495194)+x505+(((-1.0)*x514)));
op[15]=((((-1.0)*gclwh8_2*x171))+((gclwh1_2*x195))+(((-1.424)*gclwh1_2*x84))+(((-1.0)*gclwh12_9*x213))+(((1.7)*gclwh4_9*x109))+(((0.0323748)*x214))+(((-1.0)*x507))+(((-3.4)*gclwh14_9*x149))+(((0.027118656)*x76))+(((3.4)*gclwh12_9*x85))+((gclwh4_9*x159))+(((-0.027118656)*x163))+(((-1.424)*gclwh12_2*x95))+(((2.848)*gclwh12_2*x85))+(((2.848)*gclwh3_2*x85))+((x192*x97))+(((0.393024)*x121))+((x222*x76))+(((1.424)*gclwh14_2*x84))+(((1.7)*gclwh14_9*x84))+(((-1.7)*gclwh12_9*x95))+(((0.027118656)*x104))+x498+(((-2.848)*gclwh4_2*x99))+(((-3.4)*gclwh4_9*x99))+(((-1.424)*gclwh3_2*x95))+(((-1.0)*x93*x97))+((gclwh14_2*x195))+(((0.393024)*x183)));
op[16]=((((-1.0)*x492))+(((-1.0)*x482))+(((-1.0)*x504))+(((-1.0)*gclwh10_12*x112))+x266+x497+((gclwh8_12*x197))+x509+(((-0.038088)*x123)));
op[17]=((-0.051085)+(((-1.0)*gclwh14_3*x321))+(((-1.0)*x490))+(((-1.0)*x492))+(((-1.0)*gclwh12_3*x179))+(((0.064082)*gclwh12_3*x85))+(((-0.051085)*gclwh1_3*x84))+((pp*x83))+(((-1.0)*gclwh12_10*x95))+(((0.000610188804)*x164))+(((0.064082)*gclwh3_3*x85))+(((0.000610188804)*x191))+((gclwh1_3*x321))+(((-0.012997)*gclwh12_3*x95))+x509+x500+x521+((pp*x105))+((gclwh14_3*x204))+(((-1.0)*x519))+(((-0.064082)*gclwh4_3*x99))+(((-0.051085)*gclwh3_3*x95))+(((0.012997)*gclwh14_3*x84))+(((0.012997)*gclwh4_3*x109))+(((0.000610188804)*x106)));
op[18]=((2.471885)+(((-1.0)*x499))+(((-2.433797)*gclwh13_1*x95))+(((-4.905682)*gclwh15_1*x149))+(((-4.905682)*gclwh0_1*x149))+(((-1.0)*gclwh2_1*x145))+(((2.433797)*gclwh15_1*x84))+(((-4.905682)*gclwh5_1*x99))+(((2.433797)*gclwh5_1*x109))+(((-1.0)*gclwh5_8*x109))+(((-1.0)*x522))+((gclwh13_8*x95))+(((-1.0)*gclwh0_1*x162))+((gclwh15_1*x162))+(((-1.0)*gclwh13_1*x145))+x491+x495+x520+(((2.471885)*gclwh0_1*x84))+(((2.471885)*gclwh2_1*x95))+(((-4.905682)*gclwh2_1*x85))+(((0.046711904004)*x158))+(((4.905682)*gclwh13_1*x85))+(((-1.0)*gclwh15_8*x84)));
op[19]=(((gclwh13_11*npy*x81))+(((-1.0)*x483))+(((-0.431112)*x218))+(((-1.0)*x506))+(((-1.0)*gclwh5_11*npz*x81))+(((-1.562)*gclwh13_11*x95))+((gclwh9_13*x77))+((gclwh15_11*x116))+((gclwh5_11*x147))+x291+x494+(((-1.0)*gclwh11_13*x209))+(((1.562)*gclwh5_11*x109))+(((1.562)*gclwh15_11*x84))+(((-1.0)*gclwh13_11*x90))+(((-1.0)*x221*x81)));
op[20]=((((-3.4)*gclwh15_11*x149))+(((-3.4)*gclwh5_11*x99))+(((3.4)*gclwh13_11*x85))+(((-2.848)*gclwh2_0*x85))+(((-1.0)*gclwh13_11*x213))+((gclwh11_0*x126))+(((1.7)*gclwh5_11*x109))+(((-1.0)*x100*x109))+(((-1.0)*x119*x84))+(((-1.0)*x144*x97))+(((2.848)*gclwh13_0*x85))+(((-1.0)*gclwh9_0*x171))+(((-0.027118656)*x156))+(((1.424)*gclwh5_0*x109))+(((-1.0)*gclwh0_0*x195))+(((0.027118656)*x225))+((gclwh15_0*x195))+((gclwh5_11*x159))+(((1.424)*gclwh15_0*x84))+(((-1.424)*gclwh13_0*x95))+(((1.7)*gclwh15_11*x84))+(((-0.027118656)*x201))+((x200*x95))+(((-0.716)*gclwh13_15*x85))+(((-0.006817752)*x188))+(((-1.7)*gclwh13_11*x95))+(((0.716)*gclwh5_15*x99))+(((1.424)*gclwh0_0*x84))+(((0.0323748)*x233))+(((-1.0)*gclwh15_15*x168))+(((0.716)*gclwh15_15*x149))+(((0.393024)*x181))+(((-2.848)*gclwh5_0*x99))+(((0.006817752)*x157))+(((1.424)*gclwh2_0*x95))+(((-1.0)*x135*x97)));
op[21]=((-0.495194)+(((-1.0)*gclwh9_8*x212))+((x193*x84))+(((-1.0)*x161*x95))+((gclwh5_8*x110))+(((4.0)*gclwh13_8*x85))+((x109*x153))+(((-4.0)*gclwh15_8*x149))+(((-1.0)*gclwh13_8*x169))+(((0.552)*gclwh7_8*rxp1_2))+((gclwh11_8*x142))+(((-4.0)*gclwh5_8*x99))+((gclwh15_8*x137)));
op[22]=((-0.051085)+(((-1.0)*gclwh0_1*x321))+(((-1.0)*gclwh2_1*x179))+(((-1.0)*x491))+(((0.051085)*gclwh0_1*x84))+(((0.000610188804)*x158))+(((0.051085)*gclwh2_1*x95))+((gclwh5_8*x109))+(((-1.0)*gclwh0_1*x204))+(((-1.0)*gclwh13_1*x179))+(((-1.0)*x522))+(((-1.0)*gclwh15_1*x321))+x499+x495+((gclwh15_1*x204))+(((-0.064082)*gclwh2_1*x85))+x520+(((0.064082)*gclwh13_1*x85))+((gclwh15_8*x84))+(((-0.064082)*gclwh5_1*x99))+(((0.012997)*gclwh15_1*x84))+(((-0.012997)*gclwh13_1*x95))+(((0.012997)*gclwh5_1*x109))+(((-1.0)*gclwh13_8*x95)));
op[23]=((((-1.0)*x494))+(((-0.038088)*x218))+(((-1.0)*x483))+(((-1.0)*gclwh11_13*x112))+x291+x495+x506+(((-1.0)*x288))+(((-1.0)*x289))+(((-1.0)*x411))+(((-1.0)*x410))+((gclwh9_13*x197))+(((-1.0)*x408)));
op[24]=((-1.118392)+x512+(((-1.0)*x510)));
op[25]=(((x172*x91))+(((0.059493456)*x129))+(((-1.0)*gclwh4_2*x224))+(((-1.0)*x136*x75))+(((-0.862224)*x115))+((x130*x75))+(((-6.248)*gclwh6_2*x85))+(((-0.059493456)*x136))+((x129*x75))+x484+(((-6.248)*gclwh10_2*x99))+(((0.862224)*x141))+(((-1.0)*x301))+(((0.059493456)*x130)));
op[26]=(((x146*x219))+(((-0.197616)*x165))+(((0.197616)*x152))+((gclwh6_12*x175))+(((0.197616)*x228))+(((2.848)*gclwh10_12*x109))+(((0.054237312)*x190))+(((-2.848)*gclwh8_12*x84))+(((-0.054237312)*x232))+(((2.848)*gclwh6_12*x95))+(((-1.0)*x146*x82))+(((-5.696)*gclwh6_12*x85)));
op[27]=((((1.104)*x140))+(((-8.0)*gclwh6_10*x85))+(((-8.0)*gclwh10_10*x99))+((gclwh10_10*x210))+((x211*x95))+(((8.0)*gclwh8_10*x149))+(((-1.104)*x101))+((x109*x166))+(((-1.0)*gclwh4_10*x185))+(((-1.0)*gclwh8_10*x235))+(((-1.0)*x107*x84))+((gclwh6_10*x187)));
op[28]=((-0.098808)+x510+(((-1.0)*x512)));
op[29]=((((-1.0)*gclwh4_2*x186))+(((-0.276)*gclwh8_2*x84))+(((-1.0)*x484))+(((-0.552)*gclwh10_2*x99))+(((0.076176)*x141))+((x215*x91))+(((0.005256144)*x129))+x301+(((0.005256144)*x130))+(((-0.076176)*x115))+(((0.276)*gclwh10_2*x109))+(((-0.552)*gclwh6_2*x85))+(((0.276)*gclwh6_2*x95))+(((-0.005256144)*x136)));
op[30]=((((0.059493456)*x78))+((x172*x88))+(((-6.248)*gclwh7_0*x85))+((x151*x75))+(((-1.0)*gclwh5_0*x224))+(((-0.059493456)*x154))+((x75*x78))+(((0.059493456)*x151))+x485+(((0.862224)*x170))+(((-0.862224)*x155))+(((-6.248)*gclwh11_0*x99))+(((-1.0)*x307))+(((-1.0)*x154*x75)));
op[31]=((-1.118392)+x513+(((-1.0)*x511)));
op[32]=(((gclwh11_8*x210))+((x206*x95))+(((-8.0)*gclwh11_8*x99))+((gclwh7_8*x187))+((x109*x125))+(((-1.104)*gclwh15_8*rxp0_2))+(((-1.0)*gclwh5_8*x185))+(((-1.0)*x132*x84))+(((-1.0)*gclwh9_8*x235))+(((1.104)*x226))+(((-8.0)*gclwh7_8*x85))+(((8.0)*gclwh9_8*x149)));
op[33]=((((-0.197616)*x234))+(((2.848)*gclwh11_13*x109))+(((-5.696)*gclwh7_13*x85))+(((-0.197616)*x182))+(((0.197616)*x184))+(((-2.848)*gclwh9_13*x84))+((gclwh7_13*x175))+(((-5.696)*gclwh11_13*x99))+(((0.054237312)*x194))+(((-0.054237312)*x202))+((x108*x146))+(((2.848)*gclwh7_13*x95)));
op[34]=((((-0.005256144)*x154))+(((-1.0)*x485))+((x215*x88))+(((0.076176)*x170))+x307+((x127*x78))+(((-0.552)*gclwh11_0*x99))+(((0.276)*gclwh11_0*x109))+(((0.005256144)*x151))+(((-0.552)*gclwh7_0*x85))+(((-1.0)*gclwh5_0*x186))+(((-0.276)*gclwh9_0*x84))+(((0.005256144)*x78))+(((-0.076176)*x155)));
op[35]=((-0.098808)+x511+(((-1.0)*x513)));
op[36]=((-4.815606)+x505+(((-1.0)*x514)));
op[37]=((((0.862224)*x121))+(((0.059493456)*x76))+(((6.248)*gclwh3_2*x85))+(((0.059493456)*x229))+(((-1.0)*x207*x75))+(((-6.248)*gclwh4_2*x99))+(((-0.059493456)*x163))+(((-1.0)*x163*x75))+(((6.248)*gclwh12_2*x85))+(((-1.0)*x507))+(((6.248)*gclwh1_2*x149))+((x229*x75))+((x75*x76))+x498+(((0.059493456)*x207))+(((-1.0)*x172*x93))+(((-0.862224)*gclwh8_2*rxp0_2))+(((0.862224)*x183))+(((-1.0)*x104*x75))+(((0.059493456)*x104)));
IkReal x523=pz*pz;
IkReal x524=pp*pp;
IkReal x525=((0.276)*pz);
IkReal x526=(gclwh9_13*rxp0_2);
IkReal x527=((0.008843316)*rxp2_2);
IkReal x528=((0.276)*rxp0_2);
IkReal x529=(npz*pz);
IkReal x530=(pp*r20);
IkReal x531=((0.358)*gclwh14_14);
IkReal x532=((0.038088)*r20);
IkReal x533=((2.0)*npy);
IkReal x534=(gclwh6_10*pz);
IkReal x535=(gclwh13_11*rxp1_2);
IkReal x536=(pp*r22);
IkReal x537=((0.716)*gclwh5_15);
IkReal x538=((0.003408876)*r22);
IkReal x539=(npy*pz);
IkReal x540=((0.029746728)*r21);
IkReal x541=(gclwh8_2*pz);
IkReal x542=(npx*pz);
IkReal x543=(pp*r21);
IkReal x544=((4.0)*gclwh13_8);
IkReal x545=((0.019044)*r20);
IkReal x546=((0.716)*gclwh12_14);
IkReal x547=(gclwh4_3*rxp2_2);
IkReal x548=(gclwh15_15*r20);
IkReal x549=((0.358)*gclwh5_15);
IkReal x550=((1.104)*rxp0_2);
IkReal x551=((4.0)*gclwh4_10);
IkReal x552=((0.276)*rxp2_2);
IkReal x553=(gclwh9_0*rxp0_2);
IkReal x554=((0.716)*gclwh13_15);
IkReal x555=((0.005256144)*r20);
IkReal x556=((0.019044)*r22);
IkReal x557=(gclwh5_0*r22);
IkReal x558=(gclwh3_3*r21);
IkReal x559=(gclwh1_3*r20);
IkReal x560=((0.038088)*r22);
IkReal x561=((0.676984116)*rxp1_2);
IkReal x562=(gclwh9_0*pz);
IkReal x563=((0.038088)*rxp2_2);
IkReal x564=((2.0)*gclwh8_10);
IkReal x565=((0.029746728)*r20);
IkReal x566=((1.0)*pz);
IkReal x567=((2.0)*gclwh4_10);
IkReal x568=((0.358)*gclwh15_15);
IkReal x569=((0.049404)*rxp0_2);
IkReal x570=((0.003408876)*r21);
IkReal x571=(gclwh5_1*pp);
IkReal x572=(gclwh6_12*rxp1_2);
IkReal x573=((0.358)*gclwh4_14);
IkReal x574=((0.393024)*rxp2_2);
IkReal x575=((0.393024)*rxp0_2);
IkReal x576=(gclwh10_2*pz);
IkReal x577=(gclwh12_10*r21);
IkReal x578=(gclwh5_11*rxp2_2);
IkReal x579=(gclwh0_0*pz);
IkReal x580=((0.027118656)*r21);
IkReal x581=(gclwh2_0*r21);
IkReal x582=((0.027118656)*r22);
IkReal x583=((0.049404)*rxp2_2);
IkReal x584=((0.276)*rxp1_2);
IkReal x585=(gclwh12_2*pz);
IkReal x586=(gclwh4_2*pz);
IkReal x587=(pp*pz);
IkReal x588=(gclwh6_10*rxp1_2);
IkReal x589=((0.552)*rxp2_2);
IkReal x590=(gclwh4_14*r22);
IkReal x591=(gclwh15_0*pz);
IkReal x592=(gclwh2_1*r21);
IkReal x593=((0.029746728)*r22);
IkReal x594=((0.019044)*r21);
IkReal x595=((0.716)*gclwh14_14);
IkReal x596=((0.049404)*rxp1_2);
IkReal x597=(gclwh14_2*pz);
IkReal x598=((2.0)*gclwh5_8);
IkReal x599=(gclwh11_13*rxp2_2);
IkReal x600=((0.552)*rxp1_2);
IkReal x601=((0.0323748)*r22);
IkReal x602=((0.358)*gclwh12_14);
IkReal x603=((0.046711904004)*r20);
IkReal x604=((0.098808)*rxp1_2);
IkReal x605=((0.431112)*rxp0_2);
IkReal x606=(gclwh7_13*rxp1_2);
IkReal x607=((2.0)*pp);
IkReal x608=(gclwh14_14*r20);
IkReal x609=((0.038088)*r21);
IkReal x610=(gclwh11_0*pz);
IkReal x611=((0.002628072)*r21);
IkReal x612=((0.000610188804)*r22);
IkReal x613=((1.104)*rxp2_2);
IkReal x614=(gclwh12_9*rxp1_2);
IkReal x615=(gclwh7_0*rxp1_2);
IkReal x616=((4.0)*gclwh14_10);
IkReal x617=((0.059493456)*r20);
IkReal x618=((2.0)*gclwh14_10);
IkReal x619=(gclwh7_0*pz);
IkReal x620=(gclwh6_2*pz);
IkReal x621=((2.0)*gclwh15_8);
IkReal x622=((0.002628072)*r22);
IkReal x623=((0.098808)*rxp0_2);
IkReal x624=((0.027118656)*r20);
IkReal x625=(gclwh15_11*rxp0_2);
IkReal x626=(gclwh14_9*rxp0_2);
IkReal x627=((0.005256144)*r21);
IkReal x628=((4.0)*gclwh12_10);
IkReal x629=((0.358)*gclwh13_15);
IkReal x630=(gclwh13_0*pz);
IkReal x631=(gclwh4_9*rxp2_2);
IkReal x632=((0.552)*rxp0_2);
IkReal x633=((0.008843316)*rxp1_2);
IkReal x634=((0.000610188804)*r20);
IkReal x635=((0.003408876)*r20);
IkReal x636=((4.0)*gclwh5_8);
IkReal x637=((2.0)*gclwh11_8);
IkReal x638=((0.716)*gclwh4_14);
IkReal x639=((2.0)*gclwh9_8);
IkReal x640=((0.008843316)*rxp0_2);
IkReal x641=(gclwh10_12*rxp2_2);
IkReal x642=((0.046711904004)*r21);
IkReal x643=((0.046711904004)*r22);
IkReal x644=((0.0323748)*r21);
IkReal x645=(gclwh14_9*r20);
IkReal x646=((0.076176)*r22);
IkReal x647=(gclwh5_15*r22);
IkReal x648=((2.0)*gclwh10_10);
IkReal x649=(gclwh8_12*rxp0_2);
IkReal x650=(gclwh13_1*r21);
IkReal x651=(gclwh11_0*rxp2_2);
IkReal x652=(gclwh5_0*pz);
IkReal x653=((4.0)*gclwh15_8);
IkReal x654=((0.716)*gclwh15_15);
IkReal x655=((0.002628072)*r20);
IkReal x656=(gclwh13_15*r21);
IkReal x657=((0.393024)*rxp1_2);
IkReal x658=((0.076176)*r20);
IkReal x659=((0.098808)*rxp2_2);
IkReal x660=((0.676984116)*rxp0_2);
IkReal x661=(gclwh12_3*r21);
IkReal x662=(gclwh12_14*r21);
IkReal x663=((0.006817752)*x548);
IkReal x664=((0.006817752)*x647);
IkReal x665=((0.006817752)*x656);
IkReal x666=(gclwh13_8*x609);
IkReal x667=(gclwh9_8*x632);
IkReal x668=(gclwh5_8*x560);
IkReal x669=(gclwh15_8*x532);
IkReal x670=(gclwh11_8*x589);
IkReal x671=(gclwh7_8*x600);
IkReal x672=(gclwh12_14*x596);
IkReal x673=((0.038088)*x614);
IkReal x674=(gclwh8_5*x635);
IkReal x675=(gclwh10_5*x538);
IkReal x676=((0.038088)*x626);
IkReal x677=(gclwh4_14*x583);
IkReal x678=(gclwh6_5*x570);
IkReal x679=(gclwh4_9*x563);
IkReal x680=(gclwh14_14*x569);
IkReal x681=(gclwh14_10*x528);
IkReal x682=(gclwh8_10*x545);
IkReal x683=(gclwh4_10*x552);
IkReal x684=(gclwh12_10*x584);
IkReal x685=(gclwh10_10*x556);
IkReal x686=(gclwh6_10*x594);
IkReal x687=(gclwh9_8*x545);
IkReal x688=(gclwh15_8*x528);
IkReal x689=(gclwh5_8*x552);
IkReal x690=((0.038088)*x625);
IkReal x691=(gclwh5_11*x563);
IkReal x692=(gclwh7_8*x594);
IkReal x693=(gclwh13_8*x584);
IkReal x694=((0.038088)*x535);
IkReal x695=(gclwh11_8*x556);
IkReal x696=(gclwh5_15*x583);
IkReal x697=(gclwh9_7*x635);
IkReal x698=(gclwh15_15*x569);
IkReal x699=(gclwh7_7*x570);
IkReal x700=(gclwh11_7*x538);
IkReal x701=(gclwh13_15*x596);
IkReal x702=(gclwh14_10*x532);
IkReal x703=(gclwh10_10*x589);
IkReal x704=(gclwh4_10*x560);
IkReal x705=((0.552)*x588);
IkReal x706=((0.006817752)*x608);
IkReal x707=((0.006817752)*x590);
IkReal x708=((0.006817752)*x662);
IkReal x709=(gclwh8_5*x569);
IkReal x710=(gclwh4_9*x622);
IkReal x711=(gclwh4_14*x538);
IkReal x712=((0.003408876)*x608);
IkReal x713=((0.002628072)*x645);
IkReal x714=(gclwh10_5*x583);
IkReal x715=(gclwh12_9*x611);
IkReal x716=(gclwh12_14*x570);
IkReal x717=(gclwh6_5*x596);
IkReal x718=(gclwh8_10*x528);
IkReal x719=((0.019044)*x577);
IkReal x720=(gclwh10_10*x552);
IkReal x721=(gclwh14_10*x545);
IkReal x722=(gclwh6_10*x584);
IkReal x723=(gclwh4_10*x556);
IkReal x724=(gclwh9_8*x528);
IkReal x725=(gclwh13_8*x594);
IkReal x726=(gclwh13_11*x611);
IkReal x727=(gclwh7_8*x584);
IkReal x728=(gclwh15_8*x545);
IkReal x729=(gclwh5_11*x622);
IkReal x730=(gclwh11_8*x552);
IkReal x731=(gclwh5_8*x556);
IkReal x732=(gclwh15_11*x655);
IkReal x733=(gclwh13_15*x570);
IkReal x734=(gclwh9_7*x569);
IkReal x735=(gclwh7_7*x596);
IkReal x736=(gclwh11_7*x583);
IkReal x737=((0.003408876)*x548);
IkReal x738=(gclwh5_15*x538);
IkReal x739=(pp*x584);
IkReal x740=(x536*x549);
IkReal x741=(x539*x554);
IkReal x742=(x530*x568);
IkReal x743=(x543*x629);
IkReal x744=(x542*x654);
IkReal x745=(x529*x537);
IkReal x746=((2.0)*gclwh13_8*x543);
IkReal x747=(x542*x653);
IkReal x748=(x529*x636);
IkReal x749=(x539*x544);
IkReal x750=(x530*x621);
IkReal x751=(x536*x598);
IkReal x752=((0.358)*gclwh10_5*x529);
IkReal x753=((0.179)*gclwh8_5*x530);
IkReal x754=((0.358)*gclwh6_5*x539);
IkReal x755=((0.358)*gclwh8_5*x542);
IkReal x756=((0.179)*gclwh10_5*x536);
IkReal x757=((0.179)*gclwh6_5*x543);
IkReal x758=(gclwh12_2*rxp1_2*x525);
IkReal x759=((0.276)*pp*x547);
IkReal x760=(x533*x534);
IkReal x761=(x543*x620);
IkReal x762=(gclwh14_3*pp*x528);
IkReal x763=(x529*x648);
IkReal x764=(x536*x576);
IkReal x765=(x594*x620);
IkReal x766=(x556*x576);
IkReal x767=(gclwh12_3*x739);
IkReal x768=(x541*x545);
IkReal x769=(x542*x564);
IkReal x770=(gclwh14_2*rxp0_2*x525);
IkReal x771=(gclwh4_2*rxp2_2*x525);
IkReal x772=(x529*x637);
IkReal x773=(x552*x571);
IkReal x774=(gclwh15_1*pp*x528);
IkReal x775=(gclwh7_8*pz*x533);
IkReal x776=(x543*x619);
IkReal x777=(gclwh13_0*rxp1_2*x525);
IkReal x778=(x556*x610);
IkReal x779=(x594*x619);
IkReal x780=(x536*x610);
IkReal x781=(gclwh15_0*rxp0_2*x525);
IkReal x782=(gclwh5_0*rxp2_2*x525);
IkReal x783=(x545*x562);
IkReal x784=(x542*x639);
IkReal x785=(gclwh13_1*x739);
IkReal x786=((0.358)*gclwh7_7*x539);
IkReal x787=((0.179)*gclwh9_7*x530);
IkReal x788=((0.358)*gclwh11_7*x529);
IkReal x789=((0.179)*gclwh11_7*x536);
IkReal x790=((0.358)*gclwh9_7*x542);
IkReal x791=((0.179)*gclwh7_7*x543);
IkReal x792=(x530*x618);
IkReal x793=(x536*x567);
IkReal x794=(x539*x628);
IkReal x795=(x539*x546);
IkReal x796=(x536*x573);
IkReal x797=(x530*x531);
IkReal x798=(x543*x602);
IkReal x799=(x542*x595);
IkReal x800=(x529*x638);
IkReal x801=(gclwh12_9*npy*x525);
IkReal x802=((0.179)*gclwh4_14*x536);
IkReal x803=(x539*x602);
IkReal x804=((0.138)*gclwh4_9*x536);
IkReal x805=((0.179)*gclwh14_14*x530);
IkReal x806=((0.138)*gclwh14_9*x530);
IkReal x807=(x531*x542);
IkReal x808=(gclwh14_9*npx*x525);
IkReal x809=(gclwh4_9*npz*x525);
IkReal x810=((0.138)*gclwh12_9*x543);
IkReal x811=((0.179)*gclwh12_14*x543);
IkReal x812=(x529*x573);
IkReal x813=(x530*x597);
IkReal x814=(x545*x597);
IkReal x815=(gclwh6_2*rxp1_2*x525);
IkReal x816=(x524*x661);
IkReal x817=(x542*x618);
IkReal x818=(gclwh10_2*rxp2_2*x525);
IkReal x819=(gclwh1_2*pz*x545);
IkReal x820=(x524*x558);
IkReal x821=(x524*x559);
IkReal x822=(gclwh3_2*pz*x594);
IkReal x823=(x556*x586);
IkReal x824=(x536*x586);
IkReal x825=(x529*x567);
IkReal x826=(x585*x594);
IkReal x827=(gclwh12_10*pz*x533);
IkReal x828=(gclwh8_2*rxp0_2*x525);
IkReal x829=(x530*x591);
IkReal x830=(x524*x650);
IkReal x831=((0.138)*gclwh13_11*x543);
IkReal x832=(x525*x651);
IkReal x833=(x536*x652);
IkReal x834=(gclwh2_0*pz*x543);
IkReal x835=(x530*x579);
IkReal x836=(x556*x652);
IkReal x837=(gclwh15_11*npx*x525);
IkReal x838=(x545*x591);
IkReal x839=(x529*x598);
IkReal x840=(gclwh5_11*npz*x525);
IkReal x841=(x525*x615);
IkReal x842=(x542*x621);
IkReal x843=(gclwh13_8*pz*x533);
IkReal x844=((0.019044)*pz*x581);
IkReal x845=(x545*x579);
IkReal x846=((0.138)*gclwh15_11*x530);
IkReal x847=(x594*x630);
IkReal x848=(gclwh13_11*npy*x525);
IkReal x849=((0.138)*gclwh5_11*x536);
IkReal x850=(x525*x553);
IkReal x851=((0.179)*gclwh13_15*x543);
IkReal x852=(x542*x568);
IkReal x853=(x529*x549);
IkReal x854=((0.179)*gclwh5_15*x536);
IkReal x855=((0.179)*gclwh15_15*x530);
IkReal x856=(x539*x629);
IkReal x857=((1.0)*r20*x524);
IkReal x858=((2.0)*npz*x523);
IkReal x859=((1.0)*r22*x524);
IkReal x860=((2.0)*npx*x523);
IkReal x861=(gclwh8_2*x860);
IkReal x862=(gclwh6_2*x523*x533);
IkReal x863=((1.0)*x530*x541);
IkReal x864=(gclwh10_2*x858);
IkReal x865=(gclwh9_0*x860);
IkReal x866=((1.0)*x530*x562);
IkReal x867=(gclwh11_0*x858);
IkReal x868=(gclwh7_0*x523*x533);
IkReal x869=(gclwh12_2*x523*x533);
IkReal x870=(gclwh3_2*x523*x533);
IkReal x871=(gclwh4_3*x529*x607);
IkReal x872=(gclwh1_2*x860);
IkReal x873=(gclwh14_3*x542*x607);
IkReal x874=(gclwh12_2*x543*x566);
IkReal x875=(gclwh1_2*x530*x566);
IkReal x876=(gclwh3_3*x533*x587);
IkReal x877=(gclwh1_3*x542*x607);
IkReal x878=(gclwh4_2*x858);
IkReal x879=(gclwh3_2*x543*x566);
IkReal x880=(gclwh4_3*x859);
IkReal x881=(gclwh12_3*x533*x587);
IkReal x882=(gclwh14_2*x860);
IkReal x883=(gclwh14_3*x857);
IkReal x884=(gclwh2_1*x533*x587);
IkReal x885=(gclwh0_1*x542*x607);
IkReal x886=(gclwh13_0*x523*x533);
IkReal x887=((2.0)*x529*x571);
IkReal x888=(gclwh15_1*x542*x607);
IkReal x889=(gclwh5_0*x858);
IkReal x890=(gclwh0_0*x860);
IkReal x891=(gclwh2_0*x523*x533);
IkReal x892=(gclwh0_1*x857);
IkReal x893=(gclwh13_1*x533*x587);
IkReal x894=((1.0)*x524*x592);
IkReal x895=(gclwh15_1*x857);
IkReal x896=(gclwh15_0*x860);
IkReal x897=(gclwh5_1*x859);
IkReal x898=(gclwh13_0*x543*x566);
IkReal x899=(x696+x698);
IkReal x900=(x679+x676);
IkReal x901=(x677+x680);
IkReal x902=(x714+x717);
IkReal x903=(x736+x735);
IkReal x904=(x686+x685+x684+x769);
IkReal x905=(x695+x692+x693+x784);
IkReal x906=(x724+x725+x839+x842);
IkReal x907=(x719+x718+x817+x825);
IkReal x908=(x708+x799+x798+x800);
IkReal x909=(x726+x837+x831+x840);
IkReal x910=(x715+x810+x809+x808);
IkReal x911=(x674+x754+x753+x752);
IkReal x912=(x665+x744+x745+x743);
IkReal x913=(x697+x786+x787+x788);
IkReal x914=(x716+x812+x811+x807);
IkReal x915=(x733+x852+x853+x851);
IkReal x916=(x720+x721+x722+x723+x827);
IkReal x917=(x731+x730+x727+x728+x843);
IkReal x918=(x689+x688+x687+x772+x775);
IkReal x919=(x683+x682+x681+x760+x763);
IkReal x920=((((0.038088)*x577))+(((2.0)*gclwh12_10*x543))+((x542*x616))+((x529*x551))+((gclwh8_10*x632)));
IkReal x921=(x699+x700+x791+x790+x789);
IkReal x922=(x667+x666+x746+x747+x748);
IkReal x923=(x710+x713+x804+x806+x801);
IkReal x924=(x711+x712+x805+x803+x802);
IkReal x925=(x663+x664+x742+x740+x741);
IkReal x926=(x678+x675+x755+x757+x756);
IkReal x927=(x732+x729+x846+x849+x848);
IkReal x928=(x706+x707+x795+x797+x796);
IkReal x929=(x737+x738+x856+x854+x855);
IkReal x930=(x669+x668+x670+x671+x751+x750+x749);
IkReal x931=(x702+x703+x704+x705+x793+x792+x794);
IkReal x932=(x771+x770+x768+x767+x864+x863+x862);
IkReal x933=(x694+x782+x783+x781+x785+x868+x867+x866);
IkReal x934=(x673+x759+x758+x764+x765+x766+x761+x762+x861);
IkReal x935=(x690+x691+x773+x777+x776+x774+x779+x778+x780+x865);
IkReal x936=(x525+x878+x879+x874+x875+x876+x877+x881+x880+x883+x882+x828+x826);
IkReal x937=(x525+x885+x884+x887+x886+x888+x829+x834+x835+x836+x830+x832+x833+x838+x841);
IkReal x938=(x850+x889+x896+x897+x894+x895+x892+x893+x890+x891+x898+x845+x844+x847);
IkReal x939=(x869+x870+x871+x872+x873+x818+x819+x816+x814+x815+x813+x823+x822+x821+x820+x824);
op[38]=((((-1.432)*gclwh12_14*x539))+(((-1.0)*x536*x638))+(((1.432)*gclwh14_14*x542))+(((-0.013635504)*x590))+(((0.013635504)*x662))+(((0.786048)*x572))+(((1.432)*gclwh4_14*x529))+(((-0.786048)*x649))+((x543*x546))+(((-1.0)*x530*x595))+(((0.786048)*x641))+(((-0.013635504)*x608)));
op[39]=((0.73406)+(((-1.0)*gclwh8_10*x550))+((gclwh14_10*x658))+(((1.104)*x588))+((x536*x551))+(((-0.076176)*x577))+(((-1.0)*x543*x628))+(((-8.0)*gclwh4_10*x529))+((gclwh10_10*x613))+(((8.0)*gclwh12_10*x539))+(((-8.0)*gclwh14_10*x542))+((gclwh4_10*x646))+((x530*x616)));
op[40]=((-0.025994)+(((-1.0)*x920))+x931);
op[41]=((((-1.0)*gclwh12_2*x627))+(((0.076176)*gclwh10_2*rxp2_2))+(((-1.0)*x908))+((gclwh3_2*x627))+(((-0.276)*gclwh12_2*x543))+(((0.552)*gclwh1_2*x542))+(((0.276)*gclwh14_2*x530))+(((0.005256144)*gclwh4_2*r22))+((gclwh14_2*x555))+(((0.552)*gclwh12_2*x539))+((gclwh1_2*x555))+(((-0.276)*gclwh1_2*x530))+(((-0.076176)*gclwh8_2*rxp0_2))+(((0.552)*gclwh3_2*x539))+(((-0.276)*gclwh3_2*x543))+(((0.276)*gclwh4_2*x536))+x928+(((-0.552)*gclwh14_2*x542))+(((-0.552)*gclwh4_2*x529))+(((0.076176)*gclwh6_2*rxp1_2)));
op[42]=((((-6.248)*gclwh15_0*x542))+((gclwh15_0*x617))+(((-1.0)*x925))+(((3.124)*gclwh2_0*x543))+(((3.124)*gclwh15_0*x530))+(((-6.248)*gclwh2_0*x539))+(((6.248)*gclwh13_0*x539))+(((-0.059493456)*x581))+(((3.124)*gclwh0_0*x530))+(((-1.0)*gclwh0_0*x617))+(((0.059493456)*x557))+(((-3.124)*gclwh13_0*x543))+(((-6.248)*gclwh0_0*x542))+(((0.862224)*x651))+(((-6.248)*gclwh5_0*x529))+x912+(((0.862224)*x615))+(((3.124)*gclwh5_0*x536))+(((-0.059493456)*gclwh13_0*r21))+(((-0.862224)*x553)));
op[43]=((4.815606)+(((-1.0)*x922))+x930);
op[44]=((0.73406)+((x530*x653))+((gclwh15_8*x658))+((x536*x636))+((gclwh5_8*x646))+(((-0.076176)*gclwh13_8*r21))+(((-8.0)*gclwh15_8*x542))+(((-8.0)*gclwh5_8*x529))+(((-1.0)*gclwh9_8*x550))+(((1.104)*gclwh7_8*rxp1_2))+(((8.0)*gclwh13_8*x539))+(((-1.0)*x543*x544))+((gclwh11_8*x613)));
op[45]=((((0.786048)*x599))+((x530*x654))+(((0.013635504)*x647))+(((-1.432)*gclwh15_15*x542))+(((-0.013635504)*x656))+(((0.786048)*x606))+(((1.432)*gclwh13_15*x539))+((x536*x537))+(((-0.786048)*x526))+(((-1.0)*x543*x554))+(((-1.432)*gclwh5_15*x529))+(((0.013635504)*x548)));
op[46]=((((0.276)*gclwh2_0*x543))+(((0.552)*gclwh13_0*x539))+(((0.005256144)*x557))+(((-0.552)*gclwh2_0*x539))+(((-1.0)*x912))+(((-1.0)*gclwh0_0*x555))+(((0.076176)*x651))+(((0.276)*gclwh0_0*x530))+(((-0.276)*gclwh13_0*x543))+(((0.276)*gclwh5_0*x536))+(((-0.552)*gclwh0_0*x542))+(((-1.0)*gclwh13_0*x627))+(((-0.552)*gclwh15_0*x542))+(((-0.005256144)*x581))+(((0.276)*gclwh15_0*x530))+(((-0.552)*gclwh5_0*x529))+(((0.076176)*x615))+x925+((gclwh15_0*x555))+(((-0.076176)*x553)));
op[47]=((0.025994)+x922+(((-1.0)*x930)));
op[48]=(((gclwh14_9*x605))+(((-1.0)*x926))+(((-1.562)*gclwh8_12*x530))+(((-3.124)*gclwh10_12*x529))+(((3.124)*gclwh8_12*x542))+(((0.431112)*x631))+((gclwh10_12*x593))+(((1.562)*gclwh6_12*x543))+(((-3.124)*gclwh6_12*x539))+x911+x901+(((-0.431112)*x614))+(((1.562)*gclwh10_12*x536))+(((-1.0)*x672))+(((-1.0)*gclwh8_12*x565))+((gclwh6_12*x540)));
op[49]=((((-0.676984116)*x547))+((gclwh6_10*x543))+(((-1.0)*gclwh14_3*x660))+((gclwh12_3*x561))+(((-1.0)*x900))+((gclwh10_10*x536))+(((-1.0)*x919))+(((-1.0)*gclwh8_10*x530))+x934+x904+(((-1.0)*x932)));
op[50]=((0.509792)+((gclwh12_10*x600))+(((2.0)*gclwh6_10*x543))+(((-4.0)*gclwh10_10*x529))+(((-4.0)*npy*x534))+(((-1.0)*gclwh4_10*x589))+((gclwh6_10*x609))+(((-1.0)*x530*x564))+(((4.0)*gclwh8_10*x542))+((x536*x648))+((gclwh10_10*x560))+(((-1.0)*gclwh14_10*x632))+(((-1.0)*gclwh8_10*x532)));
op[51]=((((2.848)*gclwh6_2*x539))+(((-1.0)*gclwh4_14*x659))+(((-1.0)*gclwh6_2*x580))+(((-0.4692)*x626))+(((-0.4692)*x631))+((gclwh8_2*x624))+(((2.848)*gclwh10_2*x529))+(((-1.0)*gclwh12_2*x657))+(((1.424)*gclwh8_2*x530))+((gclwh14_2*x575))+(((-1.0)*gclwh10_2*x582))+(((-1.0)*gclwh14_14*x623))+(((0.4692)*x614))+(((-1.424)*gclwh10_2*x536))+((gclwh12_14*x604))+((gclwh4_2*x574))+(((-1.424)*gclwh6_2*x543))+(((-2.848)*npx*x541)));
op[52]=((((-1.0)*x926))+(((-1.0)*gclwh10_12*npz*x525))+((gclwh8_12*npx*x525))+(((-0.138)*gclwh8_12*x530))+(((0.138)*gclwh6_12*x543))+(((-1.0)*gclwh8_12*x655))+(((-1.0)*x901))+(((-1.0)*x900))+(((0.138)*gclwh10_12*x536))+((gclwh6_12*x611))+((gclwh10_12*x622))+x672+x673+(((-1.0)*gclwh6_12*npy*x525))+x911);
op[53]=((((-1.0)*x904))+(((-1.0)*x900))+(((-1.0)*gclwh6_10*x543))+((gclwh8_10*x530))+(((-1.0)*gclwh4_3*x527))+(((-1.0)*gclwh14_3*x640))+(((-1.0)*gclwh10_10*x536))+((gclwh12_3*x633))+x934+x919+(((-1.0)*x932)));
op[54]=(((gclwh11_8*x536))+(((-1.0)*x918))+(((-1.0)*gclwh9_8*x530))+((gclwh13_1*x561))+(((-1.0)*gclwh15_1*x660))+(((-0.676984116)*gclwh5_1*rxp2_2))+x935+x905+(((-1.0)*x933))+((gclwh7_8*x543)));
op[55]=((((-1.0)*x921))+(((0.431112)*x535))+(((-1.0)*gclwh15_11*x605))+(((1.562)*gclwh11_13*x536))+(((3.124)*gclwh9_13*x542))+(((-1.0)*x899))+(((-1.0)*gclwh9_13*x565))+(((-3.124)*gclwh11_13*x529))+(((1.562)*gclwh7_13*x543))+(((-1.562)*gclwh9_13*x530))+x701+((gclwh11_13*x593))+x913+((gclwh7_13*x540))+(((-3.124)*gclwh7_13*x539))+(((-0.431112)*x578)));
op[56]=((((-1.0)*gclwh5_15*x659))+((gclwh13_15*x604))+((gclwh5_0*x574))+(((-0.4692)*x625))+(((-0.4692)*x578))+(((-1.0)*gclwh13_0*x657))+(((-1.0)*gclwh11_0*x582))+(((2.848)*gclwh7_0*x539))+(((-2.848)*gclwh9_0*x542))+(((-1.0)*gclwh15_15*x623))+(((-1.424)*gclwh7_0*x543))+((gclwh9_0*x624))+(((-1.0)*gclwh7_0*x580))+(((1.424)*gclwh9_0*x530))+(((0.4692)*x535))+(((2.848)*gclwh11_0*x529))+((gclwh15_0*x575))+(((-1.424)*gclwh11_0*x536)));
op[57]=((0.509792)+(((-1.0)*x536*x637))+(((-2.0)*gclwh7_8*x543))+((gclwh9_8*x532))+(((-1.0)*gclwh7_8*x609))+(((-4.0)*gclwh9_8*x542))+(((4.0)*gclwh11_8*x529))+((gclwh15_8*x632))+(((4.0)*gclwh7_8*x539))+((x530*x639))+(((-1.0)*gclwh13_8*x600))+((gclwh5_8*x589))+(((-1.0)*gclwh11_8*x560)));
op[58]=((((-1.0)*gclwh5_1*x527))+((gclwh13_1*x633))+(((-1.0)*gclwh15_1*x640))+((gclwh9_8*x530))+(((-1.0)*x905))+(((-1.0)*gclwh11_8*x536))+x935+x918+(((-1.0)*gclwh7_8*x543))+(((-1.0)*x933)));
op[59]=((((-1.0)*x921))+((gclwh9_13*npx*x525))+(((0.138)*gclwh7_13*x543))+((gclwh7_13*x611))+(((-1.0)*gclwh11_13*npz*x525))+((gclwh11_13*x622))+(((-0.138)*gclwh9_13*x530))+(((-1.0)*gclwh7_13*npy*x525))+(((-1.0)*x701))+x690+x691+(((-1.0)*x694))+x899+x913+(((-1.0)*gclwh9_13*x655))+(((0.138)*gclwh11_13*x536)));
op[60]=(((gclwh12_9*x540))+(((-1.0)*x924))+(((3.124)*gclwh14_9*x542))+(((-1.562)*gclwh14_9*x530))+(((1.562)*gclwh12_9*x543))+(((-3.124)*gclwh12_9*x539))+(((-1.0)*x902))+(((-1.0)*gclwh4_9*x593))+(((0.431112)*x572))+(((-1.0)*gclwh14_9*x565))+(((0.431112)*x641))+x709+(((3.124)*gclwh4_9*x529))+(((-1.0)*gclwh8_12*x605))+x914+(((-1.562)*gclwh4_9*x536)));
op[61]=((-2.471885)+((gclwh14_10*x530))+(((-4.905682)*gclwh4_3*x529))+(((-1.0)*gclwh12_10*x543))+(((2.433797)*gclwh14_3*x530))+(((4.905682)*gclwh12_3*x539))+(((4.905682)*gclwh1_3*x542))+(((-1.0)*x907))+(((4.905682)*gclwh3_3*x539))+(((0.046711904004)*x559))+(((0.046711904004)*x558))+((gclwh14_3*x603))+(((-1.0)*x910))+(((-1.0)*gclwh12_3*x642))+(((-4.905682)*gclwh14_3*x542))+((gclwh4_3*x643))+(((-2.471885)*gclwh3_3*x543))+(((-2.471885)*gclwh1_3*x530))+(((2.433797)*gclwh4_3*x536))+((gclwh4_10*x536))+(((-2.433797)*gclwh12_3*x543))+x939+x923+x916+(((-1.0)*x936)));
op[62]=((-0.495194)+(((-1.0)*x920))+x931);
op[63]=((((-1.0)*gclwh14_2*x624))+(((0.0323748)*x645))+(((-3.4)*gclwh4_9*x529))+(((-1.424)*gclwh14_2*x530))+(((1.7)*gclwh14_9*x530))+(((-1.0)*gclwh12_9*x644))+(((2.848)*gclwh4_2*x529))+(((-1.0)*gclwh10_2*x574))+(((1.424)*gclwh1_2*x530))+(((-2.848)*gclwh3_2*x539))+(((-1.0)*gclwh1_2*x624))+(((-1.7)*gclwh12_9*x543))+(((1.424)*gclwh12_2*x543))+(((-1.0)*gclwh3_2*x580))+(((-1.0)*x908))+(((1.7)*gclwh4_9*x536))+(((1.424)*gclwh3_2*x543))+(((3.4)*gclwh12_9*x539))+(((-1.0)*gclwh6_2*x657))+(((-3.4)*gclwh14_9*x542))+((gclwh8_2*x575))+((gclwh4_9*x601))+(((-2.848)*gclwh12_2*x539))+(((-2.848)*gclwh1_2*x542))+(((-1.0)*gclwh4_2*x582))+((gclwh12_2*x580))+(((2.848)*gclwh14_2*x542))+x928+(((-1.424)*gclwh4_2*x536)));
op[64]=((((-0.038088)*x649))+(((0.038088)*x572))+(((-1.0)*x902))+(((-1.0)*x910))+(((-1.0)*x914))+((gclwh10_12*x563))+x709+x924+x923);
op[65]=((0.051085)+(((-0.064082)*gclwh14_3*x542))+((gclwh4_3*x612))+(((-0.051085)*gclwh1_3*x530))+(((-0.012997)*gclwh12_3*x543))+(((-0.000610188804)*x661))+(((-1.0)*x916))+(((-1.0)*x910))+(((0.012997)*gclwh4_3*x536))+(((0.064082)*gclwh12_3*x539))+(((0.012997)*gclwh14_3*x530))+(((-1.0)*gclwh14_10*x530))+(((0.064082)*gclwh1_3*x542))+(((-1.0)*gclwh4_10*x536))+(((-0.051085)*gclwh3_3*x543))+(((0.000610188804)*x558))+(((0.000610188804)*x559))+((gclwh12_10*x543))+x939+x923+x907+(((-0.064082)*gclwh4_3*x529))+((gclwh14_3*x634))+(((-1.0)*x936))+(((0.064082)*gclwh3_3*x539)));
op[66]=((-2.471885)+(((-1.0)*gclwh13_1*x642))+(((-0.046711904004)*x592))+(((-1.0)*x927))+((gclwh15_8*x530))+(((-1.0)*x906))+(((2.433797)*gclwh15_1*x530))+(((2.471885)*gclwh0_1*x530))+(((-4.905682)*gclwh2_1*x539))+(((-1.0)*gclwh0_1*x603))+(((-4.905682)*gclwh15_1*x542))+(((-2.433797)*gclwh13_1*x543))+(((-4.905682)*gclwh5_1*x529))+(((-4.905682)*gclwh0_1*x542))+((gclwh5_1*x643))+((gclwh5_8*x536))+(((4.905682)*gclwh13_1*x539))+(((-1.0)*gclwh13_8*x543))+((gclwh15_1*x603))+x937+x917+x909+(((2.433797)*gclwh5_1*x536))+(((2.471885)*gclwh2_1*x543))+(((-1.0)*x938)));
op[67]=((((-3.124)*gclwh15_11*x542))+(((0.431112)*x599))+((gclwh15_11*x565))+(((-1.562)*gclwh13_11*x543))+(((-1.0)*x903))+(((-1.0)*x915))+((gclwh5_11*x593))+(((-1.0)*gclwh13_11*x540))+(((-0.431112)*x526))+(((1.562)*gclwh5_11*x536))+x734+(((0.431112)*x606))+(((-3.124)*gclwh5_11*x529))+x929+(((1.562)*gclwh15_11*x530))+(((3.124)*gclwh13_11*x539)));
op[68]=((((-1.424)*gclwh15_0*x530))+(((1.424)*gclwh13_0*x543))+(((-0.393024)*x615))+(((-3.4)*gclwh5_11*x529))+((gclwh0_0*x624))+((gclwh13_0*x580))+(((-1.0)*gclwh15_0*x624))+(((-1.0)*x912))+((gclwh2_0*x580))+(((0.393024)*x553))+(((0.0323748)*gclwh15_11*r20))+(((3.4)*gclwh13_11*x539))+(((2.848)*gclwh5_0*x529))+(((2.848)*gclwh0_0*x542))+(((-1.424)*gclwh2_0*x543))+(((1.7)*gclwh5_11*x536))+(((-3.4)*gclwh15_11*x542))+(((-2.848)*gclwh13_0*x539))+((gclwh5_11*x601))+(((-1.7)*gclwh13_11*x543))+(((1.7)*gclwh15_11*x530))+(((-0.027118656)*x557))+(((2.848)*gclwh15_0*x542))+(((-1.424)*gclwh0_0*x530))+(((-1.0)*gclwh13_11*x644))+x925+(((-1.424)*gclwh5_0*x536))+(((2.848)*gclwh2_0*x539))+(((-1.0)*gclwh11_0*x574)));
op[69]=((0.495194)+x922+(((-1.0)*x930)));
op[70]=((0.051085)+(((-1.0)*x927))+(((-0.064082)*gclwh2_1*x539))+(((-0.064082)*gclwh0_1*x542))+(((-0.064082)*gclwh15_1*x542))+(((-0.012997)*gclwh13_1*x543))+((gclwh5_1*x612))+((gclwh15_1*x634))+(((-0.064082)*gclwh5_1*x529))+(((-1.0)*x917))+(((0.012997)*gclwh15_1*x530))+(((-0.000610188804)*x650))+((gclwh13_8*x543))+(((0.051085)*gclwh0_1*x530))+(((0.051085)*gclwh2_1*x543))+x937+x906+x909+(((0.064082)*gclwh13_1*x539))+(((-0.000610188804)*x592))+(((-1.0)*gclwh15_8*x530))+(((-1.0)*gclwh5_8*x536))+(((0.012997)*gclwh5_1*x536))+(((-1.0)*gclwh0_1*x634))+(((-1.0)*x938)));
op[71]=((((-1.0)*x927))+(((-1.0)*x929))+((gclwh11_13*x563))+(((-1.0)*x903))+(((0.038088)*x606))+(((-0.038088)*x526))+x734+x915+x909);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x940=htj1*htj1;
CheckValue<IkReal> x941=IKPowWithIntegerCheck(((1.0)+x940),-1);
if(!x941.valid){
continue;
}
cj1array[numsolutions]=((x941.value)*(((1.0)+(((-1.0)*x940)))));
CheckValue<IkReal> x942=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x942.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x942.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x943=htj2*htj2;
CheckValue<IkReal> x944=IKPowWithIntegerCheck(((1.0)+x943),-1);
if(!x944.valid){
continue;
}
cj2array[numsolutions]=((x944.value)*(((1.0)+(((-1.0)*x943)))));
CheckValue<IkReal> x945=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x945.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x945.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x946=htj3*htj3;
CheckValue<IkReal> x947=IKPowWithIntegerCheck(((1.0)+x946),-1);
if(!x947.valid){
continue;
}
cj3array[numsolutions]=((x947.value)*(((1.0)+(((-1.0)*x946)))));
CheckValue<IkReal> x948=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x948.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x948.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x949=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x949);
rxp1_0=(pz*r11);
rxp1_1=(r01*x949);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x950=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x950);
rxp1_0=(pz*r11);
rxp1_1=(r01*x950);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x951=IKPowWithIntegerCheck(cj3,-1);
if(!x951.valid){
continue;
}
CheckValue<IkReal> x952=IKPowWithIntegerCheck(r22,-1);
if(!x952.valid){
continue;
}
sj4array[0]=((x951.value)*(x952.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x953=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x953);
rxp1_0=(pz*r11);
rxp1_1=(r01*x953);
IkReal x954=(r10*sj3);
IkReal x955=((4.0)*cj4);
IkReal x956=(r11*sj3);
IkReal x957=((16.0)*cj4);
IkReal x958=(sj1*sj2);
IkReal x959=(r01*sj4);
IkReal x960=(cj3*r11);
IkReal x961=(cj1*sj2);
IkReal x962=((8.0)*cj2);
IkReal x963=((8.0)*cj4);
IkReal x964=((4.0)*sj4);
IkReal x965=(r12*sj3);
IkReal x966=(cj2*sj1);
IkReal x967=(cj1*cj2);
IkReal x968=(cj3*r12);
IkReal x969=((12.0)*sj4);
IkReal x970=(cj3*r10);
IkReal x971=((4.0)*x956);
IkReal x972=((4.0)*x960);
IkReal x973=((12.0)*cj4*r02);
IkReal x974=(x955*x970);
IkReal x975=(x968*x969);
IkReal x976=(x954*x955);
IkReal x977=(x965*x969);
IkReal x978=(r00*x958*x964);
IkReal x979=(x967*x973);
IkReal x980=(r00*x964*x967);
IkReal x981=(x958*x973);
IkReal x982=(r00*x961*x964);
IkReal x983=(r00*x964*x966);
IkReal x984=(x966*x973);
IkReal x985=(x961*x973);
IkReal x986=(x980+x971);
IkReal x987=(x975+x979);
IkReal x988=(x974+x978);
IkReal x989=(x984+x985);
IkReal x990=(x982+x983+x972+x976);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r02*x955*x966))+(((-1.0)*r02*x955*x961))+(((-1.0)*x990))+((x964*x965)))))))+(((0.5)*(IKabs(((((-1.0)*x989))+(((-1.0)*x990))+x977)))))+(((0.5)*(IKabs(((((-1.0)*x989))+x990+x977)))))+(IKabs(((((-1.0)*x960*x963))+(((-8.0)*x954))+((cj1*x959*x962))+(((-8.0)*x958*x959)))))+(((0.5)*(IKabs(((((-1.0)*x988))+((r02*x955*x967))+(((-1.0)*r02*x955*x958))+((x964*x968))+x986)))))+(((0.5)*(IKabs(((((16.0)*x970))+(((-16.0)*x959*x961))+(((-16.0)*x959*x966))+(((-1.0)*x956*x957)))))))+(IKabs(((((-1.0)*sj1*x959*x962))+(((8.0)*x970))+(((-1.0)*x956*x963))+(((-8.0)*x959*x961)))))+(((0.5)*(IKabs(((((-1.0)*x988))+(((-1.0)*x981))+x986+x987)))))+(((0.5)*(IKabs(((((-1.0)*x986))+(((-1.0)*x981))+x988+x987)))))+(((0.5)*(IKabs(((((16.0)*x959*x967))+(((-16.0)*x958*x959))+(((-16.0)*x954))+(((-1.0)*x957*x960))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x991=(r10*sj3);
IkReal x992=(r01*sj4);
IkReal x993=(cj1*cj2);
IkReal x994=(cj3*cj4);
IkReal x995=(sj1*sj2);
IkReal x996=(cj4*r02);
IkReal x997=((4.0)*r11*sj3);
IkReal x998=(cj3*r12*sj4);
IkReal x999=((4.0)*r00*sj4);
IkReal x1000=((4.0)*r10*x994);
IkReal x1001=((12.0)*x998);
IkReal x1002=((4.0)*x998);
IkReal x1003=(x993*x999);
IkReal x1004=(x995*x999);
IkReal x1005=((12.0)*x993*x996);
IkReal x1006=((12.0)*x995*x996);
IkReal x1007=((4.0)*x993*x996);
IkReal x1008=((4.0)*x995*x996);
IkReal x1009=(x1003+x997);
IkReal x1010=(x1007+x1002);
IkReal x1011=(x1004+x1000);
IkReal x1012=(x1005+x1001);
IkReal x1013=((((-8.0)*x992*x995))+(((-8.0)*r11*x994))+(((8.0)*x992*x993))+(((-8.0)*x991)));
op[0]=(x1010+x1009+(((-1.0)*x1008))+(((-1.0)*x1011)));
op[1]=x1013;
op[2]=(x1012+x1009+(((-1.0)*x1006))+(((-1.0)*x1011)));
op[3]=((((-16.0)*x992*x995))+(((16.0)*x992*x993))+(((-16.0)*r11*x994))+(((-16.0)*x991)));
op[4]=(x1011+x1012+(((-1.0)*x1009))+(((-1.0)*x1006)));
op[5]=x1013;
op[6]=(x1010+x1011+(((-1.0)*x1008))+(((-1.0)*x1009)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1014=(cj4*sj3);
IkReal x1015=(cj1*sj2);
IkReal x1016=(r01*sj4);
IkReal x1017=((4.0)*sj4);
IkReal x1018=(r12*sj3);
IkReal x1019=(cj4*r02);
IkReal x1020=(cj2*sj1);
IkReal x1021=(cj3*r10);
IkReal x1022=((4.0)*cj3*r11);
IkReal x1023=((4.0)*r10*x1014);
IkReal x1024=(x1017*x1018);
IkReal x1025=((12.0)*sj4*x1018);
IkReal x1026=(r00*x1015*x1017);
IkReal x1027=(r00*x1017*x1020);
IkReal x1028=((12.0)*x1019*x1020);
IkReal x1029=((12.0)*x1015*x1019);
IkReal x1030=((4.0)*x1019*x1020);
IkReal x1031=((4.0)*x1015*x1019);
IkReal x1032=(x1030+x1031);
IkReal x1033=(x1029+x1028);
IkReal x1034=((((8.0)*x1021))+(((-8.0)*r11*x1014))+(((-8.0)*x1016*x1020))+(((-8.0)*x1015*x1016)));
IkReal x1035=(x1027+x1026+x1023+x1022);
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1032))+(((-1.0)*x1035))+x1024))))+(((-1.0)*x1032))+x1035+x1024+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1033))+(((-1.0)*x1035))+x1025))))+(((htj5*htj5)*(((((-1.0)*x1033))+x1035+x1025))))+((htj5*x1034))+((x1034*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x1016*x1020))+(((-16.0)*r11*x1014))+(((16.0)*x1021))+(((-16.0)*x1015*x1016)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1036=(cj5*sj4);
IkReal x1037=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1036))+((r01*x1037))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1036))+(((-1.0)*r11*x1037))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1036))+((r01*x1037))+((cj4*r02))))+IKsqr((((r10*x1036))+(((-1.0)*r11*x1037))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1036))+((r01*x1037))+((cj4*r02))), (((r10*x1036))+(((-1.0)*r11*x1037))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1038=IKsin(j0);
IkReal x1039=IKcos(j0);
IkReal x1040=((1.0)*cj3);
IkReal x1041=(cj5*r11);
IkReal x1042=(sj1*sj2);
IkReal x1043=(r02*sj4);
IkReal x1044=(r01*sj5);
IkReal x1045=(cj3*cj4);
IkReal x1046=(cj4*cj5);
IkReal x1047=((1.0)*sj3);
IkReal x1048=(cj5*sj4);
IkReal x1049=(r12*sj4);
IkReal x1050=((1.0)*sj4);
IkReal x1051=(cj5*r01);
IkReal x1052=(cj1*cj2);
IkReal x1053=(cj4*sj3);
IkReal x1054=(r10*sj5);
IkReal x1055=(r00*sj5);
IkReal x1056=(r11*sj5);
IkReal x1057=((1.0)*cj4);
IkReal x1058=(cj2*sj1);
IkReal x1059=((0.712)*x1039);
IkReal x1060=(cj1*x1039);
IkReal x1061=((0.712)*x1038);
IkReal x1062=(cj1*x1038);
evalcond[0]=((((-1.0)*r02*x1057))+x1038+(((-1.0)*x1044*x1050))+((r00*x1048)));
evalcond[1]=((((-1.0)*x1039))+(((-1.0)*r12*x1057))+((r10*x1048))+(((-1.0)*x1050*x1056)));
evalcond[2]=((((-1.0)*x1052*x1059))+(((-0.85)*x1060))+(((0.138)*x1051))+(((0.138)*x1055))+((x1042*x1059))+(((-1.0)*px))+(((0.179)*x1038)));
evalcond[3]=((((-0.85)*x1062))+(((0.138)*x1041))+(((0.138)*x1054))+(((-1.0)*py))+(((-0.179)*x1039))+(((-1.0)*x1052*x1061))+((x1042*x1061)));
evalcond[4]=(((x1039*x1042))+((sj3*x1051))+((sj3*x1055))+(((-1.0)*x1040*x1043))+(((-1.0)*x1039*x1052))+((x1044*x1045))+(((-1.0)*r00*x1040*x1046)));
evalcond[5]=(((x1038*x1042))+(((-1.0)*x1038*x1052))+((sj3*x1054))+((sj3*x1041))+(((-1.0)*x1040*x1049))+((x1045*x1056))+(((-1.0)*r10*x1040*x1046)));
evalcond[6]=(((x1044*x1053))+((sj2*x1060))+((x1039*x1058))+(((-1.0)*x1043*x1047))+(((-1.0)*x1040*x1055))+(((-1.0)*x1040*x1051))+(((-1.0)*r00*x1046*x1047)));
evalcond[7]=(((x1038*x1058))+((sj2*x1062))+((x1053*x1056))+(((-1.0)*x1040*x1054))+(((-1.0)*x1040*x1041))+(((-1.0)*r10*x1046*x1047))+(((-1.0)*x1047*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1063=IKPowWithIntegerCheck(r22,-1);
if(!x1063.valid){
continue;
}
CheckValue<IkReal> x1064=IKPowWithIntegerCheck(sj3,-1);
if(!x1064.valid){
continue;
}
sj4array[0]=((x1063.value)*(x1064.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1065=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1065);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1065);
IkReal x1066=(r10*sj3);
IkReal x1067=((4.0)*cj4);
IkReal x1068=(r11*sj3);
IkReal x1069=((16.0)*cj4);
IkReal x1070=(sj1*sj2);
IkReal x1071=(r01*sj4);
IkReal x1072=(cj3*r11);
IkReal x1073=(cj1*sj2);
IkReal x1074=((8.0)*cj2);
IkReal x1075=((8.0)*cj4);
IkReal x1076=((4.0)*sj4);
IkReal x1077=(r12*sj3);
IkReal x1078=(cj2*sj1);
IkReal x1079=(cj1*cj2);
IkReal x1080=(cj3*r12);
IkReal x1081=((12.0)*sj4);
IkReal x1082=(cj3*r10);
IkReal x1083=((4.0)*x1068);
IkReal x1084=((4.0)*x1072);
IkReal x1085=((12.0)*cj4*r02);
IkReal x1086=(x1067*x1082);
IkReal x1087=(x1080*x1081);
IkReal x1088=(x1066*x1067);
IkReal x1089=(x1077*x1081);
IkReal x1090=(r00*x1070*x1076);
IkReal x1091=(x1079*x1085);
IkReal x1092=(r00*x1076*x1079);
IkReal x1093=(x1070*x1085);
IkReal x1094=(r00*x1073*x1076);
IkReal x1095=(r00*x1076*x1078);
IkReal x1096=(x1078*x1085);
IkReal x1097=(x1073*x1085);
IkReal x1098=(x1092+x1083);
IkReal x1099=(x1091+x1087);
IkReal x1100=(x1090+x1086);
IkReal x1101=(x1096+x1097);
IkReal x1102=(x1094+x1095+x1084+x1088);
j5eval[0]=((((0.5)*(IKabs(((((16.0)*x1071*x1079))+(((-1.0)*x1069*x1072))+(((-16.0)*x1066))+(((-16.0)*x1070*x1071)))))))+(IKabs(((((-1.0)*sj1*x1071*x1074))+(((-1.0)*x1068*x1075))+(((8.0)*x1082))+(((-8.0)*x1071*x1073)))))+(((0.5)*(IKabs((x1098+x1099+(((-1.0)*x1093))+(((-1.0)*x1100)))))))+(((0.5)*(IKabs((x1102+x1089+(((-1.0)*x1101)))))))+(((0.5)*(IKabs((x1100+x1099+(((-1.0)*x1098))+(((-1.0)*x1093)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x1067*x1073))+(((-1.0)*r02*x1067*x1078))+((x1076*x1077))+(((-1.0)*x1102)))))))+(IKabs(((((-8.0)*x1070*x1071))+(((-1.0)*x1072*x1075))+((cj1*x1071*x1074))+(((-8.0)*x1066)))))+(((0.5)*(IKabs(((((-16.0)*x1071*x1078))+(((-16.0)*x1071*x1073))+(((-1.0)*x1068*x1069))+(((16.0)*x1082)))))))+(((0.5)*(IKabs((x1089+(((-1.0)*x1102))+(((-1.0)*x1101)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x1067*x1070))+((x1076*x1080))+x1098+((r02*x1067*x1079))+(((-1.0)*x1100))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1103=(r10*sj3);
IkReal x1104=(r01*sj4);
IkReal x1105=(cj1*cj2);
IkReal x1106=(cj3*cj4);
IkReal x1107=(sj1*sj2);
IkReal x1108=(cj4*r02);
IkReal x1109=((4.0)*r11*sj3);
IkReal x1110=(cj3*r12*sj4);
IkReal x1111=((4.0)*r00*sj4);
IkReal x1112=((4.0)*r10*x1106);
IkReal x1113=((12.0)*x1110);
IkReal x1114=((4.0)*x1110);
IkReal x1115=(x1105*x1111);
IkReal x1116=(x1107*x1111);
IkReal x1117=((12.0)*x1105*x1108);
IkReal x1118=((12.0)*x1107*x1108);
IkReal x1119=((4.0)*x1105*x1108);
IkReal x1120=((4.0)*x1107*x1108);
IkReal x1121=(x1109+x1115);
IkReal x1122=(x1114+x1119);
IkReal x1123=(x1112+x1116);
IkReal x1124=(x1113+x1117);
IkReal x1125=((((-8.0)*x1104*x1107))+(((-8.0)*r11*x1106))+(((8.0)*x1104*x1105))+(((-8.0)*x1103)));
op[0]=(x1121+x1122+(((-1.0)*x1123))+(((-1.0)*x1120)));
op[1]=x1125;
op[2]=(x1121+x1124+(((-1.0)*x1123))+(((-1.0)*x1118)));
op[3]=((((-16.0)*x1104*x1107))+(((16.0)*x1104*x1105))+(((-16.0)*x1103))+(((-16.0)*r11*x1106)));
op[4]=(x1123+x1124+(((-1.0)*x1121))+(((-1.0)*x1118)));
op[5]=x1125;
op[6]=(x1122+x1123+(((-1.0)*x1121))+(((-1.0)*x1120)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1126=(cj4*sj3);
IkReal x1127=(cj1*sj2);
IkReal x1128=(r01*sj4);
IkReal x1129=((4.0)*sj4);
IkReal x1130=(r12*sj3);
IkReal x1131=(cj4*r02);
IkReal x1132=(cj2*sj1);
IkReal x1133=(cj3*r10);
IkReal x1134=((4.0)*cj3*r11);
IkReal x1135=((4.0)*r10*x1126);
IkReal x1136=(x1129*x1130);
IkReal x1137=((12.0)*sj4*x1130);
IkReal x1138=(r00*x1127*x1129);
IkReal x1139=(r00*x1129*x1132);
IkReal x1140=((12.0)*x1131*x1132);
IkReal x1141=((12.0)*x1127*x1131);
IkReal x1142=((4.0)*x1131*x1132);
IkReal x1143=((4.0)*x1127*x1131);
IkReal x1144=(x1142+x1143);
IkReal x1145=(x1140+x1141);
IkReal x1146=((((-8.0)*r11*x1126))+(((-8.0)*x1128*x1132))+(((-8.0)*x1127*x1128))+(((8.0)*x1133)));
IkReal x1147=(x1139+x1138+x1135+x1134);
j5evalpoly[0]=(x1147+x1136+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1136+(((-1.0)*x1144))+(((-1.0)*x1147))))))+((x1146*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*r11*x1126))+(((-16.0)*x1128*x1132))+(((16.0)*x1133))+(((-16.0)*x1127*x1128))))))+(((-1.0)*x1144))+((htj5*x1146))+(((htj5*htj5*htj5*htj5)*((x1137+(((-1.0)*x1145))+(((-1.0)*x1147))))))+(((htj5*htj5)*((x1147+x1137+(((-1.0)*x1145)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1148=(cj5*sj4);
IkReal x1149=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1148))+((r01*x1149))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1149))+((r10*x1148))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1148))+((r01*x1149))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x1149))+((r10*x1148))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1148))+((r01*x1149))+((cj4*r02))), ((((-1.0)*r11*x1149))+((r10*x1148))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1150=IKsin(j0);
IkReal x1151=IKcos(j0);
IkReal x1152=((1.0)*cj3);
IkReal x1153=(cj5*r11);
IkReal x1154=(sj1*sj2);
IkReal x1155=(r02*sj4);
IkReal x1156=(r01*sj5);
IkReal x1157=(cj3*cj4);
IkReal x1158=(cj4*cj5);
IkReal x1159=((1.0)*sj3);
IkReal x1160=(cj5*sj4);
IkReal x1161=(r12*sj4);
IkReal x1162=((1.0)*sj4);
IkReal x1163=(cj5*r01);
IkReal x1164=(cj1*cj2);
IkReal x1165=(cj4*sj3);
IkReal x1166=(r10*sj5);
IkReal x1167=(r00*sj5);
IkReal x1168=(r11*sj5);
IkReal x1169=((1.0)*cj4);
IkReal x1170=(cj2*sj1);
IkReal x1171=((0.712)*x1151);
IkReal x1172=(cj1*x1151);
IkReal x1173=((0.712)*x1150);
IkReal x1174=(cj1*x1150);
evalcond[0]=((((-1.0)*x1156*x1162))+x1150+(((-1.0)*r02*x1169))+((r00*x1160)));
evalcond[1]=((((-1.0)*x1162*x1168))+((r10*x1160))+(((-1.0)*r12*x1169))+(((-1.0)*x1151)));
evalcond[2]=((((-1.0)*px))+((x1154*x1171))+(((0.138)*x1167))+(((0.138)*x1163))+(((0.179)*x1150))+(((-0.85)*x1172))+(((-1.0)*x1164*x1171)));
evalcond[3]=((((-1.0)*py))+((x1154*x1173))+(((0.138)*x1166))+(((-0.85)*x1174))+(((-1.0)*x1164*x1173))+(((0.138)*x1153))+(((-0.179)*x1151)));
evalcond[4]=((((-1.0)*x1151*x1164))+(((-1.0)*r00*x1152*x1158))+(((-1.0)*x1152*x1155))+((x1151*x1154))+((x1156*x1157))+((sj3*x1167))+((sj3*x1163)));
evalcond[5]=((((-1.0)*r10*x1152*x1158))+(((-1.0)*x1152*x1161))+(((-1.0)*x1150*x1164))+((sj3*x1153))+((x1157*x1168))+((x1150*x1154))+((sj3*x1166)));
evalcond[6]=((((-1.0)*x1155*x1159))+(((-1.0)*x1152*x1163))+(((-1.0)*x1152*x1167))+((x1156*x1165))+(((-1.0)*r00*x1158*x1159))+((x1151*x1170))+((sj2*x1172)));
evalcond[7]=(((x1165*x1168))+(((-1.0)*x1159*x1161))+(((-1.0)*x1152*x1166))+(((-1.0)*x1152*x1153))+(((-1.0)*r10*x1158*x1159))+((x1150*x1170))+((sj2*x1174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1175=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1175);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1175);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1176=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1176);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1176);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1177=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1177);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1177);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1178=IKPowWithIntegerCheck(r22,-1);
if(!x1178.valid){
continue;
}
sj4array[0]=((x1178.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1179=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1181 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1181.valid){
continue;
}
IkReal x1180=x1181.value;
j5array[0]=((-1.0)*x1180);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1180)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1182=(cj5*sj4);
IkReal x1183=(sj4*sj5);
if( IKabs((((r01*x1183))+(((-1.0)*r00*x1182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1182))+(((-1.0)*r11*x1183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1183))+(((-1.0)*r00*x1182))))+IKsqr((((r10*x1182))+(((-1.0)*r11*x1183))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1183))+(((-1.0)*r00*x1182))), (((r10*x1182))+(((-1.0)*r11*x1183))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1184=IKcos(j0);
IkReal x1185=IKsin(j0);
IkReal x1186=(sj1*sj2);
IkReal x1187=(cj5*sj4);
IkReal x1188=(cj5*r01);
IkReal x1189=(cj5*r11);
IkReal x1190=(cj1*cj2);
IkReal x1191=((0.138)*sj5);
IkReal x1192=((0.712)*x1184);
IkReal x1193=((1.0)*sj4*sj5);
IkReal x1194=(cj1*x1184);
IkReal x1195=((0.712)*x1185);
evalcond[0]=(x1185+((r00*x1187))+(((-1.0)*r01*x1193)));
evalcond[1]=(((r10*x1187))+(((-1.0)*x1184))+(((-1.0)*r11*x1193)));
evalcond[2]=(((r00*sj5))+x1188+((x1184*x1186))+(((-1.0)*x1184*x1190)));
evalcond[3]=(x1189+((r10*sj5))+((x1185*x1186))+(((-1.0)*x1185*x1190)));
evalcond[4]=((((-1.0)*x1190*x1192))+((x1186*x1192))+(((0.138)*x1188))+(((0.179)*x1185))+((r00*x1191))+(((-1.0)*px))+(((-0.85)*x1194)));
evalcond[5]=((((-1.0)*x1190*x1195))+((x1186*x1195))+(((0.138)*x1189))+((r10*x1191))+(((-1.0)*py))+(((-0.85)*cj1*x1185))+(((-0.179)*x1184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1196=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1196);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1196);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1197=IKPowWithIntegerCheck(r22,-1);
if(!x1197.valid){
continue;
}
sj4array[0]=((-1.0)*(x1197.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1198=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1198);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1198);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1200 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
IkReal x1199=x1200.value;
j5array[0]=((-1.0)*x1199);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1199)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1201=(cj5*sj4);
IkReal x1202=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1201))+((r01*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1201))+(((-1.0)*r11*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1201))+((r01*x1202))))+IKsqr((((r10*x1201))+(((-1.0)*r11*x1202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1201))+((r01*x1202))), (((r10*x1201))+(((-1.0)*r11*x1202))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1203=IKcos(j0);
IkReal x1204=IKsin(j0);
IkReal x1205=(sj1*sj2);
IkReal x1206=(cj5*sj4);
IkReal x1207=((1.0)*sj5);
IkReal x1208=(cj5*r11);
IkReal x1209=(cj1*cj2);
IkReal x1210=((0.138)*sj5);
IkReal x1211=(cj5*r01);
IkReal x1212=((0.712)*x1203);
IkReal x1213=(cj1*x1203);
IkReal x1214=((0.712)*x1204);
evalcond[0]=((((-1.0)*r01*sj4*x1207))+x1204+((r00*x1206)));
evalcond[1]=(((r10*x1206))+(((-1.0)*r11*sj4*x1207))+(((-1.0)*x1203)));
evalcond[2]=((((-1.0)*x1203*x1209))+(((-1.0)*r00*x1207))+((x1203*x1205))+(((-1.0)*x1211)));
evalcond[3]=(((x1204*x1205))+(((-1.0)*r10*x1207))+(((-1.0)*x1204*x1209))+(((-1.0)*x1208)));
evalcond[4]=((((-1.0)*x1209*x1212))+(((-0.85)*x1213))+((r00*x1210))+(((0.138)*x1211))+(((-1.0)*px))+(((0.179)*x1204))+((x1205*x1212)));
evalcond[5]=((((-0.179)*x1203))+(((-1.0)*x1209*x1214))+(((-0.85)*cj1*x1204))+((r10*x1210))+(((-1.0)*py))+(((0.138)*x1208))+((x1205*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1215=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1215);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1215);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1216=IKPowWithIntegerCheck(r22,-1);
if(!x1216.valid){
continue;
}
sj4array[0]=((x1216.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1217=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1217);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1217);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1219 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1219.valid){
continue;
}
IkReal x1218=x1219.value;
j5array[0]=((-1.0)*x1218);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1218)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1220=(cj5*sj4);
IkReal x1221=(sj4*sj5);
if( IKabs((((r01*x1221))+(((-1.0)*r00*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1221))+((r10*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1221))+(((-1.0)*r00*x1220))))+IKsqr(((((-1.0)*r11*x1221))+((r10*x1220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1221))+(((-1.0)*r00*x1220))), ((((-1.0)*r11*x1221))+((r10*x1220))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1222=IKcos(j0);
IkReal x1223=IKsin(j0);
IkReal x1224=(cj5*sj4);
IkReal x1225=((1.0)*sj5);
IkReal x1226=(cj5*r11);
IkReal x1227=(cj5*r01);
IkReal x1228=((0.138)*sj5);
IkReal x1229=(cj2*sj1);
IkReal x1230=(cj1*x1222);
IkReal x1231=(cj1*x1223);
evalcond[0]=(x1223+((r00*x1224))+(((-1.0)*r01*sj4*x1225)));
evalcond[1]=((((-1.0)*x1222))+((r10*x1224))+(((-1.0)*r11*sj4*x1225)));
evalcond[2]=((((-1.0)*r00*x1225))+(((-1.0)*x1227))+((sj2*x1230))+((x1222*x1229)));
evalcond[3]=((((-1.0)*x1226))+((x1223*x1229))+((sj2*x1231))+(((-1.0)*r10*x1225)));
evalcond[4]=((((0.179)*x1223))+((r00*x1228))+(((-1.0)*px))+(((-0.85)*x1230))+(((0.138)*x1227)));
evalcond[5]=((((-1.0)*py))+((r10*x1228))+(((-0.179)*x1222))+(((-0.85)*x1231))+(((0.138)*x1226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1232=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1232);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1232);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(r22,-1);
if(!x1233.valid){
continue;
}
sj4array[0]=((-1.0)*(x1233.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1234=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1234);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1234);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1236 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1236.valid){
continue;
}
IkReal x1235=x1236.value;
j5array[0]=((-1.0)*x1235);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1235)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1237=(cj5*sj4);
IkReal x1238=(sj4*sj5);
if( IKabs((((r01*x1238))+(((-1.0)*r00*x1237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1238))+((r10*x1237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1238))+(((-1.0)*r00*x1237))))+IKsqr(((((-1.0)*r11*x1238))+((r10*x1237))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1238))+(((-1.0)*r00*x1237))), ((((-1.0)*r11*x1238))+((r10*x1237))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1239=IKcos(j0);
IkReal x1240=IKsin(j0);
IkReal x1241=(cj5*sj4);
IkReal x1242=(cj5*r01);
IkReal x1243=(cj5*r11);
IkReal x1244=(r00*sj5);
IkReal x1245=(r10*sj5);
IkReal x1246=(cj2*sj1);
IkReal x1247=((1.0)*sj4*sj5);
IkReal x1248=(cj1*x1239);
IkReal x1249=(cj1*x1240);
evalcond[0]=(x1240+((r00*x1241))+(((-1.0)*r01*x1247)));
evalcond[1]=((((-1.0)*x1239))+(((-1.0)*r11*x1247))+((r10*x1241)));
evalcond[2]=(x1242+x1244+((x1239*x1246))+((sj2*x1248)));
evalcond[3]=(x1243+x1245+((x1240*x1246))+((sj2*x1249)));
evalcond[4]=((((-0.85)*x1248))+(((0.138)*x1242))+(((0.138)*x1244))+(((-1.0)*px))+(((0.179)*x1240)));
evalcond[5]=((((-0.85)*x1249))+(((0.138)*x1243))+(((0.138)*x1245))+(((-1.0)*py))+(((-0.179)*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1250=IKPowWithIntegerCheck(cj3,-1);
if(!x1250.valid){
continue;
}
CheckValue<IkReal> x1251=IKPowWithIntegerCheck(r22,-1);
if(!x1251.valid){
continue;
}
sj4array[0]=((x1250.value)*(x1251.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1252=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1252);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1252);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1253=((4.0)*r01);
IkReal x1254=((16.0)*r00);
IkReal x1255=(cj3*sj2);
IkReal x1256=((8.0)*r00);
IkReal x1257=(cj2*cj3);
IkReal x1258=(cj4*r01);
IkReal x1259=((16.0)*cj1);
IkReal x1260=((8.0)*sj1);
IkReal x1261=((16.0)*sj1);
IkReal x1262=((8.0)*cj1);
IkReal x1263=(sj2*sj3);
IkReal x1264=(cj2*sj3);
IkReal x1265=(sj1*x1264);
IkReal x1266=((4.0)*cj4*r00);
IkReal x1267=(((cj1*x1253*x1263))+((x1253*x1265))+((sj1*x1263*x1266))+((sj1*x1253*x1255)));
IkReal x1268=(((cj1*x1253*x1257))+((cj1*x1255*x1266))+((cj1*x1264*x1266))+((sj1*x1257*x1266)));
IkReal x1269=(x1268+(((-1.0)*x1267)));
IkReal x1270=((((-1.0)*x1258*x1260*x1263))+((cj1*x1256*x1263))+((x1256*x1265))+((x1258*x1262*x1264))+(((-1.0)*cj1*x1256*x1257))+((x1255*x1258*x1262))+((sj1*x1255*x1256))+((x1257*x1258*x1260)));
IkReal x1271=(x1267+(((-1.0)*x1268)));
op[0]=x1269;
op[1]=x1270;
op[2]=x1269;
op[3]=((((-1.0)*x1258*x1261*x1263))+((sj1*x1254*x1255))+((x1254*x1265))+((x1258*x1259*x1264))+((x1255*x1258*x1259))+((cj1*x1254*x1263))+((x1257*x1258*x1261))+(((-1.0)*cj1*x1254*x1257)));
op[4]=x1271;
op[5]=x1270;
op[6]=x1271;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1272=(cj5*sj4);
IkReal x1273=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1272))+((r01*x1273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1272))+(((-1.0)*r11*x1273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1272))+((r01*x1273))))+IKsqr((((r10*x1272))+(((-1.0)*r11*x1273))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1272))+((r01*x1273))), (((r10*x1272))+(((-1.0)*r11*x1273))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1274=IKcos(j0);
IkReal x1275=IKsin(j0);
IkReal x1276=(sj1*sj2);
IkReal x1277=((1.0)*cj5);
IkReal x1278=(cj3*r11);
IkReal x1279=(cj4*r10);
IkReal x1280=(cj4*r00);
IkReal x1281=(cj5*sj4);
IkReal x1282=((1.0)*sj5);
IkReal x1283=(r01*sj3);
IkReal x1284=(cj5*r11);
IkReal x1285=(cj3*r01);
IkReal x1286=(cj1*cj2);
IkReal x1287=(cj4*sj5);
IkReal x1288=(sj3*sj5);
IkReal x1289=((0.138)*sj5);
IkReal x1290=(cj2*sj1);
IkReal x1291=((0.712)*x1274);
IkReal x1292=(cj1*x1274);
IkReal x1293=((0.712)*x1275);
IkReal x1294=(cj1*x1275);
evalcond[0]=(x1275+(((-1.0)*r01*sj4*x1282))+((r00*x1281)));
evalcond[1]=(((r10*x1281))+(((-1.0)*r11*sj4*x1282))+(((-1.0)*x1274)));
evalcond[2]=(((x1285*x1287))+((cj5*x1283))+((x1274*x1276))+((r00*x1288))+(((-1.0)*cj3*x1277*x1280))+(((-1.0)*x1274*x1286)));
evalcond[3]=((((-1.0)*cj3*x1277*x1279))+((x1275*x1276))+((x1278*x1287))+((r10*x1288))+(((-1.0)*x1275*x1286))+((sj3*x1284)));
evalcond[4]=(((sj2*x1292))+((x1274*x1290))+(((-1.0)*sj3*x1277*x1280))+(((-1.0)*x1277*x1285))+((x1283*x1287))+(((-1.0)*cj3*r00*x1282)));
evalcond[5]=(((sj2*x1294))+(((-1.0)*sj3*x1277*x1279))+(((-1.0)*x1277*x1278))+(((-1.0)*cj3*r10*x1282))+((r11*sj3*x1287))+((x1275*x1290)));
evalcond[6]=(((x1276*x1291))+(((0.138)*cj5*r01))+(((-1.0)*x1286*x1291))+((r00*x1289))+(((0.179)*x1275))+(((-1.0)*px))+(((-0.85)*x1292)));
evalcond[7]=(((x1276*x1293))+(((-1.0)*x1286*x1293))+(((0.138)*x1284))+((r10*x1289))+(((-1.0)*py))+(((-0.85)*x1294))+(((-0.179)*x1274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1295=IKPowWithIntegerCheck(r22,-1);
if(!x1295.valid){
continue;
}
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(sj3,-1);
if(!x1296.valid){
continue;
}
sj4array[0]=((x1295.value)*(x1296.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1297=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1297);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1297);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1298=((4.0)*r01);
IkReal x1299=((16.0)*r00);
IkReal x1300=(cj3*sj2);
IkReal x1301=((8.0)*r00);
IkReal x1302=(cj2*cj3);
IkReal x1303=(cj4*r01);
IkReal x1304=((16.0)*cj1);
IkReal x1305=((8.0)*sj1);
IkReal x1306=((16.0)*sj1);
IkReal x1307=((8.0)*cj1);
IkReal x1308=(sj2*sj3);
IkReal x1309=(cj2*sj3);
IkReal x1310=(sj1*x1309);
IkReal x1311=((4.0)*cj4*r00);
IkReal x1312=(((x1298*x1310))+((cj1*x1298*x1308))+((sj1*x1298*x1300))+((sj1*x1308*x1311)));
IkReal x1313=(((sj1*x1302*x1311))+((cj1*x1298*x1302))+((cj1*x1309*x1311))+((cj1*x1300*x1311)));
IkReal x1314=(x1313+(((-1.0)*x1312)));
IkReal x1315=(((x1303*x1307*x1309))+((cj1*x1301*x1308))+((x1302*x1303*x1305))+((x1300*x1303*x1307))+(((-1.0)*cj1*x1301*x1302))+((sj1*x1300*x1301))+((x1301*x1310))+(((-1.0)*x1303*x1305*x1308)));
IkReal x1316=(x1312+(((-1.0)*x1313)));
op[0]=x1314;
op[1]=x1315;
op[2]=x1314;
op[3]=(((cj1*x1299*x1308))+((x1302*x1303*x1306))+((x1300*x1303*x1304))+((x1303*x1304*x1309))+(((-1.0)*x1303*x1306*x1308))+(((-1.0)*cj1*x1299*x1302))+((sj1*x1299*x1300))+((x1299*x1310)));
op[4]=x1316;
op[5]=x1315;
op[6]=x1316;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1317=(cj5*sj4);
IkReal x1318=(sj4*sj5);
if( IKabs((((r01*x1318))+(((-1.0)*r00*x1317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1318))+((r10*x1317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1318))+(((-1.0)*r00*x1317))))+IKsqr(((((-1.0)*r11*x1318))+((r10*x1317))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1318))+(((-1.0)*r00*x1317))), ((((-1.0)*r11*x1318))+((r10*x1317))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1319=IKcos(j0);
IkReal x1320=IKsin(j0);
IkReal x1321=(sj1*sj2);
IkReal x1322=((1.0)*cj5);
IkReal x1323=(cj3*r11);
IkReal x1324=(cj4*r10);
IkReal x1325=(cj4*r00);
IkReal x1326=(cj5*sj4);
IkReal x1327=((1.0)*sj5);
IkReal x1328=(r01*sj3);
IkReal x1329=(cj5*r11);
IkReal x1330=(cj3*r01);
IkReal x1331=(cj1*cj2);
IkReal x1332=(cj4*sj5);
IkReal x1333=(sj3*sj5);
IkReal x1334=((0.138)*sj5);
IkReal x1335=(cj2*sj1);
IkReal x1336=((0.712)*x1319);
IkReal x1337=(cj1*x1319);
IkReal x1338=((0.712)*x1320);
IkReal x1339=(cj1*x1320);
evalcond[0]=(x1320+(((-1.0)*r01*sj4*x1327))+((r00*x1326)));
evalcond[1]=((((-1.0)*x1319))+((r10*x1326))+(((-1.0)*r11*sj4*x1327)));
evalcond[2]=((((-1.0)*cj3*x1322*x1325))+((cj5*x1328))+((r00*x1333))+(((-1.0)*x1319*x1331))+((x1319*x1321))+((x1330*x1332)));
evalcond[3]=((((-1.0)*cj3*x1322*x1324))+((sj3*x1329))+((x1320*x1321))+((r10*x1333))+(((-1.0)*x1320*x1331))+((x1323*x1332)));
evalcond[4]=((((-1.0)*x1322*x1330))+((x1319*x1335))+((sj2*x1337))+((x1328*x1332))+(((-1.0)*sj3*x1322*x1325))+(((-1.0)*cj3*r00*x1327)));
evalcond[5]=(((r11*sj3*x1332))+(((-1.0)*x1322*x1323))+((sj2*x1339))+(((-1.0)*sj3*x1322*x1324))+(((-1.0)*cj3*r10*x1327))+((x1320*x1335)));
evalcond[6]=((((0.138)*cj5*r01))+(((-0.85)*x1337))+((r00*x1334))+(((0.179)*x1320))+(((-1.0)*px))+(((-1.0)*x1331*x1336))+((x1321*x1336)));
evalcond[7]=((((-0.85)*x1339))+(((-1.0)*py))+((r10*x1334))+(((-1.0)*x1331*x1338))+((x1321*x1338))+(((0.138)*x1329))+(((-0.179)*x1319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1342 = IKatan2WithCheck(IkReal(((0.138)*r21)),IkReal(((0.138)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1342.valid){
continue;
}
IkReal x1340=((1.0)*(x1342.value));
if((((((0.019044)*(r20*r20)))+(((0.019044)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.019044)*(r20*r20)))+(((0.019044)*(r21*r21)))))),-1);
if(!x1343.valid){
continue;
}
if( (((-1.0)*(x1343.value)*(((((-0.85)*sj1))+(((-0.712)*cj1*sj2))+(((-0.712)*cj2*sj1))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1343.value)*(((((-0.85)*sj1))+(((-0.712)*cj1*sj2))+(((-0.712)*cj2*sj1))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1341=((-1.0)*(IKasin(((-1.0)*(x1343.value)*(((((-0.85)*sj1))+(((-0.712)*cj1*sj2))+(((-0.712)*cj2*sj1))+(((-1.0)*pz))))))));
j5array[0]=((((-1.0)*x1341))+(((-1.0)*x1340)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1341))+(((-1.0)*x1340)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1344=cj5*cj5;
IkReal x1345=r21*r21;
IkReal x1346=(cj3*x1344);
IkReal x1347=((((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*(r22*r22)))+((x1346*(r20*r20)))+(((-1.0)*x1345*x1346))+((cj3*x1345)));
j4eval[0]=x1347;
j4eval[1]=IKsign(x1347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1348=cj5*cj5;
IkReal x1349=r21*r21;
IkReal x1350=(sj3*x1348);
IkReal x1351=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1350*(r20*r20)))+(((-1.0)*x1349*x1350))+((sj3*x1349)));
j4eval[0]=x1351;
j4eval[1]=IKsign(x1351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1352=cj2*cj2;
IkReal x1353=cj1*cj1;
IkReal x1354=(cj2*x1353);
IkReal x1355=(cj1*sj1*sj2);
IkReal x1356=(x1352*x1353);
j0eval[0]=((-2.50044072074078)+(((-1.0)*x1353))+(((4.7035944255785)*cj2*x1355))+(((2.35179721278925)*x1352))+(((-5.61524615413164)*x1354))+(((5.61524615413164)*x1355))+(((-4.7035944255785)*x1356)));
j0eval[1]=IKsign(((-538985.0)+(((-1013888.0)*x1356))+(((1013888.0)*cj2*x1355))+(((506944.0)*x1352))+(((1210400.0)*x1355))+(((-215556.0)*x1353))+(((-1210400.0)*x1354))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1357=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1357;
j0eval[1]=IKsign(x1357);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1358=cj5*cj5;
IkReal x1359=r21*r21;
IkReal x1360=(cj2*sj1);
IkReal x1361=(cj1*sj2);
IkReal x1362=((1.0)*r22);
IkReal x1363=(r21*sj5);
IkReal x1364=((1.0)*cj5*r20);
IkReal x1365=(x1359+(((-2.0)*cj5*r20*x1363))+((x1358*(r20*r20)))+(r22*r22)+(((-1.0)*x1358*x1359)));
j4eval[0]=x1365;
j4eval[1]=((IKabs(((((-1.0)*x1361*x1362))+(((-1.0)*x1360*x1362)))))+(IKabs((((x1361*x1363))+((x1360*x1363))+(((-1.0)*x1361*x1364))+(((-1.0)*x1360*x1364))))));
j4eval[2]=IKsign(x1365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1366=cj1*cj1;
IkReal x1367=(cj2*sj2);
IkReal x1368=(cj1*sj1);
j0eval[0]=(x1367+x1368+(((-2.0)*x1368*(cj2*cj2)))+(((-1.1938202247191)*cj2*x1368))+(((-2.0)*x1366*x1367))+(((-1.1938202247191)*sj2*x1366)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.0724143720278249)*px))+(((-0.631906419594763)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0724143720278249)*py))+(((-0.631906419594763)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.0724143720278249)*px))+(((-0.631906419594763)*py))))+IKsqr(((((-0.0724143720278249)*py))+(((-0.631906419594763)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.0724143720278249)*px))+(((-0.631906419594763)*py))), ((((-0.0724143720278249)*py))+(((-0.631906419594763)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1369=IKsin(j0);
IkReal x1370=IKcos(j0);
evalcond[0]=((((-1.562)*x1370))+(((-1.0)*px))+(((0.179)*x1369)));
evalcond[1]=((((-1.562)*x1369))+(((-1.0)*py))+(((-0.179)*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1371=((1.0)*sj5);
IkReal x1372=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1371)));
j4eval[0]=x1372;
j4eval[1]=IKsign(x1372);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1371))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1373=((1.0)*sj5);
IkReal x1374=((((-1.0)*r00*x1373))+(((-1.0)*cj5*r01)));
j4eval[0]=x1374;
j4eval[1]=IKsign(x1374);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1373))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1375=cj5*cj5;
IkReal x1376=((1.0)*r21);
IkReal x1377=(cj5*sj5);
IkReal x1378=((1.0)*r20);
IkReal x1379=((((-1.0)*r01*x1377*x1378))+((r00*r20*x1375))+((r01*r21))+((r02*r22))+(((-1.0)*r00*x1376*x1377))+(((-1.0)*r01*x1375*x1376)));
j4eval[0]=x1379;
j4eval[1]=IKsign(x1379);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x1378))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1380=cj5*cj5;
IkReal x1381=((1.0)*r21);
IkReal x1382=(cj5*sj5);
IkReal x1383=((1.0)*r20);
CheckValue<IkReal> x1384 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1383)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1384.valid){
continue;
}
CheckValue<IkReal> x1385=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1382*x1383))+((r01*r21))+(((-1.0)*r01*x1380*x1381))+((r02*r22))+(((-1.0)*r00*x1381*x1382))+((r00*r20*x1380)))),-1);
if(!x1385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1384.value)+(((1.5707963267949)*(x1385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1386=IKsin(j4);
IkReal x1387=IKcos(j4);
IkReal x1388=((1.0)*cj0);
IkReal x1389=(cj5*r00);
IkReal x1390=(r11*sj5);
IkReal x1391=(r01*sj5);
IkReal x1392=(cj5*r20);
IkReal x1393=(r21*sj5);
IkReal x1394=(cj5*r10);
IkReal x1395=((1.0)*x1387);
IkReal x1396=((1.0)*x1386);
evalcond[0]=((((-1.0)*x1393*x1396))+((x1386*x1392))+(((-1.0)*r22*x1395)));
evalcond[1]=((((-1.0)*x1392*x1395))+((x1387*x1393))+(((-1.0)*r22*x1396)));
evalcond[2]=(sj0+(((-1.0)*r02*x1395))+(((-1.0)*x1391*x1396))+((x1386*x1389)));
evalcond[3]=((((-1.0)*x1388))+(((-1.0)*r12*x1395))+(((-1.0)*x1390*x1396))+((x1386*x1394)));
evalcond[4]=((((-1.0)*x1388))+(((-1.0)*r02*x1396))+(((-1.0)*x1389*x1395))+((x1387*x1391)));
evalcond[5]=((((-1.0)*r12*x1396))+(((-1.0)*sj0))+(((-1.0)*x1394*x1395))+((x1387*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1397=((1.0)*sj5);
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1397))+(((-1.0)*cj5*r01)))),-1);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1397))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1398.value)))+(x1399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1400=IKsin(j4);
IkReal x1401=IKcos(j4);
IkReal x1402=((1.0)*cj0);
IkReal x1403=(cj5*r00);
IkReal x1404=(r11*sj5);
IkReal x1405=(r01*sj5);
IkReal x1406=(cj5*r20);
IkReal x1407=(r21*sj5);
IkReal x1408=(cj5*r10);
IkReal x1409=((1.0)*x1401);
IkReal x1410=((1.0)*x1400);
evalcond[0]=((((-1.0)*r22*x1409))+(((-1.0)*x1407*x1410))+((x1400*x1406)));
evalcond[1]=((((-1.0)*r22*x1410))+(((-1.0)*x1406*x1409))+((x1401*x1407)));
evalcond[2]=(sj0+(((-1.0)*r02*x1409))+(((-1.0)*x1405*x1410))+((x1400*x1403)));
evalcond[3]=((((-1.0)*r12*x1409))+(((-1.0)*x1402))+(((-1.0)*x1404*x1410))+((x1400*x1408)));
evalcond[4]=((((-1.0)*r02*x1410))+(((-1.0)*x1402))+(((-1.0)*x1403*x1409))+((x1401*x1405)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1410))+((x1401*x1404))+(((-1.0)*x1408*x1409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1411=((1.0)*sj5);
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1411))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
CheckValue<IkReal> x1413=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1411)))),-1);
if(!x1413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1412.value)+(((1.5707963267949)*(x1413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1414=IKsin(j4);
IkReal x1415=IKcos(j4);
IkReal x1416=((1.0)*cj0);
IkReal x1417=(cj5*r00);
IkReal x1418=(r11*sj5);
IkReal x1419=(r01*sj5);
IkReal x1420=(cj5*r20);
IkReal x1421=(r21*sj5);
IkReal x1422=(cj5*r10);
IkReal x1423=((1.0)*x1415);
IkReal x1424=((1.0)*x1414);
evalcond[0]=((((-1.0)*x1421*x1424))+((x1414*x1420))+(((-1.0)*r22*x1423)));
evalcond[1]=(((x1415*x1421))+(((-1.0)*x1420*x1423))+(((-1.0)*r22*x1424)));
evalcond[2]=(sj0+(((-1.0)*x1419*x1424))+(((-1.0)*r02*x1423))+((x1414*x1417)));
evalcond[3]=((((-1.0)*x1416))+((x1414*x1422))+(((-1.0)*x1418*x1424))+(((-1.0)*r12*x1423)));
evalcond[4]=(((x1415*x1419))+(((-1.0)*x1416))+(((-1.0)*x1417*x1423))+(((-1.0)*r02*x1424)));
evalcond[5]=(((x1415*x1418))+(((-1.0)*sj0))+(((-1.0)*r12*x1424))+(((-1.0)*x1422*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.5039639815993)*px))+(((-2.70138005285309)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.5039639815993)*py))+(((-2.70138005285309)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.5039639815993)*px))+(((-2.70138005285309)*py))))+IKsqr(((((-3.5039639815993)*py))+(((-2.70138005285309)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.5039639815993)*px))+(((-2.70138005285309)*py))), ((((-3.5039639815993)*py))+(((-2.70138005285309)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1425=IKsin(j0);
IkReal x1426=IKcos(j0);
evalcond[0]=((((0.179)*x1425))+(((-1.0)*px))+(((-0.138)*x1426)));
evalcond[1]=((((-0.179)*x1426))+(((-1.0)*py))+(((-0.138)*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1427=((1.0)*sj5);
IkReal x1428=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1427)));
j4eval[0]=x1428;
j4eval[1]=IKsign(x1428);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1427))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1429=cj5*cj5;
IkReal x1430=((1.0)*r21);
IkReal x1431=(cj5*sj5);
IkReal x1432=((((-1.0)*r01*x1429*x1430))+((r00*r20*x1429))+((r01*r21))+(((-1.0)*r01*r20*x1431))+(((-1.0)*r00*x1430*x1431))+((r02*r22)));
j4eval[0]=x1432;
j4eval[1]=IKsign(x1432);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x1430))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1433=cj5*cj5;
IkReal x1434=(cj5*r20);
IkReal x1435=((1.0)*sj5);
IkReal x1436=(r11*r21);
IkReal x1437=(((r10*r20*x1433))+((r12*r22))+(((-1.0)*r11*x1434*x1435))+x1436+(((-1.0)*x1433*x1436))+(((-1.0)*cj5*r10*r21*x1435)));
j4eval[0]=x1437;
j4eval[1]=IKsign(x1437);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1435))+((sj0*x1434))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1438=cj5*cj5;
IkReal x1439=(cj5*r20);
IkReal x1440=((1.0)*sj5);
IkReal x1441=(r11*r21);
CheckValue<IkReal> x1442=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1440))+((r10*r20*x1438))+(((-1.0)*x1438*x1441))+((r12*r22))+(((-1.0)*r11*x1439*x1440))+x1441)),-1);
if(!x1442.valid){
continue;
}
CheckValue<IkReal> x1443 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1439))+(((-1.0)*r21*sj0*x1440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1442.value)))+(x1443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1444=IKsin(j4);
IkReal x1445=IKcos(j4);
IkReal x1446=(cj5*r00);
IkReal x1447=(r11*sj5);
IkReal x1448=(r01*sj5);
IkReal x1449=(cj5*r20);
IkReal x1450=(r21*sj5);
IkReal x1451=(cj5*r10);
IkReal x1452=((1.0)*x1445);
IkReal x1453=((1.0)*x1444);
evalcond[0]=(((x1444*x1449))+(((-1.0)*r22*x1452))+(((-1.0)*x1450*x1453)));
evalcond[1]=(((x1445*x1450))+(((-1.0)*r22*x1453))+(((-1.0)*x1449*x1452)));
evalcond[2]=(((x1444*x1446))+sj0+(((-1.0)*x1448*x1453))+(((-1.0)*r02*x1452)));
evalcond[3]=(((x1445*x1448))+cj0+(((-1.0)*r02*x1453))+(((-1.0)*x1446*x1452)));
evalcond[4]=(((x1445*x1447))+sj0+(((-1.0)*x1451*x1452))+(((-1.0)*r12*x1453)));
evalcond[5]=((((-1.0)*x1447*x1453))+(((-1.0)*cj0))+((x1444*x1451))+(((-1.0)*r12*x1452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1454=cj5*cj5;
IkReal x1455=((1.0)*r21);
IkReal x1456=(cj5*sj5);
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1454*x1455))+((r01*r21))+(((-1.0)*r01*r20*x1456))+((r00*r20*x1454))+(((-1.0)*r00*x1455*x1456))+((r02*r22)))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1455))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1457.value)))+(x1458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1459=IKsin(j4);
IkReal x1460=IKcos(j4);
IkReal x1461=(cj5*r00);
IkReal x1462=(r11*sj5);
IkReal x1463=(r01*sj5);
IkReal x1464=(cj5*r20);
IkReal x1465=(r21*sj5);
IkReal x1466=(cj5*r10);
IkReal x1467=((1.0)*x1460);
IkReal x1468=((1.0)*x1459);
evalcond[0]=(((x1459*x1464))+(((-1.0)*r22*x1467))+(((-1.0)*x1465*x1468)));
evalcond[1]=((((-1.0)*r22*x1468))+(((-1.0)*x1464*x1467))+((x1460*x1465)));
evalcond[2]=(sj0+(((-1.0)*r02*x1467))+((x1459*x1461))+(((-1.0)*x1463*x1468)));
evalcond[3]=((((-1.0)*r02*x1468))+cj0+((x1460*x1463))+(((-1.0)*x1461*x1467)));
evalcond[4]=(sj0+(((-1.0)*x1466*x1467))+((x1460*x1462))+(((-1.0)*r12*x1468)));
evalcond[5]=(((x1459*x1466))+(((-1.0)*x1462*x1468))+(((-1.0)*r12*x1467))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1469=((1.0)*sj5);
CheckValue<IkReal> x1470 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1469))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1470.valid){
continue;
}
CheckValue<IkReal> x1471=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1469)))),-1);
if(!x1471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1470.value)+(((1.5707963267949)*(x1471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1472=IKsin(j4);
IkReal x1473=IKcos(j4);
IkReal x1474=(cj5*r00);
IkReal x1475=(r11*sj5);
IkReal x1476=(r01*sj5);
IkReal x1477=(cj5*r20);
IkReal x1478=(r21*sj5);
IkReal x1479=(cj5*r10);
IkReal x1480=((1.0)*x1473);
IkReal x1481=((1.0)*x1472);
evalcond[0]=(((x1472*x1477))+(((-1.0)*r22*x1480))+(((-1.0)*x1478*x1481)));
evalcond[1]=(((x1473*x1478))+(((-1.0)*r22*x1481))+(((-1.0)*x1477*x1480)));
evalcond[2]=(sj0+((x1472*x1474))+(((-1.0)*r02*x1480))+(((-1.0)*x1476*x1481)));
evalcond[3]=(cj0+((x1473*x1476))+(((-1.0)*r02*x1481))+(((-1.0)*x1474*x1480)));
evalcond[4]=(sj0+(((-1.0)*x1479*x1480))+(((-1.0)*r12*x1481))+((x1473*x1475)));
evalcond[5]=((((-1.0)*r12*x1480))+((x1472*x1479))+(((-1.0)*x1475*x1481))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1482=IKsin(j0);
IkReal x1483=IKcos(j0);
IkReal x1484=((1.0)*cj5);
IkReal x1485=((0.138)*sj5);
IkReal x1486=((1.0)*sj5);
IkReal x1487=((0.138)*cj5);
evalcond[0]=((((-1.0)*r01*x1484))+(((-1.0)*r00*x1486))+x1483);
evalcond[1]=((((-1.0)*r11*x1484))+x1482+(((-1.0)*r10*x1486)));
evalcond[2]=(((r01*x1487))+((r00*x1485))+(((0.179)*x1482))+(((-1.0)*px)));
evalcond[3]=((((-0.179)*x1483))+((r10*x1485))+((r11*x1487))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1488=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1488;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1489=((1.0)*sj5);
IkReal x1490=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1489)));
j4eval[0]=x1490;
j4eval[1]=IKsign(x1490);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1489))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1491=r21*r21;
IkReal x1492=cj5*cj5;
IkReal x1493=(cj5*r20);
IkReal x1494=(r21*sj5);
IkReal x1495=((((-1.0)*x1491))+(((2.0)*x1493*x1494))+((x1491*x1492))+(((-1.0)*(r22*r22)))+(((-1.0)*x1492*(r20*r20))));
j4eval[0]=x1495;
j4eval[1]=((IKabs(((((-1.0)*x1494))+x1493)))+(IKabs(r22)));
j4eval[2]=IKsign(x1495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1496=r21*r21;
IkReal x1497=cj5*cj5;
IkReal x1498=(cj5*r20);
IkReal x1499=(r21*sj5);
CheckValue<IkReal> x1500=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1496))+((x1496*x1497))+(((-1.0)*(r22*r22)))+(((2.0)*x1498*x1499))+(((-1.0)*x1497*(r20*r20))))),-1);
if(!x1500.valid){
continue;
}
CheckValue<IkReal> x1501 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x1499))+x1498)),IKFAST_ATAN2_MAGTHRESH);
if(!x1501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1500.value)))+(x1501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1502=IKsin(j4);
IkReal x1503=IKcos(j4);
IkReal x1504=(cj5*r00);
IkReal x1505=(r11*sj5);
IkReal x1506=(r01*sj5);
IkReal x1507=(cj5*r20);
IkReal x1508=(cj5*r10);
IkReal x1509=(r21*sj5);
IkReal x1510=((1.0)*x1503);
IkReal x1511=((1.0)*x1502);
evalcond[0]=((((-1.0)*r22*x1510))+(((-1.0)*x1509*x1511))+((x1502*x1507)));
evalcond[1]=((((-1.0)*x1504*x1510))+(((-1.0)*r02*x1511))+((x1503*x1506)));
evalcond[2]=(((x1503*x1505))+(((-1.0)*x1508*x1510))+(((-1.0)*r12*x1511)));
evalcond[3]=(sj0+(((-1.0)*x1506*x1511))+(((-1.0)*r02*x1510))+((x1502*x1504)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1511))+(((-1.0)*x1507*x1510))+((x1503*x1509)));
evalcond[5]=(((x1502*x1508))+(((-1.0)*x1505*x1511))+(((-1.0)*cj0))+(((-1.0)*r12*x1510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1512=((1.0)*sj5);
CheckValue<IkReal> x1513 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1513.valid){
continue;
}
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1512)))),-1);
if(!x1514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1513.value)+(((1.5707963267949)*(x1514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1515=IKsin(j4);
IkReal x1516=IKcos(j4);
IkReal x1517=(cj5*r00);
IkReal x1518=(r11*sj5);
IkReal x1519=(r01*sj5);
IkReal x1520=(cj5*r20);
IkReal x1521=(cj5*r10);
IkReal x1522=(r21*sj5);
IkReal x1523=((1.0)*x1516);
IkReal x1524=((1.0)*x1515);
evalcond[0]=((((-1.0)*r22*x1523))+(((-1.0)*x1522*x1524))+((x1515*x1520)));
evalcond[1]=((((-1.0)*r02*x1524))+((x1516*x1519))+(((-1.0)*x1517*x1523)));
evalcond[2]=((((-1.0)*r12*x1524))+((x1516*x1518))+(((-1.0)*x1521*x1523)));
evalcond[3]=(sj0+(((-1.0)*x1519*x1524))+(((-1.0)*r02*x1523))+((x1515*x1517)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1524))+((x1516*x1522))+(((-1.0)*x1520*x1523)));
evalcond[5]=((((-1.0)*r12*x1523))+(((-1.0)*x1518*x1524))+((x1515*x1521))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1525.valid){
continue;
}
CheckValue<IkReal> x1526 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1525.value)))+(x1526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1527=IKsin(j4);
IkReal x1528=IKcos(j4);
IkReal x1529=(cj5*r00);
IkReal x1530=(r11*sj5);
IkReal x1531=(r01*sj5);
IkReal x1532=(cj5*r20);
IkReal x1533=(cj5*r10);
IkReal x1534=(r21*sj5);
IkReal x1535=((1.0)*x1528);
IkReal x1536=((1.0)*x1527);
evalcond[0]=((((-1.0)*r22*x1535))+((x1527*x1532))+(((-1.0)*x1534*x1536)));
evalcond[1]=((((-1.0)*x1529*x1535))+((x1528*x1531))+(((-1.0)*r02*x1536)));
evalcond[2]=((((-1.0)*r12*x1536))+((x1528*x1530))+(((-1.0)*x1533*x1535)));
evalcond[3]=(sj0+(((-1.0)*x1531*x1536))+(((-1.0)*r02*x1535))+((x1527*x1529)));
evalcond[4]=((-1.0)+((x1528*x1534))+(((-1.0)*r22*x1536))+(((-1.0)*x1532*x1535)));
evalcond[5]=((((-1.0)*r12*x1535))+(((-1.0)*x1530*x1536))+((x1527*x1533))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.32100151210145)*py))+(((0.332105717227752)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.32100151210145)*px))+(((-0.332105717227752)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.32100151210145)*py))+(((0.332105717227752)*px))))+IKsqr(((((1.32100151210145)*px))+(((-0.332105717227752)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.32100151210145)*py))+(((0.332105717227752)*px))), ((((1.32100151210145)*px))+(((-0.332105717227752)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1537=IKsin(j0);
IkReal x1538=IKcos(j0);
evalcond[0]=((((0.712)*x1538))+(((-1.0)*px))+(((0.179)*x1537)));
evalcond[1]=((((-0.179)*x1538))+(((0.712)*x1537))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1539=((1.0)*sj5);
IkReal x1540=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1539)));
j4eval[0]=x1540;
j4eval[1]=IKsign(x1540);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1539))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1541=cj5*cj5;
IkReal x1542=((1.0)*r21);
IkReal x1543=(cj5*sj5);
IkReal x1544=((((-1.0)*r00*x1542*x1543))+((r01*r21))+((r00*r20*x1541))+(((-1.0)*r01*x1541*x1542))+(((-1.0)*r01*r20*x1543))+((r02*r22)));
j4eval[0]=x1544;
j4eval[1]=IKsign(x1544);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1542)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1545=cj5*cj5;
IkReal x1546=(cj5*r20);
IkReal x1547=((1.0)*sj5);
IkReal x1548=(r11*r21);
IkReal x1549=((((-1.0)*r11*x1546*x1547))+(((-1.0)*cj5*r10*r21*x1547))+((r12*r22))+x1548+((r10*r20*x1545))+(((-1.0)*x1545*x1548)));
j4eval[0]=x1549;
j4eval[1]=IKsign(x1549);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1546))+(((-1.0)*r21*sj0*x1547))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1550=cj5*cj5;
IkReal x1551=(cj5*r20);
IkReal x1552=((1.0)*sj5);
IkReal x1553=(r11*r21);
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1550*x1553))+(((-1.0)*cj5*r10*r21*x1552))+((r12*r22))+x1553+((r10*r20*x1550))+(((-1.0)*r11*x1551*x1552)))),-1);
if(!x1554.valid){
continue;
}
CheckValue<IkReal> x1555 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1552))+((sj0*x1551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1554.value)))+(x1555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1556=IKsin(j4);
IkReal x1557=IKcos(j4);
IkReal x1558=(cj5*r00);
IkReal x1559=(r11*sj5);
IkReal x1560=(r01*sj5);
IkReal x1561=(cj5*r20);
IkReal x1562=(r21*sj5);
IkReal x1563=(cj5*r10);
IkReal x1564=((1.0)*x1557);
IkReal x1565=((1.0)*x1556);
evalcond[0]=(((x1556*x1561))+(((-1.0)*x1562*x1565))+(((-1.0)*r22*x1564)));
evalcond[1]=((((-1.0)*r22*x1565))+((x1557*x1562))+(((-1.0)*x1561*x1564)));
evalcond[2]=(sj0+(((-1.0)*r02*x1564))+((x1556*x1558))+(((-1.0)*x1560*x1565)));
evalcond[3]=((((-1.0)*r02*x1565))+cj0+((x1557*x1560))+(((-1.0)*x1558*x1564)));
evalcond[4]=(sj0+((x1557*x1559))+(((-1.0)*x1563*x1564))+(((-1.0)*r12*x1565)));
evalcond[5]=((((-1.0)*x1559*x1565))+((x1556*x1563))+(((-1.0)*r12*x1564))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1566=cj5*cj5;
IkReal x1567=((1.0)*r21);
IkReal x1568=(cj5*sj5);
CheckValue<IkReal> x1569=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1566*x1567))+((r01*r21))+((r00*r20*x1566))+(((-1.0)*r00*x1567*x1568))+(((-1.0)*r01*r20*x1568))+((r02*r22)))),-1);
if(!x1569.valid){
continue;
}
CheckValue<IkReal> x1570 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1569.value)))+(x1570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1571=IKsin(j4);
IkReal x1572=IKcos(j4);
IkReal x1573=(cj5*r00);
IkReal x1574=(r11*sj5);
IkReal x1575=(r01*sj5);
IkReal x1576=(cj5*r20);
IkReal x1577=(r21*sj5);
IkReal x1578=(cj5*r10);
IkReal x1579=((1.0)*x1572);
IkReal x1580=((1.0)*x1571);
evalcond[0]=(((x1571*x1576))+(((-1.0)*x1577*x1580))+(((-1.0)*r22*x1579)));
evalcond[1]=((((-1.0)*x1576*x1579))+((x1572*x1577))+(((-1.0)*r22*x1580)));
evalcond[2]=(((x1571*x1573))+(((-1.0)*r02*x1579))+sj0+(((-1.0)*x1575*x1580)));
evalcond[3]=(((x1572*x1575))+cj0+(((-1.0)*x1573*x1579))+(((-1.0)*r02*x1580)));
evalcond[4]=(sj0+((x1572*x1574))+(((-1.0)*x1578*x1579))+(((-1.0)*r12*x1580)));
evalcond[5]=(((x1571*x1578))+(((-1.0)*x1574*x1580))+(((-1.0)*r12*x1579))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1581=((1.0)*sj5);
CheckValue<IkReal> x1582 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1581))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1582.valid){
continue;
}
CheckValue<IkReal> x1583=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1581)))),-1);
if(!x1583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1582.value)+(((1.5707963267949)*(x1583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1584=IKsin(j4);
IkReal x1585=IKcos(j4);
IkReal x1586=(cj5*r00);
IkReal x1587=(r11*sj5);
IkReal x1588=(r01*sj5);
IkReal x1589=(cj5*r20);
IkReal x1590=(r21*sj5);
IkReal x1591=(cj5*r10);
IkReal x1592=((1.0)*x1585);
IkReal x1593=((1.0)*x1584);
evalcond[0]=(((x1584*x1589))+(((-1.0)*r22*x1592))+(((-1.0)*x1590*x1593)));
evalcond[1]=((((-1.0)*x1589*x1592))+(((-1.0)*r22*x1593))+((x1585*x1590)));
evalcond[2]=(sj0+((x1584*x1586))+(((-1.0)*r02*x1592))+(((-1.0)*x1588*x1593)));
evalcond[3]=(cj0+(((-1.0)*r02*x1593))+(((-1.0)*x1586*x1592))+((x1585*x1588)));
evalcond[4]=(sj0+(((-1.0)*x1591*x1592))+((x1585*x1587))+(((-1.0)*r12*x1593)));
evalcond[5]=(((x1584*x1591))+(((-1.0)*cj0))+(((-1.0)*x1587*x1593))+(((-1.0)*r12*x1592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1594=((1.0)*sj5);
IkReal x1595=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x1594))+(((-1.0)*r11*x1595)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1594))+(((-1.0)*r01*x1595)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1594))+(((-1.0)*r11*x1595))))+IKsqr(((((-1.0)*r00*x1594))+(((-1.0)*r01*x1595))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x1594))+(((-1.0)*r11*x1595))), ((((-1.0)*r00*x1594))+(((-1.0)*r01*x1595))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1596=IKsin(j0);
IkReal x1597=IKcos(j0);
IkReal x1598=((1.0)*cj5);
IkReal x1599=((0.138)*sj5);
IkReal x1600=((1.0)*sj5);
IkReal x1601=((0.138)*cj5);
evalcond[0]=((((-1.0)*r01*x1598))+(((-1.0)*r00*x1600))+(((-1.0)*x1597)));
evalcond[1]=((((-1.0)*r10*x1600))+(((-1.0)*x1596))+(((-1.0)*r11*x1598)));
evalcond[2]=(((r00*x1599))+((r01*x1601))+(((-1.0)*px))+(((0.179)*x1596)));
evalcond[3]=(((r11*x1601))+(((-1.0)*py))+(((-0.179)*x1597))+((r10*x1599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1602=((1.0)*cj5);
IkReal x1603=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1602)));
j4eval[0]=x1603;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x1602)))))+(IKabs(r02)));
j4eval[2]=IKsign(x1603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1604=((1.0)*sj5);
IkReal x1605=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1604)));
j4eval[0]=x1605;
j4eval[1]=IKsign(x1605);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1604)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1606=cj5*cj5;
IkReal x1607=r21*r21;
IkReal x1608=(cj5*r20);
IkReal x1609=(r21*sj5);
IkReal x1610=((r22*r22)+x1607+(((-2.0)*x1608*x1609))+(((-1.0)*x1606*x1607))+((x1606*(r20*r20))));
j4eval[0]=x1610;
j4eval[1]=IKsign(x1610);
j4eval[2]=((IKabs(((((-1.0)*x1609))+x1608)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1611=cj5*cj5;
IkReal x1612=r21*r21;
IkReal x1613=(cj5*r20);
IkReal x1614=(r21*sj5);
CheckValue<IkReal> x1615=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x1611*x1612))+(((-2.0)*x1613*x1614))+x1612+((x1611*(r20*r20))))),-1);
if(!x1615.valid){
continue;
}
CheckValue<IkReal> x1616 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x1614))+x1613)),IKFAST_ATAN2_MAGTHRESH);
if(!x1616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1615.value)))+(x1616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1617=IKsin(j4);
IkReal x1618=IKcos(j4);
IkReal x1619=(cj5*r00);
IkReal x1620=(r11*sj5);
IkReal x1621=(r01*sj5);
IkReal x1622=(cj5*r20);
IkReal x1623=(cj5*r10);
IkReal x1624=(r21*sj5);
IkReal x1625=((1.0)*x1618);
IkReal x1626=((1.0)*x1617);
evalcond[0]=(((x1617*x1622))+(((-1.0)*r22*x1625))+(((-1.0)*x1624*x1626)));
evalcond[1]=((((-1.0)*x1619*x1625))+(((-1.0)*r02*x1626))+((x1618*x1621)));
evalcond[2]=((((-1.0)*r12*x1626))+(((-1.0)*x1623*x1625))+((x1618*x1620)));
evalcond[3]=(sj0+((x1617*x1619))+(((-1.0)*r02*x1625))+(((-1.0)*x1621*x1626)));
evalcond[4]=((1.0)+(((-1.0)*x1622*x1625))+(((-1.0)*r22*x1626))+((x1618*x1624)));
evalcond[5]=((((-1.0)*r12*x1625))+((x1617*x1623))+(((-1.0)*x1620*x1626))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1627=((1.0)*sj5);
CheckValue<IkReal> x1628 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1628.valid){
continue;
}
CheckValue<IkReal> x1629=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1627)))),-1);
if(!x1629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1628.value)+(((1.5707963267949)*(x1629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1630=IKsin(j4);
IkReal x1631=IKcos(j4);
IkReal x1632=(cj5*r00);
IkReal x1633=(r11*sj5);
IkReal x1634=(r01*sj5);
IkReal x1635=(cj5*r20);
IkReal x1636=(cj5*r10);
IkReal x1637=(r21*sj5);
IkReal x1638=((1.0)*x1631);
IkReal x1639=((1.0)*x1630);
evalcond[0]=((((-1.0)*r22*x1638))+(((-1.0)*x1637*x1639))+((x1630*x1635)));
evalcond[1]=((((-1.0)*x1632*x1638))+((x1631*x1634))+(((-1.0)*r02*x1639)));
evalcond[2]=((((-1.0)*r12*x1639))+(((-1.0)*x1636*x1638))+((x1631*x1633)));
evalcond[3]=(sj0+(((-1.0)*x1634*x1639))+((x1630*x1632))+(((-1.0)*r02*x1638)));
evalcond[4]=((1.0)+(((-1.0)*x1635*x1638))+(((-1.0)*r22*x1639))+((x1631*x1637)));
evalcond[5]=((((-1.0)*r12*x1638))+(((-1.0)*x1633*x1639))+((x1630*x1636))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1640=((1.0)*cj5);
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1640)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
CheckValue<IkReal> x1642=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1640)))),-1);
if(!x1642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1641.value)+(((1.5707963267949)*(x1642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1643=IKsin(j4);
IkReal x1644=IKcos(j4);
IkReal x1645=(cj5*r00);
IkReal x1646=(r11*sj5);
IkReal x1647=(r01*sj5);
IkReal x1648=(cj5*r20);
IkReal x1649=(cj5*r10);
IkReal x1650=(r21*sj5);
IkReal x1651=((1.0)*x1644);
IkReal x1652=((1.0)*x1643);
evalcond[0]=((((-1.0)*r22*x1651))+(((-1.0)*x1650*x1652))+((x1643*x1648)));
evalcond[1]=((((-1.0)*x1645*x1651))+((x1644*x1647))+(((-1.0)*r02*x1652)));
evalcond[2]=((((-1.0)*r12*x1652))+((x1644*x1646))+(((-1.0)*x1649*x1651)));
evalcond[3]=(sj0+(((-1.0)*x1647*x1652))+(((-1.0)*r02*x1651))+((x1643*x1645)));
evalcond[4]=((1.0)+(((-1.0)*r22*x1652))+((x1644*x1650))+(((-1.0)*x1648*x1651)));
evalcond[5]=((((-1.0)*x1646*x1652))+(((-1.0)*r12*x1651))+((x1643*x1649))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.32100151210145)*py))+(((0.332105717227752)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.32100151210145)*px))+(((-0.332105717227752)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.32100151210145)*py))+(((0.332105717227752)*px))))+IKsqr(((((-1.32100151210145)*px))+(((-0.332105717227752)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.32100151210145)*py))+(((0.332105717227752)*px))), ((((-1.32100151210145)*px))+(((-0.332105717227752)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1653=IKsin(j0);
IkReal x1654=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.179)*x1653))+(((-0.712)*x1654)));
evalcond[1]=((((-0.179)*x1654))+(((-1.0)*py))+(((-0.712)*x1653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1655=((1.0)*sj5);
IkReal x1656=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1655)));
j4eval[0]=x1656;
j4eval[1]=IKsign(x1656);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x1655))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1657=((1.0)*sj5);
IkReal x1658=((((-1.0)*r00*x1657))+(((-1.0)*cj5*r01)));
j4eval[0]=x1658;
j4eval[1]=IKsign(x1658);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1657))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1659=cj5*cj5;
IkReal x1660=((1.0)*r21);
IkReal x1661=(cj5*sj5);
IkReal x1662=((1.0)*r20);
IkReal x1663=((((-1.0)*r01*x1661*x1662))+(((-1.0)*r01*x1659*x1660))+((r01*r21))+((r00*r20*x1659))+(((-1.0)*r00*x1660*x1661))+((r02*r22)));
j4eval[0]=x1663;
j4eval[1]=IKsign(x1663);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1662))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1664=cj5*cj5;
IkReal x1665=((1.0)*r21);
IkReal x1666=(cj5*sj5);
IkReal x1667=((1.0)*r20);
CheckValue<IkReal> x1668 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1667)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1668.valid){
continue;
}
CheckValue<IkReal> x1669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1664*x1665))+((r01*r21))+(((-1.0)*r01*x1666*x1667))+((r00*r20*x1664))+((r02*r22))+(((-1.0)*r00*x1665*x1666)))),-1);
if(!x1669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1668.value)+(((1.5707963267949)*(x1669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1670=IKsin(j4);
IkReal x1671=IKcos(j4);
IkReal x1672=((1.0)*cj0);
IkReal x1673=(cj5*r00);
IkReal x1674=(r11*sj5);
IkReal x1675=(r01*sj5);
IkReal x1676=(cj5*r20);
IkReal x1677=(r21*sj5);
IkReal x1678=(cj5*r10);
IkReal x1679=((1.0)*x1671);
IkReal x1680=((1.0)*x1670);
evalcond[0]=((((-1.0)*x1677*x1680))+((x1670*x1676))+(((-1.0)*r22*x1679)));
evalcond[1]=((((-1.0)*r22*x1680))+((x1671*x1677))+(((-1.0)*x1676*x1679)));
evalcond[2]=(sj0+(((-1.0)*x1675*x1680))+(((-1.0)*r02*x1679))+((x1670*x1673)));
evalcond[3]=((((-1.0)*x1674*x1680))+(((-1.0)*r12*x1679))+(((-1.0)*x1672))+((x1670*x1678)));
evalcond[4]=((((-1.0)*x1673*x1679))+(((-1.0)*r02*x1680))+((x1671*x1675))+(((-1.0)*x1672)));
evalcond[5]=((((-1.0)*r12*x1680))+(((-1.0)*sj0))+(((-1.0)*x1678*x1679))+((x1671*x1674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1681=((1.0)*sj5);
CheckValue<IkReal> x1682 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1681))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1682.valid){
continue;
}
CheckValue<IkReal> x1683=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x1681)))),-1);
if(!x1683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1682.value)+(((1.5707963267949)*(x1683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1684=IKsin(j4);
IkReal x1685=IKcos(j4);
IkReal x1686=((1.0)*cj0);
IkReal x1687=(cj5*r00);
IkReal x1688=(r11*sj5);
IkReal x1689=(r01*sj5);
IkReal x1690=(cj5*r20);
IkReal x1691=(r21*sj5);
IkReal x1692=(cj5*r10);
IkReal x1693=((1.0)*x1685);
IkReal x1694=((1.0)*x1684);
evalcond[0]=((((-1.0)*x1691*x1694))+(((-1.0)*r22*x1693))+((x1684*x1690)));
evalcond[1]=((((-1.0)*x1690*x1693))+(((-1.0)*r22*x1694))+((x1685*x1691)));
evalcond[2]=(sj0+(((-1.0)*r02*x1693))+((x1684*x1687))+(((-1.0)*x1689*x1694)));
evalcond[3]=((((-1.0)*x1688*x1694))+(((-1.0)*x1686))+(((-1.0)*r12*x1693))+((x1684*x1692)));
evalcond[4]=((((-1.0)*x1686))+(((-1.0)*x1687*x1693))+(((-1.0)*r02*x1694))+((x1685*x1689)));
evalcond[5]=((((-1.0)*x1692*x1693))+(((-1.0)*sj0))+(((-1.0)*r12*x1694))+((x1685*x1688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1695=((1.0)*sj5);
CheckValue<IkReal> x1696 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1695))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1696.valid){
continue;
}
CheckValue<IkReal> x1697=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1695)))),-1);
if(!x1697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1696.value)+(((1.5707963267949)*(x1697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1698=IKsin(j4);
IkReal x1699=IKcos(j4);
IkReal x1700=((1.0)*cj0);
IkReal x1701=(cj5*r00);
IkReal x1702=(r11*sj5);
IkReal x1703=(r01*sj5);
IkReal x1704=(cj5*r20);
IkReal x1705=(r21*sj5);
IkReal x1706=(cj5*r10);
IkReal x1707=((1.0)*x1699);
IkReal x1708=((1.0)*x1698);
evalcond[0]=((((-1.0)*x1705*x1708))+(((-1.0)*r22*x1707))+((x1698*x1704)));
evalcond[1]=((((-1.0)*x1704*x1707))+(((-1.0)*r22*x1708))+((x1699*x1705)));
evalcond[2]=(sj0+(((-1.0)*r02*x1707))+(((-1.0)*x1703*x1708))+((x1698*x1701)));
evalcond[3]=((((-1.0)*x1702*x1708))+(((-1.0)*x1700))+(((-1.0)*r12*x1707))+((x1698*x1706)));
evalcond[4]=((((-1.0)*r02*x1708))+(((-1.0)*x1700))+(((-1.0)*x1701*x1707))+((x1699*x1703)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1706*x1707))+((x1699*x1702))+(((-1.0)*r12*x1708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.0724143720278249)*px))+(((0.631906419594763)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0724143720278249)*py))+(((0.631906419594763)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.0724143720278249)*px))+(((0.631906419594763)*py))))+IKsqr(((((-0.0724143720278249)*py))+(((0.631906419594763)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.0724143720278249)*px))+(((0.631906419594763)*py))), ((((-0.0724143720278249)*py))+(((0.631906419594763)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1709=IKsin(j0);
IkReal x1710=IKcos(j0);
evalcond[0]=((((0.179)*x1709))+(((-1.0)*px))+(((1.562)*x1710)));
evalcond[1]=((((1.562)*x1709))+(((-0.179)*x1710))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1711=((1.0)*sj5);
IkReal x1712=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1711)));
j4eval[0]=x1712;
j4eval[1]=IKsign(x1712);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1711)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1713=cj5*cj5;
IkReal x1714=((1.0)*r21);
IkReal x1715=(cj5*sj5);
IkReal x1716=((((-1.0)*r00*x1714*x1715))+((r00*r20*x1713))+((r01*r21))+(((-1.0)*r01*r20*x1715))+((r02*r22))+(((-1.0)*r01*x1713*x1714)));
j4eval[0]=x1716;
j4eval[1]=IKsign(x1716);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x1714))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1717=cj5*cj5;
IkReal x1718=(cj5*r20);
IkReal x1719=((1.0)*sj5);
IkReal x1720=(r11*r21);
IkReal x1721=((((-1.0)*r11*x1718*x1719))+(((-1.0)*x1717*x1720))+x1720+((r10*r20*x1717))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1719)));
j4eval[0]=x1721;
j4eval[1]=IKsign(x1721);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1718))+(((-1.0)*r21*sj0*x1719))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1722=cj5*cj5;
IkReal x1723=(cj5*r20);
IkReal x1724=((1.0)*sj5);
IkReal x1725=(r11*r21);
CheckValue<IkReal> x1726 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1724))+((sj0*x1723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1726.valid){
continue;
}
CheckValue<IkReal> x1727=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1723*x1724))+x1725+(((-1.0)*cj5*r10*r21*x1724))+((r12*r22))+(((-1.0)*x1722*x1725))+((r10*r20*x1722)))),-1);
if(!x1727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1726.value)+(((1.5707963267949)*(x1727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1728=IKsin(j4);
IkReal x1729=IKcos(j4);
IkReal x1730=(cj5*r00);
IkReal x1731=(r11*sj5);
IkReal x1732=(r01*sj5);
IkReal x1733=(cj5*r20);
IkReal x1734=(r21*sj5);
IkReal x1735=(cj5*r10);
IkReal x1736=((1.0)*x1729);
IkReal x1737=((1.0)*x1728);
evalcond[0]=(((x1728*x1733))+(((-1.0)*x1734*x1737))+(((-1.0)*r22*x1736)));
evalcond[1]=((((-1.0)*x1733*x1736))+((x1729*x1734))+(((-1.0)*r22*x1737)));
evalcond[2]=(((x1728*x1730))+sj0+(((-1.0)*x1732*x1737))+(((-1.0)*r02*x1736)));
evalcond[3]=(cj0+((x1729*x1732))+(((-1.0)*x1730*x1736))+(((-1.0)*r02*x1737)));
evalcond[4]=(sj0+(((-1.0)*r12*x1737))+((x1729*x1731))+(((-1.0)*x1735*x1736)));
evalcond[5]=((((-1.0)*x1731*x1737))+((x1728*x1735))+(((-1.0)*r12*x1736))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1738=cj5*cj5;
IkReal x1739=((1.0)*r21);
IkReal x1740=(cj5*sj5);
CheckValue<IkReal> x1741 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1741.valid){
continue;
}
CheckValue<IkReal> x1742=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1738*x1739))+(((-1.0)*r01*r20*x1740))+((r01*r21))+(((-1.0)*r00*x1739*x1740))+((r02*r22))+((r00*r20*x1738)))),-1);
if(!x1742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1741.value)+(((1.5707963267949)*(x1742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1743=IKsin(j4);
IkReal x1744=IKcos(j4);
IkReal x1745=(cj5*r00);
IkReal x1746=(r11*sj5);
IkReal x1747=(r01*sj5);
IkReal x1748=(cj5*r20);
IkReal x1749=(r21*sj5);
IkReal x1750=(cj5*r10);
IkReal x1751=((1.0)*x1744);
IkReal x1752=((1.0)*x1743);
evalcond[0]=((((-1.0)*r22*x1751))+(((-1.0)*x1749*x1752))+((x1743*x1748)));
evalcond[1]=((((-1.0)*x1748*x1751))+(((-1.0)*r22*x1752))+((x1744*x1749)));
evalcond[2]=(sj0+(((-1.0)*x1747*x1752))+((x1743*x1745))+(((-1.0)*r02*x1751)));
evalcond[3]=(cj0+((x1744*x1747))+(((-1.0)*x1745*x1751))+(((-1.0)*r02*x1752)));
evalcond[4]=(sj0+(((-1.0)*r12*x1752))+((x1744*x1746))+(((-1.0)*x1750*x1751)));
evalcond[5]=((((-1.0)*r12*x1751))+(((-1.0)*x1746*x1752))+((x1743*x1750))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1753=((1.0)*sj5);
CheckValue<IkReal> x1754 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1754.valid){
continue;
}
CheckValue<IkReal> x1755=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1753)))),-1);
if(!x1755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1754.value)+(((1.5707963267949)*(x1755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1756=IKsin(j4);
IkReal x1757=IKcos(j4);
IkReal x1758=(cj5*r00);
IkReal x1759=(r11*sj5);
IkReal x1760=(r01*sj5);
IkReal x1761=(cj5*r20);
IkReal x1762=(r21*sj5);
IkReal x1763=(cj5*r10);
IkReal x1764=((1.0)*x1757);
IkReal x1765=((1.0)*x1756);
evalcond[0]=((((-1.0)*x1762*x1765))+((x1756*x1761))+(((-1.0)*r22*x1764)));
evalcond[1]=((((-1.0)*x1761*x1764))+((x1757*x1762))+(((-1.0)*r22*x1765)));
evalcond[2]=(sj0+(((-1.0)*r02*x1764))+(((-1.0)*x1760*x1765))+((x1756*x1758)));
evalcond[3]=(cj0+(((-1.0)*r02*x1765))+((x1757*x1760))+(((-1.0)*x1758*x1764)));
evalcond[4]=(sj0+(((-1.0)*x1763*x1764))+(((-1.0)*r12*x1765))+((x1757*x1759)));
evalcond[5]=((((-1.0)*x1759*x1765))+((x1756*x1763))+(((-1.0)*r12*x1764))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.70138005285309)*py))+(((3.5039639815993)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.70138005285309)*px))+(((-3.5039639815993)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.70138005285309)*py))+(((3.5039639815993)*px))))+IKsqr(((((2.70138005285309)*px))+(((-3.5039639815993)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.70138005285309)*py))+(((3.5039639815993)*px))), ((((2.70138005285309)*px))+(((-3.5039639815993)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1766=IKsin(j0);
IkReal x1767=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.179)*x1766))+(((0.138)*x1767)));
evalcond[1]=((((-1.0)*py))+(((-0.179)*x1767))+(((0.138)*x1766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1768=((1.0)*sj5);
IkReal x1769=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1768)));
j4eval[0]=x1769;
j4eval[1]=IKsign(x1769);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1768))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1770=((1.0)*sj5);
IkReal x1771=((((-1.0)*r00*x1770))+(((-1.0)*cj5*r01)));
j4eval[0]=x1771;
j4eval[1]=IKsign(x1771);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1770))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1772=cj5*cj5;
IkReal x1773=((1.0)*r21);
IkReal x1774=(cj5*sj5);
IkReal x1775=((1.0)*r20);
IkReal x1776=((((-1.0)*r01*x1772*x1773))+(((-1.0)*r00*x1773*x1774))+(((-1.0)*r01*x1774*x1775))+((r01*r21))+((r00*r20*x1772))+((r02*r22)));
j4eval[0]=x1776;
j4eval[1]=IKsign(x1776);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1775)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1777=cj5*cj5;
IkReal x1778=((1.0)*r21);
IkReal x1779=(cj5*sj5);
IkReal x1780=((1.0)*r20);
CheckValue<IkReal> x1781 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1780))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1781.valid){
continue;
}
CheckValue<IkReal> x1782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1778*x1779))+((r01*r21))+(((-1.0)*r01*x1777*x1778))+((r00*r20*x1777))+(((-1.0)*r01*x1779*x1780))+((r02*r22)))),-1);
if(!x1782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1781.value)+(((1.5707963267949)*(x1782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1783=IKsin(j4);
IkReal x1784=IKcos(j4);
IkReal x1785=((1.0)*cj0);
IkReal x1786=(cj5*r00);
IkReal x1787=(r11*sj5);
IkReal x1788=(r01*sj5);
IkReal x1789=(cj5*r20);
IkReal x1790=(r21*sj5);
IkReal x1791=(cj5*r10);
IkReal x1792=((1.0)*x1784);
IkReal x1793=((1.0)*x1783);
evalcond[0]=(((x1783*x1789))+(((-1.0)*r22*x1792))+(((-1.0)*x1790*x1793)));
evalcond[1]=((((-1.0)*r22*x1793))+(((-1.0)*x1789*x1792))+((x1784*x1790)));
evalcond[2]=(((x1783*x1786))+sj0+(((-1.0)*x1788*x1793))+(((-1.0)*r02*x1792)));
evalcond[3]=(((x1783*x1791))+(((-1.0)*x1787*x1793))+(((-1.0)*x1785))+(((-1.0)*r12*x1792)));
evalcond[4]=((((-1.0)*x1785))+((x1784*x1788))+(((-1.0)*x1786*x1792))+(((-1.0)*r02*x1793)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1793))+((x1784*x1787))+(((-1.0)*x1791*x1792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1794=((1.0)*sj5);
CheckValue<IkReal> x1795 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1795.valid){
continue;
}
CheckValue<IkReal> x1796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1794))+(((-1.0)*cj5*r01)))),-1);
if(!x1796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1795.value)+(((1.5707963267949)*(x1796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1797=IKsin(j4);
IkReal x1798=IKcos(j4);
IkReal x1799=((1.0)*cj0);
IkReal x1800=(cj5*r00);
IkReal x1801=(r11*sj5);
IkReal x1802=(r01*sj5);
IkReal x1803=(cj5*r20);
IkReal x1804=(r21*sj5);
IkReal x1805=(cj5*r10);
IkReal x1806=((1.0)*x1798);
IkReal x1807=((1.0)*x1797);
evalcond[0]=((((-1.0)*x1804*x1807))+((x1797*x1803))+(((-1.0)*r22*x1806)));
evalcond[1]=(((x1798*x1804))+(((-1.0)*r22*x1807))+(((-1.0)*x1803*x1806)));
evalcond[2]=(sj0+(((-1.0)*x1802*x1807))+((x1797*x1800))+(((-1.0)*r02*x1806)));
evalcond[3]=((((-1.0)*x1799))+(((-1.0)*x1801*x1807))+((x1797*x1805))+(((-1.0)*r12*x1806)));
evalcond[4]=((((-1.0)*x1799))+((x1798*x1802))+(((-1.0)*x1800*x1806))+(((-1.0)*r02*x1807)));
evalcond[5]=((((-1.0)*sj0))+((x1798*x1801))+(((-1.0)*x1805*x1806))+(((-1.0)*r12*x1807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1808=((1.0)*sj5);
CheckValue<IkReal> x1809 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1809.valid){
continue;
}
CheckValue<IkReal> x1810=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1808)))),-1);
if(!x1810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1809.value)+(((1.5707963267949)*(x1810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1811=IKsin(j4);
IkReal x1812=IKcos(j4);
IkReal x1813=((1.0)*cj0);
IkReal x1814=(cj5*r00);
IkReal x1815=(r11*sj5);
IkReal x1816=(r01*sj5);
IkReal x1817=(cj5*r20);
IkReal x1818=(r21*sj5);
IkReal x1819=(cj5*r10);
IkReal x1820=((1.0)*x1812);
IkReal x1821=((1.0)*x1811);
evalcond[0]=((((-1.0)*x1818*x1821))+(((-1.0)*r22*x1820))+((x1811*x1817)));
evalcond[1]=((((-1.0)*x1817*x1820))+((x1812*x1818))+(((-1.0)*r22*x1821)));
evalcond[2]=(sj0+(((-1.0)*r02*x1820))+(((-1.0)*x1816*x1821))+((x1811*x1814)));
evalcond[3]=((((-1.0)*x1813))+(((-1.0)*r12*x1820))+((x1811*x1819))+(((-1.0)*x1815*x1821)));
evalcond[4]=((((-1.0)*x1813))+((x1812*x1816))+(((-1.0)*r02*x1821))+(((-1.0)*x1814*x1820)));
evalcond[5]=((((-1.0)*sj0))+((x1812*x1815))+(((-1.0)*x1819*x1820))+(((-1.0)*r12*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1822=((1.0)*sj5);
IkReal x1823=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x1823))+(((-1.0)*r10*x1822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1822))+(((-1.0)*r01*x1823)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1823))+(((-1.0)*r10*x1822))))+IKsqr(((((-1.0)*r00*x1822))+(((-1.0)*r01*x1823))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x1823))+(((-1.0)*r10*x1822))), ((((-1.0)*r00*x1822))+(((-1.0)*r01*x1823))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1824=IKsin(j0);
IkReal x1825=IKcos(j0);
IkReal x1826=((1.0)*cj5);
IkReal x1827=((0.138)*sj5);
IkReal x1828=((1.0)*sj5);
IkReal x1829=((0.138)*cj5);
evalcond[0]=((((-1.0)*x1825))+(((-1.0)*r00*x1828))+(((-1.0)*r01*x1826)));
evalcond[1]=((((-1.0)*x1824))+(((-1.0)*r11*x1826))+(((-1.0)*r10*x1828)));
evalcond[2]=(((r00*x1827))+((r01*x1829))+(((-1.0)*px))+(((0.179)*x1824)));
evalcond[3]=(((r10*x1827))+(((-1.0)*py))+(((-0.179)*x1825))+((r11*x1829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1830=((1.0)*cj5);
IkReal x1831=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1830)));
j4eval[0]=x1831;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1830))))));
j4eval[2]=IKsign(x1831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1832=((1.0)*sj5);
IkReal x1833=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1832)));
j4eval[0]=x1833;
j4eval[1]=IKsign(x1833);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1832))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1834=cj5*cj5;
IkReal x1835=r21*r21;
IkReal x1836=(cj5*r20);
IkReal x1837=(r21*sj5);
IkReal x1838=((((-1.0)*x1834*x1835))+(r22*r22)+((x1834*(r20*r20)))+(((-2.0)*x1836*x1837))+x1835);
j4eval[0]=x1838;
j4eval[1]=IKsign(x1838);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x1837))+x1836))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1839=cj5*cj5;
IkReal x1840=r21*r21;
IkReal x1841=(cj5*r20);
IkReal x1842=(r21*sj5);
CheckValue<IkReal> x1843=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1841*x1842))+(r22*r22)+(((-1.0)*x1839*x1840))+x1840+((x1839*(r20*r20))))),-1);
if(!x1843.valid){
continue;
}
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(r22),IkReal((x1841+(((-1.0)*x1842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1843.value)))+(x1844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1845=IKsin(j4);
IkReal x1846=IKcos(j4);
IkReal x1847=(cj5*r00);
IkReal x1848=(r11*sj5);
IkReal x1849=(r01*sj5);
IkReal x1850=(cj5*r20);
IkReal x1851=(cj5*r10);
IkReal x1852=(r21*sj5);
IkReal x1853=((1.0)*x1846);
IkReal x1854=((1.0)*x1845);
evalcond[0]=((((-1.0)*x1852*x1854))+(((-1.0)*r22*x1853))+((x1845*x1850)));
evalcond[1]=(((x1846*x1849))+(((-1.0)*r02*x1854))+(((-1.0)*x1847*x1853)));
evalcond[2]=((((-1.0)*x1851*x1853))+((x1846*x1848))+(((-1.0)*r12*x1854)));
evalcond[3]=(sj0+(((-1.0)*x1849*x1854))+((x1845*x1847))+(((-1.0)*r02*x1853)));
evalcond[4]=((1.0)+((x1846*x1852))+(((-1.0)*r22*x1854))+(((-1.0)*x1850*x1853)));
evalcond[5]=((((-1.0)*x1848*x1854))+((x1845*x1851))+(((-1.0)*r12*x1853))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1855=((1.0)*sj5);
CheckValue<IkReal> x1856=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1855)))),-1);
if(!x1856.valid){
continue;
}
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1855))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1856.value)))+(x1857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1858=IKsin(j4);
IkReal x1859=IKcos(j4);
IkReal x1860=(cj5*r00);
IkReal x1861=(r11*sj5);
IkReal x1862=(r01*sj5);
IkReal x1863=(cj5*r20);
IkReal x1864=(cj5*r10);
IkReal x1865=(r21*sj5);
IkReal x1866=((1.0)*x1859);
IkReal x1867=((1.0)*x1858);
evalcond[0]=((((-1.0)*x1865*x1867))+((x1858*x1863))+(((-1.0)*r22*x1866)));
evalcond[1]=((((-1.0)*r02*x1867))+(((-1.0)*x1860*x1866))+((x1859*x1862)));
evalcond[2]=((((-1.0)*x1864*x1866))+((x1859*x1861))+(((-1.0)*r12*x1867)));
evalcond[3]=(sj0+(((-1.0)*r02*x1866))+(((-1.0)*x1862*x1867))+((x1858*x1860)));
evalcond[4]=((1.0)+(((-1.0)*x1863*x1866))+((x1859*x1865))+(((-1.0)*r22*x1867)));
evalcond[5]=(((x1858*x1864))+(((-1.0)*r12*x1866))+(((-1.0)*x1861*x1867))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1868=((1.0)*cj5);
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1868)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
CheckValue<IkReal> x1870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1868)))),-1);
if(!x1870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1869.value)+(((1.5707963267949)*(x1870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1871=IKsin(j4);
IkReal x1872=IKcos(j4);
IkReal x1873=(cj5*r00);
IkReal x1874=(r11*sj5);
IkReal x1875=(r01*sj5);
IkReal x1876=(cj5*r20);
IkReal x1877=(cj5*r10);
IkReal x1878=(r21*sj5);
IkReal x1879=((1.0)*x1872);
IkReal x1880=((1.0)*x1871);
evalcond[0]=((((-1.0)*r22*x1879))+((x1871*x1876))+(((-1.0)*x1878*x1880)));
evalcond[1]=((((-1.0)*x1873*x1879))+(((-1.0)*r02*x1880))+((x1872*x1875)));
evalcond[2]=((((-1.0)*x1877*x1879))+(((-1.0)*r12*x1880))+((x1872*x1874)));
evalcond[3]=(sj0+(((-1.0)*x1875*x1880))+(((-1.0)*r02*x1879))+((x1871*x1873)));
evalcond[4]=((1.0)+(((-1.0)*x1876*x1879))+(((-1.0)*r22*x1880))+((x1872*x1878)));
evalcond[5]=(((x1871*x1877))+(((-1.0)*r12*x1879))+(((-1.0)*cj0))+(((-1.0)*x1874*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.32100151210145)*py))+(((0.332105717227752)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.32100151210145)*px))+(((-0.332105717227752)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.32100151210145)*py))+(((0.332105717227752)*px))))+IKsqr(((((-1.32100151210145)*px))+(((-0.332105717227752)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.32100151210145)*py))+(((0.332105717227752)*px))), ((((-1.32100151210145)*px))+(((-0.332105717227752)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1881=IKsin(j0);
IkReal x1882=IKcos(j0);
evalcond[0]=((((-0.712)*x1882))+(((-1.0)*px))+(((0.179)*x1881)));
evalcond[1]=((((-0.712)*x1881))+(((-1.0)*py))+(((-0.179)*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1883=((1.0)*sj5);
IkReal x1884=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1883)));
j4eval[0]=x1884;
j4eval[1]=IKsign(x1884);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1883))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1885=((1.0)*sj5);
IkReal x1886=((((-1.0)*r00*x1885))+(((-1.0)*cj5*r01)));
j4eval[0]=x1886;
j4eval[1]=IKsign(x1886);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1885)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1887=cj5*cj5;
IkReal x1888=((1.0)*r21);
IkReal x1889=(cj5*sj5);
IkReal x1890=((1.0)*r20);
IkReal x1891=(((r00*r20*x1887))+(((-1.0)*r01*x1887*x1888))+(((-1.0)*r00*x1888*x1889))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1889*x1890)));
j4eval[0]=x1891;
j4eval[1]=IKsign(x1891);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x1890))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1892=cj5*cj5;
IkReal x1893=((1.0)*r21);
IkReal x1894=(cj5*sj5);
IkReal x1895=((1.0)*r20);
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign((((r00*r20*x1892))+(((-1.0)*r01*x1894*x1895))+((r01*r21))+(((-1.0)*r01*x1892*x1893))+(((-1.0)*r00*x1893*x1894))+((r02*r22)))),-1);
if(!x1896.valid){
continue;
}
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1895))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1896.value)))+(x1897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1898=IKsin(j4);
IkReal x1899=IKcos(j4);
IkReal x1900=((1.0)*cj0);
IkReal x1901=(cj5*r00);
IkReal x1902=(r11*sj5);
IkReal x1903=(r01*sj5);
IkReal x1904=(cj5*r20);
IkReal x1905=(r21*sj5);
IkReal x1906=(cj5*r10);
IkReal x1907=((1.0)*x1899);
IkReal x1908=((1.0)*x1898);
evalcond[0]=((((-1.0)*r22*x1907))+((x1898*x1904))+(((-1.0)*x1905*x1908)));
evalcond[1]=((((-1.0)*r22*x1908))+(((-1.0)*x1904*x1907))+((x1899*x1905)));
evalcond[2]=(sj0+(((-1.0)*x1903*x1908))+((x1898*x1901))+(((-1.0)*r02*x1907)));
evalcond[3]=((((-1.0)*x1902*x1908))+((x1898*x1906))+(((-1.0)*r12*x1907))+(((-1.0)*x1900)));
evalcond[4]=((((-1.0)*x1901*x1907))+((x1899*x1903))+(((-1.0)*r02*x1908))+(((-1.0)*x1900)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1908))+((x1899*x1902))+(((-1.0)*x1906*x1907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1909=((1.0)*sj5);
CheckValue<IkReal> x1910 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1910.valid){
continue;
}
CheckValue<IkReal> x1911=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x1909)))),-1);
if(!x1911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1910.value)+(((1.5707963267949)*(x1911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1912=IKsin(j4);
IkReal x1913=IKcos(j4);
IkReal x1914=((1.0)*cj0);
IkReal x1915=(cj5*r00);
IkReal x1916=(r11*sj5);
IkReal x1917=(r01*sj5);
IkReal x1918=(cj5*r20);
IkReal x1919=(r21*sj5);
IkReal x1920=(cj5*r10);
IkReal x1921=((1.0)*x1913);
IkReal x1922=((1.0)*x1912);
evalcond[0]=(((x1912*x1918))+(((-1.0)*r22*x1921))+(((-1.0)*x1919*x1922)));
evalcond[1]=(((x1913*x1919))+(((-1.0)*x1918*x1921))+(((-1.0)*r22*x1922)));
evalcond[2]=(((x1912*x1915))+sj0+(((-1.0)*x1917*x1922))+(((-1.0)*r02*x1921)));
evalcond[3]=((((-1.0)*r12*x1921))+(((-1.0)*x1916*x1922))+((x1912*x1920))+(((-1.0)*x1914)));
evalcond[4]=(((x1913*x1917))+(((-1.0)*x1915*x1921))+(((-1.0)*r02*x1922))+(((-1.0)*x1914)));
evalcond[5]=(((x1913*x1916))+(((-1.0)*r12*x1922))+(((-1.0)*sj0))+(((-1.0)*x1920*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1923=((1.0)*sj5);
CheckValue<IkReal> x1924=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1923)))),-1);
if(!x1924.valid){
continue;
}
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1924.value)))+(x1925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1926=IKsin(j4);
IkReal x1927=IKcos(j4);
IkReal x1928=((1.0)*cj0);
IkReal x1929=(cj5*r00);
IkReal x1930=(r11*sj5);
IkReal x1931=(r01*sj5);
IkReal x1932=(cj5*r20);
IkReal x1933=(r21*sj5);
IkReal x1934=(cj5*r10);
IkReal x1935=((1.0)*x1927);
IkReal x1936=((1.0)*x1926);
evalcond[0]=((((-1.0)*x1933*x1936))+(((-1.0)*r22*x1935))+((x1926*x1932)));
evalcond[1]=((((-1.0)*r22*x1936))+(((-1.0)*x1932*x1935))+((x1927*x1933)));
evalcond[2]=(sj0+(((-1.0)*x1931*x1936))+((x1926*x1929))+(((-1.0)*r02*x1935)));
evalcond[3]=((((-1.0)*x1930*x1936))+(((-1.0)*r12*x1935))+(((-1.0)*x1928))+((x1926*x1934)));
evalcond[4]=((((-1.0)*x1928))+(((-1.0)*x1929*x1935))+((x1927*x1931))+(((-1.0)*r02*x1936)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1934*x1935))+(((-1.0)*r12*x1936))+((x1927*x1930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1937=IKsin(j0);
IkReal x1938=IKcos(j0);
IkReal x1939=((1.0)*cj5);
IkReal x1940=((0.138)*sj5);
IkReal x1941=((1.0)*sj5);
IkReal x1942=((0.138)*cj5);
evalcond[0]=((((-1.0)*r01*x1939))+x1938+(((-1.0)*r00*x1941)));
evalcond[1]=(x1937+(((-1.0)*r11*x1939))+(((-1.0)*r10*x1941)));
evalcond[2]=((((-1.0)*px))+((r00*x1940))+(((0.179)*x1937))+((r01*x1942)));
evalcond[3]=(((r11*x1942))+(((-0.179)*x1938))+((r10*x1940))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1943=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1943;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1944=((1.0)*sj5);
IkReal x1945=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1944)));
j4eval[0]=x1945;
j4eval[1]=IKsign(x1945);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1944)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1946=r21*r21;
IkReal x1947=cj5*cj5;
IkReal x1948=(cj5*r20);
IkReal x1949=(r21*sj5);
IkReal x1950=((((-1.0)*x1947*(r20*r20)))+((x1946*x1947))+(((-1.0)*x1946))+(((-1.0)*(r22*r22)))+(((2.0)*x1948*x1949)));
j4eval[0]=x1950;
j4eval[1]=((IKabs(r22))+(IKabs((x1948+(((-1.0)*x1949))))));
j4eval[2]=IKsign(x1950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1951=r21*r21;
IkReal x1952=cj5*cj5;
IkReal x1953=(cj5*r20);
IkReal x1954=(r21*sj5);
CheckValue<IkReal> x1955=IKPowWithIntegerCheck(IKsign((((x1951*x1952))+(((-1.0)*(r22*r22)))+(((-1.0)*x1951))+(((2.0)*x1953*x1954))+(((-1.0)*x1952*(r20*r20))))),-1);
if(!x1955.valid){
continue;
}
CheckValue<IkReal> x1956 = IKatan2WithCheck(IkReal(r22),IkReal((x1953+(((-1.0)*x1954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1955.value)))+(x1956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1957=IKsin(j4);
IkReal x1958=IKcos(j4);
IkReal x1959=(cj5*r00);
IkReal x1960=(r11*sj5);
IkReal x1961=(r01*sj5);
IkReal x1962=(cj5*r20);
IkReal x1963=(cj5*r10);
IkReal x1964=(r21*sj5);
IkReal x1965=((1.0)*x1958);
IkReal x1966=((1.0)*x1957);
evalcond[0]=((((-1.0)*x1964*x1966))+(((-1.0)*r22*x1965))+((x1957*x1962)));
evalcond[1]=((((-1.0)*x1959*x1965))+((x1958*x1961))+(((-1.0)*r02*x1966)));
evalcond[2]=(((x1958*x1960))+(((-1.0)*r12*x1966))+(((-1.0)*x1963*x1965)));
evalcond[3]=(sj0+(((-1.0)*r02*x1965))+((x1957*x1959))+(((-1.0)*x1961*x1966)));
evalcond[4]=((-1.0)+((x1958*x1964))+(((-1.0)*r22*x1966))+(((-1.0)*x1962*x1965)));
evalcond[5]=(((x1957*x1963))+(((-1.0)*x1960*x1966))+(((-1.0)*r12*x1965))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1967=((1.0)*sj5);
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1967)))),-1);
if(!x1969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1968.value)+(((1.5707963267949)*(x1969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1970=IKsin(j4);
IkReal x1971=IKcos(j4);
IkReal x1972=(cj5*r00);
IkReal x1973=(r11*sj5);
IkReal x1974=(r01*sj5);
IkReal x1975=(cj5*r20);
IkReal x1976=(cj5*r10);
IkReal x1977=(r21*sj5);
IkReal x1978=((1.0)*x1971);
IkReal x1979=((1.0)*x1970);
evalcond[0]=((((-1.0)*r22*x1978))+((x1970*x1975))+(((-1.0)*x1977*x1979)));
evalcond[1]=((((-1.0)*r02*x1979))+((x1971*x1974))+(((-1.0)*x1972*x1978)));
evalcond[2]=((((-1.0)*x1976*x1978))+((x1971*x1973))+(((-1.0)*r12*x1979)));
evalcond[3]=(sj0+(((-1.0)*r02*x1978))+(((-1.0)*x1974*x1979))+((x1970*x1972)));
evalcond[4]=((-1.0)+(((-1.0)*x1975*x1978))+(((-1.0)*r22*x1979))+((x1971*x1977)));
evalcond[5]=((((-1.0)*x1973*x1979))+((x1970*x1976))+(((-1.0)*r12*x1978))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1980.valid){
continue;
}
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1980.value)))+(x1981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1982=IKsin(j4);
IkReal x1983=IKcos(j4);
IkReal x1984=(cj5*r00);
IkReal x1985=(r11*sj5);
IkReal x1986=(r01*sj5);
IkReal x1987=(cj5*r20);
IkReal x1988=(cj5*r10);
IkReal x1989=(r21*sj5);
IkReal x1990=((1.0)*x1983);
IkReal x1991=((1.0)*x1982);
evalcond[0]=((((-1.0)*x1989*x1991))+((x1982*x1987))+(((-1.0)*r22*x1990)));
evalcond[1]=((((-1.0)*r02*x1991))+(((-1.0)*x1984*x1990))+((x1983*x1986)));
evalcond[2]=((((-1.0)*r12*x1991))+((x1983*x1985))+(((-1.0)*x1988*x1990)));
evalcond[3]=(sj0+(((-1.0)*x1986*x1991))+(((-1.0)*r02*x1990))+((x1982*x1984)));
evalcond[4]=((-1.0)+(((-1.0)*x1987*x1990))+(((-1.0)*r22*x1991))+((x1983*x1989)));
evalcond[5]=(((x1982*x1988))+(((-1.0)*x1985*x1991))+(((-1.0)*r12*x1990))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.32100151210145)*py))+(((0.332105717227752)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.32100151210145)*px))+(((-0.332105717227752)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.32100151210145)*py))+(((0.332105717227752)*px))))+IKsqr(((((1.32100151210145)*px))+(((-0.332105717227752)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.32100151210145)*py))+(((0.332105717227752)*px))), ((((1.32100151210145)*px))+(((-0.332105717227752)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1992=IKsin(j0);
IkReal x1993=IKcos(j0);
evalcond[0]=((((0.179)*x1992))+(((0.712)*x1993))+(((-1.0)*px)));
evalcond[1]=((((0.712)*x1992))+(((-1.0)*py))+(((-0.179)*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1994=((1.0)*sj5);
IkReal x1995=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1994)));
j4eval[0]=x1995;
j4eval[1]=IKsign(x1995);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1994))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1996=cj5*cj5;
IkReal x1997=((1.0)*r21);
IkReal x1998=(cj5*sj5);
IkReal x1999=((((-1.0)*r01*x1996*x1997))+((r00*r20*x1996))+(((-1.0)*r01*r20*x1998))+((r01*r21))+(((-1.0)*r00*x1997*x1998))+((r02*r22)));
j4eval[0]=x1999;
j4eval[1]=IKsign(x1999);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1997)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2000=cj5*cj5;
IkReal x2001=(cj5*r20);
IkReal x2002=((1.0)*sj5);
IkReal x2003=(r11*r21);
IkReal x2004=(x2003+((r12*r22))+(((-1.0)*cj5*r10*r21*x2002))+(((-1.0)*x2000*x2003))+((r10*r20*x2000))+(((-1.0)*r11*x2001*x2002)));
j4eval[0]=x2004;
j4eval[1]=IKsign(x2004);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x2002))+((sj0*x2001))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2005=cj5*cj5;
IkReal x2006=(cj5*r20);
IkReal x2007=((1.0)*sj5);
IkReal x2008=(r11*r21);
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2007))+((sj0*x2006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(IKsign((x2008+((r12*r22))+(((-1.0)*x2005*x2008))+(((-1.0)*r11*x2006*x2007))+(((-1.0)*cj5*r10*r21*x2007))+((r10*r20*x2005)))),-1);
if(!x2010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2009.value)+(((1.5707963267949)*(x2010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2011=IKsin(j4);
IkReal x2012=IKcos(j4);
IkReal x2013=(cj5*r00);
IkReal x2014=(r11*sj5);
IkReal x2015=(r01*sj5);
IkReal x2016=(cj5*r20);
IkReal x2017=(r21*sj5);
IkReal x2018=(cj5*r10);
IkReal x2019=((1.0)*x2012);
IkReal x2020=((1.0)*x2011);
evalcond[0]=((((-1.0)*x2017*x2020))+((x2011*x2016))+(((-1.0)*r22*x2019)));
evalcond[1]=((((-1.0)*r22*x2020))+(((-1.0)*x2016*x2019))+((x2012*x2017)));
evalcond[2]=(sj0+((x2011*x2013))+(((-1.0)*r02*x2019))+(((-1.0)*x2015*x2020)));
evalcond[3]=((((-1.0)*x2013*x2019))+cj0+(((-1.0)*r02*x2020))+((x2012*x2015)));
evalcond[4]=(sj0+(((-1.0)*r12*x2020))+((x2012*x2014))+(((-1.0)*x2018*x2019)));
evalcond[5]=(((x2011*x2018))+(((-1.0)*r12*x2019))+(((-1.0)*x2014*x2020))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2021=cj5*cj5;
IkReal x2022=((1.0)*r21);
IkReal x2023=(cj5*sj5);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x2022))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2021*x2022))+((r01*r21))+(((-1.0)*r00*x2022*x2023))+(((-1.0)*r01*r20*x2023))+((r02*r22))+((r00*r20*x2021)))),-1);
if(!x2025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2024.value)+(((1.5707963267949)*(x2025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2026=IKsin(j4);
IkReal x2027=IKcos(j4);
IkReal x2028=(cj5*r00);
IkReal x2029=(r11*sj5);
IkReal x2030=(r01*sj5);
IkReal x2031=(cj5*r20);
IkReal x2032=(r21*sj5);
IkReal x2033=(cj5*r10);
IkReal x2034=((1.0)*x2027);
IkReal x2035=((1.0)*x2026);
evalcond[0]=((((-1.0)*r22*x2034))+((x2026*x2031))+(((-1.0)*x2032*x2035)));
evalcond[1]=(((x2027*x2032))+(((-1.0)*r22*x2035))+(((-1.0)*x2031*x2034)));
evalcond[2]=(sj0+((x2026*x2028))+(((-1.0)*r02*x2034))+(((-1.0)*x2030*x2035)));
evalcond[3]=(((x2027*x2030))+cj0+(((-1.0)*r02*x2035))+(((-1.0)*x2028*x2034)));
evalcond[4]=(sj0+(((-1.0)*r12*x2035))+((x2027*x2029))+(((-1.0)*x2033*x2034)));
evalcond[5]=(((x2026*x2033))+(((-1.0)*r12*x2034))+(((-1.0)*x2029*x2035))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2036=((1.0)*sj5);
CheckValue<IkReal> x2037=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2036)))),-1);
if(!x2037.valid){
continue;
}
CheckValue<IkReal> x2038 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2037.value)))+(x2038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2039=IKsin(j4);
IkReal x2040=IKcos(j4);
IkReal x2041=(cj5*r00);
IkReal x2042=(r11*sj5);
IkReal x2043=(r01*sj5);
IkReal x2044=(cj5*r20);
IkReal x2045=(r21*sj5);
IkReal x2046=(cj5*r10);
IkReal x2047=((1.0)*x2040);
IkReal x2048=((1.0)*x2039);
evalcond[0]=((((-1.0)*r22*x2047))+(((-1.0)*x2045*x2048))+((x2039*x2044)));
evalcond[1]=(((x2040*x2045))+(((-1.0)*r22*x2048))+(((-1.0)*x2044*x2047)));
evalcond[2]=(sj0+(((-1.0)*r02*x2047))+((x2039*x2041))+(((-1.0)*x2043*x2048)));
evalcond[3]=(((x2040*x2043))+cj0+(((-1.0)*r02*x2048))+(((-1.0)*x2041*x2047)));
evalcond[4]=(((x2040*x2042))+sj0+(((-1.0)*x2046*x2047))+(((-1.0)*r12*x2048)));
evalcond[5]=(((x2039*x2046))+(((-1.0)*x2042*x2048))+(((-1.0)*cj0))+(((-1.0)*r12*x2047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2049=cj1*cj1;
IkReal x2050=(cj5*r01);
IkReal x2051=(r00*sj5);
IkReal x2052=(cj1*sj1);
IkReal x2053=(cj1*sj2);
IkReal x2054=((1000.0)*py);
IkReal x2055=(cj2*sj1);
IkReal x2056=((138.0)*r10*sj5);
IkReal x2057=((138.0)*cj5*r11);
IkReal x2058=(sj2*x2049);
CheckValue<IkReal> x2059=IKPowWithIntegerCheck(((((712.0)*cj2*sj2))+(((-850.0)*x2058))+(((712.0)*x2052))+(((-850.0)*cj2*x2052))+(((-1424.0)*x2052*(cj2*cj2)))+(((-1424.0)*cj2*x2058))),-1);
if(!x2059.valid){
continue;
}
CheckValue<IkReal> x2060=IKPowWithIntegerCheck((x2053+x2055),-1);
if(!x2060.valid){
continue;
}
if( IKabs(((x2059.value)*((((x2053*x2054))+((x2054*x2055))+(((179.0)*x2051))+(((179.0)*x2050))+(((-1.0)*x2053*x2056))+(((-1.0)*x2053*x2057))+(((-1.0)*x2055*x2057))+(((-1.0)*x2055*x2056)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2060.value)*((x2051+x2050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2059.value)*((((x2053*x2054))+((x2054*x2055))+(((179.0)*x2051))+(((179.0)*x2050))+(((-1.0)*x2053*x2056))+(((-1.0)*x2053*x2057))+(((-1.0)*x2055*x2057))+(((-1.0)*x2055*x2056))))))+IKsqr(((x2060.value)*((x2051+x2050))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2059.value)*((((x2053*x2054))+((x2054*x2055))+(((179.0)*x2051))+(((179.0)*x2050))+(((-1.0)*x2053*x2056))+(((-1.0)*x2053*x2057))+(((-1.0)*x2055*x2057))+(((-1.0)*x2055*x2056))))), ((x2060.value)*((x2051+x2050))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2061=IKcos(j0);
IkReal x2062=IKsin(j0);
IkReal x2063=(sj1*sj2);
IkReal x2064=(cj1*cj2);
IkReal x2065=(cj5*r11);
IkReal x2066=((0.85)*cj1);
IkReal x2067=(cj2*sj1);
IkReal x2068=((1.0)*sj5);
IkReal x2069=(cj5*r01);
IkReal x2070=((0.138)*sj5);
IkReal x2071=(cj1*sj2);
IkReal x2072=((0.712)*x2061);
IkReal x2073=((0.712)*x2062);
evalcond[0]=((((-1.0)*x2069))+(((-1.0)*r00*x2068))+((x2061*x2071))+((x2061*x2067)));
evalcond[1]=((((-1.0)*r10*x2068))+(((-1.0)*x2065))+((x2062*x2067))+((x2062*x2071)));
evalcond[2]=((((-1.0)*x2064*x2072))+(((0.179)*x2062))+(((-1.0)*px))+(((-1.0)*x2061*x2066))+((x2063*x2072))+((r00*x2070))+(((0.138)*x2069)));
evalcond[3]=((((-1.0)*x2064*x2073))+(((-1.0)*py))+(((-1.0)*x2062*x2066))+((x2063*x2073))+((r10*x2070))+(((0.138)*x2065))+(((-0.179)*x2061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2074=((1.0)*sj5);
IkReal x2075=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2074)));
j4eval[0]=x2075;
j4eval[1]=IKsign(x2075);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2074))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2076=((1.0)*sj5);
IkReal x2077=((((-1.0)*r00*x2076))+(((-1.0)*cj5*r01)));
j4eval[0]=x2077;
j4eval[1]=IKsign(x2077);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x2076))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2078=((1.0)*sj5);
IkReal x2079=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2079;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x2078))+(((-1.0)*cj0*r01*x2078))))));
j4eval[2]=IKsign(x2079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2081 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2081)==0){
continue;
}
IkReal x2080=pow(x2081,-0.5);
CheckValue<IkReal> x2082 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2082.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2082.value));
IkReal gconst79=((-1.0)*r21*x2080);
IkReal gconst80=(r20*x2080);
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2083.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2086 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2086.valid){
continue;
}
IkReal x2084=((-1.0)*(x2086.value));
IkReal x2085=x2080;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2084;
IkReal gconst78=x2084;
IkReal gconst79=((-1.0)*r21*x2085);
IkReal gconst80=(r20*x2085);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2089 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2089.valid){
continue;
}
IkReal x2087=((-1.0)*(x2089.value));
IkReal x2088=x2080;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2087;
IkReal gconst78=x2087;
IkReal gconst79=((-1.0)*r21*x2088);
IkReal gconst80=(r20*x2088);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2092 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2092.valid){
continue;
}
IkReal x2090=((-1.0)*(x2092.value));
IkReal x2091=x2080;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2090;
IkReal gconst78=x2090;
IkReal gconst79=((-1.0)*r21*x2091);
IkReal gconst80=(r20*x2091);
IkReal x2093=r22*r22;
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2093))),-1);
if(!x2096.valid){
continue;
}
IkReal x2094=x2096.value;
IkReal x2095=(x2093+(((2.0)*x2094*(r20*r20)*(r21*r21)))+((x2094*(r20*r20*r20*r20)))+((x2094*(r21*r21*r21*r21))));
j4eval[0]=x2095;
j4eval[1]=IKsign(x2095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2097=(gconst80*r20);
IkReal x2098=(gconst79*r21);
IkReal x2099=(cj2*sj1);
IkReal x2100=((1.0)*cj1*sj2);
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2100))+(((-1.0)*r22*x2099)))),IkReal((((x2098*x2099))+(((-1.0)*x2097*x2100))+(((-1.0)*x2097*x2099))+((cj1*sj2*x2098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2097*x2098))+(r22*r22)+(x2097*x2097)+(x2098*x2098))),-1);
if(!x2102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2101.value)+(((1.5707963267949)*(x2102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2103=IKsin(j4);
IkReal x2104=IKcos(j4);
IkReal x2105=((1.0)*cj2);
IkReal x2106=(gconst80*r20);
IkReal x2107=(sj1*sj2);
IkReal x2108=(gconst79*r21);
IkReal x2109=(gconst80*r10);
IkReal x2110=(gconst79*r01);
IkReal x2111=(gconst79*r11);
IkReal x2112=(gconst80*r00);
IkReal x2113=((1.0)*x2104);
IkReal x2114=((1.0)*x2103);
evalcond[0]=(((x2103*x2106))+(((-1.0)*x2108*x2114))+(((-1.0)*r22*x2113)));
evalcond[1]=(sj0+((x2103*x2112))+(((-1.0)*x2110*x2114))+(((-1.0)*r02*x2113)));
evalcond[2]=(((x2103*x2109))+(((-1.0)*x2111*x2114))+(((-1.0)*r12*x2113))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2105))+((x2104*x2108))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2114))+(((-1.0)*x2106*x2113)));
evalcond[4]=((((-1.0)*x2112*x2113))+((cj0*x2107))+(((-1.0)*r02*x2114))+((x2104*x2110))+(((-1.0)*cj0*cj1*x2105)));
evalcond[5]=((((-1.0)*cj1*sj0*x2105))+(((-1.0)*x2109*x2113))+(((-1.0)*r12*x2114))+((x2104*x2111))+((sj0*x2107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2115=((1.0)*gconst79);
CheckValue<IkReal> x2116 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst80*r20))+(((-1.0)*cj0*r21*x2115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2116.valid){
continue;
}
CheckValue<IkReal> x2117=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x2115)))),-1);
if(!x2117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2116.value)+(((1.5707963267949)*(x2117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2118=IKsin(j4);
IkReal x2119=IKcos(j4);
IkReal x2120=((1.0)*cj2);
IkReal x2121=(gconst80*r20);
IkReal x2122=(sj1*sj2);
IkReal x2123=(gconst79*r21);
IkReal x2124=(gconst80*r10);
IkReal x2125=(gconst79*r01);
IkReal x2126=(gconst79*r11);
IkReal x2127=(gconst80*r00);
IkReal x2128=((1.0)*x2119);
IkReal x2129=((1.0)*x2118);
evalcond[0]=((((-1.0)*r22*x2128))+((x2118*x2121))+(((-1.0)*x2123*x2129)));
evalcond[1]=(sj0+(((-1.0)*x2125*x2129))+(((-1.0)*r02*x2128))+((x2118*x2127)));
evalcond[2]=((((-1.0)*r12*x2128))+((x2118*x2124))+(((-1.0)*cj0))+(((-1.0)*x2126*x2129)));
evalcond[3]=((((-1.0)*r22*x2129))+(((-1.0)*cj1*sj2))+(((-1.0)*x2121*x2128))+((x2119*x2123))+(((-1.0)*sj1*x2120)));
evalcond[4]=((((-1.0)*r02*x2129))+((x2119*x2125))+(((-1.0)*x2127*x2128))+((cj0*x2122))+(((-1.0)*cj0*cj1*x2120)));
evalcond[5]=((((-1.0)*cj1*sj0*x2120))+((sj0*x2122))+((x2119*x2126))+(((-1.0)*r12*x2129))+(((-1.0)*x2124*x2128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2130=((1.0)*gconst79);
CheckValue<IkReal> x2131=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2130))+(((-1.0)*gconst80*r11)))),-1);
if(!x2131.valid){
continue;
}
CheckValue<IkReal> x2132 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst80*r20*sj0))+(((-1.0)*r21*sj0*x2130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2131.value)))+(x2132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2133=IKsin(j4);
IkReal x2134=IKcos(j4);
IkReal x2135=((1.0)*cj2);
IkReal x2136=(gconst80*r20);
IkReal x2137=(sj1*sj2);
IkReal x2138=(gconst79*r21);
IkReal x2139=(gconst80*r10);
IkReal x2140=(gconst79*r01);
IkReal x2141=(gconst79*r11);
IkReal x2142=(gconst80*r00);
IkReal x2143=((1.0)*x2134);
IkReal x2144=((1.0)*x2133);
evalcond[0]=((((-1.0)*x2138*x2144))+(((-1.0)*r22*x2143))+((x2133*x2136)));
evalcond[1]=(((x2133*x2142))+sj0+(((-1.0)*r02*x2143))+(((-1.0)*x2140*x2144)));
evalcond[2]=((((-1.0)*r12*x2143))+((x2133*x2139))+(((-1.0)*cj0))+(((-1.0)*x2141*x2144)));
evalcond[3]=((((-1.0)*x2136*x2143))+(((-1.0)*sj1*x2135))+(((-1.0)*cj1*sj2))+((x2134*x2138))+(((-1.0)*r22*x2144)));
evalcond[4]=(((cj0*x2137))+(((-1.0)*x2142*x2143))+(((-1.0)*r02*x2144))+((x2134*x2140))+(((-1.0)*cj0*cj1*x2135)));
evalcond[5]=((((-1.0)*cj1*sj0*x2135))+(((-1.0)*r12*x2144))+((sj0*x2137))+((x2134*x2141))+(((-1.0)*x2139*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2146 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2146)==0){
continue;
}
IkReal x2145=pow(x2146,-0.5);
CheckValue<IkReal> x2147 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2147.value))));
IkReal gconst82=((1.0)*r21*x2145);
IkReal gconst83=((-1.0)*r20*x2145);
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2148.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
IkReal x2149=((1.0)*(x2151.value));
IkReal x2150=x2145;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2149)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2149)));
IkReal gconst82=((1.0)*r21*x2150);
IkReal gconst83=((-1.0)*r20*x2150);
IkReal x2152=r22*r22;
IkReal x2153=((1.0)*x2152);
CheckValue<IkReal> x2157=IKPowWithIntegerCheck(((-1.0)+x2152),-1);
if(!x2157.valid){
continue;
}
IkReal x2154=x2157.value;
if((((1.0)+(((-1.0)*x2153)))) < -0.00001)
continue;
IkReal x2155=IKsqrt(((1.0)+(((-1.0)*x2153))));
IkReal x2156=(sj0*x2154*x2155);
j4eval[0]=((IKabs((x2156+(((-1.0)*x2153*x2156)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
IkReal x2158=((1.0)*(x2160.value));
IkReal x2159=x2145;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2158)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2158)));
IkReal gconst82=((1.0)*r21*x2159);
IkReal gconst83=((-1.0)*r20*x2159);
IkReal x2161=r22*r22;
IkReal x2162=((1.0)*x2161);
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(((-1.0)+x2161),-1);
if(!x2166.valid){
continue;
}
IkReal x2163=x2166.value;
if((((1.0)+(((-1.0)*x2162)))) < -0.00001)
continue;
IkReal x2164=IKsqrt(((1.0)+(((-1.0)*x2162))));
IkReal x2165=(cj0*x2163*x2164);
j4eval[0]=((IKabs((x2165+(((-1.0)*x2162*x2165)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
IkReal x2167=((1.0)*(x2169.value));
IkReal x2168=x2145;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2167)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2167)));
IkReal gconst82=((1.0)*r21*x2168);
IkReal gconst83=((-1.0)*r20*x2168);
IkReal x2170=r22*r22;
IkReal x2171=(cj0*r02);
IkReal x2172=(r12*sj0);
CheckValue<IkReal> x2176=IKPowWithIntegerCheck(((-1.0)+x2170),-1);
if(!x2176.valid){
continue;
}
IkReal x2173=x2176.value;
if((((1.0)+(((-1.0)*x2170)))) < -0.00001)
continue;
IkReal x2174=IKsqrt(((1.0)+(((-1.0)*x2170))));
IkReal x2175=((1.0)*r22*x2173*x2174);
j4eval[0]=0;
j4eval[1]=((IKabs((x2172+x2171)))+(IKabs(((((-1.0)*x2171*x2175))+(((-1.0)*x2172*x2175))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2177=((1.0)*gconst82);
CheckValue<IkReal> x2178 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2177))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*cj0*r01*x2177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2178.valid){
continue;
}
CheckValue<IkReal> x2179=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2178.value)+(((1.5707963267949)*(x2179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2180=IKsin(j4);
IkReal x2181=IKcos(j4);
IkReal x2182=(sj1*sj2);
IkReal x2183=((1.0)*cj2);
IkReal x2184=((1.0)*x2181);
IkReal x2185=(gconst83*x2180);
IkReal x2186=(gconst82*x2181);
IkReal x2187=((1.0)*x2180);
evalcond[0]=(((r20*x2185))+(((-1.0)*r22*x2184))+(((-1.0)*gconst82*r21*x2187)));
evalcond[1]=(sj0+(((-1.0)*r02*x2184))+(((-1.0)*gconst82*r01*x2187))+((r00*x2185)));
evalcond[2]=((((-1.0)*gconst82*r11*x2187))+(((-1.0)*r12*x2184))+(((-1.0)*cj0))+((r10*x2185)));
evalcond[3]=((((-1.0)*gconst83*r20*x2184))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2183))+((r21*x2186))+(((-1.0)*r22*x2187)));
evalcond[4]=((((-1.0)*cj0*cj1*x2183))+((cj0*x2182))+(((-1.0)*r02*x2187))+(((-1.0)*gconst83*r00*x2184))+((r01*x2186)));
evalcond[5]=((((-1.0)*gconst83*r10*x2184))+((sj0*x2182))+((r11*x2186))+(((-1.0)*cj1*sj0*x2183))+(((-1.0)*r12*x2187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2188=((1.0)*gconst82);
CheckValue<IkReal> x2189=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r01))+(((-1.0)*r00*x2188)))),-1);
if(!x2189.valid){
continue;
}
CheckValue<IkReal> x2190 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2188))+((cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2189.value)))+(x2190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2191=IKsin(j4);
IkReal x2192=IKcos(j4);
IkReal x2193=(sj1*sj2);
IkReal x2194=((1.0)*cj2);
IkReal x2195=((1.0)*x2192);
IkReal x2196=(gconst83*x2191);
IkReal x2197=(gconst82*x2192);
IkReal x2198=((1.0)*x2191);
evalcond[0]=(((r20*x2196))+(((-1.0)*r22*x2195))+(((-1.0)*gconst82*r21*x2198)));
evalcond[1]=(sj0+(((-1.0)*r02*x2195))+(((-1.0)*gconst82*r01*x2198))+((r00*x2196)));
evalcond[2]=((((-1.0)*r12*x2195))+((r10*x2196))+(((-1.0)*cj0))+(((-1.0)*gconst82*r11*x2198)));
evalcond[3]=((((-1.0)*gconst83*r20*x2195))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2194))+((r21*x2197))+(((-1.0)*r22*x2198)));
evalcond[4]=((((-1.0)*cj0*cj1*x2194))+(((-1.0)*r02*x2198))+((cj0*x2193))+(((-1.0)*gconst83*r00*x2195))+((r01*x2197)));
evalcond[5]=((((-1.0)*gconst83*r10*x2195))+((sj0*x2193))+((r11*x2197))+(((-1.0)*r12*x2198))+(((-1.0)*cj1*sj0*x2194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2199=((1.0)*gconst82);
CheckValue<IkReal> x2200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2199))+(((-1.0)*gconst83*r11)))),-1);
if(!x2200.valid){
continue;
}
CheckValue<IkReal> x2201 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2199))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2200.value)))+(x2201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2202=IKsin(j4);
IkReal x2203=IKcos(j4);
IkReal x2204=(sj1*sj2);
IkReal x2205=((1.0)*cj2);
IkReal x2206=((1.0)*x2203);
IkReal x2207=(gconst83*x2202);
IkReal x2208=(gconst82*x2203);
IkReal x2209=((1.0)*x2202);
evalcond[0]=(((r20*x2207))+(((-1.0)*gconst82*r21*x2209))+(((-1.0)*r22*x2206)));
evalcond[1]=((((-1.0)*gconst82*r01*x2209))+sj0+((r00*x2207))+(((-1.0)*r02*x2206)));
evalcond[2]=((((-1.0)*r12*x2206))+(((-1.0)*gconst82*r11*x2209))+((r10*x2207))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2205))+(((-1.0)*r22*x2209))+(((-1.0)*cj1*sj2))+((r21*x2208))+(((-1.0)*gconst83*r20*x2206)));
evalcond[4]=((((-1.0)*cj0*cj1*x2205))+((r01*x2208))+((cj0*x2204))+(((-1.0)*gconst83*r00*x2206))+(((-1.0)*r02*x2209)));
evalcond[5]=((((-1.0)*r12*x2209))+((r11*x2208))+(((-1.0)*cj1*sj0*x2205))+(((-1.0)*gconst83*r10*x2206))+((sj0*x2204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2210=((-1.0)*r00);
IkReal x2212 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2212)==0){
continue;
}
IkReal x2211=pow(x2212,-0.5);
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2210),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2213.value));
IkReal gconst85=(r01*x2211);
IkReal gconst86=(x2210*x2211);
CheckValue<IkReal> x2214 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2214.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2214.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2215=((-1.0)*r00);
IkReal x2216=x2211;
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2215),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
IkReal x2217=((-1.0)*(x2218.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2217;
IkReal gconst84=x2217;
IkReal gconst85=(r01*x2216);
IkReal gconst86=(x2215*x2216);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2219=((1.0)*gconst85);
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2219))+((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*r11*sj0*x2219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
CheckValue<IkReal> x2221=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2220.value)+(((1.5707963267949)*(x2221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2222=IKsin(j4);
IkReal x2223=IKcos(j4);
IkReal x2224=((1.0)*cj2);
IkReal x2225=(sj1*sj2);
IkReal x2226=((1.0)*x2223);
IkReal x2227=(gconst86*x2222);
IkReal x2228=(gconst85*x2223);
IkReal x2229=((1.0)*x2222);
IkReal x2230=(gconst85*x2229);
evalcond[0]=((((-1.0)*r21*x2230))+((r20*x2227))+(((-1.0)*r22*x2226)));
evalcond[1]=(sj0+(((-1.0)*r01*x2230))+(((-1.0)*r02*x2226))+((r00*x2227)));
evalcond[2]=(((r10*x2227))+(((-1.0)*r12*x2226))+(((-1.0)*r11*x2230))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r21*x2228))+(((-1.0)*sj1*x2224))+(((-1.0)*gconst86*r20*x2226))+(((-1.0)*r22*x2229)));
evalcond[4]=(((cj0*x2225))+(((-1.0)*gconst86*r00*x2226))+(((-1.0)*r02*x2229))+((r01*x2228))+(((-1.0)*cj0*cj1*x2224)));
evalcond[5]=(((sj0*x2225))+(((-1.0)*r12*x2229))+(((-1.0)*cj1*sj0*x2224))+((r11*x2228))+(((-1.0)*gconst86*r10*x2226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2231=((1.0)*gconst85);
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2231))+((gconst86*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
CheckValue<IkReal> x2233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2231))+(((-1.0)*gconst86*r11)))),-1);
if(!x2233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2232.value)+(((1.5707963267949)*(x2233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2234=IKsin(j4);
IkReal x2235=IKcos(j4);
IkReal x2236=((1.0)*cj2);
IkReal x2237=(sj1*sj2);
IkReal x2238=((1.0)*x2235);
IkReal x2239=(gconst86*x2234);
IkReal x2240=(gconst85*x2235);
IkReal x2241=((1.0)*x2234);
IkReal x2242=(gconst85*x2241);
evalcond[0]=(((r20*x2239))+(((-1.0)*r22*x2238))+(((-1.0)*r21*x2242)));
evalcond[1]=(sj0+(((-1.0)*r01*x2242))+(((-1.0)*r02*x2238))+((r00*x2239)));
evalcond[2]=(((r10*x2239))+(((-1.0)*r11*x2242))+(((-1.0)*r12*x2238))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2241))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2236))+((r21*x2240))+(((-1.0)*gconst86*r20*x2238)));
evalcond[4]=((((-1.0)*r02*x2241))+((cj0*x2237))+(((-1.0)*gconst86*r00*x2238))+((r01*x2240))+(((-1.0)*cj0*cj1*x2236)));
evalcond[5]=(((r11*x2240))+((sj0*x2237))+(((-1.0)*r12*x2241))+(((-1.0)*cj1*sj0*x2236))+(((-1.0)*gconst86*r10*x2238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2243=((-1.0)*r01);
IkReal x2245 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2245)==0){
continue;
}
IkReal x2244=pow(x2245,-0.5);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(x2243),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2246.value))));
IkReal gconst88=(x2243*x2244);
IkReal gconst89=((1.0)*r00*x2244);
CheckValue<IkReal> x2247 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2247.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2247.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2248=((-1.0)*r01);
CheckValue<IkReal> x2251 = IKatan2WithCheck(IkReal(x2248),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2251.valid){
continue;
}
IkReal x2249=((1.0)*(x2251.value));
IkReal x2250=x2244;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2249)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2249)));
IkReal gconst88=(x2248*x2250);
IkReal gconst89=((1.0)*r00*x2250);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2252=((-1.0)*r01);
CheckValue<IkReal> x2255 = IKatan2WithCheck(IkReal(x2252),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2255.valid){
continue;
}
IkReal x2253=((1.0)*(x2255.value));
IkReal x2254=x2244;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2253)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2253)));
IkReal gconst88=(x2252*x2254);
IkReal gconst89=((1.0)*r00*x2254);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2256=((-1.0)*r01);
CheckValue<IkReal> x2259 = IKatan2WithCheck(IkReal(x2256),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2259.valid){
continue;
}
IkReal x2257=((1.0)*(x2259.value));
IkReal x2258=x2244;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2257)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2257)));
IkReal gconst88=(x2256*x2258);
IkReal gconst89=((1.0)*r00*x2258);
IkReal x2260=r02*r02;
IkReal x2261=(r12*sj0);
IkReal x2262=x2244;
IkReal x2263=(cj0*x2262);
j4eval[0]=((IKabs((x2261+((cj0*r02)))))+(IKabs((((x2260*x2263))+(((-1.0)*x2263))+((r02*x2261*x2262))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2264=((1.0)*gconst88);
CheckValue<IkReal> x2265 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2264))+(((-1.0)*r11*sj0*x2264))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2265.valid){
continue;
}
CheckValue<IkReal> x2266=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2265.value)+(((1.5707963267949)*(x2266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2267=IKsin(j4);
IkReal x2268=IKcos(j4);
IkReal x2269=((1.0)*cj1);
IkReal x2270=(gconst89*r10);
IkReal x2271=(sj1*sj2);
IkReal x2272=((1.0)*x2268);
IkReal x2273=(gconst88*x2268);
IkReal x2274=(gconst89*x2267);
IkReal x2275=((1.0)*x2267);
evalcond[0]=((((-1.0)*r22*x2272))+((r20*x2274))+(((-1.0)*gconst88*r21*x2275)));
evalcond[1]=(((r00*x2274))+sj0+(((-1.0)*r02*x2272))+(((-1.0)*gconst88*r01*x2275)));
evalcond[2]=((((-1.0)*gconst88*r11*x2275))+((x2267*x2270))+(((-1.0)*r12*x2272))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst89*r20*x2272))+((r21*x2273))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2275))+(((-1.0)*sj2*x2269)));
evalcond[4]=((((-1.0)*cj0*cj2*x2269))+((r01*x2273))+(((-1.0)*gconst89*r00*x2272))+((cj0*x2271))+(((-1.0)*r02*x2275)));
evalcond[5]=(((sj0*x2271))+(((-1.0)*x2270*x2272))+((r11*x2273))+(((-1.0)*cj2*sj0*x2269))+(((-1.0)*r12*x2275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2276=((1.0)*gconst88);
CheckValue<IkReal> x2277 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x2276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2277.valid){
continue;
}
CheckValue<IkReal> x2278=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x2276)))),-1);
if(!x2278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2277.value)+(((1.5707963267949)*(x2278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2279=IKsin(j4);
IkReal x2280=IKcos(j4);
IkReal x2281=((1.0)*cj1);
IkReal x2282=(gconst89*r10);
IkReal x2283=(sj1*sj2);
IkReal x2284=((1.0)*x2280);
IkReal x2285=(gconst88*x2280);
IkReal x2286=(gconst89*x2279);
IkReal x2287=((1.0)*x2279);
evalcond[0]=((((-1.0)*gconst88*r21*x2287))+((r20*x2286))+(((-1.0)*r22*x2284)));
evalcond[1]=((((-1.0)*r02*x2284))+sj0+(((-1.0)*gconst88*r01*x2287))+((r00*x2286)));
evalcond[2]=((((-1.0)*r12*x2284))+((x2279*x2282))+(((-1.0)*gconst88*r11*x2287))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2281))+((r21*x2285))+(((-1.0)*gconst89*r20*x2284))+(((-1.0)*r22*x2287)));
evalcond[4]=(((cj0*x2283))+(((-1.0)*r02*x2287))+(((-1.0)*gconst89*r00*x2284))+(((-1.0)*cj0*cj2*x2281))+((r01*x2285)));
evalcond[5]=((((-1.0)*x2282*x2284))+(((-1.0)*cj2*sj0*x2281))+((r11*x2285))+(((-1.0)*r12*x2287))+((sj0*x2283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2288=((1.0)*gconst88);
CheckValue<IkReal> x2289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r11))+(((-1.0)*r10*x2288)))),-1);
if(!x2289.valid){
continue;
}
CheckValue<IkReal> x2290 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x2288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2289.value)))+(x2290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2291=IKsin(j4);
IkReal x2292=IKcos(j4);
IkReal x2293=((1.0)*cj1);
IkReal x2294=(gconst89*r10);
IkReal x2295=(sj1*sj2);
IkReal x2296=((1.0)*x2292);
IkReal x2297=(gconst88*x2292);
IkReal x2298=(gconst89*x2291);
IkReal x2299=((1.0)*x2291);
evalcond[0]=((((-1.0)*gconst88*r21*x2299))+((r20*x2298))+(((-1.0)*r22*x2296)));
evalcond[1]=(sj0+(((-1.0)*gconst88*r01*x2299))+(((-1.0)*r02*x2296))+((r00*x2298)));
evalcond[2]=(((x2291*x2294))+(((-1.0)*gconst88*r11*x2299))+(((-1.0)*r12*x2296))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst89*r20*x2296))+(((-1.0)*cj2*sj1))+((r21*x2297))+(((-1.0)*sj2*x2293))+(((-1.0)*r22*x2299)));
evalcond[4]=(((cj0*x2295))+(((-1.0)*r02*x2299))+(((-1.0)*cj0*cj2*x2293))+((r01*x2297))+(((-1.0)*gconst89*r00*x2296)));
evalcond[5]=(((sj0*x2295))+(((-1.0)*r12*x2299))+(((-1.0)*cj2*sj0*x2293))+(((-1.0)*x2294*x2296))+((r11*x2297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2300=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2300;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2300);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2301=((1.0)*sj5);
IkReal x2302=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2301)));
j4eval[0]=x2302;
j4eval[1]=IKsign(x2302);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x2301))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2303=cj5*cj5;
IkReal x2304=r01*r01;
IkReal x2305=(cj5*r00);
IkReal x2306=(r01*sj5);
IkReal x2307=(x2304+((x2303*(r00*r00)))+(r02*r02)+(((-1.0)*x2303*x2304))+(((-2.0)*x2305*x2306)));
j4eval[0]=x2307;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2305))+x2306))));
j4eval[2]=IKsign(x2307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2308=cj5*cj5;
IkReal x2309=r01*r01;
IkReal x2310=(r01*sj5);
IkReal x2311=(cj5*r00);
CheckValue<IkReal> x2312=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2310*x2311))+x2309+((x2308*(r00*r00)))+(((-1.0)*x2308*x2309))+(r02*r02))),-1);
if(!x2312.valid){
continue;
}
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(((((-1.0)*x2311))+x2310)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2312.value)))+(x2313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2314=IKsin(j4);
IkReal x2315=IKcos(j4);
IkReal x2316=(cj5*r00);
IkReal x2317=((1.0)*cj1);
IkReal x2318=(cj5*r20);
IkReal x2319=(cj5*r10);
IkReal x2320=((1.0)*x2315);
IkReal x2321=(sj5*x2315);
IkReal x2322=((1.0)*x2314);
IkReal x2323=(sj5*x2322);
evalcond[0]=((((-1.0)*r22*x2320))+((x2314*x2318))+(((-1.0)*r21*x2323)));
evalcond[1]=((((-1.0)*r12*x2320))+((x2314*x2319))+(((-1.0)*r11*x2323)));
evalcond[2]=(((r01*x2321))+(((-1.0)*r02*x2322))+(((-1.0)*x2316*x2320)));
evalcond[3]=((1.0)+((x2314*x2316))+(((-1.0)*r01*x2323))+(((-1.0)*r02*x2320)));
evalcond[4]=((((-1.0)*cj2*x2317))+((r11*x2321))+((sj1*sj2))+(((-1.0)*x2319*x2320))+(((-1.0)*r12*x2322)));
evalcond[5]=((((-1.0)*x2318*x2320))+(((-1.0)*r22*x2322))+((r21*x2321))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2324=((1.0)*sj5);
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2324)))),-1);
if(!x2326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2325.value)+(((1.5707963267949)*(x2326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2327=IKsin(j4);
IkReal x2328=IKcos(j4);
IkReal x2329=(cj5*r00);
IkReal x2330=((1.0)*cj1);
IkReal x2331=(cj5*r20);
IkReal x2332=(cj5*r10);
IkReal x2333=((1.0)*x2328);
IkReal x2334=(sj5*x2328);
IkReal x2335=((1.0)*x2327);
IkReal x2336=(sj5*x2335);
evalcond[0]=((((-1.0)*r22*x2333))+((x2327*x2331))+(((-1.0)*r21*x2336)));
evalcond[1]=(((x2327*x2332))+(((-1.0)*r11*x2336))+(((-1.0)*r12*x2333)));
evalcond[2]=(((r01*x2334))+(((-1.0)*r02*x2335))+(((-1.0)*x2329*x2333)));
evalcond[3]=((1.0)+((x2327*x2329))+(((-1.0)*r01*x2336))+(((-1.0)*r02*x2333)));
evalcond[4]=((((-1.0)*x2332*x2333))+((sj1*sj2))+(((-1.0)*cj2*x2330))+((r11*x2334))+(((-1.0)*r12*x2335)));
evalcond[5]=(((r21*x2334))+(((-1.0)*r22*x2335))+(((-1.0)*x2331*x2333))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2337 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
CheckValue<IkReal> x2338=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2337.value)+(((1.5707963267949)*(x2338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2339=IKsin(j4);
IkReal x2340=IKcos(j4);
IkReal x2341=(cj5*r00);
IkReal x2342=((1.0)*cj1);
IkReal x2343=(cj5*r20);
IkReal x2344=(cj5*r10);
IkReal x2345=((1.0)*x2340);
IkReal x2346=(sj5*x2340);
IkReal x2347=((1.0)*x2339);
IkReal x2348=(sj5*x2347);
evalcond[0]=((((-1.0)*r21*x2348))+(((-1.0)*r22*x2345))+((x2339*x2343)));
evalcond[1]=(((x2339*x2344))+(((-1.0)*r11*x2348))+(((-1.0)*r12*x2345)));
evalcond[2]=(((r01*x2346))+(((-1.0)*x2341*x2345))+(((-1.0)*r02*x2347)));
evalcond[3]=((1.0)+(((-1.0)*r01*x2348))+(((-1.0)*r02*x2345))+((x2339*x2341)));
evalcond[4]=((((-1.0)*x2344*x2345))+(((-1.0)*cj2*x2342))+((sj1*sj2))+((r11*x2346))+(((-1.0)*r12*x2347)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2342))+(((-1.0)*r22*x2347))+(((-1.0)*x2343*x2345))+((r21*x2346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2349=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2349;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2350=((1.0)*sj5);
IkReal x2351=((((-1.0)*r20*x2350))+(((-1.0)*cj5*r21)));
j4eval[0]=x2351;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2350))))));
j4eval[2]=IKsign(x2351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2352=cj5*cj5;
IkReal x2353=r01*r01;
IkReal x2354=(r01*sj5);
IkReal x2355=(cj5*r00);
IkReal x2356=((((-1.0)*x2352*(r00*r00)))+(((-1.0)*x2353))+((x2352*x2353))+(((-1.0)*(r02*r02)))+(((2.0)*x2354*x2355)));
j4eval[0]=x2356;
j4eval[1]=IKsign(x2356);
j4eval[2]=((IKabs(r02))+(IKabs((x2354+(((-1.0)*x2355))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2357=cj5*cj5;
IkReal x2358=r01*r01;
IkReal x2359=(r01*sj5);
IkReal x2360=(cj5*r00);
CheckValue<IkReal> x2361=IKPowWithIntegerCheck(IKsign((((x2357*x2358))+(((-1.0)*x2358))+(((-1.0)*(r02*r02)))+(((2.0)*x2359*x2360))+(((-1.0)*x2357*(r00*r00))))),-1);
if(!x2361.valid){
continue;
}
CheckValue<IkReal> x2362 = IKatan2WithCheck(IkReal((x2359+(((-1.0)*x2360)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2361.value)))+(x2362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2363=IKsin(j4);
IkReal x2364=IKcos(j4);
IkReal x2365=(cj5*r00);
IkReal x2366=((1.0)*sj2);
IkReal x2367=(cj5*r20);
IkReal x2368=(cj5*r10);
IkReal x2369=((1.0)*x2364);
IkReal x2370=(sj5*x2364);
IkReal x2371=((1.0)*x2363);
IkReal x2372=(sj5*x2371);
evalcond[0]=((((-1.0)*r21*x2372))+(((-1.0)*r22*x2369))+((x2363*x2367)));
evalcond[1]=(((x2363*x2368))+(((-1.0)*r11*x2372))+(((-1.0)*r12*x2369)));
evalcond[2]=((((-1.0)*r02*x2371))+(((-1.0)*x2365*x2369))+((r01*x2370)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x2372))+((x2363*x2365))+(((-1.0)*r02*x2369)));
evalcond[4]=((((-1.0)*x2368*x2369))+((cj1*cj2))+(((-1.0)*r12*x2371))+(((-1.0)*sj1*x2366))+((r11*x2370)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x2371))+(((-1.0)*x2367*x2369))+(((-1.0)*cj1*x2366))+((r21*x2370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2373=((1.0)*sj5);
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
CheckValue<IkReal> x2375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2373))+(((-1.0)*cj5*r21)))),-1);
if(!x2375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2374.value)+(((1.5707963267949)*(x2375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2376=IKsin(j4);
IkReal x2377=IKcos(j4);
IkReal x2378=(cj5*r00);
IkReal x2379=((1.0)*sj2);
IkReal x2380=(cj5*r20);
IkReal x2381=(cj5*r10);
IkReal x2382=((1.0)*x2377);
IkReal x2383=(sj5*x2377);
IkReal x2384=((1.0)*x2376);
IkReal x2385=(sj5*x2384);
evalcond[0]=(((x2376*x2380))+(((-1.0)*r21*x2385))+(((-1.0)*r22*x2382)));
evalcond[1]=((((-1.0)*r12*x2382))+((x2376*x2381))+(((-1.0)*r11*x2385)));
evalcond[2]=((((-1.0)*r02*x2384))+((r01*x2383))+(((-1.0)*x2378*x2382)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2382))+(((-1.0)*r01*x2385))+((x2376*x2378)));
evalcond[4]=((((-1.0)*r12*x2384))+(((-1.0)*x2381*x2382))+((cj1*cj2))+((r11*x2383))+(((-1.0)*sj1*x2379)));
evalcond[5]=((((-1.0)*x2380*x2382))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2384))+((r21*x2383))+(((-1.0)*cj1*x2379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2386=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2386.valid){
continue;
}
CheckValue<IkReal> x2387 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2386.value)))+(x2387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2388=IKsin(j4);
IkReal x2389=IKcos(j4);
IkReal x2390=(cj5*r00);
IkReal x2391=((1.0)*sj2);
IkReal x2392=(cj5*r20);
IkReal x2393=(cj5*r10);
IkReal x2394=((1.0)*x2389);
IkReal x2395=(sj5*x2389);
IkReal x2396=((1.0)*x2388);
IkReal x2397=(sj5*x2396);
evalcond[0]=((((-1.0)*r21*x2397))+(((-1.0)*r22*x2394))+((x2388*x2392)));
evalcond[1]=(((x2388*x2393))+(((-1.0)*r12*x2394))+(((-1.0)*r11*x2397)));
evalcond[2]=((((-1.0)*r02*x2396))+((r01*x2395))+(((-1.0)*x2390*x2394)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x2397))+(((-1.0)*r02*x2394))+((x2388*x2390)));
evalcond[4]=((((-1.0)*sj1*x2391))+((cj1*cj2))+((r11*x2395))+(((-1.0)*x2393*x2394))+(((-1.0)*r12*x2396)));
evalcond[5]=((((-1.0)*cj1*x2391))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2396))+(((-1.0)*x2392*x2394))+((r21*x2395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2398=((-1.0)*r10);
IkReal x2400 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2400)==0){
continue;
}
IkReal x2399=pow(x2400,-0.5);
CheckValue<IkReal> x2401 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2398),IKFAST_ATAN2_MAGTHRESH);
if(!x2401.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2401.value));
IkReal gconst91=(r11*x2399);
IkReal gconst92=(x2398*x2399);
CheckValue<IkReal> x2402 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2402.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2402.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2403=((-1.0)*r10);
IkReal x2404=x2399;
CheckValue<IkReal> x2406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2403),IKFAST_ATAN2_MAGTHRESH);
if(!x2406.valid){
continue;
}
IkReal x2405=((-1.0)*(x2406.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2405;
IkReal gconst90=x2405;
IkReal gconst91=(r11*x2404);
IkReal gconst92=(x2403*x2404);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2407=((1.0)*gconst91);
CheckValue<IkReal> x2408 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*cj0*r01*x2407))+(((-1.0)*r11*sj0*x2407))+((gconst92*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2408.valid){
continue;
}
CheckValue<IkReal> x2409=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2408.value)+(((1.5707963267949)*(x2409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2410=IKsin(j4);
IkReal x2411=IKcos(j4);
IkReal x2412=((1.0)*cj2);
IkReal x2413=(gconst92*r00);
IkReal x2414=(sj1*sj2);
IkReal x2415=((1.0)*x2411);
IkReal x2416=(gconst91*x2411);
IkReal x2417=((1.0)*x2410);
IkReal x2418=(gconst92*x2410);
IkReal x2419=(gconst91*x2417);
evalcond[0]=(((r20*x2418))+(((-1.0)*r22*x2415))+(((-1.0)*r21*x2419)));
evalcond[1]=(sj0+((x2410*x2413))+(((-1.0)*r02*x2415))+(((-1.0)*r01*x2419)));
evalcond[2]=(((r10*x2418))+(((-1.0)*r11*x2419))+(((-1.0)*r12*x2415))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2416))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2417))+(((-1.0)*sj1*x2412))+(((-1.0)*gconst92*r20*x2415)));
evalcond[4]=((((-1.0)*cj0*cj1*x2412))+((r01*x2416))+((cj0*x2414))+(((-1.0)*r02*x2417))+(((-1.0)*x2413*x2415)));
evalcond[5]=(((r11*x2416))+(((-1.0)*cj1*sj0*x2412))+(((-1.0)*r12*x2417))+((sj0*x2414))+(((-1.0)*gconst92*r10*x2415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2420=((1.0)*gconst91);
CheckValue<IkReal> x2421=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst92*r01))+(((-1.0)*r00*x2420)))),-1);
if(!x2421.valid){
continue;
}
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst92*r20))+(((-1.0)*cj0*r21*x2420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2421.value)))+(x2422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2423=IKsin(j4);
IkReal x2424=IKcos(j4);
IkReal x2425=((1.0)*cj2);
IkReal x2426=(gconst92*r00);
IkReal x2427=(sj1*sj2);
IkReal x2428=((1.0)*x2424);
IkReal x2429=(gconst91*x2424);
IkReal x2430=((1.0)*x2423);
IkReal x2431=(gconst92*x2423);
IkReal x2432=(gconst91*x2430);
evalcond[0]=(((r20*x2431))+(((-1.0)*r22*x2428))+(((-1.0)*r21*x2432)));
evalcond[1]=((((-1.0)*r02*x2428))+sj0+((x2423*x2426))+(((-1.0)*r01*x2432)));
evalcond[2]=((((-1.0)*r12*x2428))+(((-1.0)*r11*x2432))+(((-1.0)*cj0))+((r10*x2431)));
evalcond[3]=((((-1.0)*r22*x2430))+((r21*x2429))+(((-1.0)*gconst92*r20*x2428))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2425)));
evalcond[4]=((((-1.0)*r02*x2430))+(((-1.0)*cj0*cj1*x2425))+((r01*x2429))+((cj0*x2427))+(((-1.0)*x2426*x2428)));
evalcond[5]=((((-1.0)*gconst92*r10*x2428))+((sj0*x2427))+((r11*x2429))+(((-1.0)*r12*x2430))+(((-1.0)*cj1*sj0*x2425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2433=((-1.0)*r11);
IkReal x2435 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2435)==0){
continue;
}
IkReal x2434=pow(x2435,-0.5);
CheckValue<IkReal> x2436 = IKatan2WithCheck(IkReal(x2433),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2436.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2436.value))));
IkReal gconst94=(x2433*x2434);
IkReal gconst95=((1.0)*r10*x2434);
CheckValue<IkReal> x2437 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2437.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2437.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2438=((-1.0)*r11);
CheckValue<IkReal> x2441 = IKatan2WithCheck(IkReal(x2438),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2441.valid){
continue;
}
IkReal x2439=((1.0)*(x2441.value));
IkReal x2440=x2434;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2439)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2439)));
IkReal gconst94=(x2438*x2440);
IkReal gconst95=((1.0)*r10*x2440);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2442=((-1.0)*r11);
CheckValue<IkReal> x2445 = IKatan2WithCheck(IkReal(x2442),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2445.valid){
continue;
}
IkReal x2443=((1.0)*(x2445.value));
IkReal x2444=x2434;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2443)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2443)));
IkReal gconst94=(x2442*x2444);
IkReal gconst95=((1.0)*r10*x2444);
IkReal x2446=r12*r12;
IkReal x2447=(cj0*r02);
IkReal x2448=x2434;
IkReal x2449=(sj0*x2448);
j4eval[0]=((IKabs((((x2446*x2449))+((r12*x2447*x2448))+(((-1.0)*x2449)))))+(IKabs((x2447+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2450=((-1.0)*r11);
CheckValue<IkReal> x2453 = IKatan2WithCheck(IkReal(x2450),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2453.valid){
continue;
}
IkReal x2451=((1.0)*(x2453.value));
IkReal x2452=x2434;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2451)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2451)));
IkReal gconst94=(x2450*x2452);
IkReal gconst95=((1.0)*r10*x2452);
IkReal x2454=r12*r12;
IkReal x2455=((1.0)*r22);
IkReal x2456=(cj1*sj2);
IkReal x2457=(cj2*sj1);
CheckValue<IkReal> x2461=IKPowWithIntegerCheck(((-1.0)+x2454),-1);
if(!x2461.valid){
continue;
}
IkReal x2458=x2461.value;
if((((1.0)+(((-1.0)*x2454)))) < -0.00001)
continue;
IkReal x2459=IKsqrt(((1.0)+(((-1.0)*x2454))));
IkReal x2460=(r12*x2458*x2459);
j4eval[0]=((IKabs(((((-1.0)*x2455*x2456*x2460))+(((-1.0)*x2455*x2457*x2460)))))+(IKabs(((((-1.0)*x2455*x2457))+(((-1.0)*x2455*x2456))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2462=(cj2*sj1);
IkReal x2463=(gconst95*r20);
IkReal x2464=(cj1*sj2);
IkReal x2465=((1.0)*r22);
IkReal x2466=(gconst94*r21);
CheckValue<IkReal> x2467 = IKatan2WithCheck(IkReal(((((-1.0)*x2464*x2465))+(((-1.0)*x2462*x2465)))),IkReal((((x2464*x2466))+((x2462*x2466))+(((-1.0)*x2463*x2464))+(((-1.0)*x2462*x2463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2467.valid){
continue;
}
CheckValue<IkReal> x2468=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2463*x2466))+(r22*r22)+(x2463*x2463)+(x2466*x2466))),-1);
if(!x2468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2467.value)+(((1.5707963267949)*(x2468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2469=IKsin(j4);
IkReal x2470=IKcos(j4);
IkReal x2471=((1.0)*cj2);
IkReal x2472=(gconst95*r10);
IkReal x2473=(sj1*sj2);
IkReal x2474=((1.0)*x2470);
IkReal x2475=(gconst95*x2469);
IkReal x2476=(gconst94*x2470);
IkReal x2477=((1.0)*x2469);
IkReal x2478=(gconst94*x2477);
evalcond[0]=((((-1.0)*r21*x2478))+((r20*x2475))+(((-1.0)*r22*x2474)));
evalcond[1]=((((-1.0)*r01*x2478))+sj0+((r00*x2475))+(((-1.0)*r02*x2474)));
evalcond[2]=((((-1.0)*r11*x2478))+(((-1.0)*r12*x2474))+((x2469*x2472))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2476))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst95*r20*x2474))+(((-1.0)*r22*x2477))+(((-1.0)*sj1*x2471)));
evalcond[4]=((((-1.0)*cj0*cj1*x2471))+((r01*x2476))+(((-1.0)*gconst95*r00*x2474))+((cj0*x2473))+(((-1.0)*r02*x2477)));
evalcond[5]=((((-1.0)*cj1*sj0*x2471))+(((-1.0)*r12*x2477))+(((-1.0)*x2472*x2474))+((sj0*x2473))+((r11*x2476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2479=((1.0)*gconst94);
CheckValue<IkReal> x2480=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x2480.valid){
continue;
}
CheckValue<IkReal> x2481 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2479))+((gconst95*r10*sj0))+(((-1.0)*r11*sj0*x2479))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2480.value)))+(x2481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2482=IKsin(j4);
IkReal x2483=IKcos(j4);
IkReal x2484=((1.0)*cj2);
IkReal x2485=(gconst95*r10);
IkReal x2486=(sj1*sj2);
IkReal x2487=((1.0)*x2483);
IkReal x2488=(gconst95*x2482);
IkReal x2489=(gconst94*x2483);
IkReal x2490=((1.0)*x2482);
IkReal x2491=(gconst94*x2490);
evalcond[0]=((((-1.0)*r22*x2487))+(((-1.0)*r21*x2491))+((r20*x2488)));
evalcond[1]=(sj0+(((-1.0)*r01*x2491))+(((-1.0)*r02*x2487))+((r00*x2488)));
evalcond[2]=(((x2482*x2485))+(((-1.0)*r11*x2491))+(((-1.0)*r12*x2487))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst95*r20*x2487))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2484))+((r21*x2489))+(((-1.0)*r22*x2490)));
evalcond[4]=(((r01*x2489))+(((-1.0)*gconst95*r00*x2487))+(((-1.0)*r02*x2490))+((cj0*x2486))+(((-1.0)*cj0*cj1*x2484)));
evalcond[5]=(((sj0*x2486))+(((-1.0)*cj1*sj0*x2484))+((r11*x2489))+(((-1.0)*x2485*x2487))+(((-1.0)*r12*x2490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2492=((1.0)*gconst94);
CheckValue<IkReal> x2493 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2492))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2493.valid){
continue;
}
CheckValue<IkReal> x2494=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x2492)))),-1);
if(!x2494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2493.value)+(((1.5707963267949)*(x2494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2495=IKsin(j4);
IkReal x2496=IKcos(j4);
IkReal x2497=((1.0)*cj2);
IkReal x2498=(gconst95*r10);
IkReal x2499=(sj1*sj2);
IkReal x2500=((1.0)*x2496);
IkReal x2501=(gconst95*x2495);
IkReal x2502=(gconst94*x2496);
IkReal x2503=((1.0)*x2495);
IkReal x2504=(gconst94*x2503);
evalcond[0]=((((-1.0)*r22*x2500))+((r20*x2501))+(((-1.0)*r21*x2504)));
evalcond[1]=((((-1.0)*r02*x2500))+sj0+(((-1.0)*r01*x2504))+((r00*x2501)));
evalcond[2]=(((x2495*x2498))+(((-1.0)*r12*x2500))+(((-1.0)*r11*x2504))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2497))+(((-1.0)*r22*x2503))+(((-1.0)*gconst95*r20*x2500))+((r21*x2502)));
evalcond[4]=((((-1.0)*r02*x2503))+((cj0*x2499))+(((-1.0)*cj0*cj1*x2497))+(((-1.0)*gconst95*r00*x2500))+((r01*x2502)));
evalcond[5]=((((-1.0)*x2498*x2500))+(((-1.0)*r12*x2503))+(((-1.0)*cj1*sj0*x2497))+((r11*x2502))+((sj0*x2499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2505=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2505;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x2505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2506=((1.0)*sj5);
IkReal x2507=((((-1.0)*r00*x2506))+(((-1.0)*cj5*r01)));
j4eval[0]=x2507;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x2506))))));
j4eval[2]=IKsign(x2507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2508=cj5*cj5;
IkReal x2509=r11*r11;
IkReal x2510=(cj5*r10);
IkReal x2511=(r11*sj5);
IkReal x2512=((((-1.0)*x2508*(r10*r10)))+(((2.0)*x2510*x2511))+((x2508*x2509))+(((-1.0)*(r12*r12)))+(((-1.0)*x2509)));
j4eval[0]=x2512;
j4eval[1]=((IKabs(r12))+(IKabs((x2511+(((-1.0)*x2510))))));
j4eval[2]=IKsign(x2512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2513=cj5*cj5;
IkReal x2514=r11*r11;
IkReal x2515=(cj5*r10);
IkReal x2516=(r11*sj5);
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal((x2516+(((-1.0)*x2515)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
CheckValue<IkReal> x2518=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*x2514))+(((-1.0)*x2513*(r10*r10)))+((x2513*x2514))+(((2.0)*x2515*x2516)))),-1);
if(!x2518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2517.value)+(((1.5707963267949)*(x2518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2519=IKsin(j4);
IkReal x2520=IKcos(j4);
IkReal x2521=(cj5*r00);
IkReal x2522=((1.0)*cj1);
IkReal x2523=((1.0)*x2520);
IkReal x2524=(sj5*x2520);
IkReal x2525=(cj5*x2519);
IkReal x2526=((1.0)*x2519);
IkReal x2527=(sj5*x2526);
evalcond[0]=((((-1.0)*r21*x2527))+((r20*x2525))+(((-1.0)*r22*x2523)));
evalcond[1]=(((x2519*x2521))+(((-1.0)*r01*x2527))+(((-1.0)*r02*x2523)));
evalcond[2]=((((-1.0)*r12*x2526))+((r11*x2524))+(((-1.0)*cj5*r10*x2523)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2523))+(((-1.0)*r11*x2527))+((r10*x2525)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x2522))+((r01*x2524))+(((-1.0)*r02*x2526))+(((-1.0)*x2521*x2523)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2522))+(((-1.0)*cj5*r20*x2523))+((r21*x2524))+(((-1.0)*r22*x2526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2528=((1.0)*sj5);
CheckValue<IkReal> x2529 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2529.valid){
continue;
}
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2528))+(((-1.0)*cj5*r01)))),-1);
if(!x2530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2529.value)+(((1.5707963267949)*(x2530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2531=IKsin(j4);
IkReal x2532=IKcos(j4);
IkReal x2533=(cj5*r00);
IkReal x2534=((1.0)*cj1);
IkReal x2535=((1.0)*x2532);
IkReal x2536=(sj5*x2532);
IkReal x2537=(cj5*x2531);
IkReal x2538=((1.0)*x2531);
IkReal x2539=(sj5*x2538);
evalcond[0]=((((-1.0)*r21*x2539))+((r20*x2537))+(((-1.0)*r22*x2535)));
evalcond[1]=(((x2531*x2533))+(((-1.0)*r01*x2539))+(((-1.0)*r02*x2535)));
evalcond[2]=((((-1.0)*cj5*r10*x2535))+(((-1.0)*r12*x2538))+((r11*x2536)));
evalcond[3]=((-1.0)+((r10*x2537))+(((-1.0)*r12*x2535))+(((-1.0)*r11*x2539)));
evalcond[4]=((((-1.0)*cj2*x2534))+((r01*x2536))+(((-1.0)*x2533*x2535))+(((-1.0)*r02*x2538))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj2*x2534))+(((-1.0)*cj5*r20*x2535))+(((-1.0)*cj2*sj1))+((r21*x2536))+(((-1.0)*r22*x2538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2540=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2540.valid){
continue;
}
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2540.value)))+(x2541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2542=IKsin(j4);
IkReal x2543=IKcos(j4);
IkReal x2544=(cj5*r00);
IkReal x2545=((1.0)*cj1);
IkReal x2546=((1.0)*x2543);
IkReal x2547=(sj5*x2543);
IkReal x2548=(cj5*x2542);
IkReal x2549=((1.0)*x2542);
IkReal x2550=(sj5*x2549);
evalcond[0]=((((-1.0)*r21*x2550))+((r20*x2548))+(((-1.0)*r22*x2546)));
evalcond[1]=((((-1.0)*r01*x2550))+((x2542*x2544))+(((-1.0)*r02*x2546)));
evalcond[2]=((((-1.0)*r12*x2549))+((r11*x2547))+(((-1.0)*cj5*r10*x2546)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2546))+(((-1.0)*r11*x2550))+((r10*x2548)));
evalcond[4]=((((-1.0)*cj2*x2545))+((sj1*sj2))+(((-1.0)*x2544*x2546))+((r01*x2547))+(((-1.0)*r02*x2549)));
evalcond[5]=(((r21*x2547))+(((-1.0)*cj5*r20*x2546))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2545))+(((-1.0)*r22*x2549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2551=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2551;
j4eval[1]=IKsign(x2551);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2552=((1.0)*sj5);
IkReal x2553=((((-1.0)*r20*x2552))+(((-1.0)*cj5*r21)));
j4eval[0]=x2553;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x2552))+((cj5*r00))))));
j4eval[2]=IKsign(x2553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2554=cj5*cj5;
IkReal x2555=r11*r11;
IkReal x2556=(r11*sj5);
IkReal x2557=(cj5*r10);
IkReal x2558=((((-2.0)*x2556*x2557))+(r12*r12)+x2555+((x2554*(r10*r10)))+(((-1.0)*x2554*x2555)));
j4eval[0]=x2558;
j4eval[1]=IKsign(x2558);
j4eval[2]=((IKabs((x2556+(((-1.0)*x2557)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2559=cj5*cj5;
IkReal x2560=r11*r11;
IkReal x2561=(cj5*r10);
IkReal x2562=(r11*sj5);
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2560+((x2559*(r10*r10)))+(((-2.0)*x2561*x2562))+(((-1.0)*x2559*x2560)))),-1);
if(!x2563.valid){
continue;
}
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal((x2562+(((-1.0)*x2561)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2563.value)))+(x2564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2565=IKsin(j4);
IkReal x2566=IKcos(j4);
IkReal x2567=(cj5*r00);
IkReal x2568=((1.0)*sj2);
IkReal x2569=((1.0)*x2566);
IkReal x2570=(sj5*x2566);
IkReal x2571=(cj5*x2565);
IkReal x2572=((1.0)*x2565);
IkReal x2573=(sj5*x2572);
evalcond[0]=((((-1.0)*r22*x2569))+((r20*x2571))+(((-1.0)*r21*x2573)));
evalcond[1]=((((-1.0)*r02*x2569))+((x2565*x2567))+(((-1.0)*r01*x2573)));
evalcond[2]=((((-1.0)*r12*x2572))+((r11*x2570))+(((-1.0)*cj5*r10*x2569)));
evalcond[3]=((1.0)+((r10*x2571))+(((-1.0)*r12*x2569))+(((-1.0)*r11*x2573)));
evalcond[4]=(((r01*x2570))+(((-1.0)*x2567*x2569))+((cj1*cj2))+(((-1.0)*r02*x2572))+(((-1.0)*sj1*x2568)));
evalcond[5]=(((r21*x2570))+(((-1.0)*cj1*x2568))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2572))+(((-1.0)*cj5*r20*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2574=((1.0)*sj5);
CheckValue<IkReal> x2575=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2574)))),-1);
if(!x2575.valid){
continue;
}
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2574))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2575.value)))+(x2576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2577=IKsin(j4);
IkReal x2578=IKcos(j4);
IkReal x2579=(cj5*r00);
IkReal x2580=((1.0)*sj2);
IkReal x2581=((1.0)*x2578);
IkReal x2582=(sj5*x2578);
IkReal x2583=(cj5*x2577);
IkReal x2584=((1.0)*x2577);
IkReal x2585=(sj5*x2584);
evalcond[0]=((((-1.0)*r21*x2585))+((r20*x2583))+(((-1.0)*r22*x2581)));
evalcond[1]=((((-1.0)*r01*x2585))+(((-1.0)*r02*x2581))+((x2577*x2579)));
evalcond[2]=(((r11*x2582))+(((-1.0)*cj5*r10*x2581))+(((-1.0)*r12*x2584)));
evalcond[3]=((1.0)+((r10*x2583))+(((-1.0)*r11*x2585))+(((-1.0)*r12*x2581)));
evalcond[4]=(((r01*x2582))+(((-1.0)*r02*x2584))+(((-1.0)*x2579*x2581))+(((-1.0)*sj1*x2580))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x2580))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x2581))+((r21*x2582))+(((-1.0)*r22*x2584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2586=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2586.valid){
continue;
}
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2586.value)))+(x2587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2588=IKsin(j4);
IkReal x2589=IKcos(j4);
IkReal x2590=(cj5*r00);
IkReal x2591=((1.0)*sj2);
IkReal x2592=((1.0)*x2589);
IkReal x2593=(sj5*x2589);
IkReal x2594=(cj5*x2588);
IkReal x2595=((1.0)*x2588);
IkReal x2596=(sj5*x2595);
evalcond[0]=((((-1.0)*r22*x2592))+(((-1.0)*r21*x2596))+((r20*x2594)));
evalcond[1]=((((-1.0)*r01*x2596))+(((-1.0)*r02*x2592))+((x2588*x2590)));
evalcond[2]=(((r11*x2593))+(((-1.0)*cj5*r10*x2592))+(((-1.0)*r12*x2595)));
evalcond[3]=((1.0)+((r10*x2594))+(((-1.0)*r12*x2592))+(((-1.0)*r11*x2596)));
evalcond[4]=((((-1.0)*x2590*x2592))+((r01*x2593))+(((-1.0)*r02*x2595))+(((-1.0)*sj1*x2591))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x2591))+(((-1.0)*r22*x2595))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x2592))+((r21*x2593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2597=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2597);
rxp0_2=(py*r00);
rxp1_0=(r21*x2597);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2598=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2598);
rxp0_2=(py*r00);
rxp1_0=(r21*x2598);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2599=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2599);
rxp0_2=(py*r00);
rxp1_0=(r21*x2599);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2602=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2602.valid){
continue;
}
IkReal x2600=x2602.value;
IkReal x2601=(cj0*x2600);
cj4array[0]=(((cj1*cj2*x2601))+(((-1.0)*sj1*sj2*x2601)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2603=IKsin(j4);
IkReal x2604=IKcos(j4);
IkReal x2605=(cj5*r20);
IkReal x2606=((1.0)*x2604);
IkReal x2607=((1.0)*sj5*x2603);
evalcond[0]=((-1.0)*r12*x2603);
evalcond[1]=((((-1.0)*r12*x2606))+(((-1.0)*cj0)));
evalcond[2]=(((x2603*x2605))+(((-1.0)*r21*x2607)));
evalcond[3]=(((cj5*r00*x2603))+(((-1.0)*r01*x2607)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((r21*sj5*x2604))+(((-1.0)*x2605*x2606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2609=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2609.valid){
continue;
}
IkReal x2608=x2609.value;
cj4array[0]=(((cj2*sj1*x2608))+((cj1*sj2*x2608)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2610=IKsin(j4);
IkReal x2611=IKcos(j4);
IkReal x2612=(cj5*r00);
IkReal x2613=(r01*sj5);
IkReal x2614=((1.0)*cj0);
IkReal x2615=((1.0)*x2611);
IkReal x2616=((1.0)*x2610);
evalcond[0]=((-1.0)*r12*x2610);
evalcond[1]=((((-1.0)*r12*x2615))+(((-1.0)*x2614)));
evalcond[2]=((((-1.0)*r21*sj5*x2616))+((cj5*r20*x2610)));
evalcond[3]=(((x2610*x2612))+(((-1.0)*x2613*x2616)));
evalcond[4]=((((-1.0)*cj1*cj2*x2614))+(((-1.0)*x2612*x2615))+((x2611*x2613))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(r12,-1);
if(!x2617.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2617.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2618=IKsin(j4);
IkReal x2619=IKcos(j4);
IkReal x2620=(r01*sj5);
IkReal x2621=((1.0)*cj1);
IkReal x2622=(r21*sj5);
IkReal x2623=((1.0)*x2618);
IkReal x2624=(cj5*x2618);
IkReal x2625=((1.0)*cj5*x2619);
evalcond[0]=((-1.0)*r12*x2618);
evalcond[1]=(((r20*x2624))+(((-1.0)*x2622*x2623)));
evalcond[2]=(((r00*x2624))+(((-1.0)*x2620*x2623)));
evalcond[3]=((((-1.0)*sj2*x2621))+((x2619*x2622))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*x2625)));
evalcond[4]=((((-1.0)*cj0*cj2*x2621))+(((-1.0)*r00*x2625))+((x2619*x2620))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2626=((1.0)*sj5);
CheckValue<IkReal> x2627=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2627.valid){
continue;
}
CheckValue<IkReal> x2628 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x2626))+(((-1.0)*cj0*r01*x2626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2627.value)))+(x2628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2629=IKsin(j4);
IkReal x2630=IKcos(j4);
IkReal x2631=(cj5*r00);
IkReal x2632=((1.0)*cj1);
IkReal x2633=(sj1*sj2);
IkReal x2634=((1.0)*x2630);
IkReal x2635=(sj5*x2630);
IkReal x2636=(cj5*x2629);
IkReal x2637=((1.0)*x2629);
IkReal x2638=(sj5*x2637);
evalcond[0]=((((-1.0)*r21*x2638))+((r20*x2636))+(((-1.0)*r22*x2634)));
evalcond[1]=(sj0+(((-1.0)*r02*x2634))+(((-1.0)*r01*x2638))+((x2629*x2631)));
evalcond[2]=(((r10*x2636))+(((-1.0)*r11*x2638))+(((-1.0)*r12*x2634))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj5*r20*x2634))+(((-1.0)*cj2*sj1))+((r21*x2635))+(((-1.0)*sj2*x2632))+(((-1.0)*r22*x2637)));
evalcond[4]=((((-1.0)*r02*x2637))+((cj0*x2633))+((r01*x2635))+(((-1.0)*cj0*cj2*x2632))+(((-1.0)*x2631*x2634)));
evalcond[5]=(((sj0*x2633))+((r11*x2635))+(((-1.0)*cj5*r10*x2634))+(((-1.0)*cj2*sj0*x2632))+(((-1.0)*r12*x2637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2639=((1.0)*sj5);
CheckValue<IkReal> x2640=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2639))+(((-1.0)*cj5*r01)))),-1);
if(!x2640.valid){
continue;
}
CheckValue<IkReal> x2641 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x2639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2640.value)))+(x2641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2642=IKsin(j4);
IkReal x2643=IKcos(j4);
IkReal x2644=(cj5*r00);
IkReal x2645=((1.0)*cj1);
IkReal x2646=(sj1*sj2);
IkReal x2647=((1.0)*x2643);
IkReal x2648=(sj5*x2643);
IkReal x2649=(cj5*x2642);
IkReal x2650=((1.0)*x2642);
IkReal x2651=(sj5*x2650);
evalcond[0]=((((-1.0)*r22*x2647))+(((-1.0)*r21*x2651))+((r20*x2649)));
evalcond[1]=(sj0+(((-1.0)*r01*x2651))+(((-1.0)*r02*x2647))+((x2642*x2644)));
evalcond[2]=((((-1.0)*r12*x2647))+(((-1.0)*r11*x2651))+((r10*x2649))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2650))+((r21*x2648))+(((-1.0)*cj5*r20*x2647))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2645)));
evalcond[4]=((((-1.0)*x2644*x2647))+(((-1.0)*r02*x2650))+((cj0*x2646))+(((-1.0)*cj0*cj2*x2645))+((r01*x2648)));
evalcond[5]=(((sj0*x2646))+((r11*x2648))+(((-1.0)*r12*x2650))+(((-1.0)*cj5*r10*x2647))+(((-1.0)*cj2*sj0*x2645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2652=((1.0)*sj5);
CheckValue<IkReal> x2653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2653.valid){
continue;
}
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2652)))),-1);
if(!x2654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2653.value)+(((1.5707963267949)*(x2654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2655=IKsin(j4);
IkReal x2656=IKcos(j4);
IkReal x2657=(cj5*r00);
IkReal x2658=((1.0)*cj1);
IkReal x2659=(sj1*sj2);
IkReal x2660=((1.0)*x2656);
IkReal x2661=(sj5*x2656);
IkReal x2662=(cj5*x2655);
IkReal x2663=((1.0)*x2655);
IkReal x2664=(sj5*x2663);
evalcond[0]=((((-1.0)*r21*x2664))+(((-1.0)*r22*x2660))+((r20*x2662)));
evalcond[1]=(sj0+((x2655*x2657))+(((-1.0)*r01*x2664))+(((-1.0)*r02*x2660)));
evalcond[2]=((((-1.0)*r12*x2660))+(((-1.0)*r11*x2664))+((r10*x2662))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2661))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x2660))+(((-1.0)*sj2*x2658))+(((-1.0)*r22*x2663)));
evalcond[4]=((((-1.0)*r02*x2663))+((cj0*x2659))+(((-1.0)*x2657*x2660))+(((-1.0)*cj0*cj2*x2658))+((r01*x2661)));
evalcond[5]=((((-1.0)*r12*x2663))+((sj0*x2659))+(((-1.0)*cj5*r10*x2660))+(((-1.0)*cj2*sj0*x2658))+((r11*x2661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2665=cj5*cj5;
IkReal x2666=r21*r21;
IkReal x2667=(cj2*sj1);
IkReal x2668=(cj1*sj2);
IkReal x2669=((1.0)*r22);
IkReal x2670=(r21*sj5);
IkReal x2671=((1.0)*cj5*r20);
CheckValue<IkReal> x2672=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*cj5*r20*x2670))+((x2665*(r20*r20)))+(((-1.0)*x2665*x2666))+x2666)),-1);
if(!x2672.valid){
continue;
}
CheckValue<IkReal> x2673 = IKatan2WithCheck(IkReal(((((-1.0)*x2667*x2669))+(((-1.0)*x2668*x2669)))),IkReal((((x2668*x2670))+((x2667*x2670))+(((-1.0)*x2667*x2671))+(((-1.0)*x2668*x2671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2672.value)))+(x2673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2674=IKsin(j4);
IkReal x2675=IKcos(j4);
IkReal x2676=(cj5*r20);
IkReal x2677=(r21*sj5);
IkReal x2678=((1.0)*x2675);
IkReal x2679=((1.0)*x2674);
evalcond[0]=((((-1.0)*x2677*x2679))+(((-1.0)*r22*x2678))+((x2674*x2676)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x2675*x2677))+(((-1.0)*x2676*x2678))+(((-1.0)*r22*x2679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2680=(cj5*sj4);
IkReal x2681=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x2680))+((r01*x2681))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2681))+((r10*x2680))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2680))+((r01*x2681))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x2681))+((r10*x2680))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x2680))+((r01*x2681))+((cj4*r02))), ((((-1.0)*r11*x2681))+((r10*x2680))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2682=IKcos(j0);
IkReal x2683=IKsin(j0);
IkReal x2684=(sj1*sj2);
IkReal x2685=(cj5*r11);
IkReal x2686=(cj5*r00);
IkReal x2687=((1.0)*sj4);
IkReal x2688=(r01*sj5);
IkReal x2689=((1.0)*cj4);
IkReal x2690=(cj5*r10);
IkReal x2691=(cj1*cj2);
IkReal x2692=((1.0)*sj5);
IkReal x2693=(cj5*r01);
IkReal x2694=(r11*sj5);
IkReal x2695=((0.138)*sj5);
IkReal x2696=(cj2*sj1);
IkReal x2697=((0.712)*x2682);
IkReal x2698=(cj1*x2682);
IkReal x2699=((0.712)*x2683);
IkReal x2700=(cj1*x2683);
evalcond[0]=((((-1.0)*r02*x2689))+((sj4*x2686))+(((-1.0)*x2687*x2688))+x2683);
evalcond[1]=((((-1.0)*r12*x2689))+((sj4*x2690))+(((-1.0)*x2682))+(((-1.0)*x2687*x2694)));
evalcond[2]=((((-1.0)*r00*x2692))+((x2682*x2696))+((sj2*x2698))+(((-1.0)*x2693)));
evalcond[3]=((((-1.0)*r10*x2692))+((x2683*x2696))+(((-1.0)*x2685))+((sj2*x2700)));
evalcond[4]=((((-1.0)*r02*x2687))+((cj4*x2688))+(((-1.0)*x2686*x2689))+((x2682*x2684))+(((-1.0)*x2682*x2691)));
evalcond[5]=((((-1.0)*r12*x2687))+((cj4*x2694))+((x2683*x2684))+(((-1.0)*x2689*x2690))+(((-1.0)*x2683*x2691)));
evalcond[6]=((((-1.0)*x2691*x2697))+(((0.138)*x2693))+((x2684*x2697))+(((-1.0)*px))+((r00*x2695))+(((0.179)*x2683))+(((-0.85)*x2698)));
evalcond[7]=((((-1.0)*x2691*x2699))+((r10*x2695))+(((-0.85)*x2700))+((x2684*x2699))+(((0.138)*x2685))+(((-0.179)*x2682))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2701=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x2701.valid){
continue;
}
CheckValue<IkReal> x2702 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2702.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2701.value)))+(x2702.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2703=IKcos(j0);
IkReal x2704=IKsin(j0);
IkReal x2705=(sj1*sj2);
IkReal x2706=(cj1*cj2);
IkReal x2707=(cj5*r11);
IkReal x2708=((0.85)*cj1);
IkReal x2709=(cj2*sj1);
IkReal x2710=((1.0)*sj5);
IkReal x2711=(cj5*r01);
IkReal x2712=((0.138)*sj5);
IkReal x2713=(cj1*sj2);
IkReal x2714=((0.712)*x2703);
IkReal x2715=((0.712)*x2704);
evalcond[0]=((((-1.0)*x2711))+((x2703*x2713))+((x2703*x2709))+(((-1.0)*r00*x2710)));
evalcond[1]=((((-1.0)*r10*x2710))+((x2704*x2709))+((x2704*x2713))+(((-1.0)*x2707)));
evalcond[2]=((((0.138)*x2711))+(((-1.0)*px))+(((0.179)*x2704))+(((-1.0)*x2706*x2714))+((x2705*x2714))+((r00*x2712))+(((-1.0)*x2703*x2708)));
evalcond[3]=((((0.138)*x2707))+(((-1.0)*x2704*x2708))+(((-1.0)*py))+((r10*x2712))+(((-1.0)*x2706*x2715))+(((-0.179)*x2703))+((x2705*x2715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2716=((1.0)*sj5);
IkReal x2717=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2716)));
j4eval[0]=x2717;
j4eval[1]=IKsign(x2717);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x2716))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2718=((1.0)*sj5);
IkReal x2719=((((-1.0)*r00*x2718))+(((-1.0)*cj5*r01)));
j4eval[0]=x2719;
j4eval[1]=IKsign(x2719);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x2718))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2720=((1.0)*sj5);
IkReal x2721=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2721;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x2720))+(((-1.0)*cj0*r01*x2720)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x2721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2723 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2723)==0){
continue;
}
IkReal x2722=pow(x2723,-0.5);
CheckValue<IkReal> x2724 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2724.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2724.value));
IkReal gconst79=((-1.0)*r21*x2722);
IkReal gconst80=(r20*x2722);
CheckValue<IkReal> x2725 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2725.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2725.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2728 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2728.valid){
continue;
}
IkReal x2726=((-1.0)*(x2728.value));
IkReal x2727=x2722;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2726;
IkReal gconst78=x2726;
IkReal gconst79=((-1.0)*r21*x2727);
IkReal gconst80=(r20*x2727);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2731 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2731.valid){
continue;
}
IkReal x2729=((-1.0)*(x2731.value));
IkReal x2730=x2722;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2729;
IkReal gconst78=x2729;
IkReal gconst79=((-1.0)*r21*x2730);
IkReal gconst80=(r20*x2730);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2734 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2734.valid){
continue;
}
IkReal x2732=((-1.0)*(x2734.value));
IkReal x2733=x2722;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2732;
IkReal gconst78=x2732;
IkReal gconst79=((-1.0)*r21*x2733);
IkReal gconst80=(r20*x2733);
IkReal x2735=r22*r22;
CheckValue<IkReal> x2738=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2735))),-1);
if(!x2738.valid){
continue;
}
IkReal x2736=x2738.value;
IkReal x2737=(x2735+((x2736*(r20*r20*r20*r20)))+((x2736*(r21*r21*r21*r21)))+(((2.0)*x2736*(r20*r20)*(r21*r21))));
j4eval[0]=x2737;
j4eval[1]=IKsign(x2737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2739=(gconst80*r20);
IkReal x2740=(gconst79*r21);
IkReal x2741=(cj2*sj1);
IkReal x2742=((1.0)*cj1*sj2);
CheckValue<IkReal> x2743=IKPowWithIntegerCheck(IKsign(((x2739*x2739)+(r22*r22)+(x2740*x2740)+(((-2.0)*x2739*x2740)))),-1);
if(!x2743.valid){
continue;
}
CheckValue<IkReal> x2744 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2741))+(((-1.0)*r22*x2742)))),IkReal((((cj1*sj2*x2740))+(((-1.0)*x2739*x2742))+((x2740*x2741))+(((-1.0)*x2739*x2741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2743.value)))+(x2744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2745=IKsin(j4);
IkReal x2746=IKcos(j4);
IkReal x2747=((1.0)*cj2);
IkReal x2748=(gconst80*r20);
IkReal x2749=(sj1*sj2);
IkReal x2750=(gconst79*r21);
IkReal x2751=(gconst80*r10);
IkReal x2752=(gconst79*r01);
IkReal x2753=(gconst79*r11);
IkReal x2754=(gconst80*r00);
IkReal x2755=((1.0)*x2746);
IkReal x2756=((1.0)*x2745);
evalcond[0]=((((-1.0)*r22*x2755))+((x2745*x2748))+(((-1.0)*x2750*x2756)));
evalcond[1]=(sj0+(((-1.0)*x2752*x2756))+((x2745*x2754))+(((-1.0)*r02*x2755)));
evalcond[2]=(((x2745*x2751))+(((-1.0)*x2753*x2756))+(((-1.0)*r12*x2755))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2756))+((x2746*x2750))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2747))+(((-1.0)*x2748*x2755)));
evalcond[4]=(((x2746*x2752))+((cj0*x2749))+(((-1.0)*x2754*x2755))+(((-1.0)*cj0*cj1*x2747))+(((-1.0)*r02*x2756)));
evalcond[5]=((((-1.0)*cj1*sj0*x2747))+((x2746*x2753))+((sj0*x2749))+(((-1.0)*r12*x2756))+(((-1.0)*x2751*x2755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2757=((1.0)*gconst79);
CheckValue<IkReal> x2758=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x2757)))),-1);
if(!x2758.valid){
continue;
}
CheckValue<IkReal> x2759 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2757))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2758.value)))+(x2759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2760=IKsin(j4);
IkReal x2761=IKcos(j4);
IkReal x2762=((1.0)*cj2);
IkReal x2763=(gconst80*r20);
IkReal x2764=(sj1*sj2);
IkReal x2765=(gconst79*r21);
IkReal x2766=(gconst80*r10);
IkReal x2767=(gconst79*r01);
IkReal x2768=(gconst79*r11);
IkReal x2769=(gconst80*r00);
IkReal x2770=((1.0)*x2761);
IkReal x2771=((1.0)*x2760);
evalcond[0]=(((x2760*x2763))+(((-1.0)*x2765*x2771))+(((-1.0)*r22*x2770)));
evalcond[1]=(sj0+(((-1.0)*r02*x2770))+(((-1.0)*x2767*x2771))+((x2760*x2769)));
evalcond[2]=((((-1.0)*x2768*x2771))+(((-1.0)*r12*x2770))+((x2760*x2766))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2763*x2770))+((x2761*x2765))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2762))+(((-1.0)*r22*x2771)));
evalcond[4]=((((-1.0)*x2769*x2770))+(((-1.0)*r02*x2771))+((x2761*x2767))+((cj0*x2764))+(((-1.0)*cj0*cj1*x2762)));
evalcond[5]=((((-1.0)*x2766*x2770))+((sj0*x2764))+(((-1.0)*cj1*sj0*x2762))+((x2761*x2768))+(((-1.0)*r12*x2771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2772=((1.0)*gconst79);
CheckValue<IkReal> x2773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2772))+(((-1.0)*gconst80*r11)))),-1);
if(!x2773.valid){
continue;
}
CheckValue<IkReal> x2774 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst80*r20*sj0))+(((-1.0)*r21*sj0*x2772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2773.value)))+(x2774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2775=IKsin(j4);
IkReal x2776=IKcos(j4);
IkReal x2777=((1.0)*cj2);
IkReal x2778=(gconst80*r20);
IkReal x2779=(sj1*sj2);
IkReal x2780=(gconst79*r21);
IkReal x2781=(gconst80*r10);
IkReal x2782=(gconst79*r01);
IkReal x2783=(gconst79*r11);
IkReal x2784=(gconst80*r00);
IkReal x2785=((1.0)*x2776);
IkReal x2786=((1.0)*x2775);
evalcond[0]=(((x2775*x2778))+(((-1.0)*x2780*x2786))+(((-1.0)*r22*x2785)));
evalcond[1]=(sj0+(((-1.0)*x2782*x2786))+((x2775*x2784))+(((-1.0)*r02*x2785)));
evalcond[2]=((((-1.0)*r12*x2785))+(((-1.0)*x2783*x2786))+((x2775*x2781))+(((-1.0)*cj0)));
evalcond[3]=(((x2776*x2780))+(((-1.0)*cj1*sj2))+(((-1.0)*x2778*x2785))+(((-1.0)*r22*x2786))+(((-1.0)*sj1*x2777)));
evalcond[4]=((((-1.0)*x2784*x2785))+((x2776*x2782))+((cj0*x2779))+(((-1.0)*cj0*cj1*x2777))+(((-1.0)*r02*x2786)));
evalcond[5]=((((-1.0)*r12*x2786))+(((-1.0)*x2781*x2785))+((x2776*x2783))+(((-1.0)*cj1*sj0*x2777))+((sj0*x2779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2788 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2788)==0){
continue;
}
IkReal x2787=pow(x2788,-0.5);
CheckValue<IkReal> x2789 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2789.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2789.value))));
IkReal gconst82=((1.0)*r21*x2787);
IkReal gconst83=((-1.0)*r20*x2787);
CheckValue<IkReal> x2790 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2790.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2790.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2793 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2793.valid){
continue;
}
IkReal x2791=((1.0)*(x2793.value));
IkReal x2792=x2787;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2791)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2791)));
IkReal gconst82=((1.0)*r21*x2792);
IkReal gconst83=((-1.0)*r20*x2792);
IkReal x2794=r22*r22;
IkReal x2795=((1.0)*x2794);
CheckValue<IkReal> x2799=IKPowWithIntegerCheck(((-1.0)+x2794),-1);
if(!x2799.valid){
continue;
}
IkReal x2796=x2799.value;
if((((1.0)+(((-1.0)*x2795)))) < -0.00001)
continue;
IkReal x2797=IKsqrt(((1.0)+(((-1.0)*x2795))));
IkReal x2798=(sj0*x2796*x2797);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2798+(((-1.0)*x2795*x2798))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2802 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2802.valid){
continue;
}
IkReal x2800=((1.0)*(x2802.value));
IkReal x2801=x2787;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2800)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2800)));
IkReal gconst82=((1.0)*r21*x2801);
IkReal gconst83=((-1.0)*r20*x2801);
IkReal x2803=r22*r22;
IkReal x2804=((1.0)*x2803);
CheckValue<IkReal> x2808=IKPowWithIntegerCheck(((-1.0)+x2803),-1);
if(!x2808.valid){
continue;
}
IkReal x2805=x2808.value;
if((((1.0)+(((-1.0)*x2804)))) < -0.00001)
continue;
IkReal x2806=IKsqrt(((1.0)+(((-1.0)*x2804))));
IkReal x2807=(cj0*x2805*x2806);
j4eval[0]=((IKabs(((((-1.0)*x2804*x2807))+x2807)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2811 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2811.valid){
continue;
}
IkReal x2809=((1.0)*(x2811.value));
IkReal x2810=x2787;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2809)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2809)));
IkReal gconst82=((1.0)*r21*x2810);
IkReal gconst83=((-1.0)*r20*x2810);
IkReal x2812=r22*r22;
IkReal x2813=(cj0*r02);
IkReal x2814=(r12*sj0);
CheckValue<IkReal> x2818=IKPowWithIntegerCheck(((-1.0)+x2812),-1);
if(!x2818.valid){
continue;
}
IkReal x2815=x2818.value;
if((((1.0)+(((-1.0)*x2812)))) < -0.00001)
continue;
IkReal x2816=IKsqrt(((1.0)+(((-1.0)*x2812))));
IkReal x2817=((1.0)*r22*x2815*x2816);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2813*x2817))+(((-1.0)*x2814*x2817)))))+(IKabs((x2814+x2813))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2819=((1.0)*gconst82);
CheckValue<IkReal> x2820 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2819))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*cj0*r01*x2819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2820.value)+(((1.5707963267949)*(x2821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2822=IKsin(j4);
IkReal x2823=IKcos(j4);
IkReal x2824=(sj1*sj2);
IkReal x2825=((1.0)*cj2);
IkReal x2826=((1.0)*x2823);
IkReal x2827=(gconst83*x2822);
IkReal x2828=(gconst82*x2823);
IkReal x2829=((1.0)*x2822);
evalcond[0]=(((r20*x2827))+(((-1.0)*r22*x2826))+(((-1.0)*gconst82*r21*x2829)));
evalcond[1]=(sj0+((r00*x2827))+(((-1.0)*r02*x2826))+(((-1.0)*gconst82*r01*x2829)));
evalcond[2]=((((-1.0)*r12*x2826))+((r10*x2827))+(((-1.0)*gconst82*r11*x2829))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst83*r20*x2826))+(((-1.0)*sj1*x2825))+(((-1.0)*cj1*sj2))+((r21*x2828))+(((-1.0)*r22*x2829)));
evalcond[4]=((((-1.0)*cj0*cj1*x2825))+(((-1.0)*r02*x2829))+((r01*x2828))+(((-1.0)*gconst83*r00*x2826))+((cj0*x2824)));
evalcond[5]=((((-1.0)*r12*x2829))+(((-1.0)*cj1*sj0*x2825))+(((-1.0)*gconst83*r10*x2826))+((sj0*x2824))+((r11*x2828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2830=((1.0)*gconst82);
CheckValue<IkReal> x2831=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2830))+(((-1.0)*gconst83*r01)))),-1);
if(!x2831.valid){
continue;
}
CheckValue<IkReal> x2832 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*r21*x2830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2831.value)))+(x2832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2833=IKsin(j4);
IkReal x2834=IKcos(j4);
IkReal x2835=(sj1*sj2);
IkReal x2836=((1.0)*cj2);
IkReal x2837=((1.0)*x2834);
IkReal x2838=(gconst83*x2833);
IkReal x2839=(gconst82*x2834);
IkReal x2840=((1.0)*x2833);
evalcond[0]=((((-1.0)*gconst82*r21*x2840))+((r20*x2838))+(((-1.0)*r22*x2837)));
evalcond[1]=(sj0+(((-1.0)*gconst82*r01*x2840))+((r00*x2838))+(((-1.0)*r02*x2837)));
evalcond[2]=(((r10*x2838))+(((-1.0)*gconst82*r11*x2840))+(((-1.0)*r12*x2837))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2836))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2840))+(((-1.0)*gconst83*r20*x2837))+((r21*x2839)));
evalcond[4]=((((-1.0)*cj0*cj1*x2836))+(((-1.0)*gconst83*r00*x2837))+(((-1.0)*r02*x2840))+((cj0*x2835))+((r01*x2839)));
evalcond[5]=(((sj0*x2835))+(((-1.0)*cj1*sj0*x2836))+(((-1.0)*r12*x2840))+(((-1.0)*gconst83*r10*x2837))+((r11*x2839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2841=((1.0)*gconst82);
CheckValue<IkReal> x2842=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r11))+(((-1.0)*r10*x2841)))),-1);
if(!x2842.valid){
continue;
}
CheckValue<IkReal> x2843 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2841))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2842.value)))+(x2843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2844=IKsin(j4);
IkReal x2845=IKcos(j4);
IkReal x2846=(sj1*sj2);
IkReal x2847=((1.0)*cj2);
IkReal x2848=((1.0)*x2845);
IkReal x2849=(gconst83*x2844);
IkReal x2850=(gconst82*x2845);
IkReal x2851=((1.0)*x2844);
evalcond[0]=(((r20*x2849))+(((-1.0)*gconst82*r21*x2851))+(((-1.0)*r22*x2848)));
evalcond[1]=(sj0+(((-1.0)*gconst82*r01*x2851))+(((-1.0)*r02*x2848))+((r00*x2849)));
evalcond[2]=((((-1.0)*r12*x2848))+(((-1.0)*gconst82*r11*x2851))+((r10*x2849))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2847))+((r21*x2850))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2851))+(((-1.0)*gconst83*r20*x2848)));
evalcond[4]=((((-1.0)*cj0*cj1*x2847))+(((-1.0)*r02*x2851))+((cj0*x2846))+((r01*x2850))+(((-1.0)*gconst83*r00*x2848)));
evalcond[5]=((((-1.0)*gconst83*r10*x2848))+(((-1.0)*cj1*sj0*x2847))+((sj0*x2846))+((r11*x2850))+(((-1.0)*r12*x2851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2852=((-1.0)*r00);
IkReal x2854 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2854)==0){
continue;
}
IkReal x2853=pow(x2854,-0.5);
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2852),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2855.value));
IkReal gconst85=(r01*x2853);
IkReal gconst86=(x2852*x2853);
CheckValue<IkReal> x2856 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2856.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2856.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2857=((-1.0)*r00);
IkReal x2858=x2853;
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2857),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
IkReal x2859=((-1.0)*(x2860.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2859;
IkReal gconst84=x2859;
IkReal gconst85=(r01*x2858);
IkReal gconst86=(x2857*x2858);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2861=((1.0)*gconst85);
CheckValue<IkReal> x2862 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*r11*sj0*x2861))+(((-1.0)*cj0*r01*x2861))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2862.valid){
continue;
}
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2862.value)+(((1.5707963267949)*(x2863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2864=IKsin(j4);
IkReal x2865=IKcos(j4);
IkReal x2866=((1.0)*cj2);
IkReal x2867=(sj1*sj2);
IkReal x2868=((1.0)*x2865);
IkReal x2869=(gconst86*x2864);
IkReal x2870=(gconst85*x2865);
IkReal x2871=((1.0)*x2864);
IkReal x2872=(gconst85*x2871);
evalcond[0]=((((-1.0)*r22*x2868))+((r20*x2869))+(((-1.0)*r21*x2872)));
evalcond[1]=((((-1.0)*r02*x2868))+((r00*x2869))+sj0+(((-1.0)*r01*x2872)));
evalcond[2]=((((-1.0)*r12*x2868))+((r10*x2869))+(((-1.0)*r11*x2872))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst86*r20*x2868))+(((-1.0)*r22*x2871))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2866))+((r21*x2870)));
evalcond[4]=((((-1.0)*r02*x2871))+((r01*x2870))+(((-1.0)*cj0*cj1*x2866))+(((-1.0)*gconst86*r00*x2868))+((cj0*x2867)));
evalcond[5]=((((-1.0)*cj1*sj0*x2866))+((r11*x2870))+((sj0*x2867))+(((-1.0)*r12*x2871))+(((-1.0)*gconst86*r10*x2868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2873=((1.0)*gconst85);
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2873))+((gconst86*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
CheckValue<IkReal> x2875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2873))+(((-1.0)*gconst86*r11)))),-1);
if(!x2875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2874.value)+(((1.5707963267949)*(x2875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2876=IKsin(j4);
IkReal x2877=IKcos(j4);
IkReal x2878=((1.0)*cj2);
IkReal x2879=(sj1*sj2);
IkReal x2880=((1.0)*x2877);
IkReal x2881=(gconst86*x2876);
IkReal x2882=(gconst85*x2877);
IkReal x2883=((1.0)*x2876);
IkReal x2884=(gconst85*x2883);
evalcond[0]=(((r20*x2881))+(((-1.0)*r22*x2880))+(((-1.0)*r21*x2884)));
evalcond[1]=(sj0+(((-1.0)*r02*x2880))+((r00*x2881))+(((-1.0)*r01*x2884)));
evalcond[2]=((((-1.0)*r11*x2884))+((r10*x2881))+(((-1.0)*r12*x2880))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2883))+((r21*x2882))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2878))+(((-1.0)*gconst86*r20*x2880)));
evalcond[4]=(((cj0*x2879))+(((-1.0)*r02*x2883))+((r01*x2882))+(((-1.0)*cj0*cj1*x2878))+(((-1.0)*gconst86*r00*x2880)));
evalcond[5]=(((r11*x2882))+(((-1.0)*gconst86*r10*x2880))+((sj0*x2879))+(((-1.0)*cj1*sj0*x2878))+(((-1.0)*r12*x2883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2885=((-1.0)*r01);
IkReal x2887 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2887)==0){
continue;
}
IkReal x2886=pow(x2887,-0.5);
CheckValue<IkReal> x2888 = IKatan2WithCheck(IkReal(x2885),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2888.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2888.value))));
IkReal gconst88=(x2885*x2886);
IkReal gconst89=((1.0)*r00*x2886);
CheckValue<IkReal> x2889 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2889.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2889.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2890=((-1.0)*r01);
CheckValue<IkReal> x2893 = IKatan2WithCheck(IkReal(x2890),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2893.valid){
continue;
}
IkReal x2891=((1.0)*(x2893.value));
IkReal x2892=x2886;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2891)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2891)));
IkReal gconst88=(x2890*x2892);
IkReal gconst89=((1.0)*r00*x2892);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2894=((-1.0)*r01);
CheckValue<IkReal> x2897 = IKatan2WithCheck(IkReal(x2894),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2897.valid){
continue;
}
IkReal x2895=((1.0)*(x2897.value));
IkReal x2896=x2886;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2895)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2895)));
IkReal gconst88=(x2894*x2896);
IkReal gconst89=((1.0)*r00*x2896);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2898=((-1.0)*r01);
CheckValue<IkReal> x2901 = IKatan2WithCheck(IkReal(x2898),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2901.valid){
continue;
}
IkReal x2899=((1.0)*(x2901.value));
IkReal x2900=x2886;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2899)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2899)));
IkReal gconst88=(x2898*x2900);
IkReal gconst89=((1.0)*r00*x2900);
IkReal x2902=r02*r02;
IkReal x2903=(r12*sj0);
IkReal x2904=x2886;
IkReal x2905=(cj0*x2904);
j4eval[0]=((IKabs((x2903+((cj0*r02)))))+(IKabs((((x2902*x2905))+((r02*x2903*x2904))+(((-1.0)*x2905))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2906=((1.0)*gconst88);
CheckValue<IkReal> x2907=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2907.valid){
continue;
}
CheckValue<IkReal> x2908 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2906))+((cj0*gconst89*r00))+(((-1.0)*cj0*r01*x2906))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2907.value)))+(x2908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2909=IKsin(j4);
IkReal x2910=IKcos(j4);
IkReal x2911=((1.0)*cj1);
IkReal x2912=(gconst89*r10);
IkReal x2913=(sj1*sj2);
IkReal x2914=((1.0)*x2910);
IkReal x2915=(gconst88*x2910);
IkReal x2916=(gconst89*x2909);
IkReal x2917=((1.0)*x2909);
evalcond[0]=((((-1.0)*gconst88*r21*x2917))+((r20*x2916))+(((-1.0)*r22*x2914)));
evalcond[1]=(sj0+((r00*x2916))+(((-1.0)*gconst88*r01*x2917))+(((-1.0)*r02*x2914)));
evalcond[2]=((((-1.0)*gconst88*r11*x2917))+((x2909*x2912))+(((-1.0)*r12*x2914))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2911))+(((-1.0)*gconst89*r20*x2914))+((r21*x2915))+(((-1.0)*r22*x2917)));
evalcond[4]=(((cj0*x2913))+((r01*x2915))+(((-1.0)*gconst89*r00*x2914))+(((-1.0)*cj0*cj2*x2911))+(((-1.0)*r02*x2917)));
evalcond[5]=(((r11*x2915))+(((-1.0)*x2912*x2914))+((sj0*x2913))+(((-1.0)*r12*x2917))+(((-1.0)*cj2*sj0*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2918=((1.0)*gconst88);
CheckValue<IkReal> x2919=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x2918)))),-1);
if(!x2919.valid){
continue;
}
CheckValue<IkReal> x2920 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x2918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2919.value)))+(x2920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2921=IKsin(j4);
IkReal x2922=IKcos(j4);
IkReal x2923=((1.0)*cj1);
IkReal x2924=(gconst89*r10);
IkReal x2925=(sj1*sj2);
IkReal x2926=((1.0)*x2922);
IkReal x2927=(gconst88*x2922);
IkReal x2928=(gconst89*x2921);
IkReal x2929=((1.0)*x2921);
evalcond[0]=((((-1.0)*gconst88*r21*x2929))+((r20*x2928))+(((-1.0)*r22*x2926)));
evalcond[1]=((((-1.0)*gconst88*r01*x2929))+sj0+(((-1.0)*r02*x2926))+((r00*x2928)));
evalcond[2]=(((x2921*x2924))+(((-1.0)*r12*x2926))+(((-1.0)*cj0))+(((-1.0)*gconst88*r11*x2929)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r21*x2927))+(((-1.0)*sj2*x2923))+(((-1.0)*r22*x2929))+(((-1.0)*gconst89*r20*x2926)));
evalcond[4]=((((-1.0)*r02*x2929))+((cj0*x2925))+((r01*x2927))+(((-1.0)*cj0*cj2*x2923))+(((-1.0)*gconst89*r00*x2926)));
evalcond[5]=(((sj0*x2925))+(((-1.0)*x2924*x2926))+(((-1.0)*r12*x2929))+((r11*x2927))+(((-1.0)*cj2*sj0*x2923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2930=((1.0)*gconst88);
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x2930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
CheckValue<IkReal> x2932=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r11))+(((-1.0)*r10*x2930)))),-1);
if(!x2932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2931.value)+(((1.5707963267949)*(x2932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2933=IKsin(j4);
IkReal x2934=IKcos(j4);
IkReal x2935=((1.0)*cj1);
IkReal x2936=(gconst89*r10);
IkReal x2937=(sj1*sj2);
IkReal x2938=((1.0)*x2934);
IkReal x2939=(gconst88*x2934);
IkReal x2940=(gconst89*x2933);
IkReal x2941=((1.0)*x2933);
evalcond[0]=((((-1.0)*r22*x2938))+(((-1.0)*gconst88*r21*x2941))+((r20*x2940)));
evalcond[1]=(sj0+(((-1.0)*gconst88*r01*x2941))+((r00*x2940))+(((-1.0)*r02*x2938)));
evalcond[2]=((((-1.0)*gconst88*r11*x2941))+((x2933*x2936))+(((-1.0)*r12*x2938))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst89*r20*x2938))+((r21*x2939))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2935))+(((-1.0)*r22*x2941)));
evalcond[4]=(((cj0*x2937))+(((-1.0)*r02*x2941))+((r01*x2939))+(((-1.0)*cj0*cj2*x2935))+(((-1.0)*gconst89*r00*x2938)));
evalcond[5]=((((-1.0)*r12*x2941))+(((-1.0)*x2936*x2938))+(((-1.0)*cj2*sj0*x2935))+((sj0*x2937))+((r11*x2939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2942=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2942;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2943=((1.0)*sj5);
IkReal x2944=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2943)));
j4eval[0]=x2944;
j4eval[1]=IKsign(x2944);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2943)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2945=cj5*cj5;
IkReal x2946=r01*r01;
IkReal x2947=(cj5*r00);
IkReal x2948=(r01*sj5);
IkReal x2949=((((-1.0)*x2945*x2946))+(((-2.0)*x2947*x2948))+((x2945*(r00*r00)))+(r02*r02)+x2946);
j4eval[0]=x2949;
j4eval[1]=((IKabs(((((-1.0)*x2947))+x2948)))+(IKabs(r02)));
j4eval[2]=IKsign(x2949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2950=cj5*cj5;
IkReal x2951=r01*r01;
IkReal x2952=(r01*sj5);
IkReal x2953=(cj5*r00);
CheckValue<IkReal> x2954 = IKatan2WithCheck(IkReal(((((-1.0)*x2953))+x2952)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2954.valid){
continue;
}
CheckValue<IkReal> x2955=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2952*x2953))+((x2950*(r00*r00)))+(r02*r02)+(((-1.0)*x2950*x2951))+x2951)),-1);
if(!x2955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2954.value)+(((1.5707963267949)*(x2955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2956=IKsin(j4);
IkReal x2957=IKcos(j4);
IkReal x2958=(cj5*r00);
IkReal x2959=((1.0)*cj1);
IkReal x2960=(cj5*r20);
IkReal x2961=(cj5*r10);
IkReal x2962=((1.0)*x2957);
IkReal x2963=(sj5*x2957);
IkReal x2964=((1.0)*x2956);
IkReal x2965=(sj5*x2964);
evalcond[0]=(((x2956*x2960))+(((-1.0)*r21*x2965))+(((-1.0)*r22*x2962)));
evalcond[1]=((((-1.0)*r11*x2965))+((x2956*x2961))+(((-1.0)*r12*x2962)));
evalcond[2]=((((-1.0)*r02*x2964))+(((-1.0)*x2958*x2962))+((r01*x2963)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2962))+(((-1.0)*r01*x2965))+((x2956*x2958)));
evalcond[4]=(((sj1*sj2))+((r11*x2963))+(((-1.0)*cj2*x2959))+(((-1.0)*x2961*x2962))+(((-1.0)*r12*x2964)));
evalcond[5]=(((r21*x2963))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2959))+(((-1.0)*r22*x2964))+(((-1.0)*x2960*x2962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2966=((1.0)*sj5);
CheckValue<IkReal> x2967 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2967.valid){
continue;
}
CheckValue<IkReal> x2968=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2966)))),-1);
if(!x2968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2967.value)+(((1.5707963267949)*(x2968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2969=IKsin(j4);
IkReal x2970=IKcos(j4);
IkReal x2971=(cj5*r00);
IkReal x2972=((1.0)*cj1);
IkReal x2973=(cj5*r20);
IkReal x2974=(cj5*r10);
IkReal x2975=((1.0)*x2970);
IkReal x2976=(sj5*x2970);
IkReal x2977=((1.0)*x2969);
IkReal x2978=(sj5*x2977);
evalcond[0]=((((-1.0)*r21*x2978))+((x2969*x2973))+(((-1.0)*r22*x2975)));
evalcond[1]=((((-1.0)*r11*x2978))+(((-1.0)*r12*x2975))+((x2969*x2974)));
evalcond[2]=((((-1.0)*r02*x2977))+((r01*x2976))+(((-1.0)*x2971*x2975)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2975))+(((-1.0)*r01*x2978))+((x2969*x2971)));
evalcond[4]=((((-1.0)*r12*x2977))+((sj1*sj2))+(((-1.0)*x2974*x2975))+((r11*x2976))+(((-1.0)*cj2*x2972)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x2977))+(((-1.0)*sj2*x2972))+(((-1.0)*x2973*x2975))+((r21*x2976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2979 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2979.valid){
continue;
}
CheckValue<IkReal> x2980=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2979.value)+(((1.5707963267949)*(x2980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2981=IKsin(j4);
IkReal x2982=IKcos(j4);
IkReal x2983=(cj5*r00);
IkReal x2984=((1.0)*cj1);
IkReal x2985=(cj5*r20);
IkReal x2986=(cj5*r10);
IkReal x2987=((1.0)*x2982);
IkReal x2988=(sj5*x2982);
IkReal x2989=((1.0)*x2981);
IkReal x2990=(sj5*x2989);
evalcond[0]=(((x2981*x2985))+(((-1.0)*r22*x2987))+(((-1.0)*r21*x2990)));
evalcond[1]=((((-1.0)*r12*x2987))+(((-1.0)*r11*x2990))+((x2981*x2986)));
evalcond[2]=(((r01*x2988))+(((-1.0)*x2983*x2987))+(((-1.0)*r02*x2989)));
evalcond[3]=((1.0)+((x2981*x2983))+(((-1.0)*r02*x2987))+(((-1.0)*r01*x2990)));
evalcond[4]=(((r11*x2988))+(((-1.0)*cj2*x2984))+(((-1.0)*r12*x2989))+((sj1*sj2))+(((-1.0)*x2986*x2987)));
evalcond[5]=((((-1.0)*x2985*x2987))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2984))+(((-1.0)*r22*x2989))+((r21*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2991=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2991;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2992=((1.0)*sj5);
IkReal x2993=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2992)));
j4eval[0]=x2993;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2992))))));
j4eval[2]=IKsign(x2993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2994=cj5*cj5;
IkReal x2995=r01*r01;
IkReal x2996=(r01*sj5);
IkReal x2997=(cj5*r00);
IkReal x2998=((((-1.0)*x2994*(r00*r00)))+(((2.0)*x2996*x2997))+(((-1.0)*(r02*r02)))+(((-1.0)*x2995))+((x2994*x2995)));
j4eval[0]=x2998;
j4eval[1]=IKsign(x2998);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2997))+x2996))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2999=cj5*cj5;
IkReal x3000=r01*r01;
IkReal x3001=(r01*sj5);
IkReal x3002=(cj5*r00);
CheckValue<IkReal> x3003=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3000))+((x2999*x3000))+(((-1.0)*(r02*r02)))+(((-1.0)*x2999*(r00*r00)))+(((2.0)*x3001*x3002)))),-1);
if(!x3003.valid){
continue;
}
CheckValue<IkReal> x3004 = IKatan2WithCheck(IkReal(((((-1.0)*x3002))+x3001)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3003.value)))+(x3004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3005=IKsin(j4);
IkReal x3006=IKcos(j4);
IkReal x3007=(cj5*r00);
IkReal x3008=((1.0)*sj2);
IkReal x3009=(cj5*r20);
IkReal x3010=(cj5*r10);
IkReal x3011=((1.0)*x3006);
IkReal x3012=(sj5*x3006);
IkReal x3013=((1.0)*x3005);
IkReal x3014=(sj5*x3013);
evalcond[0]=((((-1.0)*r22*x3011))+((x3005*x3009))+(((-1.0)*r21*x3014)));
evalcond[1]=((((-1.0)*r12*x3011))+(((-1.0)*r11*x3014))+((x3005*x3010)));
evalcond[2]=(((r01*x3012))+(((-1.0)*r02*x3013))+(((-1.0)*x3007*x3011)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3011))+(((-1.0)*r01*x3014))+((x3005*x3007)));
evalcond[4]=((((-1.0)*r12*x3013))+(((-1.0)*x3010*x3011))+((r11*x3012))+((cj1*cj2))+(((-1.0)*sj1*x3008)));
evalcond[5]=((((-1.0)*r22*x3013))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3008))+((r21*x3012))+(((-1.0)*x3009*x3011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3015=((1.0)*sj5);
CheckValue<IkReal> x3016 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x3015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3016.valid){
continue;
}
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3015))+(((-1.0)*cj5*r21)))),-1);
if(!x3017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3016.value)+(((1.5707963267949)*(x3017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3018=IKsin(j4);
IkReal x3019=IKcos(j4);
IkReal x3020=(cj5*r00);
IkReal x3021=((1.0)*sj2);
IkReal x3022=(cj5*r20);
IkReal x3023=(cj5*r10);
IkReal x3024=((1.0)*x3019);
IkReal x3025=(sj5*x3019);
IkReal x3026=((1.0)*x3018);
IkReal x3027=(sj5*x3026);
evalcond[0]=((((-1.0)*r21*x3027))+((x3018*x3022))+(((-1.0)*r22*x3024)));
evalcond[1]=((((-1.0)*r12*x3024))+(((-1.0)*r11*x3027))+((x3018*x3023)));
evalcond[2]=((((-1.0)*x3020*x3024))+((r01*x3025))+(((-1.0)*r02*x3026)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x3027))+((x3018*x3020))+(((-1.0)*r02*x3024)));
evalcond[4]=((((-1.0)*r12*x3026))+((r11*x3025))+(((-1.0)*sj1*x3021))+(((-1.0)*x3023*x3024))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3021))+((r21*x3025))+(((-1.0)*x3022*x3024))+(((-1.0)*r22*x3026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3028=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3028.valid){
continue;
}
CheckValue<IkReal> x3029 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3028.value)))+(x3029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3030=IKsin(j4);
IkReal x3031=IKcos(j4);
IkReal x3032=(cj5*r00);
IkReal x3033=((1.0)*sj2);
IkReal x3034=(cj5*r20);
IkReal x3035=(cj5*r10);
IkReal x3036=((1.0)*x3031);
IkReal x3037=(sj5*x3031);
IkReal x3038=((1.0)*x3030);
IkReal x3039=(sj5*x3038);
evalcond[0]=((((-1.0)*r21*x3039))+((x3030*x3034))+(((-1.0)*r22*x3036)));
evalcond[1]=(((x3030*x3035))+(((-1.0)*r11*x3039))+(((-1.0)*r12*x3036)));
evalcond[2]=(((r01*x3037))+(((-1.0)*r02*x3038))+(((-1.0)*x3032*x3036)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x3039))+((x3030*x3032))+(((-1.0)*r02*x3036)));
evalcond[4]=(((r11*x3037))+(((-1.0)*x3035*x3036))+(((-1.0)*r12*x3038))+((cj1*cj2))+(((-1.0)*sj1*x3033)));
evalcond[5]=((((-1.0)*cj1*x3033))+(((-1.0)*cj2*sj1))+((r21*x3037))+(((-1.0)*r22*x3038))+(((-1.0)*x3034*x3036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3040=((-1.0)*r10);
IkReal x3042 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3042)==0){
continue;
}
IkReal x3041=pow(x3042,-0.5);
CheckValue<IkReal> x3043 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3040),IKFAST_ATAN2_MAGTHRESH);
if(!x3043.valid){
continue;
}
IkReal gconst90=((-1.0)*(x3043.value));
IkReal gconst91=(r11*x3041);
IkReal gconst92=(x3040*x3041);
CheckValue<IkReal> x3044 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3044.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3044.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3045=((-1.0)*r10);
IkReal x3046=x3041;
CheckValue<IkReal> x3048 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3045),IKFAST_ATAN2_MAGTHRESH);
if(!x3048.valid){
continue;
}
IkReal x3047=((-1.0)*(x3048.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x3047;
IkReal gconst90=x3047;
IkReal gconst91=(r11*x3046);
IkReal gconst92=(x3045*x3046);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3049=((1.0)*gconst91);
CheckValue<IkReal> x3050 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*r11*sj0*x3049))+(((-1.0)*cj0*r01*x3049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3050.valid){
continue;
}
CheckValue<IkReal> x3051=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x3051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3050.value)+(((1.5707963267949)*(x3051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3052=IKsin(j4);
IkReal x3053=IKcos(j4);
IkReal x3054=((1.0)*cj2);
IkReal x3055=(gconst92*r00);
IkReal x3056=(sj1*sj2);
IkReal x3057=((1.0)*x3053);
IkReal x3058=(gconst91*x3053);
IkReal x3059=((1.0)*x3052);
IkReal x3060=(gconst92*x3052);
IkReal x3061=(gconst91*x3059);
evalcond[0]=(((r20*x3060))+(((-1.0)*r21*x3061))+(((-1.0)*r22*x3057)));
evalcond[1]=(sj0+(((-1.0)*r01*x3061))+(((-1.0)*r02*x3057))+((x3052*x3055)));
evalcond[2]=((((-1.0)*r11*x3061))+((r10*x3060))+(((-1.0)*r12*x3057))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst92*r20*x3057))+(((-1.0)*sj1*x3054))+(((-1.0)*cj1*sj2))+((r21*x3058))+(((-1.0)*r22*x3059)));
evalcond[4]=((((-1.0)*x3055*x3057))+((cj0*x3056))+((r01*x3058))+(((-1.0)*r02*x3059))+(((-1.0)*cj0*cj1*x3054)));
evalcond[5]=((((-1.0)*gconst92*r10*x3057))+((sj0*x3056))+(((-1.0)*cj1*sj0*x3054))+((r11*x3058))+(((-1.0)*r12*x3059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3062=((1.0)*gconst91);
CheckValue<IkReal> x3063 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3062))+((cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3063.valid){
continue;
}
CheckValue<IkReal> x3064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3062))+(((-1.0)*gconst92*r01)))),-1);
if(!x3064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3063.value)+(((1.5707963267949)*(x3064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3065=IKsin(j4);
IkReal x3066=IKcos(j4);
IkReal x3067=((1.0)*cj2);
IkReal x3068=(gconst92*r00);
IkReal x3069=(sj1*sj2);
IkReal x3070=((1.0)*x3066);
IkReal x3071=(gconst91*x3066);
IkReal x3072=((1.0)*x3065);
IkReal x3073=(gconst92*x3065);
IkReal x3074=(gconst91*x3072);
evalcond[0]=((((-1.0)*r22*x3070))+((r20*x3073))+(((-1.0)*r21*x3074)));
evalcond[1]=(sj0+(((-1.0)*r02*x3070))+(((-1.0)*r01*x3074))+((x3065*x3068)));
evalcond[2]=(((r10*x3073))+(((-1.0)*r11*x3074))+(((-1.0)*r12*x3070))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x3072))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3067))+((r21*x3071))+(((-1.0)*gconst92*r20*x3070)));
evalcond[4]=(((r01*x3071))+(((-1.0)*r02*x3072))+((cj0*x3069))+(((-1.0)*cj0*cj1*x3067))+(((-1.0)*x3068*x3070)));
evalcond[5]=((((-1.0)*gconst92*r10*x3070))+(((-1.0)*cj1*sj0*x3067))+(((-1.0)*r12*x3072))+((r11*x3071))+((sj0*x3069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3075=((-1.0)*r11);
IkReal x3077 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3077)==0){
continue;
}
IkReal x3076=pow(x3077,-0.5);
CheckValue<IkReal> x3078 = IKatan2WithCheck(IkReal(x3075),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3078.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x3078.value))));
IkReal gconst94=(x3075*x3076);
IkReal gconst95=((1.0)*r10*x3076);
CheckValue<IkReal> x3079 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3079.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3079.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3080=((-1.0)*r11);
CheckValue<IkReal> x3083 = IKatan2WithCheck(IkReal(x3080),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3083.valid){
continue;
}
IkReal x3081=((1.0)*(x3083.value));
IkReal x3082=x3076;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3081)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3081)));
IkReal gconst94=(x3080*x3082);
IkReal gconst95=((1.0)*r10*x3082);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3084=((-1.0)*r11);
CheckValue<IkReal> x3087 = IKatan2WithCheck(IkReal(x3084),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3087.valid){
continue;
}
IkReal x3085=((1.0)*(x3087.value));
IkReal x3086=x3076;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3085)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3085)));
IkReal gconst94=(x3084*x3086);
IkReal gconst95=((1.0)*r10*x3086);
IkReal x3088=r12*r12;
IkReal x3089=(cj0*r02);
IkReal x3090=x3076;
IkReal x3091=(sj0*x3090);
j4eval[0]=((IKabs((x3089+((r12*sj0)))))+(IKabs((((x3088*x3091))+((r12*x3089*x3090))+(((-1.0)*x3091))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3092=((-1.0)*r11);
CheckValue<IkReal> x3095 = IKatan2WithCheck(IkReal(x3092),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3095.valid){
continue;
}
IkReal x3093=((1.0)*(x3095.value));
IkReal x3094=x3076;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3093)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3093)));
IkReal gconst94=(x3092*x3094);
IkReal gconst95=((1.0)*r10*x3094);
IkReal x3096=r12*r12;
IkReal x3097=((1.0)*r22);
IkReal x3098=(cj1*sj2);
IkReal x3099=(cj2*sj1);
CheckValue<IkReal> x3103=IKPowWithIntegerCheck(((-1.0)+x3096),-1);
if(!x3103.valid){
continue;
}
IkReal x3100=x3103.value;
if((((1.0)+(((-1.0)*x3096)))) < -0.00001)
continue;
IkReal x3101=IKsqrt(((1.0)+(((-1.0)*x3096))));
IkReal x3102=(r12*x3100*x3101);
j4eval[0]=((IKabs(((((-1.0)*x3097*x3098))+(((-1.0)*x3097*x3099)))))+(IKabs(((((-1.0)*x3097*x3098*x3102))+(((-1.0)*x3097*x3099*x3102))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3104=(cj2*sj1);
IkReal x3105=(gconst95*r20);
IkReal x3106=(cj1*sj2);
IkReal x3107=((1.0)*r22);
IkReal x3108=(gconst94*r21);
CheckValue<IkReal> x3109 = IKatan2WithCheck(IkReal(((((-1.0)*x3106*x3107))+(((-1.0)*x3104*x3107)))),IkReal(((((-1.0)*x3104*x3105))+(((-1.0)*x3105*x3106))+((x3106*x3108))+((x3104*x3108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3109.valid){
continue;
}
CheckValue<IkReal> x3110=IKPowWithIntegerCheck(IKsign(((x3108*x3108)+(r22*r22)+(x3105*x3105)+(((-2.0)*x3105*x3108)))),-1);
if(!x3110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3109.value)+(((1.5707963267949)*(x3110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3111=IKsin(j4);
IkReal x3112=IKcos(j4);
IkReal x3113=((1.0)*cj2);
IkReal x3114=(gconst95*r10);
IkReal x3115=(sj1*sj2);
IkReal x3116=((1.0)*x3112);
IkReal x3117=(gconst95*x3111);
IkReal x3118=(gconst94*x3112);
IkReal x3119=((1.0)*x3111);
IkReal x3120=(gconst94*x3119);
evalcond[0]=((((-1.0)*r21*x3120))+(((-1.0)*r22*x3116))+((r20*x3117)));
evalcond[1]=((((-1.0)*r02*x3116))+sj0+((r00*x3117))+(((-1.0)*r01*x3120)));
evalcond[2]=((((-1.0)*r12*x3116))+((x3111*x3114))+(((-1.0)*r11*x3120))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x3113))+(((-1.0)*cj1*sj2))+((r21*x3118))+(((-1.0)*r22*x3119))+(((-1.0)*gconst95*r20*x3116)));
evalcond[4]=((((-1.0)*r02*x3119))+(((-1.0)*gconst95*r00*x3116))+(((-1.0)*cj0*cj1*x3113))+((cj0*x3115))+((r01*x3118)));
evalcond[5]=((((-1.0)*x3114*x3116))+((sj0*x3115))+(((-1.0)*r12*x3119))+((r11*x3118))+(((-1.0)*cj1*sj0*x3113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3121=((1.0)*gconst94);
CheckValue<IkReal> x3122=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x3122.valid){
continue;
}
CheckValue<IkReal> x3123 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3121))+((gconst95*r10*sj0))+(((-1.0)*r11*sj0*x3121))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3122.value)))+(x3123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3124=IKsin(j4);
IkReal x3125=IKcos(j4);
IkReal x3126=((1.0)*cj2);
IkReal x3127=(gconst95*r10);
IkReal x3128=(sj1*sj2);
IkReal x3129=((1.0)*x3125);
IkReal x3130=(gconst95*x3124);
IkReal x3131=(gconst94*x3125);
IkReal x3132=((1.0)*x3124);
IkReal x3133=(gconst94*x3132);
evalcond[0]=(((r20*x3130))+(((-1.0)*r21*x3133))+(((-1.0)*r22*x3129)));
evalcond[1]=(((r00*x3130))+sj0+(((-1.0)*r02*x3129))+(((-1.0)*r01*x3133)));
evalcond[2]=((((-1.0)*r12*x3129))+(((-1.0)*r11*x3133))+((x3124*x3127))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x3126))+(((-1.0)*cj1*sj2))+((r21*x3131))+(((-1.0)*r22*x3132))+(((-1.0)*gconst95*r20*x3129)));
evalcond[4]=((((-1.0)*cj0*cj1*x3126))+((r01*x3131))+(((-1.0)*r02*x3132))+(((-1.0)*gconst95*r00*x3129))+((cj0*x3128)));
evalcond[5]=((((-1.0)*cj1*sj0*x3126))+(((-1.0)*r12*x3132))+((r11*x3131))+(((-1.0)*x3127*x3129))+((sj0*x3128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3134=((1.0)*gconst94);
CheckValue<IkReal> x3135 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3134))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3135.valid){
continue;
}
CheckValue<IkReal> x3136=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x3134)))),-1);
if(!x3136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3135.value)+(((1.5707963267949)*(x3136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3137=IKsin(j4);
IkReal x3138=IKcos(j4);
IkReal x3139=((1.0)*cj2);
IkReal x3140=(gconst95*r10);
IkReal x3141=(sj1*sj2);
IkReal x3142=((1.0)*x3138);
IkReal x3143=(gconst95*x3137);
IkReal x3144=(gconst94*x3138);
IkReal x3145=((1.0)*x3137);
IkReal x3146=(gconst94*x3145);
evalcond[0]=((((-1.0)*r22*x3142))+((r20*x3143))+(((-1.0)*r21*x3146)));
evalcond[1]=(sj0+((r00*x3143))+(((-1.0)*r02*x3142))+(((-1.0)*r01*x3146)));
evalcond[2]=((((-1.0)*r11*x3146))+(((-1.0)*r12*x3142))+((x3137*x3140))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x3145))+(((-1.0)*sj1*x3139))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst95*r20*x3142))+((r21*x3144)));
evalcond[4]=(((cj0*x3141))+((r01*x3144))+(((-1.0)*r02*x3145))+(((-1.0)*gconst95*r00*x3142))+(((-1.0)*cj0*cj1*x3139)));
evalcond[5]=((((-1.0)*r12*x3145))+(((-1.0)*x3140*x3142))+((sj0*x3141))+((r11*x3144))+(((-1.0)*cj1*sj0*x3139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3147=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3147;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3148=((1.0)*sj5);
IkReal x3149=((((-1.0)*r00*x3148))+(((-1.0)*cj5*r01)));
j4eval[0]=x3149;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x3148))))));
j4eval[2]=IKsign(x3149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3150=cj5*cj5;
IkReal x3151=r11*r11;
IkReal x3152=(cj5*r10);
IkReal x3153=(r11*sj5);
IkReal x3154=((((-1.0)*x3150*(r10*r10)))+(((-1.0)*x3151))+(((2.0)*x3152*x3153))+((x3150*x3151))+(((-1.0)*(r12*r12))));
j4eval[0]=x3154;
j4eval[1]=((IKabs(r12))+(IKabs((x3153+(((-1.0)*x3152))))));
j4eval[2]=IKsign(x3154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3155=cj5*cj5;
IkReal x3156=r11*r11;
IkReal x3157=(cj5*r10);
IkReal x3158=(r11*sj5);
CheckValue<IkReal> x3159 = IKatan2WithCheck(IkReal((x3158+(((-1.0)*x3157)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3159.valid){
continue;
}
CheckValue<IkReal> x3160=IKPowWithIntegerCheck(IKsign((((x3155*x3156))+(((-1.0)*x3156))+(((-1.0)*x3155*(r10*r10)))+(((2.0)*x3157*x3158))+(((-1.0)*(r12*r12))))),-1);
if(!x3160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3159.value)+(((1.5707963267949)*(x3160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3161=IKsin(j4);
IkReal x3162=IKcos(j4);
IkReal x3163=(cj5*r00);
IkReal x3164=((1.0)*cj1);
IkReal x3165=((1.0)*x3162);
IkReal x3166=(sj5*x3162);
IkReal x3167=(cj5*x3161);
IkReal x3168=((1.0)*x3161);
IkReal x3169=(sj5*x3168);
evalcond[0]=(((r20*x3167))+(((-1.0)*r21*x3169))+(((-1.0)*r22*x3165)));
evalcond[1]=((((-1.0)*r02*x3165))+((x3161*x3163))+(((-1.0)*r01*x3169)));
evalcond[2]=((((-1.0)*r12*x3168))+((r11*x3166))+(((-1.0)*cj5*r10*x3165)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3165))+((r10*x3167))+(((-1.0)*r11*x3169)));
evalcond[4]=((((-1.0)*x3163*x3165))+((sj1*sj2))+((r01*x3166))+(((-1.0)*r02*x3168))+(((-1.0)*cj2*x3164)));
evalcond[5]=((((-1.0)*cj5*r20*x3165))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3164))+((r21*x3166))+(((-1.0)*r22*x3168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3170=((1.0)*sj5);
CheckValue<IkReal> x3171=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3170))+(((-1.0)*cj5*r01)))),-1);
if(!x3171.valid){
continue;
}
CheckValue<IkReal> x3172 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x3170))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3171.value)))+(x3172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3173=IKsin(j4);
IkReal x3174=IKcos(j4);
IkReal x3175=(cj5*r00);
IkReal x3176=((1.0)*cj1);
IkReal x3177=((1.0)*x3174);
IkReal x3178=(sj5*x3174);
IkReal x3179=(cj5*x3173);
IkReal x3180=((1.0)*x3173);
IkReal x3181=(sj5*x3180);
evalcond[0]=((((-1.0)*r21*x3181))+((r20*x3179))+(((-1.0)*r22*x3177)));
evalcond[1]=(((x3173*x3175))+(((-1.0)*r01*x3181))+(((-1.0)*r02*x3177)));
evalcond[2]=(((r11*x3178))+(((-1.0)*cj5*r10*x3177))+(((-1.0)*r12*x3180)));
evalcond[3]=((-1.0)+((r10*x3179))+(((-1.0)*r12*x3177))+(((-1.0)*r11*x3181)));
evalcond[4]=((((-1.0)*r02*x3180))+((sj1*sj2))+((r01*x3178))+(((-1.0)*cj2*x3176))+(((-1.0)*x3175*x3177)));
evalcond[5]=((((-1.0)*sj2*x3176))+(((-1.0)*r22*x3180))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x3177))+((r21*x3178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3182=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3182.valid){
continue;
}
CheckValue<IkReal> x3183 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3182.value)))+(x3183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3184=IKsin(j4);
IkReal x3185=IKcos(j4);
IkReal x3186=(cj5*r00);
IkReal x3187=((1.0)*cj1);
IkReal x3188=((1.0)*x3185);
IkReal x3189=(sj5*x3185);
IkReal x3190=(cj5*x3184);
IkReal x3191=((1.0)*x3184);
IkReal x3192=(sj5*x3191);
evalcond[0]=((((-1.0)*r22*x3188))+((r20*x3190))+(((-1.0)*r21*x3192)));
evalcond[1]=((((-1.0)*r01*x3192))+(((-1.0)*r02*x3188))+((x3184*x3186)));
evalcond[2]=((((-1.0)*cj5*r10*x3188))+(((-1.0)*r12*x3191))+((r11*x3189)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x3192))+(((-1.0)*r12*x3188))+((r10*x3190)));
evalcond[4]=((((-1.0)*cj2*x3187))+((r01*x3189))+((sj1*sj2))+(((-1.0)*r02*x3191))+(((-1.0)*x3186*x3188)));
evalcond[5]=((((-1.0)*r22*x3191))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3187))+((r21*x3189))+(((-1.0)*cj5*r20*x3188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3193=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3193;
j4eval[1]=IKsign(x3193);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3194=((1.0)*sj5);
IkReal x3195=((((-1.0)*r20*x3194))+(((-1.0)*cj5*r21)));
j4eval[0]=x3195;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3194))+((cj5*r00))))));
j4eval[2]=IKsign(x3195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3196=cj5*cj5;
IkReal x3197=r11*r11;
IkReal x3198=(r11*sj5);
IkReal x3199=(cj5*r10);
IkReal x3200=(x3197+(r12*r12)+(((-2.0)*x3198*x3199))+((x3196*(r10*r10)))+(((-1.0)*x3196*x3197)));
j4eval[0]=x3200;
j4eval[1]=IKsign(x3200);
j4eval[2]=((IKabs(r12))+(IKabs((x3198+(((-1.0)*x3199))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3201=cj5*cj5;
IkReal x3202=r11*r11;
IkReal x3203=(cj5*r10);
IkReal x3204=(r11*sj5);
CheckValue<IkReal> x3205=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3203*x3204))+((x3201*(r10*r10)))+x3202+(((-1.0)*x3201*x3202)))),-1);
if(!x3205.valid){
continue;
}
CheckValue<IkReal> x3206 = IKatan2WithCheck(IkReal((x3204+(((-1.0)*x3203)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3205.value)))+(x3206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3207=IKsin(j4);
IkReal x3208=IKcos(j4);
IkReal x3209=(cj5*r00);
IkReal x3210=((1.0)*sj2);
IkReal x3211=((1.0)*x3208);
IkReal x3212=(sj5*x3208);
IkReal x3213=(cj5*x3207);
IkReal x3214=((1.0)*x3207);
IkReal x3215=(sj5*x3214);
evalcond[0]=((((-1.0)*r21*x3215))+((r20*x3213))+(((-1.0)*r22*x3211)));
evalcond[1]=((((-1.0)*r01*x3215))+((x3207*x3209))+(((-1.0)*r02*x3211)));
evalcond[2]=((((-1.0)*cj5*r10*x3211))+((r11*x3212))+(((-1.0)*r12*x3214)));
evalcond[3]=((1.0)+(((-1.0)*r11*x3215))+(((-1.0)*r12*x3211))+((r10*x3213)));
evalcond[4]=(((r01*x3212))+(((-1.0)*x3209*x3211))+(((-1.0)*sj1*x3210))+((cj1*cj2))+(((-1.0)*r02*x3214)));
evalcond[5]=((((-1.0)*cj5*r20*x3211))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3210))+((r21*x3212))+(((-1.0)*r22*x3214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3216=((1.0)*sj5);
CheckValue<IkReal> x3217 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x3216))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3217.valid){
continue;
}
CheckValue<IkReal> x3218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3216))+(((-1.0)*cj5*r21)))),-1);
if(!x3218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3217.value)+(((1.5707963267949)*(x3218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3219=IKsin(j4);
IkReal x3220=IKcos(j4);
IkReal x3221=(cj5*r00);
IkReal x3222=((1.0)*sj2);
IkReal x3223=((1.0)*x3220);
IkReal x3224=(sj5*x3220);
IkReal x3225=(cj5*x3219);
IkReal x3226=((1.0)*x3219);
IkReal x3227=(sj5*x3226);
evalcond[0]=((((-1.0)*r22*x3223))+(((-1.0)*r21*x3227))+((r20*x3225)));
evalcond[1]=((((-1.0)*r02*x3223))+((x3219*x3221))+(((-1.0)*r01*x3227)));
evalcond[2]=(((r11*x3224))+(((-1.0)*cj5*r10*x3223))+(((-1.0)*r12*x3226)));
evalcond[3]=((1.0)+((r10*x3225))+(((-1.0)*r11*x3227))+(((-1.0)*r12*x3223)));
evalcond[4]=((((-1.0)*sj1*x3222))+(((-1.0)*r02*x3226))+((r01*x3224))+(((-1.0)*x3221*x3223))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x3223))+((r21*x3224))+(((-1.0)*r22*x3226))+(((-1.0)*cj1*x3222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3228=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3228.valid){
continue;
}
CheckValue<IkReal> x3229 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3228.value)))+(x3229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3230=IKsin(j4);
IkReal x3231=IKcos(j4);
IkReal x3232=(cj5*r00);
IkReal x3233=((1.0)*sj2);
IkReal x3234=((1.0)*x3231);
IkReal x3235=(sj5*x3231);
IkReal x3236=(cj5*x3230);
IkReal x3237=((1.0)*x3230);
IkReal x3238=(sj5*x3237);
evalcond[0]=(((r20*x3236))+(((-1.0)*r21*x3238))+(((-1.0)*r22*x3234)));
evalcond[1]=((((-1.0)*r02*x3234))+(((-1.0)*r01*x3238))+((x3230*x3232)));
evalcond[2]=(((r11*x3235))+(((-1.0)*r12*x3237))+(((-1.0)*cj5*r10*x3234)));
evalcond[3]=((1.0)+(((-1.0)*r11*x3238))+(((-1.0)*r12*x3234))+((r10*x3236)));
evalcond[4]=((((-1.0)*r02*x3237))+((r01*x3235))+(((-1.0)*sj1*x3233))+(((-1.0)*x3232*x3234))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj5*r20*x3234))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3233))+(((-1.0)*r22*x3237))+((r21*x3235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3239=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3239);
rxp0_2=(py*r00);
rxp1_0=(r21*x3239);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3240=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3240);
rxp0_2=(py*r00);
rxp1_0=(r21*x3240);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3241=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3241);
rxp0_2=(py*r00);
rxp1_0=(r21*x3241);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3244=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3244.valid){
continue;
}
IkReal x3242=x3244.value;
IkReal x3243=(cj0*x3242);
cj4array[0]=(((cj1*cj2*x3243))+(((-1.0)*sj1*sj2*x3243)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3245=IKsin(j4);
IkReal x3246=IKcos(j4);
IkReal x3247=(cj5*r20);
IkReal x3248=((1.0)*x3246);
IkReal x3249=((1.0)*sj5*x3245);
evalcond[0]=((-1.0)*r12*x3245);
evalcond[1]=((((-1.0)*r12*x3248))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x3249))+((x3245*x3247)));
evalcond[3]=((((-1.0)*r01*x3249))+((cj5*r00*x3245)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((r21*sj5*x3246))+(((-1.0)*x3247*x3248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3251=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3251.valid){
continue;
}
IkReal x3250=x3251.value;
cj4array[0]=(((cj1*sj2*x3250))+((cj2*sj1*x3250)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3252=IKsin(j4);
IkReal x3253=IKcos(j4);
IkReal x3254=(cj5*r00);
IkReal x3255=(r01*sj5);
IkReal x3256=((1.0)*cj0);
IkReal x3257=((1.0)*x3253);
IkReal x3258=((1.0)*x3252);
evalcond[0]=((-1.0)*r12*x3252);
evalcond[1]=((((-1.0)*r12*x3257))+(((-1.0)*x3256)));
evalcond[2]=((((-1.0)*r21*sj5*x3258))+((cj5*r20*x3252)));
evalcond[3]=(((x3252*x3254))+(((-1.0)*x3255*x3258)));
evalcond[4]=((((-1.0)*cj1*cj2*x3256))+(((-1.0)*x3254*x3257))+((x3253*x3255))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3259=IKPowWithIntegerCheck(r12,-1);
if(!x3259.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3259.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3260=IKsin(j4);
IkReal x3261=IKcos(j4);
IkReal x3262=(r01*sj5);
IkReal x3263=((1.0)*cj1);
IkReal x3264=(r21*sj5);
IkReal x3265=((1.0)*x3260);
IkReal x3266=(cj5*x3260);
IkReal x3267=((1.0)*cj5*x3261);
evalcond[0]=((-1.0)*r12*x3260);
evalcond[1]=(((r20*x3266))+(((-1.0)*x3264*x3265)));
evalcond[2]=(((r00*x3266))+(((-1.0)*x3262*x3265)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r20*x3267))+(((-1.0)*sj2*x3263))+((x3261*x3264)));
evalcond[4]=((((-1.0)*cj0*cj2*x3263))+(((-1.0)*r00*x3267))+((x3261*x3262))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3268=((1.0)*sj5);
CheckValue<IkReal> x3269 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x3268))+(((-1.0)*r11*sj0*x3268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3269.valid){
continue;
}
CheckValue<IkReal> x3270=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3269.value)+(((1.5707963267949)*(x3270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3271=IKsin(j4);
IkReal x3272=IKcos(j4);
IkReal x3273=(cj5*r00);
IkReal x3274=((1.0)*cj1);
IkReal x3275=(sj1*sj2);
IkReal x3276=((1.0)*x3272);
IkReal x3277=(sj5*x3272);
IkReal x3278=(cj5*x3271);
IkReal x3279=((1.0)*x3271);
IkReal x3280=(sj5*x3279);
evalcond[0]=((((-1.0)*r21*x3280))+((r20*x3278))+(((-1.0)*r22*x3276)));
evalcond[1]=(sj0+(((-1.0)*r01*x3280))+(((-1.0)*r02*x3276))+((x3271*x3273)));
evalcond[2]=((((-1.0)*r12*x3276))+((r10*x3278))+(((-1.0)*cj0))+(((-1.0)*r11*x3280)));
evalcond[3]=(((r21*x3277))+(((-1.0)*cj5*r20*x3276))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3274))+(((-1.0)*r22*x3279)));
evalcond[4]=(((cj0*x3275))+(((-1.0)*x3273*x3276))+((r01*x3277))+(((-1.0)*cj0*cj2*x3274))+(((-1.0)*r02*x3279)));
evalcond[5]=((((-1.0)*r12*x3279))+((sj0*x3275))+(((-1.0)*cj2*sj0*x3274))+((r11*x3277))+(((-1.0)*cj5*r10*x3276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3281=((1.0)*sj5);
CheckValue<IkReal> x3282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3281))+(((-1.0)*cj5*r01)))),-1);
if(!x3282.valid){
continue;
}
CheckValue<IkReal> x3283 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3281))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3282.value)))+(x3283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3284=IKsin(j4);
IkReal x3285=IKcos(j4);
IkReal x3286=(cj5*r00);
IkReal x3287=((1.0)*cj1);
IkReal x3288=(sj1*sj2);
IkReal x3289=((1.0)*x3285);
IkReal x3290=(sj5*x3285);
IkReal x3291=(cj5*x3284);
IkReal x3292=((1.0)*x3284);
IkReal x3293=(sj5*x3292);
evalcond[0]=((((-1.0)*r21*x3293))+((r20*x3291))+(((-1.0)*r22*x3289)));
evalcond[1]=(sj0+(((-1.0)*r01*x3293))+(((-1.0)*r02*x3289))+((x3284*x3286)));
evalcond[2]=((((-1.0)*r11*x3293))+(((-1.0)*r12*x3289))+((r10*x3291))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x3287))+(((-1.0)*r22*x3292))+(((-1.0)*cj2*sj1))+((r21*x3290))+(((-1.0)*cj5*r20*x3289)));
evalcond[4]=(((r01*x3290))+(((-1.0)*cj0*cj2*x3287))+(((-1.0)*r02*x3292))+((cj0*x3288))+(((-1.0)*x3286*x3289)));
evalcond[5]=((((-1.0)*r12*x3292))+(((-1.0)*cj2*sj0*x3287))+((sj0*x3288))+(((-1.0)*cj5*r10*x3289))+((r11*x3290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3294=((1.0)*sj5);
CheckValue<IkReal> x3295=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3294)))),-1);
if(!x3295.valid){
continue;
}
CheckValue<IkReal> x3296 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3295.value)))+(x3296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3297=IKsin(j4);
IkReal x3298=IKcos(j4);
IkReal x3299=(cj5*r00);
IkReal x3300=((1.0)*cj1);
IkReal x3301=(sj1*sj2);
IkReal x3302=((1.0)*x3298);
IkReal x3303=(sj5*x3298);
IkReal x3304=(cj5*x3297);
IkReal x3305=((1.0)*x3297);
IkReal x3306=(sj5*x3305);
evalcond[0]=((((-1.0)*r21*x3306))+(((-1.0)*r22*x3302))+((r20*x3304)));
evalcond[1]=(sj0+(((-1.0)*r02*x3302))+(((-1.0)*r01*x3306))+((x3297*x3299)));
evalcond[2]=(((r10*x3304))+(((-1.0)*r12*x3302))+(((-1.0)*r11*x3306))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3303))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x3302))+(((-1.0)*r22*x3305))+(((-1.0)*sj2*x3300)));
evalcond[4]=(((cj0*x3301))+(((-1.0)*cj0*cj2*x3300))+(((-1.0)*r02*x3305))+((r01*x3303))+(((-1.0)*x3299*x3302)));
evalcond[5]=(((r11*x3303))+(((-1.0)*cj2*sj0*x3300))+(((-1.0)*cj5*r10*x3302))+(((-1.0)*r12*x3305))+((sj0*x3301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3307=((1.0)*cj5);
IkReal x3308=((1.0)*sj5);
IkReal x3309=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x3309;
j0eval[1]=((IKabs(((((-1.0)*r00*x3308))+(((-1.0)*r01*x3307)))))+(IKabs(((((-1.0)*r11*x3307))+(((-1.0)*r10*x3308))))));
j0eval[2]=IKsign(x3309);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3310=r21*r21;
IkReal x3311=cj5*cj5;
IkReal x3312=(cj2*sj1);
IkReal x3313=(cj1*sj2);
IkReal x3314=((1.0)*r22);
IkReal x3315=(r21*sj5);
IkReal x3316=((1.0)*cj5*r20);
IkReal x3317=((((2.0)*cj5*r20*x3315))+(((-1.0)*x3311*(r20*r20)))+(((-1.0)*r22*x3314))+(((-1.0)*x3310))+((x3310*x3311)));
j4eval[0]=x3317;
j4eval[1]=((IKabs(((((-1.0)*x3312*x3314))+(((-1.0)*x3313*x3314)))))+(IKabs((((x3312*x3315))+((x3313*x3315))+(((-1.0)*x3312*x3316))+(((-1.0)*x3313*x3316))))));
j4eval[2]=IKsign(x3317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3318=cj1*cj1;
IkReal x3319=(cj2*sj2);
IkReal x3320=(cj1*sj1);
j0eval[0]=(x3320+x3319+(((-1.1938202247191)*sj2*x3318))+(((-2.0)*x3320*(cj2*cj2)))+(((-1.1938202247191)*cj2*x3320))+(((-2.0)*x3318*x3319)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.0724143720278249)*px))+(((-0.631906419594763)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0724143720278249)*py))+(((-0.631906419594763)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.0724143720278249)*px))+(((-0.631906419594763)*py))))+IKsqr(((((-0.0724143720278249)*py))+(((-0.631906419594763)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.0724143720278249)*px))+(((-0.631906419594763)*py))), ((((-0.0724143720278249)*py))+(((-0.631906419594763)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3321=IKsin(j0);
IkReal x3322=IKcos(j0);
evalcond[0]=((((-1.562)*x3322))+(((-1.0)*px))+(((0.179)*x3321)));
evalcond[1]=((((-1.562)*x3321))+(((-1.0)*py))+(((-0.179)*x3322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3323=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3323;
j4eval[1]=IKsign(x3323);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3324=((1.0)*sj5);
IkReal x3325=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3324)));
j4eval[0]=x3325;
j4eval[1]=IKsign(x3325);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3324))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3326=((1.0)*sj5);
IkReal x3327=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3326)));
j4eval[0]=x3327;
j4eval[1]=IKsign(x3327);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3326))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3328=((1.0)*sj5);
CheckValue<IkReal> x3329=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3328)))),-1);
if(!x3329.valid){
continue;
}
CheckValue<IkReal> x3330 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3328))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3329.value)))+(x3330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3331=IKcos(j4);
IkReal x3332=IKsin(j4);
IkReal x3333=((1.0)*cj0);
IkReal x3334=(r11*sj5);
IkReal x3335=(r21*sj5);
IkReal x3336=(r01*sj5);
IkReal x3337=((1.0)*x3331);
IkReal x3338=(cj5*x3331);
IkReal x3339=((1.0)*x3332);
IkReal x3340=(cj5*x3332);
evalcond[0]=(((r22*x3332))+(((-1.0)*x3335*x3337))+((r20*x3338)));
evalcond[1]=((((-1.0)*r22*x3337))+(((-1.0)*x3335*x3339))+((r20*x3340)));
evalcond[2]=(((r00*x3340))+sj0+(((-1.0)*r02*x3337))+(((-1.0)*x3336*x3339)));
evalcond[3]=(((r02*x3332))+(((-1.0)*x3333))+((r00*x3338))+(((-1.0)*x3336*x3337)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3338))+((r12*x3332))+(((-1.0)*x3334*x3337)));
evalcond[5]=(((r10*x3340))+(((-1.0)*x3333))+(((-1.0)*x3334*x3339))+(((-1.0)*r12*x3337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3341=((1.0)*sj5);
CheckValue<IkReal> x3342=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3341)))),-1);
if(!x3342.valid){
continue;
}
CheckValue<IkReal> x3343 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3342.value)))+(x3343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3344=IKcos(j4);
IkReal x3345=IKsin(j4);
IkReal x3346=((1.0)*cj0);
IkReal x3347=(r11*sj5);
IkReal x3348=(r21*sj5);
IkReal x3349=(r01*sj5);
IkReal x3350=((1.0)*x3344);
IkReal x3351=(cj5*x3344);
IkReal x3352=((1.0)*x3345);
IkReal x3353=(cj5*x3345);
evalcond[0]=((((-1.0)*x3348*x3350))+((r22*x3345))+((r20*x3351)));
evalcond[1]=((((-1.0)*x3348*x3352))+((r20*x3353))+(((-1.0)*r22*x3350)));
evalcond[2]=(sj0+(((-1.0)*x3349*x3352))+((r00*x3353))+(((-1.0)*r02*x3350)));
evalcond[3]=((((-1.0)*x3349*x3350))+((r00*x3351))+((r02*x3345))+(((-1.0)*x3346)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3347*x3350))+((r10*x3351))+((r12*x3345)));
evalcond[5]=((((-1.0)*x3346))+(((-1.0)*x3347*x3352))+(((-1.0)*r12*x3350))+((r10*x3353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3354 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3354.valid){
continue;
}
CheckValue<IkReal> x3355=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3354.value)+(((1.5707963267949)*(x3355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3356=IKcos(j4);
IkReal x3357=IKsin(j4);
IkReal x3358=((1.0)*cj0);
IkReal x3359=(r11*sj5);
IkReal x3360=(r21*sj5);
IkReal x3361=(r01*sj5);
IkReal x3362=((1.0)*x3356);
IkReal x3363=(cj5*x3356);
IkReal x3364=((1.0)*x3357);
IkReal x3365=(cj5*x3357);
evalcond[0]=((((-1.0)*x3360*x3362))+((r20*x3363))+((r22*x3357)));
evalcond[1]=((((-1.0)*x3360*x3364))+(((-1.0)*r22*x3362))+((r20*x3365)));
evalcond[2]=((((-1.0)*x3361*x3364))+sj0+(((-1.0)*r02*x3362))+((r00*x3365)));
evalcond[3]=((((-1.0)*x3361*x3362))+(((-1.0)*x3358))+((r00*x3363))+((r02*x3357)));
evalcond[4]=((((-1.0)*x3359*x3362))+(((-1.0)*sj0))+((r12*x3357))+((r10*x3363)));
evalcond[5]=((((-1.0)*x3359*x3364))+(((-1.0)*r12*x3362))+(((-1.0)*x3358))+((r10*x3365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.5039639815993)*px))+(((-2.70138005285309)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.5039639815993)*py))+(((-2.70138005285309)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.5039639815993)*px))+(((-2.70138005285309)*py))))+IKsqr(((((-3.5039639815993)*py))+(((-2.70138005285309)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.5039639815993)*px))+(((-2.70138005285309)*py))), ((((-3.5039639815993)*py))+(((-2.70138005285309)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3366=IKsin(j0);
IkReal x3367=IKcos(j0);
evalcond[0]=((((0.179)*x3366))+(((-1.0)*px))+(((-0.138)*x3367)));
evalcond[1]=((((-0.179)*x3367))+(((-1.0)*py))+(((-0.138)*x3366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3368=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3368;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3368);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3369=((1.0)*sj5);
IkReal x3370=((((-1.0)*r00*x3369))+(((-1.0)*cj5*r01)));
j4eval[0]=x3370;
j4eval[1]=IKsign(x3370);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3369)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3371=cj5*cj5;
IkReal x3372=((1.0)*r21);
IkReal x3373=(cj5*r20);
IkReal x3374=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3371))+((r01*r21*x3371))+((r01*sj5*x3373))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3372)));
j4eval[0]=x3374;
j4eval[1]=IKsign(x3374);
j4eval[2]=((IKabs((((cj0*x3373))+(((-1.0)*cj0*sj5*x3372)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3375=cj5*cj5;
IkReal x3376=((1.0)*r21);
IkReal x3377=(cj5*r20);
CheckValue<IkReal> x3378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3375))+((r01*r21*x3375))+((r01*sj5*x3377))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3376)))),-1);
if(!x3378.valid){
continue;
}
CheckValue<IkReal> x3379 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3377))+(((-1.0)*cj0*sj5*x3376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3378.value)))+(x3379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3380=IKcos(j4);
IkReal x3381=IKsin(j4);
IkReal x3382=(r11*sj5);
IkReal x3383=(r21*sj5);
IkReal x3384=(r01*sj5);
IkReal x3385=((1.0)*x3380);
IkReal x3386=((1.0)*x3381);
IkReal x3387=(cj5*x3380);
IkReal x3388=(cj5*x3381);
evalcond[0]=(((r20*x3387))+(((-1.0)*x3383*x3385))+((r22*x3381)));
evalcond[1]=((((-1.0)*r22*x3385))+((r20*x3388))+(((-1.0)*x3383*x3386)));
evalcond[2]=(cj0+(((-1.0)*x3384*x3385))+((r02*x3381))+((r00*x3387)));
evalcond[3]=(sj0+(((-1.0)*x3382*x3385))+((r10*x3387))+((r12*x3381)));
evalcond[4]=(sj0+(((-1.0)*x3384*x3386))+(((-1.0)*r02*x3385))+((r00*x3388)));
evalcond[5]=((((-1.0)*x3382*x3386))+((r10*x3388))+(((-1.0)*r12*x3385))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3389=((1.0)*sj5);
CheckValue<IkReal> x3390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3389))+(((-1.0)*cj5*r01)))),-1);
if(!x3390.valid){
continue;
}
CheckValue<IkReal> x3391 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3389)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3390.value)))+(x3391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3392=IKcos(j4);
IkReal x3393=IKsin(j4);
IkReal x3394=(r11*sj5);
IkReal x3395=(r21*sj5);
IkReal x3396=(r01*sj5);
IkReal x3397=((1.0)*x3392);
IkReal x3398=((1.0)*x3393);
IkReal x3399=(cj5*x3392);
IkReal x3400=(cj5*x3393);
evalcond[0]=(((r20*x3399))+(((-1.0)*x3395*x3397))+((r22*x3393)));
evalcond[1]=((((-1.0)*r22*x3397))+(((-1.0)*x3395*x3398))+((r20*x3400)));
evalcond[2]=(((r00*x3399))+cj0+(((-1.0)*x3396*x3397))+((r02*x3393)));
evalcond[3]=(sj0+(((-1.0)*x3394*x3397))+((r10*x3399))+((r12*x3393)));
evalcond[4]=(sj0+(((-1.0)*x3396*x3398))+(((-1.0)*r02*x3397))+((r00*x3400)));
evalcond[5]=((((-1.0)*x3394*x3398))+(((-1.0)*r12*x3397))+((r10*x3400))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3401 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3401.valid){
continue;
}
CheckValue<IkReal> x3402=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3401.value)+(((1.5707963267949)*(x3402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3403=IKcos(j4);
IkReal x3404=IKsin(j4);
IkReal x3405=(r11*sj5);
IkReal x3406=(r21*sj5);
IkReal x3407=(r01*sj5);
IkReal x3408=((1.0)*x3403);
IkReal x3409=((1.0)*x3404);
IkReal x3410=(cj5*x3403);
IkReal x3411=(cj5*x3404);
evalcond[0]=(((r22*x3404))+((r20*x3410))+(((-1.0)*x3406*x3408)));
evalcond[1]=(((r20*x3411))+(((-1.0)*x3406*x3409))+(((-1.0)*r22*x3408)));
evalcond[2]=(((r02*x3404))+cj0+(((-1.0)*x3407*x3408))+((r00*x3410)));
evalcond[3]=((((-1.0)*x3405*x3408))+sj0+((r12*x3404))+((r10*x3410)));
evalcond[4]=(sj0+(((-1.0)*x3407*x3409))+(((-1.0)*r02*x3408))+((r00*x3411)));
evalcond[5]=((((-1.0)*x3405*x3409))+(((-1.0)*r12*x3408))+((r10*x3411))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3412=((1.0)*sj5);
IkReal x3413=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x3413))+(((-1.0)*r10*x3412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3413))+(((-1.0)*r00*x3412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x3413))+(((-1.0)*r10*x3412))))+IKsqr(((((-1.0)*r01*x3413))+(((-1.0)*r00*x3412))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x3413))+(((-1.0)*r10*x3412))), ((((-1.0)*r01*x3413))+(((-1.0)*r00*x3412))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3414=IKsin(j0);
IkReal x3415=IKcos(j0);
IkReal x3416=(r00*sj5);
IkReal x3417=(r10*sj5);
IkReal x3418=(cj5*r11);
IkReal x3419=(cj5*r01);
evalcond[0]=(x3416+x3415+x3419);
evalcond[1]=(x3417+x3414+x3418);
evalcond[2]=((((0.138)*x3419))+(((0.138)*x3416))+(((-1.0)*px))+(((0.179)*x3414)));
evalcond[3]=((((0.138)*x3418))+(((0.138)*x3417))+(((-1.0)*py))+(((-0.179)*x3415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3420=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3420;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3421=((1.0)*sj5);
IkReal x3422=((((-1.0)*r00*x3421))+(((-1.0)*cj5*r01)));
j4eval[0]=x3422;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3421))))));
j4eval[2]=IKsign(x3422);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3423=cj5*cj5;
IkReal x3424=r01*r01;
IkReal x3425=(r01*sj5);
IkReal x3426=(cj5*r00);
IkReal x3427=((((2.0)*x3425*x3426))+(((-1.0)*(r02*r02)))+(((-1.0)*x3424))+(((-1.0)*x3423*(r00*r00)))+((x3423*x3424)));
j4eval[0]=x3427;
j4eval[1]=IKsign(x3427);
j4eval[2]=((IKabs(((((-1.0)*sj0*x3425))+((sj0*x3426)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3428=cj5*cj5;
IkReal x3429=r01*r01;
IkReal x3430=(r01*sj5);
IkReal x3431=(cj5*r00);
CheckValue<IkReal> x3432=IKPowWithIntegerCheck(IKsign((((x3428*x3429))+(((-1.0)*(r02*r02)))+(((2.0)*x3430*x3431))+(((-1.0)*x3429))+(((-1.0)*x3428*(r00*r00))))),-1);
if(!x3432.valid){
continue;
}
CheckValue<IkReal> x3433 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x3430))+((sj0*x3431)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3432.value)))+(x3433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3434=IKcos(j4);
IkReal x3435=IKsin(j4);
IkReal x3436=(r11*sj5);
IkReal x3437=(r21*sj5);
IkReal x3438=(cj5*r20);
IkReal x3439=(cj5*r00);
IkReal x3440=(r01*sj5);
IkReal x3441=(cj5*r10);
IkReal x3442=((1.0)*x3434);
IkReal x3443=((1.0)*x3435);
evalcond[0]=(((x3434*x3439))+((r02*x3435))+(((-1.0)*x3440*x3442)));
evalcond[1]=(((x3434*x3441))+(((-1.0)*x3436*x3442))+((r12*x3435)));
evalcond[2]=(((x3435*x3438))+(((-1.0)*x3437*x3443))+(((-1.0)*r22*x3442)));
evalcond[3]=((-1.0)+((x3434*x3438))+(((-1.0)*x3437*x3442))+((r22*x3435)));
evalcond[4]=(sj0+((x3435*x3439))+(((-1.0)*r02*x3442))+(((-1.0)*x3440*x3443)));
evalcond[5]=(((x3435*x3441))+(((-1.0)*x3436*x3443))+(((-1.0)*r12*x3442))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3444=((1.0)*sj5);
CheckValue<IkReal> x3445 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x3444)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3445.valid){
continue;
}
CheckValue<IkReal> x3446=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x3444)))),-1);
if(!x3446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3445.value)+(((1.5707963267949)*(x3446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3447=IKcos(j4);
IkReal x3448=IKsin(j4);
IkReal x3449=(r11*sj5);
IkReal x3450=(r21*sj5);
IkReal x3451=(cj5*r20);
IkReal x3452=(cj5*r00);
IkReal x3453=(r01*sj5);
IkReal x3454=(cj5*r10);
IkReal x3455=((1.0)*x3447);
IkReal x3456=((1.0)*x3448);
evalcond[0]=((((-1.0)*x3453*x3455))+((x3447*x3452))+((r02*x3448)));
evalcond[1]=(((r12*x3448))+((x3447*x3454))+(((-1.0)*x3449*x3455)));
evalcond[2]=(((x3448*x3451))+(((-1.0)*x3450*x3456))+(((-1.0)*r22*x3455)));
evalcond[3]=((-1.0)+((x3447*x3451))+((r22*x3448))+(((-1.0)*x3450*x3455)));
evalcond[4]=((((-1.0)*x3453*x3456))+sj0+((x3448*x3452))+(((-1.0)*r02*x3455)));
evalcond[5]=(((x3448*x3454))+(((-1.0)*r12*x3455))+(((-1.0)*x3449*x3456))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3457 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3457.valid){
continue;
}
CheckValue<IkReal> x3458=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3457.value)+(((1.5707963267949)*(x3458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3459=IKcos(j4);
IkReal x3460=IKsin(j4);
IkReal x3461=(r11*sj5);
IkReal x3462=(r21*sj5);
IkReal x3463=(cj5*r20);
IkReal x3464=(cj5*r00);
IkReal x3465=(r01*sj5);
IkReal x3466=(cj5*r10);
IkReal x3467=((1.0)*x3459);
IkReal x3468=((1.0)*x3460);
evalcond[0]=((((-1.0)*x3465*x3467))+((x3459*x3464))+((r02*x3460)));
evalcond[1]=((((-1.0)*x3461*x3467))+((r12*x3460))+((x3459*x3466)));
evalcond[2]=(((x3460*x3463))+(((-1.0)*x3462*x3468))+(((-1.0)*r22*x3467)));
evalcond[3]=((-1.0)+(((-1.0)*x3462*x3467))+((x3459*x3463))+((r22*x3460)));
evalcond[4]=(((x3460*x3464))+sj0+(((-1.0)*x3465*x3468))+(((-1.0)*r02*x3467)));
evalcond[5]=(((x3460*x3466))+(((-1.0)*x3461*x3468))+(((-1.0)*r12*x3467))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.32100151210145)*py))+(((0.332105717227752)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.32100151210145)*px))+(((-0.332105717227752)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.32100151210145)*py))+(((0.332105717227752)*px))))+IKsqr(((((1.32100151210145)*px))+(((-0.332105717227752)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.32100151210145)*py))+(((0.332105717227752)*px))), ((((1.32100151210145)*px))+(((-0.332105717227752)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3469=IKsin(j0);
IkReal x3470=IKcos(j0);
evalcond[0]=((((0.179)*x3469))+(((-1.0)*px))+(((0.712)*x3470)));
evalcond[1]=((((-1.0)*py))+(((0.712)*x3469))+(((-0.179)*x3470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3471=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3471;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3472=((1.0)*sj5);
IkReal x3473=((((-1.0)*r00*x3472))+(((-1.0)*cj5*r01)));
j4eval[0]=x3473;
j4eval[1]=IKsign(x3473);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3472))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3474=cj5*cj5;
IkReal x3475=((1.0)*r21);
IkReal x3476=(cj5*r20);
IkReal x3477=((((-1.0)*r02*r22))+((r01*sj5*x3476))+(((-1.0)*r00*r20*x3474))+((cj5*r00*r21*sj5))+((r01*r21*x3474))+(((-1.0)*r01*x3475)));
j4eval[0]=x3477;
j4eval[1]=IKsign(x3477);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x3475))+((cj0*x3476)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3478=cj5*cj5;
IkReal x3479=((1.0)*r21);
IkReal x3480=(cj5*r20);
CheckValue<IkReal> x3481 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3479))+((cj0*x3480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3481.valid){
continue;
}
CheckValue<IkReal> x3482=IKPowWithIntegerCheck(IKsign((((r01*sj5*x3480))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3478))+((cj5*r00*r21*sj5))+((r01*r21*x3478))+(((-1.0)*r01*x3479)))),-1);
if(!x3482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3481.value)+(((1.5707963267949)*(x3482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3483=IKcos(j4);
IkReal x3484=IKsin(j4);
IkReal x3485=(r11*sj5);
IkReal x3486=(r21*sj5);
IkReal x3487=(r01*sj5);
IkReal x3488=((1.0)*x3483);
IkReal x3489=((1.0)*x3484);
IkReal x3490=(cj5*x3483);
IkReal x3491=(cj5*x3484);
evalcond[0]=(((r20*x3490))+((r22*x3484))+(((-1.0)*x3486*x3488)));
evalcond[1]=(((r20*x3491))+(((-1.0)*r22*x3488))+(((-1.0)*x3486*x3489)));
evalcond[2]=(cj0+((r00*x3490))+(((-1.0)*x3487*x3488))+((r02*x3484)));
evalcond[3]=(sj0+(((-1.0)*x3485*x3488))+((r10*x3490))+((r12*x3484)));
evalcond[4]=(sj0+((r00*x3491))+(((-1.0)*r02*x3488))+(((-1.0)*x3487*x3489)));
evalcond[5]=((((-1.0)*x3485*x3489))+((r10*x3491))+(((-1.0)*r12*x3488))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3492=((1.0)*sj5);
CheckValue<IkReal> x3493 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3492)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3493.valid){
continue;
}
CheckValue<IkReal> x3494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3492))+(((-1.0)*cj5*r01)))),-1);
if(!x3494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3493.value)+(((1.5707963267949)*(x3494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3495=IKcos(j4);
IkReal x3496=IKsin(j4);
IkReal x3497=(r11*sj5);
IkReal x3498=(r21*sj5);
IkReal x3499=(r01*sj5);
IkReal x3500=((1.0)*x3495);
IkReal x3501=((1.0)*x3496);
IkReal x3502=(cj5*x3495);
IkReal x3503=(cj5*x3496);
evalcond[0]=(((r20*x3502))+(((-1.0)*x3498*x3500))+((r22*x3496)));
evalcond[1]=(((r20*x3503))+(((-1.0)*x3498*x3501))+(((-1.0)*r22*x3500)));
evalcond[2]=(cj0+((r00*x3502))+((r02*x3496))+(((-1.0)*x3499*x3500)));
evalcond[3]=(sj0+((r10*x3502))+((r12*x3496))+(((-1.0)*x3497*x3500)));
evalcond[4]=(sj0+((r00*x3503))+(((-1.0)*x3499*x3501))+(((-1.0)*r02*x3500)));
evalcond[5]=((((-1.0)*r12*x3500))+((r10*x3503))+(((-1.0)*x3497*x3501))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3504 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3504.valid){
continue;
}
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3504.value)+(((1.5707963267949)*(x3505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3506=IKcos(j4);
IkReal x3507=IKsin(j4);
IkReal x3508=(r11*sj5);
IkReal x3509=(r21*sj5);
IkReal x3510=(r01*sj5);
IkReal x3511=((1.0)*x3506);
IkReal x3512=((1.0)*x3507);
IkReal x3513=(cj5*x3506);
IkReal x3514=(cj5*x3507);
evalcond[0]=((((-1.0)*x3509*x3511))+((r20*x3513))+((r22*x3507)));
evalcond[1]=((((-1.0)*x3509*x3512))+((r20*x3514))+(((-1.0)*r22*x3511)));
evalcond[2]=(cj0+((r00*x3513))+(((-1.0)*x3510*x3511))+((r02*x3507)));
evalcond[3]=(sj0+((r10*x3513))+((r12*x3507))+(((-1.0)*x3508*x3511)));
evalcond[4]=((((-1.0)*r02*x3511))+sj0+((r00*x3514))+(((-1.0)*x3510*x3512)));
evalcond[5]=(((r10*x3514))+(((-1.0)*x3508*x3512))+(((-1.0)*r12*x3511))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3515=IKsin(j0);
IkReal x3516=IKcos(j0);
IkReal x3517=(r00*sj5);
IkReal x3518=(r10*sj5);
IkReal x3519=(cj5*r11);
IkReal x3520=(cj5*r01);
evalcond[0]=(x3517+x3520+(((-1.0)*x3516)));
evalcond[1]=(x3519+x3518+(((-1.0)*x3515)));
evalcond[2]=((((0.138)*x3520))+(((0.138)*x3517))+(((-1.0)*px))+(((0.179)*x3515)));
evalcond[3]=((((0.138)*x3518))+(((0.138)*x3519))+(((-1.0)*py))+(((-0.179)*x3516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3521=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3521;
j4eval[1]=IKsign(x3521);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3522=((1.0)*sj5);
IkReal x3523=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3522)));
j4eval[0]=x3523;
j4eval[1]=((IKabs(((((-1.0)*r01*x3522))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3524=cj5*cj5;
IkReal x3525=r01*r01;
IkReal x3526=(r01*sj5);
IkReal x3527=(cj5*r00);
IkReal x3528=((((-1.0)*x3525))+((x3524*x3525))+(((2.0)*x3526*x3527))+(((-1.0)*(r02*r02)))+(((-1.0)*x3524*(r00*r00))));
j4eval[0]=x3528;
j4eval[1]=IKsign(x3528);
j4eval[2]=((IKabs((r02*sj0)))+(IKabs((((sj0*x3527))+(((-1.0)*sj0*x3526))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3529=cj5*cj5;
IkReal x3530=r01*r01;
IkReal x3531=(r01*sj5);
IkReal x3532=(cj5*r00);
CheckValue<IkReal> x3533 = IKatan2WithCheck(IkReal((((sj0*x3532))+(((-1.0)*sj0*x3531)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3533.valid){
continue;
}
CheckValue<IkReal> x3534=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3529*(r00*r00)))+(((2.0)*x3531*x3532))+(((-1.0)*(r02*r02)))+(((-1.0)*x3530))+((x3529*x3530)))),-1);
if(!x3534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3533.value)+(((1.5707963267949)*(x3534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3535=IKcos(j4);
IkReal x3536=IKsin(j4);
IkReal x3537=(r11*sj5);
IkReal x3538=(r21*sj5);
IkReal x3539=(cj5*r20);
IkReal x3540=(cj5*r00);
IkReal x3541=(r01*sj5);
IkReal x3542=(cj5*r10);
IkReal x3543=((1.0)*x3535);
IkReal x3544=((1.0)*x3536);
evalcond[0]=(((r02*x3536))+(((-1.0)*x3541*x3543))+((x3535*x3540)));
evalcond[1]=(((r12*x3536))+((x3535*x3542))+(((-1.0)*x3537*x3543)));
evalcond[2]=((((-1.0)*x3538*x3544))+(((-1.0)*r22*x3543))+((x3536*x3539)));
evalcond[3]=((1.0)+((x3535*x3539))+(((-1.0)*x3538*x3543))+((r22*x3536)));
evalcond[4]=((((-1.0)*r02*x3543))+sj0+(((-1.0)*x3541*x3544))+((x3536*x3540)));
evalcond[5]=((((-1.0)*r12*x3543))+(((-1.0)*x3537*x3544))+((x3536*x3542))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3545=((1.0)*sj5);
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3545))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
CheckValue<IkReal> x3547=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3545)))),-1);
if(!x3547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3546.value)+(((1.5707963267949)*(x3547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3548=IKcos(j4);
IkReal x3549=IKsin(j4);
IkReal x3550=(r11*sj5);
IkReal x3551=(r21*sj5);
IkReal x3552=(cj5*r20);
IkReal x3553=(cj5*r00);
IkReal x3554=(r01*sj5);
IkReal x3555=(cj5*r10);
IkReal x3556=((1.0)*x3548);
IkReal x3557=((1.0)*x3549);
evalcond[0]=(((r02*x3549))+(((-1.0)*x3554*x3556))+((x3548*x3553)));
evalcond[1]=(((x3548*x3555))+((r12*x3549))+(((-1.0)*x3550*x3556)));
evalcond[2]=((((-1.0)*r22*x3556))+(((-1.0)*x3551*x3557))+((x3549*x3552)));
evalcond[3]=((1.0)+((x3548*x3552))+((r22*x3549))+(((-1.0)*x3551*x3556)));
evalcond[4]=(sj0+(((-1.0)*x3554*x3557))+((x3549*x3553))+(((-1.0)*r02*x3556)));
evalcond[5]=((((-1.0)*x3550*x3557))+(((-1.0)*r12*x3556))+((x3549*x3555))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3558 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3558.valid){
continue;
}
CheckValue<IkReal> x3559=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3558.value)+(((1.5707963267949)*(x3559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3560=IKcos(j4);
IkReal x3561=IKsin(j4);
IkReal x3562=(r11*sj5);
IkReal x3563=(r21*sj5);
IkReal x3564=(cj5*r20);
IkReal x3565=(cj5*r00);
IkReal x3566=(r01*sj5);
IkReal x3567=(cj5*r10);
IkReal x3568=((1.0)*x3560);
IkReal x3569=((1.0)*x3561);
evalcond[0]=((((-1.0)*x3566*x3568))+((r02*x3561))+((x3560*x3565)));
evalcond[1]=((((-1.0)*x3562*x3568))+((r12*x3561))+((x3560*x3567)));
evalcond[2]=((((-1.0)*x3563*x3569))+((x3561*x3564))+(((-1.0)*r22*x3568)));
evalcond[3]=((1.0)+(((-1.0)*x3563*x3568))+((r22*x3561))+((x3560*x3564)));
evalcond[4]=((((-1.0)*r02*x3568))+sj0+(((-1.0)*x3566*x3569))+((x3561*x3565)));
evalcond[5]=(((x3561*x3567))+(((-1.0)*r12*x3568))+(((-1.0)*x3562*x3569))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.32100151210145)*py))+(((0.332105717227752)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.32100151210145)*px))+(((-0.332105717227752)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.32100151210145)*py))+(((0.332105717227752)*px))))+IKsqr(((((-1.32100151210145)*px))+(((-0.332105717227752)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.32100151210145)*py))+(((0.332105717227752)*px))), ((((-1.32100151210145)*px))+(((-0.332105717227752)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3570=IKsin(j0);
IkReal x3571=IKcos(j0);
evalcond[0]=((((0.179)*x3570))+(((-0.712)*x3571))+(((-1.0)*px)));
evalcond[1]=((((-0.712)*x3570))+(((-1.0)*py))+(((-0.179)*x3571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3572=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3572;
j4eval[1]=IKsign(x3572);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3573=((1.0)*sj5);
IkReal x3574=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3573)));
j4eval[0]=x3574;
j4eval[1]=IKsign(x3574);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3573))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3575=((1.0)*sj5);
IkReal x3576=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3575)));
j4eval[0]=x3576;
j4eval[1]=IKsign(x3576);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x3575))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3577=((1.0)*sj5);
CheckValue<IkReal> x3578 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3577))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3578.valid){
continue;
}
CheckValue<IkReal> x3579=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3577)))),-1);
if(!x3579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3578.value)+(((1.5707963267949)*(x3579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3580=IKcos(j4);
IkReal x3581=IKsin(j4);
IkReal x3582=((1.0)*cj0);
IkReal x3583=(r11*sj5);
IkReal x3584=(r21*sj5);
IkReal x3585=(r01*sj5);
IkReal x3586=((1.0)*x3580);
IkReal x3587=(cj5*x3580);
IkReal x3588=((1.0)*x3581);
IkReal x3589=(cj5*x3581);
evalcond[0]=(((r20*x3587))+(((-1.0)*x3584*x3586))+((r22*x3581)));
evalcond[1]=((((-1.0)*r22*x3586))+((r20*x3589))+(((-1.0)*x3584*x3588)));
evalcond[2]=(sj0+(((-1.0)*r02*x3586))+((r00*x3589))+(((-1.0)*x3585*x3588)));
evalcond[3]=(((r02*x3581))+((r00*x3587))+(((-1.0)*x3585*x3586))+(((-1.0)*x3582)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3581))+((r10*x3587))+(((-1.0)*x3583*x3586)));
evalcond[5]=(((r10*x3589))+(((-1.0)*x3583*x3588))+(((-1.0)*r12*x3586))+(((-1.0)*x3582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3590=((1.0)*sj5);
CheckValue<IkReal> x3591 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3591.valid){
continue;
}
CheckValue<IkReal> x3592=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3590)))),-1);
if(!x3592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3591.value)+(((1.5707963267949)*(x3592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3593=IKcos(j4);
IkReal x3594=IKsin(j4);
IkReal x3595=((1.0)*cj0);
IkReal x3596=(r11*sj5);
IkReal x3597=(r21*sj5);
IkReal x3598=(r01*sj5);
IkReal x3599=((1.0)*x3593);
IkReal x3600=(cj5*x3593);
IkReal x3601=((1.0)*x3594);
IkReal x3602=(cj5*x3594);
evalcond[0]=((((-1.0)*x3597*x3599))+((r22*x3594))+((r20*x3600)));
evalcond[1]=((((-1.0)*r22*x3599))+((r20*x3602))+(((-1.0)*x3597*x3601)));
evalcond[2]=(sj0+(((-1.0)*x3598*x3601))+(((-1.0)*r02*x3599))+((r00*x3602)));
evalcond[3]=(((r02*x3594))+(((-1.0)*x3598*x3599))+((r00*x3600))+(((-1.0)*x3595)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3594))+((r10*x3600))+(((-1.0)*x3596*x3599)));
evalcond[5]=(((r10*x3602))+(((-1.0)*r12*x3599))+(((-1.0)*x3595))+(((-1.0)*x3596*x3601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3603 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3603.valid){
continue;
}
CheckValue<IkReal> x3604=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3603.value)+(((1.5707963267949)*(x3604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3605=IKcos(j4);
IkReal x3606=IKsin(j4);
IkReal x3607=((1.0)*cj0);
IkReal x3608=(r11*sj5);
IkReal x3609=(r21*sj5);
IkReal x3610=(r01*sj5);
IkReal x3611=((1.0)*x3605);
IkReal x3612=(cj5*x3605);
IkReal x3613=((1.0)*x3606);
IkReal x3614=(cj5*x3606);
evalcond[0]=(((r22*x3606))+(((-1.0)*x3609*x3611))+((r20*x3612)));
evalcond[1]=((((-1.0)*r22*x3611))+(((-1.0)*x3609*x3613))+((r20*x3614)));
evalcond[2]=(sj0+(((-1.0)*r02*x3611))+((r00*x3614))+(((-1.0)*x3610*x3613)));
evalcond[3]=(((r02*x3606))+((r00*x3612))+(((-1.0)*x3607))+(((-1.0)*x3610*x3611)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3612))+(((-1.0)*x3608*x3611))+((r12*x3606)));
evalcond[5]=((((-1.0)*r12*x3611))+((r10*x3614))+(((-1.0)*x3608*x3613))+(((-1.0)*x3607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.0724143720278249)*px))+(((0.631906419594763)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0724143720278249)*py))+(((0.631906419594763)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.0724143720278249)*px))+(((0.631906419594763)*py))))+IKsqr(((((-0.0724143720278249)*py))+(((0.631906419594763)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.0724143720278249)*px))+(((0.631906419594763)*py))), ((((-0.0724143720278249)*py))+(((0.631906419594763)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3615=IKsin(j0);
IkReal x3616=IKcos(j0);
evalcond[0]=((((1.562)*x3616))+(((-1.0)*px))+(((0.179)*x3615)));
evalcond[1]=((((-0.179)*x3616))+(((1.562)*x3615))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3617=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3617;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3617);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3618=((1.0)*sj5);
IkReal x3619=((((-1.0)*r00*x3618))+(((-1.0)*cj5*r01)));
j4eval[0]=x3619;
j4eval[1]=IKsign(x3619);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3618))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3620=cj5*cj5;
IkReal x3621=((1.0)*r21);
IkReal x3622=(cj5*r20);
IkReal x3623=(((r01*r21*x3620))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3620))+((r01*sj5*x3622))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3621)));
j4eval[0]=x3623;
j4eval[1]=IKsign(x3623);
j4eval[2]=((IKabs((((cj0*x3622))+(((-1.0)*cj0*sj5*x3621)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3624=cj5*cj5;
IkReal x3625=((1.0)*r21);
IkReal x3626=(cj5*r20);
CheckValue<IkReal> x3627 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3626))+(((-1.0)*cj0*sj5*x3625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3627.valid){
continue;
}
CheckValue<IkReal> x3628=IKPowWithIntegerCheck(IKsign((((r01*r21*x3624))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3624))+((r01*sj5*x3626))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3625)))),-1);
if(!x3628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3627.value)+(((1.5707963267949)*(x3628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3629=IKcos(j4);
IkReal x3630=IKsin(j4);
IkReal x3631=(r11*sj5);
IkReal x3632=(r21*sj5);
IkReal x3633=(r01*sj5);
IkReal x3634=((1.0)*x3629);
IkReal x3635=((1.0)*x3630);
IkReal x3636=(cj5*x3629);
IkReal x3637=(cj5*x3630);
evalcond[0]=(((r22*x3630))+((r20*x3636))+(((-1.0)*x3632*x3634)));
evalcond[1]=((((-1.0)*r22*x3634))+((r20*x3637))+(((-1.0)*x3632*x3635)));
evalcond[2]=(((r02*x3630))+cj0+(((-1.0)*x3633*x3634))+((r00*x3636)));
evalcond[3]=(((r12*x3630))+sj0+(((-1.0)*x3631*x3634))+((r10*x3636)));
evalcond[4]=(sj0+(((-1.0)*x3633*x3635))+(((-1.0)*r02*x3634))+((r00*x3637)));
evalcond[5]=((((-1.0)*r12*x3634))+(((-1.0)*x3631*x3635))+((r10*x3637))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3638=((1.0)*sj5);
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3638))+(((-1.0)*cj5*r01)))),-1);
if(!x3639.valid){
continue;
}
CheckValue<IkReal> x3640 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3638)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3639.value)))+(x3640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3641=IKcos(j4);
IkReal x3642=IKsin(j4);
IkReal x3643=(r11*sj5);
IkReal x3644=(r21*sj5);
IkReal x3645=(r01*sj5);
IkReal x3646=((1.0)*x3641);
IkReal x3647=((1.0)*x3642);
IkReal x3648=(cj5*x3641);
IkReal x3649=(cj5*x3642);
evalcond[0]=(((r20*x3648))+(((-1.0)*x3644*x3646))+((r22*x3642)));
evalcond[1]=(((r20*x3649))+(((-1.0)*x3644*x3647))+(((-1.0)*r22*x3646)));
evalcond[2]=(((r00*x3648))+cj0+(((-1.0)*x3645*x3646))+((r02*x3642)));
evalcond[3]=(sj0+(((-1.0)*x3643*x3646))+((r12*x3642))+((r10*x3648)));
evalcond[4]=(((r00*x3649))+sj0+(((-1.0)*x3645*x3647))+(((-1.0)*r02*x3646)));
evalcond[5]=((((-1.0)*x3643*x3647))+(((-1.0)*r12*x3646))+((r10*x3649))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3650 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3650.valid){
continue;
}
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3650.value)+(((1.5707963267949)*(x3651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3652=IKcos(j4);
IkReal x3653=IKsin(j4);
IkReal x3654=(r11*sj5);
IkReal x3655=(r21*sj5);
IkReal x3656=(r01*sj5);
IkReal x3657=((1.0)*x3652);
IkReal x3658=((1.0)*x3653);
IkReal x3659=(cj5*x3652);
IkReal x3660=(cj5*x3653);
evalcond[0]=(((r20*x3659))+(((-1.0)*x3655*x3657))+((r22*x3653)));
evalcond[1]=(((r20*x3660))+(((-1.0)*r22*x3657))+(((-1.0)*x3655*x3658)));
evalcond[2]=(((r00*x3659))+cj0+((r02*x3653))+(((-1.0)*x3656*x3657)));
evalcond[3]=(((r12*x3653))+sj0+(((-1.0)*x3654*x3657))+((r10*x3659)));
evalcond[4]=(sj0+((r00*x3660))+(((-1.0)*r02*x3657))+(((-1.0)*x3656*x3658)));
evalcond[5]=(((r10*x3660))+(((-1.0)*x3654*x3658))+(((-1.0)*r12*x3657))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.70138005285309)*py))+(((3.5039639815993)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.70138005285309)*px))+(((-3.5039639815993)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.70138005285309)*py))+(((3.5039639815993)*px))))+IKsqr(((((2.70138005285309)*px))+(((-3.5039639815993)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.70138005285309)*py))+(((3.5039639815993)*px))), ((((2.70138005285309)*px))+(((-3.5039639815993)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3661=IKsin(j0);
IkReal x3662=IKcos(j0);
evalcond[0]=((((0.179)*x3661))+(((-1.0)*px))+(((0.138)*x3662)));
evalcond[1]=((((-0.179)*x3662))+(((-1.0)*py))+(((0.138)*x3661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3663=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3663;
j4eval[1]=IKsign(x3663);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3664=((1.0)*sj5);
IkReal x3665=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3664)));
j4eval[0]=x3665;
j4eval[1]=IKsign(x3665);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3664))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3666=((1.0)*sj5);
IkReal x3667=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3666)));
j4eval[0]=x3667;
j4eval[1]=IKsign(x3667);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3666))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3668=((1.0)*sj5);
CheckValue<IkReal> x3669=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3668)))),-1);
if(!x3669.valid){
continue;
}
CheckValue<IkReal> x3670 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3668))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3669.value)))+(x3670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3671=IKcos(j4);
IkReal x3672=IKsin(j4);
IkReal x3673=((1.0)*cj0);
IkReal x3674=(r11*sj5);
IkReal x3675=(r21*sj5);
IkReal x3676=(r01*sj5);
IkReal x3677=((1.0)*x3671);
IkReal x3678=(cj5*x3671);
IkReal x3679=((1.0)*x3672);
IkReal x3680=(cj5*x3672);
evalcond[0]=(((r20*x3678))+((r22*x3672))+(((-1.0)*x3675*x3677)));
evalcond[1]=(((r20*x3680))+(((-1.0)*r22*x3677))+(((-1.0)*x3675*x3679)));
evalcond[2]=((((-1.0)*x3676*x3679))+((r00*x3680))+sj0+(((-1.0)*r02*x3677)));
evalcond[3]=((((-1.0)*x3676*x3677))+((r00*x3678))+((r02*x3672))+(((-1.0)*x3673)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3672))+((r10*x3678))+(((-1.0)*x3674*x3677)));
evalcond[5]=(((r10*x3680))+(((-1.0)*r12*x3677))+(((-1.0)*x3673))+(((-1.0)*x3674*x3679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3681=((1.0)*sj5);
CheckValue<IkReal> x3682 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3682.valid){
continue;
}
CheckValue<IkReal> x3683=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3681)))),-1);
if(!x3683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3682.value)+(((1.5707963267949)*(x3683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3684=IKcos(j4);
IkReal x3685=IKsin(j4);
IkReal x3686=((1.0)*cj0);
IkReal x3687=(r11*sj5);
IkReal x3688=(r21*sj5);
IkReal x3689=(r01*sj5);
IkReal x3690=((1.0)*x3684);
IkReal x3691=(cj5*x3684);
IkReal x3692=((1.0)*x3685);
IkReal x3693=(cj5*x3685);
evalcond[0]=((((-1.0)*x3688*x3690))+((r20*x3691))+((r22*x3685)));
evalcond[1]=((((-1.0)*x3688*x3692))+((r20*x3693))+(((-1.0)*r22*x3690)));
evalcond[2]=(((r00*x3693))+(((-1.0)*x3689*x3692))+sj0+(((-1.0)*r02*x3690)));
evalcond[3]=(((r00*x3691))+(((-1.0)*x3689*x3690))+(((-1.0)*x3686))+((r02*x3685)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3687*x3690))+((r12*x3685))+((r10*x3691)));
evalcond[5]=((((-1.0)*x3686))+(((-1.0)*r12*x3690))+(((-1.0)*x3687*x3692))+((r10*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3694 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3694.valid){
continue;
}
CheckValue<IkReal> x3695=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3694.value)+(((1.5707963267949)*(x3695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3696=IKcos(j4);
IkReal x3697=IKsin(j4);
IkReal x3698=((1.0)*cj0);
IkReal x3699=(r11*sj5);
IkReal x3700=(r21*sj5);
IkReal x3701=(r01*sj5);
IkReal x3702=((1.0)*x3696);
IkReal x3703=(cj5*x3696);
IkReal x3704=((1.0)*x3697);
IkReal x3705=(cj5*x3697);
evalcond[0]=((((-1.0)*x3700*x3702))+((r20*x3703))+((r22*x3697)));
evalcond[1]=((((-1.0)*x3700*x3704))+((r20*x3705))+(((-1.0)*r22*x3702)));
evalcond[2]=((((-1.0)*r02*x3702))+sj0+((r00*x3705))+(((-1.0)*x3701*x3704)));
evalcond[3]=(((r02*x3697))+((r00*x3703))+(((-1.0)*x3701*x3702))+(((-1.0)*x3698)));
evalcond[4]=((((-1.0)*x3699*x3702))+(((-1.0)*sj0))+((r10*x3703))+((r12*x3697)));
evalcond[5]=((((-1.0)*x3699*x3704))+((r10*x3705))+(((-1.0)*r12*x3702))+(((-1.0)*x3698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3706=IKsin(j0);
IkReal x3707=IKcos(j0);
IkReal x3708=(r00*sj5);
IkReal x3709=(r10*sj5);
IkReal x3710=(cj5*r11);
IkReal x3711=(cj5*r01);
evalcond[0]=(x3708+x3711+(((-1.0)*x3707)));
evalcond[1]=(x3709+x3710+(((-1.0)*x3706)));
evalcond[2]=((((0.138)*x3708))+(((-1.0)*px))+(((0.179)*x3706))+(((0.138)*x3711)));
evalcond[3]=((((0.138)*x3709))+(((-1.0)*py))+(((-0.179)*x3707))+(((0.138)*x3710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3712=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3712;
j4eval[1]=IKsign(x3712);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3713=((1.0)*sj5);
IkReal x3714=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3713)));
j4eval[0]=x3714;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3713))+((cj5*r00))))));
j4eval[2]=IKsign(x3714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3715=cj5*cj5;
IkReal x3716=r01*r01;
IkReal x3717=(r01*sj5);
IkReal x3718=(cj5*r00);
IkReal x3719=((((-1.0)*x3715*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x3717*x3718))+((x3715*x3716))+(((-1.0)*x3716)));
j4eval[0]=x3719;
j4eval[1]=IKsign(x3719);
j4eval[2]=((IKabs(((((-1.0)*sj0*x3717))+((sj0*x3718)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3720=cj5*cj5;
IkReal x3721=r01*r01;
IkReal x3722=(r01*sj5);
IkReal x3723=(cj5*r00);
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x3722))+((sj0*x3723)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
CheckValue<IkReal> x3725=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x3722*x3723))+(((-1.0)*x3721))+(((-1.0)*x3720*(r00*r00)))+((x3720*x3721)))),-1);
if(!x3725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3724.value)+(((1.5707963267949)*(x3725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3726=IKcos(j4);
IkReal x3727=IKsin(j4);
IkReal x3728=(r11*sj5);
IkReal x3729=(r21*sj5);
IkReal x3730=(cj5*r20);
IkReal x3731=(cj5*r00);
IkReal x3732=(r01*sj5);
IkReal x3733=(cj5*r10);
IkReal x3734=((1.0)*x3726);
IkReal x3735=((1.0)*x3727);
evalcond[0]=(((x3726*x3731))+((r02*x3727))+(((-1.0)*x3732*x3734)));
evalcond[1]=(((x3726*x3733))+((r12*x3727))+(((-1.0)*x3728*x3734)));
evalcond[2]=(((x3727*x3730))+(((-1.0)*x3729*x3735))+(((-1.0)*r22*x3734)));
evalcond[3]=((1.0)+((x3726*x3730))+((r22*x3727))+(((-1.0)*x3729*x3734)));
evalcond[4]=(sj0+((x3727*x3731))+(((-1.0)*x3732*x3735))+(((-1.0)*r02*x3734)));
evalcond[5]=(((x3727*x3733))+(((-1.0)*r12*x3734))+(((-1.0)*x3728*x3735))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3736=((1.0)*sj5);
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3736)))),-1);
if(!x3737.valid){
continue;
}
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3736))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3737.value)))+(x3738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3739=IKcos(j4);
IkReal x3740=IKsin(j4);
IkReal x3741=(r11*sj5);
IkReal x3742=(r21*sj5);
IkReal x3743=(cj5*r20);
IkReal x3744=(cj5*r00);
IkReal x3745=(r01*sj5);
IkReal x3746=(cj5*r10);
IkReal x3747=((1.0)*x3739);
IkReal x3748=((1.0)*x3740);
evalcond[0]=(((r02*x3740))+(((-1.0)*x3745*x3747))+((x3739*x3744)));
evalcond[1]=(((r12*x3740))+(((-1.0)*x3741*x3747))+((x3739*x3746)));
evalcond[2]=((((-1.0)*r22*x3747))+((x3740*x3743))+(((-1.0)*x3742*x3748)));
evalcond[3]=((1.0)+((r22*x3740))+(((-1.0)*x3742*x3747))+((x3739*x3743)));
evalcond[4]=(sj0+(((-1.0)*x3745*x3748))+((x3740*x3744))+(((-1.0)*r02*x3747)));
evalcond[5]=((((-1.0)*r12*x3747))+(((-1.0)*x3741*x3748))+((x3740*x3746))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3749 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3749.valid){
continue;
}
CheckValue<IkReal> x3750=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3749.value)+(((1.5707963267949)*(x3750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3751=IKcos(j4);
IkReal x3752=IKsin(j4);
IkReal x3753=(r11*sj5);
IkReal x3754=(r21*sj5);
IkReal x3755=(cj5*r20);
IkReal x3756=(cj5*r00);
IkReal x3757=(r01*sj5);
IkReal x3758=(cj5*r10);
IkReal x3759=((1.0)*x3751);
IkReal x3760=((1.0)*x3752);
evalcond[0]=(((x3751*x3756))+((r02*x3752))+(((-1.0)*x3757*x3759)));
evalcond[1]=(((x3751*x3758))+(((-1.0)*x3753*x3759))+((r12*x3752)));
evalcond[2]=((((-1.0)*r22*x3759))+(((-1.0)*x3754*x3760))+((x3752*x3755)));
evalcond[3]=((1.0)+((x3751*x3755))+((r22*x3752))+(((-1.0)*x3754*x3759)));
evalcond[4]=((((-1.0)*x3757*x3760))+sj0+((x3752*x3756))+(((-1.0)*r02*x3759)));
evalcond[5]=((((-1.0)*r12*x3759))+((x3752*x3758))+(((-1.0)*x3753*x3760))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.32100151210145)*py))+(((0.332105717227752)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.32100151210145)*px))+(((-0.332105717227752)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.32100151210145)*py))+(((0.332105717227752)*px))))+IKsqr(((((-1.32100151210145)*px))+(((-0.332105717227752)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.32100151210145)*py))+(((0.332105717227752)*px))), ((((-1.32100151210145)*px))+(((-0.332105717227752)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3761=IKsin(j0);
IkReal x3762=IKcos(j0);
evalcond[0]=((((0.179)*x3761))+(((-0.712)*x3762))+(((-1.0)*px)));
evalcond[1]=((((-0.712)*x3761))+(((-0.179)*x3762))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3763=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3763;
j4eval[1]=IKsign(x3763);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3764=((1.0)*sj5);
IkReal x3765=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3764)));
j4eval[0]=x3765;
j4eval[1]=IKsign(x3765);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x3764))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3766=((1.0)*sj5);
IkReal x3767=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3766)));
j4eval[0]=x3767;
j4eval[1]=IKsign(x3767);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3766)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3768=((1.0)*sj5);
CheckValue<IkReal> x3769=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3768)))),-1);
if(!x3769.valid){
continue;
}
CheckValue<IkReal> x3770 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3768)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3769.value)))+(x3770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3771=IKcos(j4);
IkReal x3772=IKsin(j4);
IkReal x3773=((1.0)*cj0);
IkReal x3774=(r11*sj5);
IkReal x3775=(r21*sj5);
IkReal x3776=(r01*sj5);
IkReal x3777=((1.0)*x3771);
IkReal x3778=(cj5*x3771);
IkReal x3779=((1.0)*x3772);
IkReal x3780=(cj5*x3772);
evalcond[0]=(((r22*x3772))+(((-1.0)*x3775*x3777))+((r20*x3778)));
evalcond[1]=((((-1.0)*r22*x3777))+((r20*x3780))+(((-1.0)*x3775*x3779)));
evalcond[2]=(sj0+((r00*x3780))+(((-1.0)*r02*x3777))+(((-1.0)*x3776*x3779)));
evalcond[3]=(((r02*x3772))+(((-1.0)*x3776*x3777))+(((-1.0)*x3773))+((r00*x3778)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3778))+(((-1.0)*x3774*x3777))+((r12*x3772)));
evalcond[5]=((((-1.0)*x3774*x3779))+(((-1.0)*x3773))+(((-1.0)*r12*x3777))+((r10*x3780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3781=((1.0)*sj5);
CheckValue<IkReal> x3782=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3781)))),-1);
if(!x3782.valid){
continue;
}
CheckValue<IkReal> x3783 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3781))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3782.value)))+(x3783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3784=IKcos(j4);
IkReal x3785=IKsin(j4);
IkReal x3786=((1.0)*cj0);
IkReal x3787=(r11*sj5);
IkReal x3788=(r21*sj5);
IkReal x3789=(r01*sj5);
IkReal x3790=((1.0)*x3784);
IkReal x3791=(cj5*x3784);
IkReal x3792=((1.0)*x3785);
IkReal x3793=(cj5*x3785);
evalcond[0]=(((r22*x3785))+(((-1.0)*x3788*x3790))+((r20*x3791)));
evalcond[1]=((((-1.0)*r22*x3790))+(((-1.0)*x3788*x3792))+((r20*x3793)));
evalcond[2]=(sj0+(((-1.0)*r02*x3790))+(((-1.0)*x3789*x3792))+((r00*x3793)));
evalcond[3]=(((r02*x3785))+(((-1.0)*x3786))+(((-1.0)*x3789*x3790))+((r00*x3791)));
evalcond[4]=(((r12*x3785))+(((-1.0)*sj0))+((r10*x3791))+(((-1.0)*x3787*x3790)));
evalcond[5]=((((-1.0)*r12*x3790))+((r10*x3793))+(((-1.0)*x3786))+(((-1.0)*x3787*x3792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3794 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3794.valid){
continue;
}
CheckValue<IkReal> x3795=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3794.value)+(((1.5707963267949)*(x3795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3796=IKcos(j4);
IkReal x3797=IKsin(j4);
IkReal x3798=((1.0)*cj0);
IkReal x3799=(r11*sj5);
IkReal x3800=(r21*sj5);
IkReal x3801=(r01*sj5);
IkReal x3802=((1.0)*x3796);
IkReal x3803=(cj5*x3796);
IkReal x3804=((1.0)*x3797);
IkReal x3805=(cj5*x3797);
evalcond[0]=(((r22*x3797))+(((-1.0)*x3800*x3802))+((r20*x3803)));
evalcond[1]=((((-1.0)*x3800*x3804))+((r20*x3805))+(((-1.0)*r22*x3802)));
evalcond[2]=(((r00*x3805))+sj0+(((-1.0)*x3801*x3804))+(((-1.0)*r02*x3802)));
evalcond[3]=((((-1.0)*x3798))+((r00*x3803))+(((-1.0)*x3801*x3802))+((r02*x3797)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3803))+(((-1.0)*x3799*x3802))+((r12*x3797)));
evalcond[5]=((((-1.0)*x3798))+((r10*x3805))+(((-1.0)*x3799*x3804))+(((-1.0)*r12*x3802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3806=((1.0)*sj5);
IkReal x3807=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x3807))+(((-1.0)*r10*x3806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3806))+(((-1.0)*r01*x3807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x3807))+(((-1.0)*r10*x3806))))+IKsqr(((((-1.0)*r00*x3806))+(((-1.0)*r01*x3807))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x3807))+(((-1.0)*r10*x3806))), ((((-1.0)*r00*x3806))+(((-1.0)*r01*x3807))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3808=IKsin(j0);
IkReal x3809=IKcos(j0);
IkReal x3810=(r00*sj5);
IkReal x3811=(r10*sj5);
IkReal x3812=(cj5*r11);
IkReal x3813=(cj5*r01);
evalcond[0]=(x3813+x3810+x3809);
evalcond[1]=(x3812+x3811+x3808);
evalcond[2]=((((0.179)*x3808))+(((-1.0)*px))+(((0.138)*x3810))+(((0.138)*x3813)));
evalcond[3]=((((-0.179)*x3809))+(((-1.0)*py))+(((0.138)*x3811))+(((0.138)*x3812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3814=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3814;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3815=((1.0)*sj5);
IkReal x3816=((((-1.0)*r00*x3815))+(((-1.0)*cj5*r01)));
j4eval[0]=x3816;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3815))))));
j4eval[2]=IKsign(x3816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3817=cj5*cj5;
IkReal x3818=r01*r01;
IkReal x3819=(r01*sj5);
IkReal x3820=(cj5*r00);
IkReal x3821=((((-1.0)*(r02*r02)))+(((-1.0)*x3817*(r00*r00)))+(((-1.0)*x3818))+((x3817*x3818))+(((2.0)*x3819*x3820)));
j4eval[0]=x3821;
j4eval[1]=IKsign(x3821);
j4eval[2]=((IKabs(((((-1.0)*sj0*x3819))+((sj0*x3820)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3822=cj5*cj5;
IkReal x3823=r01*r01;
IkReal x3824=(r01*sj5);
IkReal x3825=(cj5*r00);
CheckValue<IkReal> x3826=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x3823))+(((2.0)*x3824*x3825))+((x3822*x3823))+(((-1.0)*x3822*(r00*r00))))),-1);
if(!x3826.valid){
continue;
}
CheckValue<IkReal> x3827 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x3824))+((sj0*x3825)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3826.value)))+(x3827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3828=IKcos(j4);
IkReal x3829=IKsin(j4);
IkReal x3830=(r11*sj5);
IkReal x3831=(r21*sj5);
IkReal x3832=(cj5*r20);
IkReal x3833=(cj5*r00);
IkReal x3834=(r01*sj5);
IkReal x3835=(cj5*r10);
IkReal x3836=((1.0)*x3828);
IkReal x3837=((1.0)*x3829);
evalcond[0]=(((x3828*x3833))+((r02*x3829))+(((-1.0)*x3834*x3836)));
evalcond[1]=(((r12*x3829))+(((-1.0)*x3830*x3836))+((x3828*x3835)));
evalcond[2]=((((-1.0)*x3831*x3837))+((x3829*x3832))+(((-1.0)*r22*x3836)));
evalcond[3]=((-1.0)+(((-1.0)*x3831*x3836))+((x3828*x3832))+((r22*x3829)));
evalcond[4]=(sj0+((x3829*x3833))+(((-1.0)*x3834*x3837))+(((-1.0)*r02*x3836)));
evalcond[5]=((((-1.0)*x3830*x3837))+((x3829*x3835))+(((-1.0)*r12*x3836))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3838=((1.0)*sj5);
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x3838)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3838))+(((-1.0)*cj5*r01)))),-1);
if(!x3840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3839.value)+(((1.5707963267949)*(x3840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3841=IKcos(j4);
IkReal x3842=IKsin(j4);
IkReal x3843=(r11*sj5);
IkReal x3844=(r21*sj5);
IkReal x3845=(cj5*r20);
IkReal x3846=(cj5*r00);
IkReal x3847=(r01*sj5);
IkReal x3848=(cj5*r10);
IkReal x3849=((1.0)*x3841);
IkReal x3850=((1.0)*x3842);
evalcond[0]=(((x3841*x3846))+((r02*x3842))+(((-1.0)*x3847*x3849)));
evalcond[1]=(((r12*x3842))+((x3841*x3848))+(((-1.0)*x3843*x3849)));
evalcond[2]=((((-1.0)*x3844*x3850))+((x3842*x3845))+(((-1.0)*r22*x3849)));
evalcond[3]=((-1.0)+(((-1.0)*x3844*x3849))+((x3841*x3845))+((r22*x3842)));
evalcond[4]=((((-1.0)*r02*x3849))+sj0+((x3842*x3846))+(((-1.0)*x3847*x3850)));
evalcond[5]=((((-1.0)*x3843*x3850))+((x3842*x3848))+(((-1.0)*r12*x3849))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3851 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3851.valid){
continue;
}
CheckValue<IkReal> x3852=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3851.value)+(((1.5707963267949)*(x3852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3853=IKcos(j4);
IkReal x3854=IKsin(j4);
IkReal x3855=(r11*sj5);
IkReal x3856=(r21*sj5);
IkReal x3857=(cj5*r20);
IkReal x3858=(cj5*r00);
IkReal x3859=(r01*sj5);
IkReal x3860=(cj5*r10);
IkReal x3861=((1.0)*x3853);
IkReal x3862=((1.0)*x3854);
evalcond[0]=(((r02*x3854))+(((-1.0)*x3859*x3861))+((x3853*x3858)));
evalcond[1]=(((x3853*x3860))+(((-1.0)*x3855*x3861))+((r12*x3854)));
evalcond[2]=(((x3854*x3857))+(((-1.0)*x3856*x3862))+(((-1.0)*r22*x3861)));
evalcond[3]=((-1.0)+((x3853*x3857))+(((-1.0)*x3856*x3861))+((r22*x3854)));
evalcond[4]=((((-1.0)*r02*x3861))+((x3854*x3858))+sj0+(((-1.0)*x3859*x3862)));
evalcond[5]=((((-1.0)*x3855*x3862))+(((-1.0)*r12*x3861))+(((-1.0)*cj0))+((x3854*x3860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.32100151210145)*py))+(((0.332105717227752)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.32100151210145)*px))+(((-0.332105717227752)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.32100151210145)*py))+(((0.332105717227752)*px))))+IKsqr(((((1.32100151210145)*px))+(((-0.332105717227752)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.32100151210145)*py))+(((0.332105717227752)*px))), ((((1.32100151210145)*px))+(((-0.332105717227752)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3863=IKsin(j0);
IkReal x3864=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.179)*x3863))+(((0.712)*x3864)));
evalcond[1]=((((-0.179)*x3864))+(((-1.0)*py))+(((0.712)*x3863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3865=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3865;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3866=((1.0)*sj5);
IkReal x3867=((((-1.0)*r00*x3866))+(((-1.0)*cj5*r01)));
j4eval[0]=x3867;
j4eval[1]=IKsign(x3867);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3866))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3868=cj5*cj5;
IkReal x3869=((1.0)*r21);
IkReal x3870=(cj5*r20);
IkReal x3871=(((r01*sj5*x3870))+(((-1.0)*r02*r22))+((r01*r21*x3868))+(((-1.0)*r00*r20*x3868))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3869)));
j4eval[0]=x3871;
j4eval[1]=IKsign(x3871);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x3869))+((cj0*x3870)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3872=cj5*cj5;
IkReal x3873=((1.0)*r21);
IkReal x3874=(cj5*r20);
CheckValue<IkReal> x3875=IKPowWithIntegerCheck(IKsign((((r01*sj5*x3874))+(((-1.0)*r02*r22))+((cj5*r00*r21*sj5))+((r01*r21*x3872))+(((-1.0)*r01*x3873))+(((-1.0)*r00*r20*x3872)))),-1);
if(!x3875.valid){
continue;
}
CheckValue<IkReal> x3876 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3873))+((cj0*x3874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3875.value)))+(x3876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3877=IKcos(j4);
IkReal x3878=IKsin(j4);
IkReal x3879=(r11*sj5);
IkReal x3880=(r21*sj5);
IkReal x3881=(r01*sj5);
IkReal x3882=((1.0)*x3877);
IkReal x3883=((1.0)*x3878);
IkReal x3884=(cj5*x3877);
IkReal x3885=(cj5*x3878);
evalcond[0]=((((-1.0)*x3880*x3882))+((r20*x3884))+((r22*x3878)));
evalcond[1]=((((-1.0)*x3880*x3883))+(((-1.0)*r22*x3882))+((r20*x3885)));
evalcond[2]=(cj0+((r00*x3884))+((r02*x3878))+(((-1.0)*x3881*x3882)));
evalcond[3]=(sj0+((r10*x3884))+(((-1.0)*x3879*x3882))+((r12*x3878)));
evalcond[4]=(sj0+(((-1.0)*r02*x3882))+((r00*x3885))+(((-1.0)*x3881*x3883)));
evalcond[5]=(((r10*x3885))+(((-1.0)*x3879*x3883))+(((-1.0)*r12*x3882))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3886=((1.0)*sj5);
CheckValue<IkReal> x3887 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x3886))+((cj5*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3887.valid){
continue;
}
CheckValue<IkReal> x3888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3886))+(((-1.0)*cj5*r01)))),-1);
if(!x3888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3887.value)+(((1.5707963267949)*(x3888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3889=IKcos(j4);
IkReal x3890=IKsin(j4);
IkReal x3891=(r11*sj5);
IkReal x3892=(r21*sj5);
IkReal x3893=(r01*sj5);
IkReal x3894=((1.0)*x3889);
IkReal x3895=((1.0)*x3890);
IkReal x3896=(cj5*x3889);
IkReal x3897=(cj5*x3890);
evalcond[0]=(((r20*x3896))+(((-1.0)*x3892*x3894))+((r22*x3890)));
evalcond[1]=(((r20*x3897))+(((-1.0)*r22*x3894))+(((-1.0)*x3892*x3895)));
evalcond[2]=(cj0+(((-1.0)*x3893*x3894))+((r00*x3896))+((r02*x3890)));
evalcond[3]=(((r10*x3896))+sj0+(((-1.0)*x3891*x3894))+((r12*x3890)));
evalcond[4]=(sj0+(((-1.0)*x3893*x3895))+((r00*x3897))+(((-1.0)*r02*x3894)));
evalcond[5]=(((r10*x3897))+(((-1.0)*r12*x3894))+(((-1.0)*x3891*x3895))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3898 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3898.valid){
continue;
}
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3898.value)+(((1.5707963267949)*(x3899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3900=IKcos(j4);
IkReal x3901=IKsin(j4);
IkReal x3902=(r11*sj5);
IkReal x3903=(r21*sj5);
IkReal x3904=(r01*sj5);
IkReal x3905=((1.0)*x3900);
IkReal x3906=((1.0)*x3901);
IkReal x3907=(cj5*x3900);
IkReal x3908=(cj5*x3901);
evalcond[0]=(((r22*x3901))+(((-1.0)*x3903*x3905))+((r20*x3907)));
evalcond[1]=((((-1.0)*x3903*x3906))+(((-1.0)*r22*x3905))+((r20*x3908)));
evalcond[2]=((((-1.0)*x3904*x3905))+cj0+((r00*x3907))+((r02*x3901)));
evalcond[3]=(sj0+((r10*x3907))+(((-1.0)*x3902*x3905))+((r12*x3901)));
evalcond[4]=((((-1.0)*x3904*x3906))+sj0+((r00*x3908))+(((-1.0)*r02*x3905)));
evalcond[5]=((((-1.0)*r12*x3905))+((r10*x3908))+(((-1.0)*x3902*x3906))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3909=cj1*cj1;
IkReal x3910=(cj2*sj1);
IkReal x3911=(cj1*sj1);
IkReal x3912=(cj1*sj2);
IkReal x3913=(r00*sj5);
IkReal x3914=(cj5*r01);
IkReal x3915=((1000.0)*py);
IkReal x3916=((138.0)*cj5*r11);
IkReal x3917=((138.0)*r10*sj5);
IkReal x3918=(sj2*x3909);
CheckValue<IkReal> x3919=IKPowWithIntegerCheck(((((-850.0)*x3918))+(((-1424.0)*cj1*cj2*x3910))+(((-850.0)*cj1*x3910))+(((-1424.0)*cj2*x3918))+(((712.0)*x3911))+(((712.0)*cj2*sj2))),-1);
if(!x3919.valid){
continue;
}
CheckValue<IkReal> x3920=IKPowWithIntegerCheck((x3912+x3910),-1);
if(!x3920.valid){
continue;
}
if( IKabs(((x3919.value)*(((((-1.0)*x3912*x3916))+(((-1.0)*x3912*x3917))+(((-179.0)*x3913))+(((-179.0)*x3914))+((x3910*x3915))+(((-1.0)*x3910*x3917))+(((-1.0)*x3910*x3916))+((x3912*x3915)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3920.value)*(((((-1.0)*x3913))+(((-1.0)*x3914)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3919.value)*(((((-1.0)*x3912*x3916))+(((-1.0)*x3912*x3917))+(((-179.0)*x3913))+(((-179.0)*x3914))+((x3910*x3915))+(((-1.0)*x3910*x3917))+(((-1.0)*x3910*x3916))+((x3912*x3915))))))+IKsqr(((x3920.value)*(((((-1.0)*x3913))+(((-1.0)*x3914))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3919.value)*(((((-1.0)*x3912*x3916))+(((-1.0)*x3912*x3917))+(((-179.0)*x3913))+(((-179.0)*x3914))+((x3910*x3915))+(((-1.0)*x3910*x3917))+(((-1.0)*x3910*x3916))+((x3912*x3915))))), ((x3920.value)*(((((-1.0)*x3913))+(((-1.0)*x3914))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3921=IKcos(j0);
IkReal x3922=IKsin(j0);
IkReal x3923=(sj1*sj2);
IkReal x3924=(cj1*cj2);
IkReal x3925=(cj5*r01);
IkReal x3926=(cj5*r11);
IkReal x3927=((0.85)*cj1);
IkReal x3928=(cj2*sj1);
IkReal x3929=(r00*sj5);
IkReal x3930=(r10*sj5);
IkReal x3931=(cj1*sj2);
IkReal x3932=((0.712)*x3921);
IkReal x3933=((0.712)*x3922);
evalcond[0]=(((x3921*x3928))+((x3921*x3931))+x3925+x3929);
evalcond[1]=(((x3922*x3931))+x3926+x3930+((x3922*x3928)));
evalcond[2]=((((0.138)*x3925))+(((0.138)*x3929))+((x3923*x3932))+(((-1.0)*px))+(((-1.0)*x3921*x3927))+(((-1.0)*x3924*x3932))+(((0.179)*x3922)));
evalcond[3]=((((0.138)*x3926))+((x3923*x3933))+(((-0.179)*x3921))+(((-1.0)*x3922*x3927))+(((-1.0)*py))+(((0.138)*x3930))+(((-1.0)*x3924*x3933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3934=((1.0)*sj5);
IkReal x3935=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3934)));
j4eval[0]=x3935;
j4eval[1]=IKsign(x3935);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3934))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3936=((1.0)*sj5);
IkReal x3937=((((-1.0)*r00*x3936))+(((-1.0)*cj5*r01)));
j4eval[0]=x3937;
j4eval[1]=IKsign(x3937);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3936))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3938=((1.0)*sj5);
IkReal x3939=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3939;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r11*sj0*x3938))+((cj0*cj5*r00))+(((-1.0)*cj0*r01*x3938))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x3939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3941 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3941)==0){
continue;
}
IkReal x3940=pow(x3941,-0.5);
CheckValue<IkReal> x3942 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3942.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3942.value));
IkReal gconst97=((-1.0)*r21*x3940);
IkReal gconst98=(r20*x3940);
CheckValue<IkReal> x3943 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3943.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3943.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3946 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3946.valid){
continue;
}
IkReal x3944=((-1.0)*(x3946.value));
IkReal x3945=x3940;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3944;
IkReal gconst96=x3944;
IkReal gconst97=((-1.0)*r21*x3945);
IkReal gconst98=(r20*x3945);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
IkReal x3947=((-1.0)*(x3949.value));
IkReal x3948=x3940;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3947;
IkReal gconst96=x3947;
IkReal gconst97=((-1.0)*r21*x3948);
IkReal gconst98=(r20*x3948);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x3952 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3952.valid){
continue;
}
IkReal x3950=((-1.0)*(x3952.value));
IkReal x3951=x3940;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3950;
IkReal gconst96=x3950;
IkReal gconst97=((-1.0)*r21*x3951);
IkReal gconst98=(r20*x3951);
IkReal x3953=((1.0)*(r22*r22));
CheckValue<IkReal> x3957=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3953))),-1);
if(!x3957.valid){
continue;
}
IkReal x3954=x3957.value;
IkReal x3955=((1.0)*x3954);
IkReal x3956=((((-1.0)*x3955*(r20*r20*r20*r20)))+(((-1.0)*x3955*(r21*r21*r21*r21)))+(((-1.0)*x3953))+(((-2.0)*x3954*(r20*r20)*(r21*r21))));
j4eval[0]=x3956;
j4eval[1]=IKsign(x3956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3958=(cj1*sj2);
IkReal x3959=((1.0)*r22);
IkReal x3960=(gconst97*r21);
IkReal x3961=(cj2*sj1);
IkReal x3962=(gconst98*r20);
CheckValue<IkReal> x3963=IKPowWithIntegerCheck(IKsign(((((2.0)*x3960*x3962))+(((-1.0)*(x3960*x3960)))+(((-1.0)*(x3962*x3962)))+(((-1.0)*r22*x3959)))),-1);
if(!x3963.valid){
continue;
}
CheckValue<IkReal> x3964 = IKatan2WithCheck(IkReal(((((-1.0)*x3959*x3961))+(((-1.0)*x3958*x3959)))),IkReal((((x3960*x3961))+(((-1.0)*x3961*x3962))+(((-1.0)*x3958*x3962))+((x3958*x3960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3963.value)))+(x3964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3965=IKsin(j4);
IkReal x3966=IKcos(j4);
IkReal x3967=(gconst98*r00);
IkReal x3968=(sj1*sj2);
IkReal x3969=((1.0)*cj2);
IkReal x3970=((1.0)*x3966);
IkReal x3971=(gconst98*x3965);
IkReal x3972=(gconst98*x3966);
IkReal x3973=((1.0)*gconst97*x3965);
evalcond[0]=((((-1.0)*r21*x3973))+(((-1.0)*r22*x3970))+((r20*x3971)));
evalcond[1]=((((-1.0)*r02*x3970))+sj0+((x3965*x3967))+(((-1.0)*r01*x3973)));
evalcond[2]=((((-1.0)*r12*x3970))+((r10*x3971))+(((-1.0)*cj0))+(((-1.0)*r11*x3973)));
evalcond[3]=((((-1.0)*gconst97*r21*x3970))+((r22*x3965))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3969))+((r20*x3972)));
evalcond[4]=((((-1.0)*gconst97*r01*x3970))+((r02*x3965))+(((-1.0)*cj0*cj1*x3969))+((x3966*x3967))+((cj0*x3968)));
evalcond[5]=(((r10*x3972))+((r12*x3965))+(((-1.0)*gconst97*r11*x3970))+(((-1.0)*cj1*sj0*x3969))+((sj0*x3968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3974=((1.0)*gconst97);
CheckValue<IkReal> x3975 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*r21*x3974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3975.valid){
continue;
}
CheckValue<IkReal> x3976=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst98*r01))+(((-1.0)*r00*x3974)))),-1);
if(!x3976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3975.value)+(((1.5707963267949)*(x3976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3977=IKsin(j4);
IkReal x3978=IKcos(j4);
IkReal x3979=(gconst98*r00);
IkReal x3980=(sj1*sj2);
IkReal x3981=((1.0)*cj2);
IkReal x3982=((1.0)*x3978);
IkReal x3983=(gconst98*x3977);
IkReal x3984=(gconst98*x3978);
IkReal x3985=((1.0)*gconst97*x3977);
evalcond[0]=((((-1.0)*r22*x3982))+(((-1.0)*r21*x3985))+((r20*x3983)));
evalcond[1]=(sj0+((x3977*x3979))+(((-1.0)*r01*x3985))+(((-1.0)*r02*x3982)));
evalcond[2]=(((r10*x3983))+(((-1.0)*r12*x3982))+(((-1.0)*r11*x3985))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3981))+((r22*x3977))+((r20*x3984))+(((-1.0)*gconst97*r21*x3982)));
evalcond[4]=(((r02*x3977))+((x3978*x3979))+(((-1.0)*cj0*cj1*x3981))+(((-1.0)*gconst97*r01*x3982))+((cj0*x3980)));
evalcond[5]=(((r10*x3984))+(((-1.0)*gconst97*r11*x3982))+((sj0*x3980))+((r12*x3977))+(((-1.0)*cj1*sj0*x3981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3986=((1.0)*gconst97);
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x3986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
CheckValue<IkReal> x3988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3986))+(((-1.0)*gconst98*r11)))),-1);
if(!x3988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3987.value)+(((1.5707963267949)*(x3988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3989=IKsin(j4);
IkReal x3990=IKcos(j4);
IkReal x3991=(gconst98*r00);
IkReal x3992=(sj1*sj2);
IkReal x3993=((1.0)*cj2);
IkReal x3994=((1.0)*x3990);
IkReal x3995=(gconst98*x3989);
IkReal x3996=(gconst98*x3990);
IkReal x3997=((1.0)*gconst97*x3989);
evalcond[0]=((((-1.0)*r22*x3994))+(((-1.0)*r21*x3997))+((r20*x3995)));
evalcond[1]=(((x3989*x3991))+sj0+(((-1.0)*r02*x3994))+(((-1.0)*r01*x3997)));
evalcond[2]=(((r10*x3995))+(((-1.0)*r12*x3994))+(((-1.0)*r11*x3997))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x3993))+(((-1.0)*gconst97*r21*x3994))+(((-1.0)*cj1*sj2))+((r22*x3989))+((r20*x3996)));
evalcond[4]=(((x3990*x3991))+(((-1.0)*cj0*cj1*x3993))+(((-1.0)*gconst97*r01*x3994))+((r02*x3989))+((cj0*x3992)));
evalcond[5]=((((-1.0)*gconst97*r11*x3994))+((r10*x3996))+(((-1.0)*cj1*sj0*x3993))+((sj0*x3992))+((r12*x3989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3999 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3999)==0){
continue;
}
IkReal x3998=pow(x3999,-0.5);
CheckValue<IkReal> x4000 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4000.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4000.value))));
IkReal gconst100=((1.0)*r21*x3998);
IkReal gconst101=((-1.0)*r20*x3998);
CheckValue<IkReal> x4001 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4001.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4001.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4004 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4004.valid){
continue;
}
IkReal x4002=((1.0)*(x4004.value));
IkReal x4003=x3998;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4002)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4002)));
IkReal gconst100=((1.0)*r21*x4003);
IkReal gconst101=((-1.0)*r20*x4003);
IkReal x4005=r22*r22;
IkReal x4006=((1.0)*x4005);
CheckValue<IkReal> x4010=IKPowWithIntegerCheck(((-1.0)+x4005),-1);
if(!x4010.valid){
continue;
}
IkReal x4007=x4010.value;
if((((1.0)+(((-1.0)*x4006)))) < -0.00001)
continue;
IkReal x4008=IKsqrt(((1.0)+(((-1.0)*x4006))));
IkReal x4009=(sj0*x4007*x4008);
j4eval[0]=((IKabs((x4009+(((-1.0)*x4006*x4009)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4013 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4013.valid){
continue;
}
IkReal x4011=((1.0)*(x4013.value));
IkReal x4012=x3998;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4011)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4011)));
IkReal gconst100=((1.0)*r21*x4012);
IkReal gconst101=((-1.0)*r20*x4012);
IkReal x4014=r22*r22;
IkReal x4015=((1.0)*x4014);
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(((-1.0)+x4014),-1);
if(!x4019.valid){
continue;
}
IkReal x4016=x4019.value;
if((((1.0)+(((-1.0)*x4015)))) < -0.00001)
continue;
IkReal x4017=IKsqrt(((1.0)+(((-1.0)*x4015))));
IkReal x4018=(cj0*x4016*x4017);
j4eval[0]=((IKabs((x4018+(((-1.0)*x4015*x4018)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4022 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4022.valid){
continue;
}
IkReal x4020=((1.0)*(x4022.value));
IkReal x4021=x3998;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4020)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4020)));
IkReal gconst100=((1.0)*r21*x4021);
IkReal gconst101=((-1.0)*r20*x4021);
IkReal x4023=r22*r22;
IkReal x4024=(cj0*r02);
IkReal x4025=(r12*sj0);
CheckValue<IkReal> x4029=IKPowWithIntegerCheck(((-1.0)+x4023),-1);
if(!x4029.valid){
continue;
}
IkReal x4026=x4029.value;
if((((1.0)+(((-1.0)*x4023)))) < -0.00001)
continue;
IkReal x4027=IKsqrt(((1.0)+(((-1.0)*x4023))));
IkReal x4028=((1.0)*r22*x4026*x4027);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x4024*x4028))+(((-1.0)*x4025*x4028)))))+(IKabs((x4024+x4025))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4030=((1.0)*gconst100);
CheckValue<IkReal> x4031 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4030))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*r11*sj0*x4030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4031.valid){
continue;
}
CheckValue<IkReal> x4032=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x4032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4031.value)+(((1.5707963267949)*(x4032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4033=IKsin(j4);
IkReal x4034=IKcos(j4);
IkReal x4035=((1.0)*cj2);
IkReal x4036=(sj1*sj2);
IkReal x4037=(gconst101*r10);
IkReal x4038=((1.0)*x4034);
IkReal x4039=(gconst101*x4034);
IkReal x4040=(gconst101*x4033);
IkReal x4041=((1.0)*gconst100*x4033);
evalcond[0]=((((-1.0)*r21*x4041))+(((-1.0)*r22*x4038))+((r20*x4040)));
evalcond[1]=(sj0+(((-1.0)*r01*x4041))+((r00*x4040))+(((-1.0)*r02*x4038)));
evalcond[2]=(((x4033*x4037))+(((-1.0)*r11*x4041))+(((-1.0)*r12*x4038))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst100*r21*x4038))+(((-1.0)*cj1*sj2))+((r20*x4039))+((r22*x4033))+(((-1.0)*sj1*x4035)));
evalcond[4]=(((r02*x4033))+((r00*x4039))+((cj0*x4036))+(((-1.0)*gconst100*r01*x4038))+(((-1.0)*cj0*cj1*x4035)));
evalcond[5]=((((-1.0)*gconst100*r11*x4038))+(((-1.0)*cj1*sj0*x4035))+((x4034*x4037))+((sj0*x4036))+((r12*x4033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4042=((1.0)*gconst100);
CheckValue<IkReal> x4043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4042))+(((-1.0)*gconst101*r01)))),-1);
if(!x4043.valid){
continue;
}
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4042))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4043.value)))+(x4044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4045=IKsin(j4);
IkReal x4046=IKcos(j4);
IkReal x4047=((1.0)*cj2);
IkReal x4048=(sj1*sj2);
IkReal x4049=(gconst101*r10);
IkReal x4050=((1.0)*x4046);
IkReal x4051=(gconst101*x4046);
IkReal x4052=(gconst101*x4045);
IkReal x4053=((1.0)*gconst100*x4045);
evalcond[0]=((((-1.0)*r21*x4053))+((r20*x4052))+(((-1.0)*r22*x4050)));
evalcond[1]=(sj0+(((-1.0)*r01*x4053))+((r00*x4052))+(((-1.0)*r02*x4050)));
evalcond[2]=(((x4045*x4049))+(((-1.0)*r12*x4050))+(((-1.0)*r11*x4053))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4045))+(((-1.0)*sj1*x4047))+(((-1.0)*gconst100*r21*x4050))+(((-1.0)*cj1*sj2))+((r20*x4051)));
evalcond[4]=((((-1.0)*gconst100*r01*x4050))+((r02*x4045))+(((-1.0)*cj0*cj1*x4047))+((cj0*x4048))+((r00*x4051)));
evalcond[5]=(((x4046*x4049))+(((-1.0)*cj1*sj0*x4047))+((r12*x4045))+(((-1.0)*gconst100*r11*x4050))+((sj0*x4048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4054=((1.0)*gconst100);
CheckValue<IkReal> x4055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4054))+(((-1.0)*gconst101*r11)))),-1);
if(!x4055.valid){
continue;
}
CheckValue<IkReal> x4056 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4054))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4055.value)))+(x4056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4057=IKsin(j4);
IkReal x4058=IKcos(j4);
IkReal x4059=((1.0)*cj2);
IkReal x4060=(sj1*sj2);
IkReal x4061=(gconst101*r10);
IkReal x4062=((1.0)*x4058);
IkReal x4063=(gconst101*x4058);
IkReal x4064=(gconst101*x4057);
IkReal x4065=((1.0)*gconst100*x4057);
evalcond[0]=((((-1.0)*r21*x4065))+((r20*x4064))+(((-1.0)*r22*x4062)));
evalcond[1]=(sj0+(((-1.0)*r01*x4065))+((r00*x4064))+(((-1.0)*r02*x4062)));
evalcond[2]=((((-1.0)*r12*x4062))+(((-1.0)*r11*x4065))+((x4057*x4061))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst100*r21*x4062))+(((-1.0)*cj1*sj2))+((r20*x4063))+((r22*x4057))+(((-1.0)*sj1*x4059)));
evalcond[4]=(((r02*x4057))+(((-1.0)*gconst100*r01*x4062))+(((-1.0)*cj0*cj1*x4059))+((cj0*x4060))+((r00*x4063)));
evalcond[5]=(((sj0*x4060))+(((-1.0)*cj1*sj0*x4059))+((r12*x4057))+(((-1.0)*gconst100*r11*x4062))+((x4058*x4061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4066=((-1.0)*r00);
IkReal x4068 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4068)==0){
continue;
}
IkReal x4067=pow(x4068,-0.5);
CheckValue<IkReal> x4069 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4066),IKFAST_ATAN2_MAGTHRESH);
if(!x4069.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4069.value));
IkReal gconst103=(r01*x4067);
IkReal gconst104=(x4066*x4067);
CheckValue<IkReal> x4070 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4070.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4070.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4071=((-1.0)*r00);
IkReal x4072=x4067;
CheckValue<IkReal> x4074 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4071),IKFAST_ATAN2_MAGTHRESH);
if(!x4074.valid){
continue;
}
IkReal x4073=((-1.0)*(x4074.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4073;
IkReal gconst102=x4073;
IkReal gconst103=(r01*x4072);
IkReal gconst104=(x4071*x4072);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4075=((1.0)*gconst103);
CheckValue<IkReal> x4076 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4075))+(((-1.0)*cj0*r01*x4075))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4076.valid){
continue;
}
CheckValue<IkReal> x4077=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x4077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4076.value)+(((1.5707963267949)*(x4077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4078=IKsin(j4);
IkReal x4079=IKcos(j4);
IkReal x4080=((1.0)*cj2);
IkReal x4081=(sj1*sj2);
IkReal x4082=((1.0)*x4079);
IkReal x4083=(gconst104*x4079);
IkReal x4084=(gconst104*x4078);
IkReal x4085=((1.0)*gconst103*x4078);
evalcond[0]=((((-1.0)*r21*x4085))+((r20*x4084))+(((-1.0)*r22*x4082)));
evalcond[1]=(((r00*x4084))+sj0+(((-1.0)*r02*x4082))+(((-1.0)*r01*x4085)));
evalcond[2]=((((-1.0)*r11*x4085))+(((-1.0)*r12*x4082))+((r10*x4084))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4083))+((r22*x4078))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4080))+(((-1.0)*gconst103*r21*x4082)));
evalcond[4]=((((-1.0)*cj0*cj1*x4080))+((r00*x4083))+((cj0*x4081))+(((-1.0)*gconst103*r01*x4082))+((r02*x4078)));
evalcond[5]=(((r12*x4078))+((r10*x4083))+(((-1.0)*cj1*sj0*x4080))+(((-1.0)*gconst103*r11*x4082))+((sj0*x4081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4086=((1.0)*gconst103);
CheckValue<IkReal> x4087=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r11))+(((-1.0)*r10*x4086)))),-1);
if(!x4087.valid){
continue;
}
CheckValue<IkReal> x4088 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x4086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4087.value)))+(x4088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4089=IKsin(j4);
IkReal x4090=IKcos(j4);
IkReal x4091=((1.0)*cj2);
IkReal x4092=(sj1*sj2);
IkReal x4093=((1.0)*x4090);
IkReal x4094=(gconst104*x4090);
IkReal x4095=(gconst104*x4089);
IkReal x4096=((1.0)*gconst103*x4089);
evalcond[0]=(((r20*x4095))+(((-1.0)*r21*x4096))+(((-1.0)*r22*x4093)));
evalcond[1]=(sj0+((r00*x4095))+(((-1.0)*r02*x4093))+(((-1.0)*r01*x4096)));
evalcond[2]=((((-1.0)*r12*x4093))+(((-1.0)*r11*x4096))+((r10*x4095))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4094))+(((-1.0)*sj1*x4091))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst103*r21*x4093))+((r22*x4089)));
evalcond[4]=(((r00*x4094))+(((-1.0)*cj0*cj1*x4091))+((cj0*x4092))+(((-1.0)*gconst103*r01*x4093))+((r02*x4089)));
evalcond[5]=((((-1.0)*cj1*sj0*x4091))+((r10*x4094))+((r12*x4089))+(((-1.0)*gconst103*r11*x4093))+((sj0*x4092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4097=((-1.0)*r01);
IkReal x4099 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4099)==0){
continue;
}
IkReal x4098=pow(x4099,-0.5);
CheckValue<IkReal> x4100 = IKatan2WithCheck(IkReal(x4097),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4100.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4100.value))));
IkReal gconst106=(x4097*x4098);
IkReal gconst107=((1.0)*r00*x4098);
CheckValue<IkReal> x4101 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4101.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4101.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4102=((-1.0)*r01);
CheckValue<IkReal> x4105 = IKatan2WithCheck(IkReal(x4102),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4105.valid){
continue;
}
IkReal x4103=((1.0)*(x4105.value));
IkReal x4104=x4098;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4103)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4103)));
IkReal gconst106=(x4102*x4104);
IkReal gconst107=((1.0)*r00*x4104);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4106=((-1.0)*r01);
CheckValue<IkReal> x4109 = IKatan2WithCheck(IkReal(x4106),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4109.valid){
continue;
}
IkReal x4107=((1.0)*(x4109.value));
IkReal x4108=x4098;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4107)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4107)));
IkReal gconst106=(x4106*x4108);
IkReal gconst107=((1.0)*r00*x4108);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4110=((-1.0)*r01);
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal(x4110),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
IkReal x4111=((1.0)*(x4113.value));
IkReal x4112=x4098;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4111)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4111)));
IkReal gconst106=(x4110*x4112);
IkReal gconst107=((1.0)*r00*x4112);
IkReal x4114=r02*r02;
IkReal x4115=(r12*sj0);
IkReal x4116=x4098;
IkReal x4117=(cj0*x4116);
j4eval[0]=((IKabs((((x4114*x4117))+((r02*x4115*x4116))+(((-1.0)*x4117)))))+(IKabs((x4115+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4118=((1.0)*gconst106);
CheckValue<IkReal> x4119=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4119.valid){
continue;
}
CheckValue<IkReal> x4120 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4118))+((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4118))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4119.value)))+(x4120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4121=IKsin(j4);
IkReal x4122=IKcos(j4);
IkReal x4123=(gconst106*r01);
IkReal x4124=((1.0)*cj2);
IkReal x4125=(sj1*sj2);
IkReal x4126=(gconst106*r21);
IkReal x4127=(gconst106*r11);
IkReal x4128=((1.0)*x4122);
IkReal x4129=((1.0)*x4121);
IkReal x4130=(gconst107*x4121);
IkReal x4131=(gconst107*x4122);
evalcond[0]=((((-1.0)*r22*x4128))+((r20*x4130))+(((-1.0)*x4126*x4129)));
evalcond[1]=(sj0+((r00*x4130))+(((-1.0)*x4123*x4129))+(((-1.0)*r02*x4128)));
evalcond[2]=((((-1.0)*r12*x4128))+((r10*x4130))+(((-1.0)*x4127*x4129))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4124))+(((-1.0)*cj1*sj2))+((r20*x4131))+((r22*x4121))+(((-1.0)*x4126*x4128)));
evalcond[4]=(((r00*x4131))+((cj0*x4125))+((r02*x4121))+(((-1.0)*x4123*x4128))+(((-1.0)*cj0*cj1*x4124)));
evalcond[5]=(((r12*x4121))+((sj0*x4125))+((r10*x4131))+(((-1.0)*x4127*x4128))+(((-1.0)*cj1*sj0*x4124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4132=((1.0)*gconst106);
CheckValue<IkReal> x4133 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x4132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4133.valid){
continue;
}
CheckValue<IkReal> x4134=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r01))+(((-1.0)*r00*x4132)))),-1);
if(!x4134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4133.value)+(((1.5707963267949)*(x4134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4135=IKsin(j4);
IkReal x4136=IKcos(j4);
IkReal x4137=(gconst106*r01);
IkReal x4138=((1.0)*cj2);
IkReal x4139=(sj1*sj2);
IkReal x4140=(gconst106*r21);
IkReal x4141=(gconst106*r11);
IkReal x4142=((1.0)*x4136);
IkReal x4143=((1.0)*x4135);
IkReal x4144=(gconst107*x4135);
IkReal x4145=(gconst107*x4136);
evalcond[0]=((((-1.0)*x4140*x4143))+((r20*x4144))+(((-1.0)*r22*x4142)));
evalcond[1]=(sj0+(((-1.0)*r02*x4142))+((r00*x4144))+(((-1.0)*x4137*x4143)));
evalcond[2]=((((-1.0)*x4141*x4143))+((r10*x4144))+(((-1.0)*r12*x4142))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4135))+(((-1.0)*x4140*x4142))+(((-1.0)*cj1*sj2))+((r20*x4145))+(((-1.0)*sj1*x4138)));
evalcond[4]=((((-1.0)*cj0*cj1*x4138))+((r00*x4145))+((cj0*x4139))+(((-1.0)*x4137*x4142))+((r02*x4135)));
evalcond[5]=((((-1.0)*x4141*x4142))+((r10*x4145))+(((-1.0)*cj1*sj0*x4138))+((r12*x4135))+((sj0*x4139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4146=((1.0)*gconst106);
CheckValue<IkReal> x4147 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x4146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4147.valid){
continue;
}
CheckValue<IkReal> x4148=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r11))+(((-1.0)*r10*x4146)))),-1);
if(!x4148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4147.value)+(((1.5707963267949)*(x4148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4149=IKsin(j4);
IkReal x4150=IKcos(j4);
IkReal x4151=(gconst106*r01);
IkReal x4152=((1.0)*cj2);
IkReal x4153=(sj1*sj2);
IkReal x4154=(gconst106*r21);
IkReal x4155=(gconst106*r11);
IkReal x4156=((1.0)*x4150);
IkReal x4157=((1.0)*x4149);
IkReal x4158=(gconst107*x4149);
IkReal x4159=(gconst107*x4150);
evalcond[0]=((((-1.0)*x4154*x4157))+((r20*x4158))+(((-1.0)*r22*x4156)));
evalcond[1]=(sj0+((r00*x4158))+(((-1.0)*r02*x4156))+(((-1.0)*x4151*x4157)));
evalcond[2]=((((-1.0)*x4155*x4157))+((r10*x4158))+(((-1.0)*r12*x4156))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x4149))+(((-1.0)*x4154*x4156))+((r20*x4159))+(((-1.0)*sj1*x4152)));
evalcond[4]=(((r02*x4149))+((r00*x4159))+(((-1.0)*x4151*x4156))+((cj0*x4153))+(((-1.0)*cj0*cj1*x4152)));
evalcond[5]=((((-1.0)*x4155*x4156))+((r10*x4159))+((r12*x4149))+((sj0*x4153))+(((-1.0)*cj1*sj0*x4152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4160=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4160;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4160);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4161=((1.0)*sj5);
IkReal x4162=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4161)));
j4eval[0]=x4162;
j4eval[1]=IKsign(x4162);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4161)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4163=(cj1*cj2);
IkReal x4164=(cj5*r00);
IkReal x4165=(r01*sj5);
IkReal x4166=((1.0)*sj1*sj2);
IkReal x4167=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4167;
j4eval[1]=((IKabs(((((-1.0)*x4163*x4164))+(((-1.0)*x4165*x4166))+((sj1*sj2*x4164))+((x4163*x4165)))))+(IKabs(((((-1.0)*r02*x4166))+((r02*x4163))))));
j4eval[2]=IKsign(x4167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4168=(r01*sj5);
IkReal x4169=(cj1*cj2);
IkReal x4170=(cj5*r00);
IkReal x4171=((1.0)*sj1*sj2);
CheckValue<IkReal> x4172 = IKatan2WithCheck(IkReal((((sj1*sj2*x4170))+((x4168*x4169))+(((-1.0)*x4168*x4171))+(((-1.0)*x4169*x4170)))),IkReal((((r02*x4169))+(((-1.0)*r02*x4171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4172.valid){
continue;
}
CheckValue<IkReal> x4173=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4172.value)+(((1.5707963267949)*(x4173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4174=IKcos(j4);
IkReal x4175=IKsin(j4);
IkReal x4176=((1.0)*cj1);
IkReal x4177=((1.0)*x4174);
IkReal x4178=(cj5*x4174);
IkReal x4179=(cj5*x4175);
IkReal x4180=((1.0)*sj5*x4175);
evalcond[0]=(((r00*x4178))+((r02*x4175))+(((-1.0)*r01*sj5*x4177)));
evalcond[1]=((((-1.0)*r21*x4180))+(((-1.0)*r22*x4177))+((r20*x4179)));
evalcond[2]=((((-1.0)*r11*x4180))+((r10*x4179))+(((-1.0)*r12*x4177)));
evalcond[3]=((1.0)+(((-1.0)*r01*x4180))+((r00*x4179))+(((-1.0)*r02*x4177)));
evalcond[4]=(((r12*x4175))+((sj1*sj2))+(((-1.0)*cj2*x4176))+(((-1.0)*r11*sj5*x4177))+((r10*x4178)));
evalcond[5]=(((r22*x4175))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4176))+(((-1.0)*r21*sj5*x4177))+((r20*x4178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4181=((1.0)*sj5);
CheckValue<IkReal> x4182=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4181)))),-1);
if(!x4182.valid){
continue;
}
CheckValue<IkReal> x4183 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4182.value)))+(x4183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4184=IKcos(j4);
IkReal x4185=IKsin(j4);
IkReal x4186=((1.0)*cj1);
IkReal x4187=((1.0)*x4184);
IkReal x4188=(cj5*x4184);
IkReal x4189=(cj5*x4185);
IkReal x4190=((1.0)*sj5*x4185);
evalcond[0]=(((r02*x4185))+(((-1.0)*r01*sj5*x4187))+((r00*x4188)));
evalcond[1]=(((r20*x4189))+(((-1.0)*r21*x4190))+(((-1.0)*r22*x4187)));
evalcond[2]=((((-1.0)*r12*x4187))+(((-1.0)*r11*x4190))+((r10*x4189)));
evalcond[3]=((1.0)+(((-1.0)*r01*x4190))+(((-1.0)*r02*x4187))+((r00*x4189)));
evalcond[4]=(((r12*x4185))+((sj1*sj2))+((r10*x4188))+(((-1.0)*cj2*x4186))+(((-1.0)*r11*sj5*x4187)));
evalcond[5]=((((-1.0)*sj2*x4186))+((r20*x4188))+(((-1.0)*cj2*sj1))+((r22*x4185))+(((-1.0)*r21*sj5*x4187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4191 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4191.valid){
continue;
}
CheckValue<IkReal> x4192=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4191.value)+(((1.5707963267949)*(x4192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4193=IKcos(j4);
IkReal x4194=IKsin(j4);
IkReal x4195=((1.0)*cj1);
IkReal x4196=((1.0)*x4193);
IkReal x4197=(cj5*x4193);
IkReal x4198=(cj5*x4194);
IkReal x4199=((1.0)*sj5*x4194);
evalcond[0]=((((-1.0)*r01*sj5*x4196))+((r02*x4194))+((r00*x4197)));
evalcond[1]=(((r20*x4198))+(((-1.0)*r21*x4199))+(((-1.0)*r22*x4196)));
evalcond[2]=((((-1.0)*r12*x4196))+(((-1.0)*r11*x4199))+((r10*x4198)));
evalcond[3]=((1.0)+(((-1.0)*r01*x4199))+((r00*x4198))+(((-1.0)*r02*x4196)));
evalcond[4]=(((r12*x4194))+((sj1*sj2))+((r10*x4197))+(((-1.0)*cj2*x4195))+(((-1.0)*r11*sj5*x4196)));
evalcond[5]=((((-1.0)*r21*sj5*x4196))+((r20*x4197))+(((-1.0)*cj2*sj1))+((r22*x4194))+(((-1.0)*sj2*x4195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4200=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4200;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4201=((1.0)*sj5);
IkReal x4202=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4201)));
j4eval[0]=x4202;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4201))))));
j4eval[2]=IKsign(x4202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4203=cj5*cj5;
IkReal x4204=r01*r01;
IkReal x4205=(cj5*r00);
IkReal x4206=(r01*sj5);
IkReal x4207=(((x4203*(r00*r00)))+(((-1.0)*x4203*x4204))+(((-2.0)*x4205*x4206))+x4204+(r02*r02));
j4eval[0]=x4207;
j4eval[1]=((IKabs(r02))+(IKabs((x4205+(((-1.0)*x4206))))));
j4eval[2]=IKsign(x4207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4208=cj5*cj5;
IkReal x4209=r01*r01;
IkReal x4210=(r01*sj5);
IkReal x4211=(cj5*r00);
CheckValue<IkReal> x4212 = IKatan2WithCheck(IkReal((x4211+(((-1.0)*x4210)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4208*x4209))+((x4208*(r00*r00)))+x4209+(((-2.0)*x4210*x4211))+(r02*r02))),-1);
if(!x4213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4212.value)+(((1.5707963267949)*(x4213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4214=IKcos(j4);
IkReal x4215=IKsin(j4);
IkReal x4216=((1.0)*sj2);
IkReal x4217=((1.0)*x4214);
IkReal x4218=(cj5*x4214);
IkReal x4219=(cj5*x4215);
IkReal x4220=((1.0)*sj5*x4215);
evalcond[0]=(((r02*x4215))+(((-1.0)*r01*sj5*x4217))+((r00*x4218)));
evalcond[1]=((((-1.0)*r22*x4217))+((r20*x4219))+(((-1.0)*r21*x4220)));
evalcond[2]=((((-1.0)*r11*x4220))+(((-1.0)*r12*x4217))+((r10*x4219)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4217))+(((-1.0)*r01*x4220))+((r00*x4219)));
evalcond[4]=(((r12*x4215))+(((-1.0)*sj1*x4216))+((cj1*cj2))+(((-1.0)*r11*sj5*x4217))+((r10*x4218)));
evalcond[5]=(((r22*x4215))+(((-1.0)*cj2*sj1))+((r20*x4218))+(((-1.0)*cj1*x4216))+(((-1.0)*r21*sj5*x4217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4221=((1.0)*sj5);
CheckValue<IkReal> x4222 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4222.valid){
continue;
}
CheckValue<IkReal> x4223=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x4221)))),-1);
if(!x4223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4222.value)+(((1.5707963267949)*(x4223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4224=IKcos(j4);
IkReal x4225=IKsin(j4);
IkReal x4226=((1.0)*sj2);
IkReal x4227=((1.0)*x4224);
IkReal x4228=(cj5*x4224);
IkReal x4229=(cj5*x4225);
IkReal x4230=((1.0)*sj5*x4225);
evalcond[0]=(((r00*x4228))+((r02*x4225))+(((-1.0)*r01*sj5*x4227)));
evalcond[1]=((((-1.0)*r22*x4227))+(((-1.0)*r21*x4230))+((r20*x4229)));
evalcond[2]=(((r10*x4229))+(((-1.0)*r11*x4230))+(((-1.0)*r12*x4227)));
evalcond[3]=((-1.0)+((r00*x4229))+(((-1.0)*r01*x4230))+(((-1.0)*r02*x4227)));
evalcond[4]=(((r10*x4228))+(((-1.0)*r11*sj5*x4227))+((cj1*cj2))+(((-1.0)*sj1*x4226))+((r12*x4225)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4225))+(((-1.0)*r21*sj5*x4227))+((r20*x4228))+(((-1.0)*cj1*x4226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4231=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4231.valid){
continue;
}
CheckValue<IkReal> x4232 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4231.value)))+(x4232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4233=IKcos(j4);
IkReal x4234=IKsin(j4);
IkReal x4235=((1.0)*sj2);
IkReal x4236=((1.0)*x4233);
IkReal x4237=(cj5*x4233);
IkReal x4238=(cj5*x4234);
IkReal x4239=((1.0)*sj5*x4234);
evalcond[0]=(((r00*x4237))+((r02*x4234))+(((-1.0)*r01*sj5*x4236)));
evalcond[1]=((((-1.0)*r22*x4236))+((r20*x4238))+(((-1.0)*r21*x4239)));
evalcond[2]=(((r10*x4238))+(((-1.0)*r11*x4239))+(((-1.0)*r12*x4236)));
evalcond[3]=((-1.0)+((r00*x4238))+(((-1.0)*r01*x4239))+(((-1.0)*r02*x4236)));
evalcond[4]=(((r12*x4234))+((r10*x4237))+(((-1.0)*r11*sj5*x4236))+((cj1*cj2))+(((-1.0)*sj1*x4235)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4234))+(((-1.0)*r21*sj5*x4236))+((r20*x4237))+(((-1.0)*cj1*x4235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4240=((-1.0)*r10);
IkReal x4242 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4242)==0){
continue;
}
IkReal x4241=pow(x4242,-0.5);
CheckValue<IkReal> x4243 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4240),IKFAST_ATAN2_MAGTHRESH);
if(!x4243.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4243.value));
IkReal gconst109=(r11*x4241);
IkReal gconst110=(x4240*x4241);
CheckValue<IkReal> x4244 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4244.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4244.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4245=((-1.0)*r10);
IkReal x4246=x4241;
CheckValue<IkReal> x4248 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4245),IKFAST_ATAN2_MAGTHRESH);
if(!x4248.valid){
continue;
}
IkReal x4247=((-1.0)*(x4248.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4247;
IkReal gconst108=x4247;
IkReal gconst109=(r11*x4246);
IkReal gconst110=(x4245*x4246);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4249=((1.0)*gconst109);
CheckValue<IkReal> x4250 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4249))+(((-1.0)*r11*sj0*x4249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4250.valid){
continue;
}
CheckValue<IkReal> x4251=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4250.value)+(((1.5707963267949)*(x4251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4252=IKsin(j4);
IkReal x4253=IKcos(j4);
IkReal x4254=((1.0)*cj2);
IkReal x4255=(sj1*sj2);
IkReal x4256=(gconst110*r20);
IkReal x4257=(gconst109*r01);
IkReal x4258=(gconst109*r11);
IkReal x4259=(gconst109*r21);
IkReal x4260=((1.0)*x4253);
IkReal x4261=((1.0)*x4252);
IkReal x4262=(gconst110*x4253);
IkReal x4263=(gconst110*x4252);
evalcond[0]=((((-1.0)*x4259*x4261))+(((-1.0)*r22*x4260))+((x4252*x4256)));
evalcond[1]=(sj0+(((-1.0)*r02*x4260))+(((-1.0)*x4257*x4261))+((r00*x4263)));
evalcond[2]=((((-1.0)*r12*x4260))+(((-1.0)*x4258*x4261))+((r10*x4263))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4254))+((r22*x4252))+((x4253*x4256))+(((-1.0)*x4259*x4260))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((cj0*x4255))+(((-1.0)*cj0*cj1*x4254))+((r02*x4252))+(((-1.0)*x4257*x4260))+((r00*x4262)));
evalcond[5]=((((-1.0)*cj1*sj0*x4254))+((r12*x4252))+(((-1.0)*x4258*x4260))+((sj0*x4255))+((r10*x4262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4264=((1.0)*gconst109);
CheckValue<IkReal> x4265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4264))+(((-1.0)*gconst110*r01)))),-1);
if(!x4265.valid){
continue;
}
CheckValue<IkReal> x4266 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4264))+((cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4265.value)))+(x4266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4267=IKsin(j4);
IkReal x4268=IKcos(j4);
IkReal x4269=((1.0)*cj2);
IkReal x4270=(sj1*sj2);
IkReal x4271=(gconst110*r20);
IkReal x4272=(gconst109*r01);
IkReal x4273=(gconst109*r11);
IkReal x4274=(gconst109*r21);
IkReal x4275=((1.0)*x4268);
IkReal x4276=((1.0)*x4267);
IkReal x4277=(gconst110*x4268);
IkReal x4278=(gconst110*x4267);
evalcond[0]=(((x4267*x4271))+(((-1.0)*r22*x4275))+(((-1.0)*x4274*x4276)));
evalcond[1]=(((r00*x4278))+sj0+(((-1.0)*r02*x4275))+(((-1.0)*x4272*x4276)));
evalcond[2]=((((-1.0)*x4273*x4276))+(((-1.0)*r12*x4275))+(((-1.0)*cj0))+((r10*x4278)));
evalcond[3]=((((-1.0)*sj1*x4269))+(((-1.0)*cj1*sj2))+((x4268*x4271))+(((-1.0)*x4274*x4275))+((r22*x4267)));
evalcond[4]=((((-1.0)*cj0*cj1*x4269))+((r00*x4277))+((r02*x4267))+(((-1.0)*x4272*x4275))+((cj0*x4270)));
evalcond[5]=((((-1.0)*x4273*x4275))+((r12*x4267))+(((-1.0)*cj1*sj0*x4269))+((sj0*x4270))+((r10*x4277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4279=((-1.0)*r11);
IkReal x4281 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4281)==0){
continue;
}
IkReal x4280=pow(x4281,-0.5);
CheckValue<IkReal> x4282 = IKatan2WithCheck(IkReal(x4279),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4282.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4282.value))));
IkReal gconst112=(x4279*x4280);
IkReal gconst113=((1.0)*r10*x4280);
CheckValue<IkReal> x4283 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4283.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4283.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4284=((-1.0)*r11);
CheckValue<IkReal> x4287 = IKatan2WithCheck(IkReal(x4284),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4287.valid){
continue;
}
IkReal x4285=((1.0)*(x4287.value));
IkReal x4286=x4280;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4285)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4285)));
IkReal gconst112=(x4284*x4286);
IkReal gconst113=((1.0)*r10*x4286);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4288=((-1.0)*r11);
CheckValue<IkReal> x4291 = IKatan2WithCheck(IkReal(x4288),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4291.valid){
continue;
}
IkReal x4289=((1.0)*(x4291.value));
IkReal x4290=x4280;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4289)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4289)));
IkReal gconst112=(x4288*x4290);
IkReal gconst113=((1.0)*r10*x4290);
IkReal x4292=r12*r12;
IkReal x4293=(cj0*r02);
IkReal x4294=x4280;
IkReal x4295=(sj0*x4294);
j4eval[0]=((IKabs((((x4292*x4295))+(((-1.0)*x4295))+((r12*x4293*x4294)))))+(IKabs((x4293+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4296=((-1.0)*r11);
CheckValue<IkReal> x4299 = IKatan2WithCheck(IkReal(x4296),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4299.valid){
continue;
}
IkReal x4297=((1.0)*(x4299.value));
IkReal x4298=x4280;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4297)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4297)));
IkReal gconst112=(x4296*x4298);
IkReal gconst113=((1.0)*r10*x4298);
IkReal x4300=r12*r12;
IkReal x4301=((1.0)*r22);
IkReal x4302=(cj1*sj2);
IkReal x4303=(cj2*sj1);
IkReal x4304=((1.0)+(((-1.0)*x4300)));
CheckValue<IkReal> x4311=IKPowWithIntegerCheck(x4304,-1);
if(!x4311.valid){
continue;
}
IkReal x4305=x4311.value;
CheckValue<IkReal> x4312=IKPowWithIntegerCheck(((-1.0)+x4300),-1);
if(!x4312.valid){
continue;
}
IkReal x4306=x4312.value;
IkReal x4307=((1.0)*x4305);
if((x4304) < -0.00001)
continue;
IkReal x4308=IKsqrt(x4304);
IkReal x4309=(r12*x4306*x4308);
IkReal x4310=((((-2.0)*r10*r11*r20*r21*x4305))+(((-1.0)*r22*x4301))+(((-1.0)*x4307*(r11*r11)*(r21*r21)))+(((-1.0)*x4307*(r10*r10)*(r20*r20))));
j4eval[0]=x4310;
j4eval[1]=((IKabs(((((-1.0)*x4301*x4303))+(((-1.0)*x4301*x4302)))))+(IKabs(((((-1.0)*x4301*x4302*x4309))+(((-1.0)*x4301*x4303*x4309))))));
j4eval[2]=IKsign(x4310);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4313=((1.0)*r22);
IkReal x4314=(cj1*sj2);
IkReal x4315=(cj2*sj1);
IkReal x4316=(gconst113*r20);
IkReal x4317=(gconst112*r21);
CheckValue<IkReal> x4318 = IKatan2WithCheck(IkReal(((((-1.0)*x4313*x4315))+(((-1.0)*x4313*x4314)))),IkReal((((x4315*x4317))+(((-1.0)*x4315*x4316))+((x4314*x4317))+(((-1.0)*x4314*x4316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4318.valid){
continue;
}
CheckValue<IkReal> x4319=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x4313))+(((2.0)*x4316*x4317))+(((-1.0)*(x4316*x4316)))+(((-1.0)*(x4317*x4317))))),-1);
if(!x4319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4318.value)+(((1.5707963267949)*(x4319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4320=IKsin(j4);
IkReal x4321=IKcos(j4);
IkReal x4322=(gconst113*r10);
IkReal x4323=((1.0)*cj2);
IkReal x4324=(gconst112*r01);
IkReal x4325=(sj1*sj2);
IkReal x4326=(gconst112*r11);
IkReal x4327=(gconst113*r20);
IkReal x4328=(gconst113*r00);
IkReal x4329=(gconst112*r21);
IkReal x4330=((1.0)*x4321);
IkReal x4331=((1.0)*x4320);
evalcond[0]=(((x4320*x4327))+(((-1.0)*r22*x4330))+(((-1.0)*x4329*x4331)));
evalcond[1]=(sj0+(((-1.0)*r02*x4330))+(((-1.0)*x4324*x4331))+((x4320*x4328)));
evalcond[2]=((((-1.0)*x4326*x4331))+((x4320*x4322))+(((-1.0)*r12*x4330))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4323))+((x4321*x4327))+(((-1.0)*cj1*sj2))+((r22*x4320))+(((-1.0)*x4329*x4330)));
evalcond[4]=(((cj0*x4325))+(((-1.0)*cj0*cj1*x4323))+(((-1.0)*x4324*x4330))+((x4321*x4328))+((r02*x4320)));
evalcond[5]=((((-1.0)*cj1*sj0*x4323))+((x4321*x4322))+(((-1.0)*x4326*x4330))+((sj0*x4325))+((r12*x4320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4332=((1.0)*gconst112);
CheckValue<IkReal> x4333=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4333.valid){
continue;
}
CheckValue<IkReal> x4334 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*r11*sj0*x4332))+(((-1.0)*cj0*r01*x4332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4333.value)))+(x4334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4335=IKsin(j4);
IkReal x4336=IKcos(j4);
IkReal x4337=(gconst113*r10);
IkReal x4338=((1.0)*cj2);
IkReal x4339=(gconst112*r01);
IkReal x4340=(sj1*sj2);
IkReal x4341=(gconst112*r11);
IkReal x4342=(gconst113*r20);
IkReal x4343=(gconst113*r00);
IkReal x4344=(gconst112*r21);
IkReal x4345=((1.0)*x4336);
IkReal x4346=((1.0)*x4335);
evalcond[0]=((((-1.0)*x4344*x4346))+((x4335*x4342))+(((-1.0)*r22*x4345)));
evalcond[1]=((((-1.0)*r02*x4345))+sj0+(((-1.0)*x4339*x4346))+((x4335*x4343)));
evalcond[2]=((((-1.0)*x4341*x4346))+(((-1.0)*r12*x4345))+((x4335*x4337))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4344*x4345))+(((-1.0)*sj1*x4338))+(((-1.0)*cj1*sj2))+((x4336*x4342))+((r22*x4335)));
evalcond[4]=((((-1.0)*x4339*x4345))+(((-1.0)*cj0*cj1*x4338))+((x4336*x4343))+((r02*x4335))+((cj0*x4340)));
evalcond[5]=((((-1.0)*cj1*sj0*x4338))+(((-1.0)*x4341*x4345))+((r12*x4335))+((sj0*x4340))+((x4336*x4337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4347=((1.0)*gconst112);
CheckValue<IkReal> x4348=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r01))+(((-1.0)*r00*x4347)))),-1);
if(!x4348.valid){
continue;
}
CheckValue<IkReal> x4349 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst113*r20))+(((-1.0)*cj0*r21*x4347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4348.value)))+(x4349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4350=IKsin(j4);
IkReal x4351=IKcos(j4);
IkReal x4352=(gconst113*r10);
IkReal x4353=((1.0)*cj2);
IkReal x4354=(gconst112*r01);
IkReal x4355=(sj1*sj2);
IkReal x4356=(gconst112*r11);
IkReal x4357=(gconst113*r20);
IkReal x4358=(gconst113*r00);
IkReal x4359=(gconst112*r21);
IkReal x4360=((1.0)*x4351);
IkReal x4361=((1.0)*x4350);
evalcond[0]=(((x4350*x4357))+(((-1.0)*r22*x4360))+(((-1.0)*x4359*x4361)));
evalcond[1]=(((x4350*x4358))+sj0+(((-1.0)*x4354*x4361))+(((-1.0)*r02*x4360)));
evalcond[2]=(((x4350*x4352))+(((-1.0)*r12*x4360))+(((-1.0)*cj0))+(((-1.0)*x4356*x4361)));
evalcond[3]=(((x4351*x4357))+((r22*x4350))+(((-1.0)*x4359*x4360))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4353)));
evalcond[4]=(((cj0*x4355))+(((-1.0)*x4354*x4360))+((x4351*x4358))+((r02*x4350))+(((-1.0)*cj0*cj1*x4353)));
evalcond[5]=(((x4351*x4352))+((r12*x4350))+((sj0*x4355))+(((-1.0)*cj1*sj0*x4353))+(((-1.0)*x4356*x4360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4362=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4362;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4363=((1.0)*sj5);
IkReal x4364=((((-1.0)*r00*x4363))+(((-1.0)*cj5*r01)));
j4eval[0]=x4364;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4363)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4365=cj5*cj5;
IkReal x4366=r11*r11;
IkReal x4367=(r11*sj5);
IkReal x4368=(cj5*r10);
IkReal x4369=((r12*r12)+(((-1.0)*x4365*x4366))+((x4365*(r10*r10)))+(((-2.0)*x4367*x4368))+x4366);
j4eval[0]=x4369;
j4eval[1]=IKsign(x4369);
j4eval[2]=((IKabs(((((-1.0)*x4367))+x4368)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4370=cj5*cj5;
IkReal x4371=r11*r11;
IkReal x4372=(cj5*r10);
IkReal x4373=(r11*sj5);
CheckValue<IkReal> x4374=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4372*x4373))+(((-1.0)*x4370*x4371))+x4371+((x4370*(r10*r10))))),-1);
if(!x4374.valid){
continue;
}
CheckValue<IkReal> x4375 = IKatan2WithCheck(IkReal(((((-1.0)*x4373))+x4372)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4374.value)))+(x4375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4376=IKcos(j4);
IkReal x4377=IKsin(j4);
IkReal x4378=(cj5*r10);
IkReal x4379=((1.0)*cj1);
IkReal x4380=((1.0)*x4376);
IkReal x4381=(cj5*x4377);
IkReal x4382=(cj5*x4376);
IkReal x4383=((1.0)*sj5*x4377);
evalcond[0]=(((x4376*x4378))+((r12*x4377))+(((-1.0)*r11*sj5*x4380)));
evalcond[1]=((((-1.0)*r22*x4380))+((r20*x4381))+(((-1.0)*r21*x4383)));
evalcond[2]=((((-1.0)*r02*x4380))+((r00*x4381))+(((-1.0)*r01*x4383)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x4383))+(((-1.0)*r12*x4380))+((x4377*x4378)));
evalcond[4]=(((r00*x4382))+((r02*x4377))+(((-1.0)*r01*sj5*x4380))+((sj1*sj2))+(((-1.0)*cj2*x4379)));
evalcond[5]=(((r22*x4377))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4379))+(((-1.0)*r21*sj5*x4380))+((r20*x4382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4384=((1.0)*sj5);
CheckValue<IkReal> x4385 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4385.valid){
continue;
}
CheckValue<IkReal> x4386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4384))+(((-1.0)*cj5*r01)))),-1);
if(!x4386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4385.value)+(((1.5707963267949)*(x4386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4387=IKcos(j4);
IkReal x4388=IKsin(j4);
IkReal x4389=(cj5*r10);
IkReal x4390=((1.0)*cj1);
IkReal x4391=((1.0)*x4387);
IkReal x4392=(cj5*x4388);
IkReal x4393=(cj5*x4387);
IkReal x4394=((1.0)*sj5*x4388);
evalcond[0]=(((x4387*x4389))+(((-1.0)*r11*sj5*x4391))+((r12*x4388)));
evalcond[1]=((((-1.0)*r22*x4391))+((r20*x4392))+(((-1.0)*r21*x4394)));
evalcond[2]=((((-1.0)*r02*x4391))+(((-1.0)*r01*x4394))+((r00*x4392)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4391))+(((-1.0)*r11*x4394))+((x4388*x4389)));
evalcond[4]=((((-1.0)*r01*sj5*x4391))+((r02*x4388))+((sj1*sj2))+(((-1.0)*cj2*x4390))+((r00*x4393)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4388))+(((-1.0)*r21*sj5*x4391))+((r20*x4393))+(((-1.0)*sj2*x4390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4395=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4395.valid){
continue;
}
CheckValue<IkReal> x4396 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4395.value)))+(x4396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4397=IKcos(j4);
IkReal x4398=IKsin(j4);
IkReal x4399=(cj5*r10);
IkReal x4400=((1.0)*cj1);
IkReal x4401=((1.0)*x4397);
IkReal x4402=(cj5*x4398);
IkReal x4403=(cj5*x4397);
IkReal x4404=((1.0)*sj5*x4398);
evalcond[0]=((((-1.0)*r11*sj5*x4401))+((x4397*x4399))+((r12*x4398)));
evalcond[1]=((((-1.0)*r21*x4404))+((r20*x4402))+(((-1.0)*r22*x4401)));
evalcond[2]=(((r00*x4402))+(((-1.0)*r01*x4404))+(((-1.0)*r02*x4401)));
evalcond[3]=((-1.0)+((x4398*x4399))+(((-1.0)*r12*x4401))+(((-1.0)*r11*x4404)));
evalcond[4]=((((-1.0)*r01*sj5*x4401))+((sj1*sj2))+((r00*x4403))+((r02*x4398))+(((-1.0)*cj2*x4400)));
evalcond[5]=((((-1.0)*sj2*x4400))+(((-1.0)*r21*sj5*x4401))+((r22*x4398))+(((-1.0)*cj2*sj1))+((r20*x4403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4405=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4405;
j4eval[1]=IKsign(x4405);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4406=((1.0)*sj5);
IkReal x4407=((((-1.0)*r20*x4406))+(((-1.0)*cj5*r21)));
j4eval[0]=x4407;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4406))+((cj5*r00))))));
j4eval[2]=IKsign(x4407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4408=(sj1*sj2);
IkReal x4409=(cj5*r10);
IkReal x4410=(r11*sj5);
IkReal x4411=(cj1*cj2);
IkReal x4412=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4412;
j4eval[1]=IKsign(x4412);
j4eval[2]=((IKabs((((r12*x4408))+(((-1.0)*r12*x4411)))))+(IKabs(((((-1.0)*x4410*x4411))+(((-1.0)*x4408*x4409))+((x4409*x4411))+((x4408*x4410))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4413=(sj1*sj2);
IkReal x4414=(cj5*r10);
IkReal x4415=(r11*sj5);
IkReal x4416=(cj1*cj2);
CheckValue<IkReal> x4417 = IKatan2WithCheck(IkReal((((x4414*x4416))+(((-1.0)*x4413*x4414))+((x4413*x4415))+(((-1.0)*x4415*x4416)))),IkReal((((r12*x4413))+(((-1.0)*r12*x4416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4417.valid){
continue;
}
CheckValue<IkReal> x4418=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4417.value)+(((1.5707963267949)*(x4418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4419=IKcos(j4);
IkReal x4420=IKsin(j4);
IkReal x4421=(cj5*r10);
IkReal x4422=((1.0)*sj2);
IkReal x4423=((1.0)*x4419);
IkReal x4424=(cj5*x4420);
IkReal x4425=(cj5*x4419);
IkReal x4426=((1.0)*sj5*x4420);
evalcond[0]=((((-1.0)*r11*sj5*x4423))+((x4419*x4421))+((r12*x4420)));
evalcond[1]=(((r20*x4424))+(((-1.0)*r22*x4423))+(((-1.0)*r21*x4426)));
evalcond[2]=((((-1.0)*r01*x4426))+((r00*x4424))+(((-1.0)*r02*x4423)));
evalcond[3]=((1.0)+((x4420*x4421))+(((-1.0)*r12*x4423))+(((-1.0)*r11*x4426)));
evalcond[4]=((((-1.0)*r01*sj5*x4423))+((r02*x4420))+((r00*x4425))+(((-1.0)*sj1*x4422))+((cj1*cj2)));
evalcond[5]=(((r20*x4425))+(((-1.0)*cj2*sj1))+((r22*x4420))+(((-1.0)*r21*sj5*x4423))+(((-1.0)*cj1*x4422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4427=((1.0)*sj5);
CheckValue<IkReal> x4428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4427))+(((-1.0)*cj5*r21)))),-1);
if(!x4428.valid){
continue;
}
CheckValue<IkReal> x4429 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x4427))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4428.value)))+(x4429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4430=IKcos(j4);
IkReal x4431=IKsin(j4);
IkReal x4432=(cj5*r10);
IkReal x4433=((1.0)*sj2);
IkReal x4434=((1.0)*x4430);
IkReal x4435=(cj5*x4431);
IkReal x4436=(cj5*x4430);
IkReal x4437=((1.0)*sj5*x4431);
evalcond[0]=(((x4430*x4432))+((r12*x4431))+(((-1.0)*r11*sj5*x4434)));
evalcond[1]=(((r20*x4435))+(((-1.0)*r22*x4434))+(((-1.0)*r21*x4437)));
evalcond[2]=(((r00*x4435))+(((-1.0)*r02*x4434))+(((-1.0)*r01*x4437)));
evalcond[3]=((1.0)+(((-1.0)*r11*x4437))+(((-1.0)*r12*x4434))+((x4431*x4432)));
evalcond[4]=(((r00*x4436))+(((-1.0)*r01*sj5*x4434))+(((-1.0)*sj1*x4433))+((cj1*cj2))+((r02*x4431)));
evalcond[5]=(((r22*x4431))+(((-1.0)*cj2*sj1))+((r20*x4436))+(((-1.0)*cj1*x4433))+(((-1.0)*r21*sj5*x4434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4438=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4438.valid){
continue;
}
CheckValue<IkReal> x4439 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4438.value)))+(x4439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4440=IKcos(j4);
IkReal x4441=IKsin(j4);
IkReal x4442=(cj5*r10);
IkReal x4443=((1.0)*sj2);
IkReal x4444=((1.0)*x4440);
IkReal x4445=(cj5*x4441);
IkReal x4446=(cj5*x4440);
IkReal x4447=((1.0)*sj5*x4441);
evalcond[0]=(((x4440*x4442))+(((-1.0)*r11*sj5*x4444))+((r12*x4441)));
evalcond[1]=(((r20*x4445))+(((-1.0)*r22*x4444))+(((-1.0)*r21*x4447)));
evalcond[2]=(((r00*x4445))+(((-1.0)*r02*x4444))+(((-1.0)*r01*x4447)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4444))+(((-1.0)*r11*x4447))+((x4441*x4442)));
evalcond[4]=(((r00*x4446))+(((-1.0)*sj1*x4443))+((r02*x4441))+((cj1*cj2))+(((-1.0)*r01*sj5*x4444)));
evalcond[5]=(((r20*x4446))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4444))+(((-1.0)*cj1*x4443))+((r22*x4441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4448=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4448);
rxp0_2=(py*r00);
rxp1_0=(r21*x4448);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4449=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4449);
rxp0_2=(py*r00);
rxp1_0=(r21*x4449);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4450=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4450);
rxp0_2=(py*r00);
rxp1_0=(r21*x4450);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4453=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x4453.valid){
continue;
}
IkReal x4451=x4453.value;
IkReal x4452=(cj0*x4451);
cj4array[0]=(((cj1*cj2*x4452))+(((-1.0)*sj1*sj2*x4452)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4454=IKsin(j4);
IkReal x4455=IKcos(j4);
IkReal x4456=(cj5*r20);
IkReal x4457=((1.0)*sj5);
evalcond[0]=(r12*x4454);
evalcond[1]=((((-1.0)*r12*x4455))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x4454*x4457))+((x4454*x4456)));
evalcond[3]=((((-1.0)*r01*x4454*x4457))+((cj5*r00*x4454)));
evalcond[4]=((((-1.0)*cj2*sj1))+((x4455*x4456))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x4455*x4457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4459=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x4459.valid){
continue;
}
IkReal x4458=x4459.value;
cj4array[0]=(((cj1*sj2*x4458))+((cj2*sj1*x4458)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4460=IKsin(j4);
IkReal x4461=IKcos(j4);
IkReal x4462=(cj5*r00);
IkReal x4463=((1.0)*cj0);
IkReal x4464=((1.0)*r01*sj5);
evalcond[0]=(r12*x4460);
evalcond[1]=((((-1.0)*r12*x4461))+(((-1.0)*x4463)));
evalcond[2]=((((-1.0)*r21*sj5*x4460))+((cj5*r20*x4460)));
evalcond[3]=(((x4460*x4462))+(((-1.0)*x4460*x4464)));
evalcond[4]=((((-1.0)*cj1*cj2*x4463))+((cj0*sj1*sj2))+((x4461*x4462))+(((-1.0)*x4461*x4464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4465=IKPowWithIntegerCheck(r12,-1);
if(!x4465.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4465.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4466=IKsin(j4);
IkReal x4467=IKcos(j4);
IkReal x4468=((1.0)*cj1);
IkReal x4469=((1.0)*sj5);
IkReal x4470=(cj5*x4467);
IkReal x4471=(cj5*x4466);
evalcond[0]=(r12*x4466);
evalcond[1]=(((r20*x4471))+(((-1.0)*r21*x4466*x4469)));
evalcond[2]=((((-1.0)*r01*x4466*x4469))+((r00*x4471)));
evalcond[3]=(((r20*x4470))+(((-1.0)*r21*x4467*x4469))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4468)));
evalcond[4]=((((-1.0)*r01*x4467*x4469))+((r00*x4470))+(((-1.0)*cj0*cj2*x4468))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4472=((1.0)*sj5);
CheckValue<IkReal> x4473 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x4472))+(((-1.0)*cj0*r01*x4472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4473.valid){
continue;
}
CheckValue<IkReal> x4474=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4473.value)+(((1.5707963267949)*(x4474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4475=IKsin(j4);
IkReal x4476=IKcos(j4);
IkReal x4477=((1.0)*cj1);
IkReal x4478=(sj1*sj2);
IkReal x4479=(cj5*r10);
IkReal x4480=((1.0)*x4476);
IkReal x4481=(cj5*x4475);
IkReal x4482=(cj5*x4476);
IkReal x4483=((1.0)*sj5*x4475);
evalcond[0]=(((r20*x4481))+(((-1.0)*r21*x4483))+(((-1.0)*r22*x4480)));
evalcond[1]=(sj0+(((-1.0)*r01*x4483))+((r00*x4481))+(((-1.0)*r02*x4480)));
evalcond[2]=((((-1.0)*r11*x4483))+(((-1.0)*r12*x4480))+((x4475*x4479))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4482))+(((-1.0)*sj2*x4477))+(((-1.0)*r21*sj5*x4480))+(((-1.0)*cj2*sj1))+((r22*x4475)));
evalcond[4]=((((-1.0)*cj0*cj2*x4477))+((cj0*x4478))+(((-1.0)*r01*sj5*x4480))+((r02*x4475))+((r00*x4482)));
evalcond[5]=(((sj0*x4478))+((x4476*x4479))+(((-1.0)*cj2*sj0*x4477))+((r12*x4475))+(((-1.0)*r11*sj5*x4480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4484=((1.0)*sj5);
CheckValue<IkReal> x4485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4484))+(((-1.0)*cj5*r01)))),-1);
if(!x4485.valid){
continue;
}
CheckValue<IkReal> x4486 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4484))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4485.value)))+(x4486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4487=IKsin(j4);
IkReal x4488=IKcos(j4);
IkReal x4489=((1.0)*cj1);
IkReal x4490=(sj1*sj2);
IkReal x4491=(cj5*r10);
IkReal x4492=((1.0)*x4488);
IkReal x4493=(cj5*x4487);
IkReal x4494=(cj5*x4488);
IkReal x4495=((1.0)*sj5*x4487);
evalcond[0]=((((-1.0)*r21*x4495))+(((-1.0)*r22*x4492))+((r20*x4493)));
evalcond[1]=((((-1.0)*r02*x4492))+sj0+((r00*x4493))+(((-1.0)*r01*x4495)));
evalcond[2]=((((-1.0)*r11*x4495))+((x4487*x4491))+(((-1.0)*cj0))+(((-1.0)*r12*x4492)));
evalcond[3]=((((-1.0)*r21*sj5*x4492))+(((-1.0)*sj2*x4489))+(((-1.0)*cj2*sj1))+((r22*x4487))+((r20*x4494)));
evalcond[4]=(((cj0*x4490))+(((-1.0)*r01*sj5*x4492))+((r02*x4487))+(((-1.0)*cj0*cj2*x4489))+((r00*x4494)));
evalcond[5]=(((x4488*x4491))+((sj0*x4490))+(((-1.0)*cj2*sj0*x4489))+(((-1.0)*r11*sj5*x4492))+((r12*x4487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4496=((1.0)*sj5);
CheckValue<IkReal> x4497 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4497.valid){
continue;
}
CheckValue<IkReal> x4498=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4496)))),-1);
if(!x4498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4497.value)+(((1.5707963267949)*(x4498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4499=IKsin(j4);
IkReal x4500=IKcos(j4);
IkReal x4501=((1.0)*cj1);
IkReal x4502=(sj1*sj2);
IkReal x4503=(cj5*r10);
IkReal x4504=((1.0)*x4500);
IkReal x4505=(cj5*x4499);
IkReal x4506=(cj5*x4500);
IkReal x4507=((1.0)*sj5*x4499);
evalcond[0]=((((-1.0)*r22*x4504))+((r20*x4505))+(((-1.0)*r21*x4507)));
evalcond[1]=(sj0+(((-1.0)*r01*x4507))+(((-1.0)*r02*x4504))+((r00*x4505)));
evalcond[2]=((((-1.0)*r12*x4504))+(((-1.0)*r11*x4507))+(((-1.0)*cj0))+((x4499*x4503)));
evalcond[3]=((((-1.0)*sj2*x4501))+(((-1.0)*cj2*sj1))+((r22*x4499))+(((-1.0)*r21*sj5*x4504))+((r20*x4506)));
evalcond[4]=((((-1.0)*cj0*cj2*x4501))+((cj0*x4502))+((r02*x4499))+((r00*x4506))+(((-1.0)*r01*sj5*x4504)));
evalcond[5]=(((r12*x4499))+(((-1.0)*cj2*sj0*x4501))+((sj0*x4502))+((x4500*x4503))+(((-1.0)*r11*sj5*x4504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4508=r21*r21;
IkReal x4509=cj5*cj5;
IkReal x4510=(cj5*r20);
IkReal x4511=(cj1*sj2);
IkReal x4512=(r21*sj5);
IkReal x4513=((1.0)*cj2*sj1);
CheckValue<IkReal> x4514 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4511))+(((-1.0)*r22*x4513)))),IkReal((((cj2*sj1*x4512))+((x4511*x4512))+(((-1.0)*x4510*x4511))+(((-1.0)*x4510*x4513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4514.valid){
continue;
}
CheckValue<IkReal> x4515=IKPowWithIntegerCheck(IKsign((((x4508*x4509))+(((-1.0)*x4509*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4508))+(((2.0)*x4510*x4512)))),-1);
if(!x4515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4514.value)+(((1.5707963267949)*(x4515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4516=IKsin(j4);
IkReal x4517=IKcos(j4);
IkReal x4518=(r21*sj5);
IkReal x4519=(cj5*r20);
IkReal x4520=((1.0)*x4517);
evalcond[0]=(((x4516*x4519))+(((-1.0)*x4516*x4518))+(((-1.0)*r22*x4520)));
evalcond[1]=(((x4517*x4519))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x4518*x4520))+((r22*x4516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4521=(cj5*sj4);
IkReal x4522=(sj4*sj5);
if( IKabs((((r01*x4522))+(((-1.0)*r00*x4521))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4522))+((r10*x4521))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x4522))+(((-1.0)*r00*x4521))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x4522))+((r10*x4521))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x4522))+(((-1.0)*r00*x4521))+((cj4*r02))), ((((-1.0)*r11*x4522))+((r10*x4521))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4523=IKcos(j0);
IkReal x4524=IKsin(j0);
IkReal x4525=(cj5*r10);
IkReal x4526=(sj1*sj2);
IkReal x4527=(cj5*r00);
IkReal x4528=(cj5*r01);
IkReal x4529=(cj5*r11);
IkReal x4530=(cj1*cj2);
IkReal x4531=(r00*sj5);
IkReal x4532=((1.0)*cj4);
IkReal x4533=(cj2*sj1);
IkReal x4534=(r10*sj5);
IkReal x4535=((0.712)*x4523);
IkReal x4536=((1.0)*sj4*sj5);
IkReal x4537=(cj1*x4523);
IkReal x4538=((0.712)*x4524);
IkReal x4539=(cj1*x4524);
evalcond[0]=((((-1.0)*r01*x4536))+x4524+((sj4*x4527))+(((-1.0)*r02*x4532)));
evalcond[1]=((((-1.0)*r11*x4536))+(((-1.0)*x4523))+((sj4*x4525))+(((-1.0)*r12*x4532)));
evalcond[2]=(x4531+x4528+((sj2*x4537))+((x4523*x4533)));
evalcond[3]=(x4534+x4529+((x4524*x4533))+((sj2*x4539)));
evalcond[4]=(((x4523*x4526))+((cj4*x4527))+((r02*sj4))+(((-1.0)*r01*sj5*x4532))+(((-1.0)*x4523*x4530)));
evalcond[5]=(((cj4*x4525))+(((-1.0)*x4524*x4530))+((x4524*x4526))+((r12*sj4))+(((-1.0)*r11*sj5*x4532)));
evalcond[6]=((((-1.0)*x4530*x4535))+((x4526*x4535))+(((0.138)*x4528))+(((0.138)*x4531))+(((0.179)*x4524))+(((-1.0)*px))+(((-0.85)*x4537)));
evalcond[7]=((((-1.0)*x4530*x4538))+((x4526*x4538))+(((0.138)*x4529))+(((0.138)*x4534))+(((-0.179)*x4523))+(((-1.0)*py))+(((-0.85)*x4539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4540=((1.0)*cj5);
IkReal x4541=((1.0)*sj5);
CheckValue<IkReal> x4542=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x4542.valid){
continue;
}
CheckValue<IkReal> x4543 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4541))+(((-1.0)*r11*x4540)))),IkReal(((((-1.0)*r00*x4541))+(((-1.0)*r01*x4540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4543.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4542.value)))+(x4543.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4544=IKcos(j0);
IkReal x4545=IKsin(j0);
IkReal x4546=(sj1*sj2);
IkReal x4547=(cj1*cj2);
IkReal x4548=(cj5*r01);
IkReal x4549=(cj5*r11);
IkReal x4550=((0.85)*cj1);
IkReal x4551=(cj2*sj1);
IkReal x4552=(r00*sj5);
IkReal x4553=(r10*sj5);
IkReal x4554=(cj1*sj2);
IkReal x4555=((0.712)*x4544);
IkReal x4556=((0.712)*x4545);
evalcond[0]=(x4552+x4548+((x4544*x4551))+((x4544*x4554)));
evalcond[1]=(x4553+x4549+((x4545*x4554))+((x4545*x4551)));
evalcond[2]=((((0.138)*x4548))+((x4546*x4555))+(((-1.0)*x4547*x4555))+(((-1.0)*x4544*x4550))+(((-1.0)*px))+(((0.138)*x4552))+(((0.179)*x4545)));
evalcond[3]=((((0.138)*x4549))+((x4546*x4556))+(((-1.0)*x4547*x4556))+(((-1.0)*py))+(((-1.0)*x4545*x4550))+(((0.138)*x4553))+(((-0.179)*x4544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4557=((1.0)*sj5);
IkReal x4558=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4557)));
j4eval[0]=x4558;
j4eval[1]=IKsign(x4558);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4557))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4559=((1.0)*sj5);
IkReal x4560=((((-1.0)*r00*x4559))+(((-1.0)*cj5*r01)));
j4eval[0]=x4560;
j4eval[1]=IKsign(x4560);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4559)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4561=((1.0)*sj5);
IkReal x4562=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4562;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x4561))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x4561))))));
j4eval[2]=IKsign(x4562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4564 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4564)==0){
continue;
}
IkReal x4563=pow(x4564,-0.5);
CheckValue<IkReal> x4565 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4565.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4565.value));
IkReal gconst97=((-1.0)*r21*x4563);
IkReal gconst98=(r20*x4563);
CheckValue<IkReal> x4566 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4566.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4566.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4569 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4569.valid){
continue;
}
IkReal x4567=((-1.0)*(x4569.value));
IkReal x4568=x4563;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4567;
IkReal gconst96=x4567;
IkReal gconst97=((-1.0)*r21*x4568);
IkReal gconst98=(r20*x4568);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4572 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4572.valid){
continue;
}
IkReal x4570=((-1.0)*(x4572.value));
IkReal x4571=x4563;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4570;
IkReal gconst96=x4570;
IkReal gconst97=((-1.0)*r21*x4571);
IkReal gconst98=(r20*x4571);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x4575 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4575.valid){
continue;
}
IkReal x4573=((-1.0)*(x4575.value));
IkReal x4574=x4563;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4573;
IkReal gconst96=x4573;
IkReal gconst97=((-1.0)*r21*x4574);
IkReal gconst98=(r20*x4574);
IkReal x4576=((1.0)*(r22*r22));
CheckValue<IkReal> x4580=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4576))),-1);
if(!x4580.valid){
continue;
}
IkReal x4577=x4580.value;
IkReal x4578=((1.0)*x4577);
IkReal x4579=((((-1.0)*x4576))+(((-1.0)*x4578*(r20*r20*r20*r20)))+(((-1.0)*x4578*(r21*r21*r21*r21)))+(((-2.0)*x4577*(r20*r20)*(r21*r21))));
j4eval[0]=x4579;
j4eval[1]=IKsign(x4579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4581=(cj1*sj2);
IkReal x4582=((1.0)*r22);
IkReal x4583=(gconst97*r21);
IkReal x4584=(cj2*sj1);
IkReal x4585=(gconst98*r20);
CheckValue<IkReal> x4586=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x4582))+(((-1.0)*(x4583*x4583)))+(((-1.0)*(x4585*x4585)))+(((2.0)*x4583*x4585)))),-1);
if(!x4586.valid){
continue;
}
CheckValue<IkReal> x4587 = IKatan2WithCheck(IkReal(((((-1.0)*x4581*x4582))+(((-1.0)*x4582*x4584)))),IkReal(((((-1.0)*x4584*x4585))+((x4581*x4583))+((x4583*x4584))+(((-1.0)*x4581*x4585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4586.value)))+(x4587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4588=IKsin(j4);
IkReal x4589=IKcos(j4);
IkReal x4590=(gconst98*r00);
IkReal x4591=(sj1*sj2);
IkReal x4592=((1.0)*cj2);
IkReal x4593=((1.0)*x4589);
IkReal x4594=(gconst98*x4588);
IkReal x4595=(gconst98*x4589);
IkReal x4596=((1.0)*gconst97*x4588);
evalcond[0]=((((-1.0)*r22*x4593))+((r20*x4594))+(((-1.0)*r21*x4596)));
evalcond[1]=(sj0+(((-1.0)*r01*x4596))+(((-1.0)*r02*x4593))+((x4588*x4590)));
evalcond[2]=((((-1.0)*r12*x4593))+((r10*x4594))+(((-1.0)*r11*x4596))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4588))+(((-1.0)*gconst97*r21*x4593))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4592))+((r20*x4595)));
evalcond[4]=((((-1.0)*cj0*cj1*x4592))+((r02*x4588))+(((-1.0)*gconst97*r01*x4593))+((x4589*x4590))+((cj0*x4591)));
evalcond[5]=(((sj0*x4591))+(((-1.0)*gconst97*r11*x4593))+((r12*x4588))+((r10*x4595))+(((-1.0)*cj1*sj0*x4592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4597=((1.0)*gconst97);
CheckValue<IkReal> x4598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4597))+(((-1.0)*gconst98*r01)))),-1);
if(!x4598.valid){
continue;
}
CheckValue<IkReal> x4599 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4597))+((cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4598.value)))+(x4599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4600=IKsin(j4);
IkReal x4601=IKcos(j4);
IkReal x4602=(gconst98*r00);
IkReal x4603=(sj1*sj2);
IkReal x4604=((1.0)*cj2);
IkReal x4605=((1.0)*x4601);
IkReal x4606=(gconst98*x4600);
IkReal x4607=(gconst98*x4601);
IkReal x4608=((1.0)*gconst97*x4600);
evalcond[0]=(((r20*x4606))+(((-1.0)*r21*x4608))+(((-1.0)*r22*x4605)));
evalcond[1]=(sj0+(((-1.0)*r02*x4605))+((x4600*x4602))+(((-1.0)*r01*x4608)));
evalcond[2]=(((r10*x4606))+(((-1.0)*r12*x4605))+(((-1.0)*r11*x4608))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4607))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst97*r21*x4605))+(((-1.0)*sj1*x4604))+((r22*x4600)));
evalcond[4]=(((cj0*x4603))+((x4601*x4602))+(((-1.0)*cj0*cj1*x4604))+(((-1.0)*gconst97*r01*x4605))+((r02*x4600)));
evalcond[5]=(((r12*x4600))+(((-1.0)*gconst97*r11*x4605))+((r10*x4607))+((sj0*x4603))+(((-1.0)*cj1*sj0*x4604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4609=((1.0)*gconst97);
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst98*r11))+(((-1.0)*r10*x4609)))),-1);
if(!x4610.valid){
continue;
}
CheckValue<IkReal> x4611 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x4609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4610.value)))+(x4611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4612=IKsin(j4);
IkReal x4613=IKcos(j4);
IkReal x4614=(gconst98*r00);
IkReal x4615=(sj1*sj2);
IkReal x4616=((1.0)*cj2);
IkReal x4617=((1.0)*x4613);
IkReal x4618=(gconst98*x4612);
IkReal x4619=(gconst98*x4613);
IkReal x4620=((1.0)*gconst97*x4612);
evalcond[0]=(((r20*x4618))+(((-1.0)*r21*x4620))+(((-1.0)*r22*x4617)));
evalcond[1]=((((-1.0)*r02*x4617))+sj0+(((-1.0)*r01*x4620))+((x4612*x4614)));
evalcond[2]=(((r10*x4618))+(((-1.0)*r12*x4617))+(((-1.0)*r11*x4620))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4619))+(((-1.0)*sj1*x4616))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst97*r21*x4617))+((r22*x4612)));
evalcond[4]=(((r02*x4612))+(((-1.0)*cj0*cj1*x4616))+(((-1.0)*gconst97*r01*x4617))+((x4613*x4614))+((cj0*x4615)));
evalcond[5]=(((r10*x4619))+(((-1.0)*cj1*sj0*x4616))+((sj0*x4615))+((r12*x4612))+(((-1.0)*gconst97*r11*x4617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4622 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4622)==0){
continue;
}
IkReal x4621=pow(x4622,-0.5);
CheckValue<IkReal> x4623 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4623.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4623.value))));
IkReal gconst100=((1.0)*r21*x4621);
IkReal gconst101=((-1.0)*r20*x4621);
CheckValue<IkReal> x4624 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4624.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4624.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4627 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4627.valid){
continue;
}
IkReal x4625=((1.0)*(x4627.value));
IkReal x4626=x4621;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4625)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4625)));
IkReal gconst100=((1.0)*r21*x4626);
IkReal gconst101=((-1.0)*r20*x4626);
IkReal x4628=r22*r22;
IkReal x4629=((1.0)*x4628);
CheckValue<IkReal> x4633=IKPowWithIntegerCheck(((-1.0)+x4628),-1);
if(!x4633.valid){
continue;
}
IkReal x4630=x4633.value;
if((((1.0)+(((-1.0)*x4629)))) < -0.00001)
continue;
IkReal x4631=IKsqrt(((1.0)+(((-1.0)*x4629))));
IkReal x4632=(sj0*x4630*x4631);
j4eval[0]=((IKabs((x4632+(((-1.0)*x4629*x4632)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4636 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4636.valid){
continue;
}
IkReal x4634=((1.0)*(x4636.value));
IkReal x4635=x4621;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4634)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4634)));
IkReal gconst100=((1.0)*r21*x4635);
IkReal gconst101=((-1.0)*r20*x4635);
IkReal x4637=r22*r22;
IkReal x4638=((1.0)*x4637);
CheckValue<IkReal> x4642=IKPowWithIntegerCheck(((-1.0)+x4637),-1);
if(!x4642.valid){
continue;
}
IkReal x4639=x4642.value;
if((((1.0)+(((-1.0)*x4638)))) < -0.00001)
continue;
IkReal x4640=IKsqrt(((1.0)+(((-1.0)*x4638))));
IkReal x4641=(cj0*x4639*x4640);
j4eval[0]=((IKabs((x4641+(((-1.0)*x4638*x4641)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4645 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4645.valid){
continue;
}
IkReal x4643=((1.0)*(x4645.value));
IkReal x4644=x4621;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4643)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4643)));
IkReal gconst100=((1.0)*r21*x4644);
IkReal gconst101=((-1.0)*r20*x4644);
IkReal x4646=r22*r22;
IkReal x4647=(cj0*r02);
IkReal x4648=(r12*sj0);
CheckValue<IkReal> x4652=IKPowWithIntegerCheck(((-1.0)+x4646),-1);
if(!x4652.valid){
continue;
}
IkReal x4649=x4652.value;
if((((1.0)+(((-1.0)*x4646)))) < -0.00001)
continue;
IkReal x4650=IKsqrt(((1.0)+(((-1.0)*x4646))));
IkReal x4651=((1.0)*r22*x4649*x4650);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x4648+x4647)))+(IKabs(((((-1.0)*x4647*x4651))+(((-1.0)*x4648*x4651))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4653=((1.0)*gconst100);
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x4654.valid){
continue;
}
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4653))+(((-1.0)*r11*sj0*x4653))+((gconst101*r10*sj0))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4654.value)))+(x4655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4656=IKsin(j4);
IkReal x4657=IKcos(j4);
IkReal x4658=((1.0)*cj2);
IkReal x4659=(sj1*sj2);
IkReal x4660=(gconst101*r10);
IkReal x4661=((1.0)*x4657);
IkReal x4662=(gconst101*x4657);
IkReal x4663=(gconst101*x4656);
IkReal x4664=((1.0)*gconst100*x4656);
evalcond[0]=((((-1.0)*r21*x4664))+(((-1.0)*r22*x4661))+((r20*x4663)));
evalcond[1]=(sj0+(((-1.0)*r01*x4664))+((r00*x4663))+(((-1.0)*r02*x4661)));
evalcond[2]=((((-1.0)*r11*x4664))+(((-1.0)*r12*x4661))+((x4656*x4660))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst100*r21*x4661))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4658))+((r22*x4656))+((r20*x4662)));
evalcond[4]=(((cj0*x4659))+(((-1.0)*gconst100*r01*x4661))+((r02*x4656))+((r00*x4662))+(((-1.0)*cj0*cj1*x4658)));
evalcond[5]=(((sj0*x4659))+(((-1.0)*gconst100*r11*x4661))+((r12*x4656))+(((-1.0)*cj1*sj0*x4658))+((x4657*x4660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4665=((1.0)*gconst100);
CheckValue<IkReal> x4666 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4665))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4666.valid){
continue;
}
CheckValue<IkReal> x4667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4665))+(((-1.0)*gconst101*r01)))),-1);
if(!x4667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4666.value)+(((1.5707963267949)*(x4667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4668=IKsin(j4);
IkReal x4669=IKcos(j4);
IkReal x4670=((1.0)*cj2);
IkReal x4671=(sj1*sj2);
IkReal x4672=(gconst101*r10);
IkReal x4673=((1.0)*x4669);
IkReal x4674=(gconst101*x4669);
IkReal x4675=(gconst101*x4668);
IkReal x4676=((1.0)*gconst100*x4668);
evalcond[0]=((((-1.0)*r21*x4676))+(((-1.0)*r22*x4673))+((r20*x4675)));
evalcond[1]=((((-1.0)*r02*x4673))+sj0+((r00*x4675))+(((-1.0)*r01*x4676)));
evalcond[2]=((((-1.0)*r11*x4676))+((x4668*x4672))+(((-1.0)*r12*x4673))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst100*r21*x4673))+(((-1.0)*cj1*sj2))+((r22*x4668))+((r20*x4674))+(((-1.0)*sj1*x4670)));
evalcond[4]=(((cj0*x4671))+((r02*x4668))+(((-1.0)*gconst100*r01*x4673))+(((-1.0)*cj0*cj1*x4670))+((r00*x4674)));
evalcond[5]=((((-1.0)*cj1*sj0*x4670))+(((-1.0)*gconst100*r11*x4673))+((r12*x4668))+((sj0*x4671))+((x4669*x4672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4677=((1.0)*gconst100);
CheckValue<IkReal> x4678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4677))+(((-1.0)*gconst101*r11)))),-1);
if(!x4678.valid){
continue;
}
CheckValue<IkReal> x4679 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4677))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4678.value)))+(x4679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4680=IKsin(j4);
IkReal x4681=IKcos(j4);
IkReal x4682=((1.0)*cj2);
IkReal x4683=(sj1*sj2);
IkReal x4684=(gconst101*r10);
IkReal x4685=((1.0)*x4681);
IkReal x4686=(gconst101*x4681);
IkReal x4687=(gconst101*x4680);
IkReal x4688=((1.0)*gconst100*x4680);
evalcond[0]=(((r20*x4687))+(((-1.0)*r22*x4685))+(((-1.0)*r21*x4688)));
evalcond[1]=(sj0+(((-1.0)*r01*x4688))+(((-1.0)*r02*x4685))+((r00*x4687)));
evalcond[2]=((((-1.0)*r11*x4688))+((x4680*x4684))+(((-1.0)*cj0))+(((-1.0)*r12*x4685)));
evalcond[3]=(((r20*x4686))+(((-1.0)*sj1*x4682))+(((-1.0)*cj1*sj2))+((r22*x4680))+(((-1.0)*gconst100*r21*x4685)));
evalcond[4]=(((r02*x4680))+(((-1.0)*gconst100*r01*x4685))+((r00*x4686))+((cj0*x4683))+(((-1.0)*cj0*cj1*x4682)));
evalcond[5]=(((x4681*x4684))+((r12*x4680))+(((-1.0)*cj1*sj0*x4682))+((sj0*x4683))+(((-1.0)*gconst100*r11*x4685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4689=((-1.0)*r00);
IkReal x4691 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4691)==0){
continue;
}
IkReal x4690=pow(x4691,-0.5);
CheckValue<IkReal> x4692 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4689),IKFAST_ATAN2_MAGTHRESH);
if(!x4692.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4692.value));
IkReal gconst103=(r01*x4690);
IkReal gconst104=(x4689*x4690);
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4693.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4694=((-1.0)*r00);
IkReal x4695=x4690;
CheckValue<IkReal> x4697 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4694),IKFAST_ATAN2_MAGTHRESH);
if(!x4697.valid){
continue;
}
IkReal x4696=((-1.0)*(x4697.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4696;
IkReal gconst102=x4696;
IkReal gconst103=(r01*x4695);
IkReal gconst104=(x4694*x4695);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4698=((1.0)*gconst103);
CheckValue<IkReal> x4699=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x4699.valid){
continue;
}
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4698))+(((-1.0)*cj0*r01*x4698))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4699.value)))+(x4700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4701=IKsin(j4);
IkReal x4702=IKcos(j4);
IkReal x4703=((1.0)*cj2);
IkReal x4704=(sj1*sj2);
IkReal x4705=((1.0)*x4702);
IkReal x4706=(gconst104*x4702);
IkReal x4707=(gconst104*x4701);
IkReal x4708=((1.0)*gconst103*x4701);
evalcond[0]=((((-1.0)*r22*x4705))+((r20*x4707))+(((-1.0)*r21*x4708)));
evalcond[1]=(sj0+(((-1.0)*r01*x4708))+(((-1.0)*r02*x4705))+((r00*x4707)));
evalcond[2]=(((r10*x4707))+(((-1.0)*r12*x4705))+(((-1.0)*r11*x4708))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4703))+((r20*x4706))+(((-1.0)*gconst103*r21*x4705))+((r22*x4701)));
evalcond[4]=((((-1.0)*gconst103*r01*x4705))+((cj0*x4704))+((r00*x4706))+((r02*x4701))+(((-1.0)*cj0*cj1*x4703)));
evalcond[5]=(((r10*x4706))+(((-1.0)*gconst103*r11*x4705))+((sj0*x4704))+(((-1.0)*cj1*sj0*x4703))+((r12*x4701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4709=((1.0)*gconst103);
CheckValue<IkReal> x4710=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r11))+(((-1.0)*r10*x4709)))),-1);
if(!x4710.valid){
continue;
}
CheckValue<IkReal> x4711 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x4709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4710.value)))+(x4711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4712=IKsin(j4);
IkReal x4713=IKcos(j4);
IkReal x4714=((1.0)*cj2);
IkReal x4715=(sj1*sj2);
IkReal x4716=((1.0)*x4713);
IkReal x4717=(gconst104*x4713);
IkReal x4718=(gconst104*x4712);
IkReal x4719=((1.0)*gconst103*x4712);
evalcond[0]=((((-1.0)*r22*x4716))+(((-1.0)*r21*x4719))+((r20*x4718)));
evalcond[1]=((((-1.0)*r02*x4716))+sj0+((r00*x4718))+(((-1.0)*r01*x4719)));
evalcond[2]=(((r10*x4718))+(((-1.0)*r11*x4719))+(((-1.0)*r12*x4716))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4712))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4714))+((r20*x4717))+(((-1.0)*gconst103*r21*x4716)));
evalcond[4]=((((-1.0)*gconst103*r01*x4716))+((cj0*x4715))+((r00*x4717))+(((-1.0)*cj0*cj1*x4714))+((r02*x4712)));
evalcond[5]=(((r10*x4717))+(((-1.0)*gconst103*r11*x4716))+((sj0*x4715))+((r12*x4712))+(((-1.0)*cj1*sj0*x4714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4720=((-1.0)*r01);
IkReal x4722 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4722)==0){
continue;
}
IkReal x4721=pow(x4722,-0.5);
CheckValue<IkReal> x4723 = IKatan2WithCheck(IkReal(x4720),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4723.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4723.value))));
IkReal gconst106=(x4720*x4721);
IkReal gconst107=((1.0)*r00*x4721);
CheckValue<IkReal> x4724 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4725=((-1.0)*r01);
CheckValue<IkReal> x4728 = IKatan2WithCheck(IkReal(x4725),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4728.valid){
continue;
}
IkReal x4726=((1.0)*(x4728.value));
IkReal x4727=x4721;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4726)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4726)));
IkReal gconst106=(x4725*x4727);
IkReal gconst107=((1.0)*r00*x4727);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4729=((-1.0)*r01);
CheckValue<IkReal> x4732 = IKatan2WithCheck(IkReal(x4729),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4732.valid){
continue;
}
IkReal x4730=((1.0)*(x4732.value));
IkReal x4731=x4721;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4730)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4730)));
IkReal gconst106=(x4729*x4731);
IkReal gconst107=((1.0)*r00*x4731);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4733=((-1.0)*r01);
CheckValue<IkReal> x4736 = IKatan2WithCheck(IkReal(x4733),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4736.valid){
continue;
}
IkReal x4734=((1.0)*(x4736.value));
IkReal x4735=x4721;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4734)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4734)));
IkReal gconst106=(x4733*x4735);
IkReal gconst107=((1.0)*r00*x4735);
IkReal x4737=r02*r02;
IkReal x4738=(r12*sj0);
IkReal x4739=x4721;
IkReal x4740=(cj0*x4739);
j4eval[0]=((IKabs((x4738+((cj0*r02)))))+(IKabs((((x4737*x4740))+((r02*x4738*x4739))+(((-1.0)*x4740))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4741=((1.0)*gconst106);
CheckValue<IkReal> x4742=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4742.valid){
continue;
}
CheckValue<IkReal> x4743 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4741))+((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4741))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4742.value)))+(x4743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4744=IKsin(j4);
IkReal x4745=IKcos(j4);
IkReal x4746=(gconst106*r01);
IkReal x4747=((1.0)*cj2);
IkReal x4748=(sj1*sj2);
IkReal x4749=(gconst106*r21);
IkReal x4750=(gconst106*r11);
IkReal x4751=((1.0)*x4745);
IkReal x4752=((1.0)*x4744);
IkReal x4753=(gconst107*x4744);
IkReal x4754=(gconst107*x4745);
evalcond[0]=((((-1.0)*x4749*x4752))+((r20*x4753))+(((-1.0)*r22*x4751)));
evalcond[1]=(sj0+((r00*x4753))+(((-1.0)*x4746*x4752))+(((-1.0)*r02*x4751)));
evalcond[2]=((((-1.0)*x4750*x4752))+(((-1.0)*r12*x4751))+((r10*x4753))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4749*x4751))+(((-1.0)*sj1*x4747))+((r20*x4754))+(((-1.0)*cj1*sj2))+((r22*x4744)));
evalcond[4]=(((cj0*x4748))+((r00*x4754))+(((-1.0)*x4746*x4751))+((r02*x4744))+(((-1.0)*cj0*cj1*x4747)));
evalcond[5]=((((-1.0)*cj1*sj0*x4747))+(((-1.0)*x4750*x4751))+((r12*x4744))+((r10*x4754))+((sj0*x4748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4755=((1.0)*gconst106);
CheckValue<IkReal> x4756 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x4755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4756.valid){
continue;
}
CheckValue<IkReal> x4757=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4755))+(((-1.0)*gconst107*r01)))),-1);
if(!x4757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4756.value)+(((1.5707963267949)*(x4757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4758=IKsin(j4);
IkReal x4759=IKcos(j4);
IkReal x4760=(gconst106*r01);
IkReal x4761=((1.0)*cj2);
IkReal x4762=(sj1*sj2);
IkReal x4763=(gconst106*r21);
IkReal x4764=(gconst106*r11);
IkReal x4765=((1.0)*x4759);
IkReal x4766=((1.0)*x4758);
IkReal x4767=(gconst107*x4758);
IkReal x4768=(gconst107*x4759);
evalcond[0]=((((-1.0)*r22*x4765))+(((-1.0)*x4763*x4766))+((r20*x4767)));
evalcond[1]=((((-1.0)*x4760*x4766))+sj0+(((-1.0)*r02*x4765))+((r00*x4767)));
evalcond[2]=((((-1.0)*r12*x4765))+(((-1.0)*x4764*x4766))+(((-1.0)*cj0))+((r10*x4767)));
evalcond[3]=((((-1.0)*x4763*x4765))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4761))+((r20*x4768))+((r22*x4758)));
evalcond[4]=((((-1.0)*x4760*x4765))+((cj0*x4762))+((r00*x4768))+((r02*x4758))+(((-1.0)*cj0*cj1*x4761)));
evalcond[5]=(((r12*x4758))+((sj0*x4762))+(((-1.0)*cj1*sj0*x4761))+(((-1.0)*x4764*x4765))+((r10*x4768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4769=((1.0)*gconst106);
CheckValue<IkReal> x4770 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x4769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4770.valid){
continue;
}
CheckValue<IkReal> x4771=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r11))+(((-1.0)*r10*x4769)))),-1);
if(!x4771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4770.value)+(((1.5707963267949)*(x4771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4772=IKsin(j4);
IkReal x4773=IKcos(j4);
IkReal x4774=(gconst106*r01);
IkReal x4775=((1.0)*cj2);
IkReal x4776=(sj1*sj2);
IkReal x4777=(gconst106*r21);
IkReal x4778=(gconst106*r11);
IkReal x4779=((1.0)*x4773);
IkReal x4780=((1.0)*x4772);
IkReal x4781=(gconst107*x4772);
IkReal x4782=(gconst107*x4773);
evalcond[0]=((((-1.0)*x4777*x4780))+(((-1.0)*r22*x4779))+((r20*x4781)));
evalcond[1]=(sj0+((r00*x4781))+(((-1.0)*x4774*x4780))+(((-1.0)*r02*x4779)));
evalcond[2]=(((r10*x4781))+(((-1.0)*r12*x4779))+(((-1.0)*x4778*x4780))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4777*x4779))+(((-1.0)*sj1*x4775))+(((-1.0)*cj1*sj2))+((r20*x4782))+((r22*x4772)));
evalcond[4]=(((cj0*x4776))+((r00*x4782))+(((-1.0)*x4774*x4779))+((r02*x4772))+(((-1.0)*cj0*cj1*x4775)));
evalcond[5]=((((-1.0)*cj1*sj0*x4775))+((r10*x4782))+(((-1.0)*x4778*x4779))+((r12*x4772))+((sj0*x4776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4783=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4783;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4784=((1.0)*sj5);
IkReal x4785=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4784)));
j4eval[0]=x4785;
j4eval[1]=IKsign(x4785);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4784))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4786=(cj1*cj2);
IkReal x4787=(cj5*r00);
IkReal x4788=(r01*sj5);
IkReal x4789=((1.0)*sj1*sj2);
IkReal x4790=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4790;
j4eval[1]=((IKabs((((r02*x4786))+(((-1.0)*r02*x4789)))))+(IKabs(((((-1.0)*x4788*x4789))+((x4786*x4788))+((sj1*sj2*x4787))+(((-1.0)*x4786*x4787))))));
j4eval[2]=IKsign(x4790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4791=(r01*sj5);
IkReal x4792=(cj1*cj2);
IkReal x4793=(cj5*r00);
IkReal x4794=((1.0)*sj1*sj2);
CheckValue<IkReal> x4795=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4795.valid){
continue;
}
CheckValue<IkReal> x4796 = IKatan2WithCheck(IkReal((((sj1*sj2*x4793))+(((-1.0)*x4792*x4793))+((x4791*x4792))+(((-1.0)*x4791*x4794)))),IkReal(((((-1.0)*r02*x4794))+((r02*x4792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4795.value)))+(x4796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4797=IKcos(j4);
IkReal x4798=IKsin(j4);
IkReal x4799=((1.0)*cj1);
IkReal x4800=((1.0)*x4797);
IkReal x4801=(cj5*x4797);
IkReal x4802=(cj5*x4798);
IkReal x4803=((1.0)*sj5*x4798);
evalcond[0]=((((-1.0)*r01*sj5*x4800))+((r00*x4801))+((r02*x4798)));
evalcond[1]=((((-1.0)*r22*x4800))+(((-1.0)*r21*x4803))+((r20*x4802)));
evalcond[2]=((((-1.0)*r11*x4803))+((r10*x4802))+(((-1.0)*r12*x4800)));
evalcond[3]=((1.0)+((r00*x4802))+(((-1.0)*r01*x4803))+(((-1.0)*r02*x4800)));
evalcond[4]=((((-1.0)*r11*sj5*x4800))+((sj1*sj2))+(((-1.0)*cj2*x4799))+((r12*x4798))+((r10*x4801)));
evalcond[5]=((((-1.0)*r21*sj5*x4800))+(((-1.0)*sj2*x4799))+(((-1.0)*cj2*sj1))+((r22*x4798))+((r20*x4801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4804=((1.0)*sj5);
CheckValue<IkReal> x4805=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4804)))),-1);
if(!x4805.valid){
continue;
}
CheckValue<IkReal> x4806 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4805.value)))+(x4806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4807=IKcos(j4);
IkReal x4808=IKsin(j4);
IkReal x4809=((1.0)*cj1);
IkReal x4810=((1.0)*x4807);
IkReal x4811=(cj5*x4807);
IkReal x4812=(cj5*x4808);
IkReal x4813=((1.0)*sj5*x4808);
evalcond[0]=(((r02*x4808))+(((-1.0)*r01*sj5*x4810))+((r00*x4811)));
evalcond[1]=((((-1.0)*r22*x4810))+((r20*x4812))+(((-1.0)*r21*x4813)));
evalcond[2]=((((-1.0)*r11*x4813))+((r10*x4812))+(((-1.0)*r12*x4810)));
evalcond[3]=((1.0)+(((-1.0)*r01*x4813))+(((-1.0)*r02*x4810))+((r00*x4812)));
evalcond[4]=((((-1.0)*cj2*x4809))+((r10*x4811))+(((-1.0)*r11*sj5*x4810))+((sj1*sj2))+((r12*x4808)));
evalcond[5]=((((-1.0)*sj2*x4809))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4810))+((r20*x4811))+((r22*x4808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4814 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4814.valid){
continue;
}
CheckValue<IkReal> x4815=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4814.value)+(((1.5707963267949)*(x4815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4816=IKcos(j4);
IkReal x4817=IKsin(j4);
IkReal x4818=((1.0)*cj1);
IkReal x4819=((1.0)*x4816);
IkReal x4820=(cj5*x4816);
IkReal x4821=(cj5*x4817);
IkReal x4822=((1.0)*sj5*x4817);
evalcond[0]=((((-1.0)*r01*sj5*x4819))+((r02*x4817))+((r00*x4820)));
evalcond[1]=(((r20*x4821))+(((-1.0)*r22*x4819))+(((-1.0)*r21*x4822)));
evalcond[2]=(((r10*x4821))+(((-1.0)*r12*x4819))+(((-1.0)*r11*x4822)));
evalcond[3]=((1.0)+(((-1.0)*r01*x4822))+(((-1.0)*r02*x4819))+((r00*x4821)));
evalcond[4]=((((-1.0)*r11*sj5*x4819))+((r10*x4820))+((sj1*sj2))+((r12*x4817))+(((-1.0)*cj2*x4818)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4819))+((r20*x4820))+(((-1.0)*sj2*x4818))+((r22*x4817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4823=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4823;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4823);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4824=((1.0)*sj5);
IkReal x4825=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4824)));
j4eval[0]=x4825;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x4824)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4825);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4826=cj5*cj5;
IkReal x4827=r01*r01;
IkReal x4828=(cj5*r00);
IkReal x4829=(r01*sj5);
IkReal x4830=(((x4826*(r00*r00)))+(((-1.0)*x4826*x4827))+(r02*r02)+(((-2.0)*x4828*x4829))+x4827);
j4eval[0]=x4830;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x4829))+x4828))));
j4eval[2]=IKsign(x4830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4831=cj5*cj5;
IkReal x4832=r01*r01;
IkReal x4833=(r01*sj5);
IkReal x4834=(cj5*r00);
CheckValue<IkReal> x4835 = IKatan2WithCheck(IkReal(((((-1.0)*x4833))+x4834)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4835.valid){
continue;
}
CheckValue<IkReal> x4836=IKPowWithIntegerCheck(IKsign((((x4831*(r00*r00)))+(((-2.0)*x4833*x4834))+(r02*r02)+(((-1.0)*x4831*x4832))+x4832)),-1);
if(!x4836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4835.value)+(((1.5707963267949)*(x4836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4837=IKcos(j4);
IkReal x4838=IKsin(j4);
IkReal x4839=((1.0)*sj2);
IkReal x4840=((1.0)*x4837);
IkReal x4841=(cj5*x4837);
IkReal x4842=(cj5*x4838);
IkReal x4843=((1.0)*sj5*x4838);
evalcond[0]=(((r00*x4841))+(((-1.0)*r01*sj5*x4840))+((r02*x4838)));
evalcond[1]=(((r20*x4842))+(((-1.0)*r21*x4843))+(((-1.0)*r22*x4840)));
evalcond[2]=(((r10*x4842))+(((-1.0)*r12*x4840))+(((-1.0)*r11*x4843)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4840))+(((-1.0)*r01*x4843))+((r00*x4842)));
evalcond[4]=(((r12*x4838))+((r10*x4841))+((cj1*cj2))+(((-1.0)*sj1*x4839))+(((-1.0)*r11*sj5*x4840)));
evalcond[5]=((((-1.0)*r21*sj5*x4840))+(((-1.0)*cj2*sj1))+((r20*x4841))+((r22*x4838))+(((-1.0)*cj1*x4839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4844=((1.0)*sj5);
CheckValue<IkReal> x4845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4844))+(((-1.0)*cj5*r21)))),-1);
if(!x4845.valid){
continue;
}
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4845.value)))+(x4846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4847=IKcos(j4);
IkReal x4848=IKsin(j4);
IkReal x4849=((1.0)*sj2);
IkReal x4850=((1.0)*x4847);
IkReal x4851=(cj5*x4847);
IkReal x4852=(cj5*x4848);
IkReal x4853=((1.0)*sj5*x4848);
evalcond[0]=(((r02*x4848))+((r00*x4851))+(((-1.0)*r01*sj5*x4850)));
evalcond[1]=((((-1.0)*r21*x4853))+(((-1.0)*r22*x4850))+((r20*x4852)));
evalcond[2]=((((-1.0)*r12*x4850))+(((-1.0)*r11*x4853))+((r10*x4852)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4853))+((r00*x4852))+(((-1.0)*r02*x4850)));
evalcond[4]=((((-1.0)*r11*sj5*x4850))+(((-1.0)*sj1*x4849))+((r10*x4851))+((r12*x4848))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4849))+((r22*x4848))+((r20*x4851))+(((-1.0)*r21*sj5*x4850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4854=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4854.valid){
continue;
}
CheckValue<IkReal> x4855 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4854.value)))+(x4855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4856=IKcos(j4);
IkReal x4857=IKsin(j4);
IkReal x4858=((1.0)*sj2);
IkReal x4859=((1.0)*x4856);
IkReal x4860=(cj5*x4856);
IkReal x4861=(cj5*x4857);
IkReal x4862=((1.0)*sj5*x4857);
evalcond[0]=(((r00*x4860))+(((-1.0)*r01*sj5*x4859))+((r02*x4857)));
evalcond[1]=((((-1.0)*r21*x4862))+(((-1.0)*r22*x4859))+((r20*x4861)));
evalcond[2]=((((-1.0)*r12*x4859))+(((-1.0)*r11*x4862))+((r10*x4861)));
evalcond[3]=((-1.0)+((r00*x4861))+(((-1.0)*r02*x4859))+(((-1.0)*r01*x4862)));
evalcond[4]=((((-1.0)*r11*sj5*x4859))+((r12*x4857))+((r10*x4860))+(((-1.0)*sj1*x4858))+((cj1*cj2)));
evalcond[5]=(((r22*x4857))+(((-1.0)*cj2*sj1))+((r20*x4860))+(((-1.0)*r21*sj5*x4859))+(((-1.0)*cj1*x4858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4863=((-1.0)*r10);
IkReal x4865 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4865)==0){
continue;
}
IkReal x4864=pow(x4865,-0.5);
CheckValue<IkReal> x4866 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4863),IKFAST_ATAN2_MAGTHRESH);
if(!x4866.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4866.value));
IkReal gconst109=(r11*x4864);
IkReal gconst110=(x4863*x4864);
CheckValue<IkReal> x4867 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4867.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4867.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4868=((-1.0)*r10);
IkReal x4869=x4864;
CheckValue<IkReal> x4871 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4868),IKFAST_ATAN2_MAGTHRESH);
if(!x4871.valid){
continue;
}
IkReal x4870=((-1.0)*(x4871.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4870;
IkReal gconst108=x4870;
IkReal gconst109=(r11*x4869);
IkReal gconst110=(x4868*x4869);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4872=((1.0)*gconst109);
CheckValue<IkReal> x4873 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4872))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4873.valid){
continue;
}
CheckValue<IkReal> x4874=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4873.value)+(((1.5707963267949)*(x4874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4875=IKsin(j4);
IkReal x4876=IKcos(j4);
IkReal x4877=((1.0)*cj2);
IkReal x4878=(sj1*sj2);
IkReal x4879=(gconst110*r20);
IkReal x4880=(gconst109*r01);
IkReal x4881=(gconst109*r11);
IkReal x4882=(gconst109*r21);
IkReal x4883=((1.0)*x4876);
IkReal x4884=((1.0)*x4875);
IkReal x4885=(gconst110*x4876);
IkReal x4886=(gconst110*x4875);
evalcond[0]=((((-1.0)*x4882*x4884))+((x4875*x4879))+(((-1.0)*r22*x4883)));
evalcond[1]=(sj0+(((-1.0)*x4880*x4884))+(((-1.0)*r02*x4883))+((r00*x4886)));
evalcond[2]=((((-1.0)*r12*x4883))+(((-1.0)*x4881*x4884))+((r10*x4886))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4877))+(((-1.0)*x4882*x4883))+(((-1.0)*cj1*sj2))+((r22*x4875))+((x4876*x4879)));
evalcond[4]=(((r02*x4875))+(((-1.0)*cj0*cj1*x4877))+(((-1.0)*x4880*x4883))+((cj0*x4878))+((r00*x4885)));
evalcond[5]=((((-1.0)*x4881*x4883))+(((-1.0)*cj1*sj0*x4877))+((sj0*x4878))+((r10*x4885))+((r12*x4875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4887=((1.0)*gconst109);
CheckValue<IkReal> x4888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4887))+(((-1.0)*gconst110*r01)))),-1);
if(!x4888.valid){
continue;
}
CheckValue<IkReal> x4889 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4887))+((cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4888.value)))+(x4889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4890=IKsin(j4);
IkReal x4891=IKcos(j4);
IkReal x4892=((1.0)*cj2);
IkReal x4893=(sj1*sj2);
IkReal x4894=(gconst110*r20);
IkReal x4895=(gconst109*r01);
IkReal x4896=(gconst109*r11);
IkReal x4897=(gconst109*r21);
IkReal x4898=((1.0)*x4891);
IkReal x4899=((1.0)*x4890);
IkReal x4900=(gconst110*x4891);
IkReal x4901=(gconst110*x4890);
evalcond[0]=(((x4890*x4894))+(((-1.0)*x4897*x4899))+(((-1.0)*r22*x4898)));
evalcond[1]=(sj0+(((-1.0)*r02*x4898))+(((-1.0)*x4895*x4899))+((r00*x4901)));
evalcond[2]=((((-1.0)*r12*x4898))+((r10*x4901))+(((-1.0)*x4896*x4899))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4892))+((x4891*x4894))+(((-1.0)*cj1*sj2))+(((-1.0)*x4897*x4898))+((r22*x4890)));
evalcond[4]=(((r02*x4890))+((cj0*x4893))+(((-1.0)*x4895*x4898))+(((-1.0)*cj0*cj1*x4892))+((r00*x4900)));
evalcond[5]=(((r12*x4890))+((r10*x4900))+(((-1.0)*cj1*sj0*x4892))+(((-1.0)*x4896*x4898))+((sj0*x4893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4902=((-1.0)*r11);
IkReal x4904 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4904)==0){
continue;
}
IkReal x4903=pow(x4904,-0.5);
CheckValue<IkReal> x4905 = IKatan2WithCheck(IkReal(x4902),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4905.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4905.value))));
IkReal gconst112=(x4902*x4903);
IkReal gconst113=((1.0)*r10*x4903);
CheckValue<IkReal> x4906 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4906.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4906.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4907=((-1.0)*r11);
CheckValue<IkReal> x4910 = IKatan2WithCheck(IkReal(x4907),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4910.valid){
continue;
}
IkReal x4908=((1.0)*(x4910.value));
IkReal x4909=x4903;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4908)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4908)));
IkReal gconst112=(x4907*x4909);
IkReal gconst113=((1.0)*r10*x4909);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4911=((-1.0)*r11);
CheckValue<IkReal> x4914 = IKatan2WithCheck(IkReal(x4911),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4914.valid){
continue;
}
IkReal x4912=((1.0)*(x4914.value));
IkReal x4913=x4903;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4912)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4912)));
IkReal gconst112=(x4911*x4913);
IkReal gconst113=((1.0)*r10*x4913);
IkReal x4915=r12*r12;
IkReal x4916=(cj0*r02);
IkReal x4917=x4903;
IkReal x4918=(sj0*x4917);
j4eval[0]=((IKabs((x4916+((r12*sj0)))))+(IKabs(((((-1.0)*x4918))+((r12*x4916*x4917))+((x4915*x4918))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4919=((-1.0)*r11);
CheckValue<IkReal> x4922 = IKatan2WithCheck(IkReal(x4919),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4922.valid){
continue;
}
IkReal x4920=((1.0)*(x4922.value));
IkReal x4921=x4903;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4920)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4920)));
IkReal gconst112=(x4919*x4921);
IkReal gconst113=((1.0)*r10*x4921);
IkReal x4923=r12*r12;
IkReal x4924=((1.0)*r22);
IkReal x4925=(cj1*sj2);
IkReal x4926=(cj2*sj1);
IkReal x4927=((1.0)+(((-1.0)*x4923)));
CheckValue<IkReal> x4934=IKPowWithIntegerCheck(x4927,-1);
if(!x4934.valid){
continue;
}
IkReal x4928=x4934.value;
CheckValue<IkReal> x4935=IKPowWithIntegerCheck(((-1.0)+x4923),-1);
if(!x4935.valid){
continue;
}
IkReal x4929=x4935.value;
IkReal x4930=((1.0)*x4928);
if((x4927) < -0.00001)
continue;
IkReal x4931=IKsqrt(x4927);
IkReal x4932=(r12*x4929*x4931);
IkReal x4933=((((-1.0)*x4930*(r11*r11)*(r21*r21)))+(((-1.0)*x4930*(r10*r10)*(r20*r20)))+(((-1.0)*r22*x4924))+(((-2.0)*r10*r11*r20*r21*x4928)));
j4eval[0]=x4933;
j4eval[1]=((IKabs(((((-1.0)*x4924*x4925))+(((-1.0)*x4924*x4926)))))+(IKabs(((((-1.0)*x4924*x4926*x4932))+(((-1.0)*x4924*x4925*x4932))))));
j4eval[2]=IKsign(x4933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4936=((1.0)*r22);
IkReal x4937=(cj1*sj2);
IkReal x4938=(cj2*sj1);
IkReal x4939=(gconst113*r20);
IkReal x4940=(gconst112*r21);
CheckValue<IkReal> x4941 = IKatan2WithCheck(IkReal(((((-1.0)*x4936*x4937))+(((-1.0)*x4936*x4938)))),IkReal(((((-1.0)*x4938*x4939))+((x4937*x4940))+((x4938*x4940))+(((-1.0)*x4937*x4939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4941.valid){
continue;
}
CheckValue<IkReal> x4942=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4940*x4940)))+(((-1.0)*(x4939*x4939)))+(((2.0)*x4939*x4940))+(((-1.0)*r22*x4936)))),-1);
if(!x4942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4941.value)+(((1.5707963267949)*(x4942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4943=IKsin(j4);
IkReal x4944=IKcos(j4);
IkReal x4945=(gconst113*r10);
IkReal x4946=((1.0)*cj2);
IkReal x4947=(gconst112*r01);
IkReal x4948=(sj1*sj2);
IkReal x4949=(gconst112*r11);
IkReal x4950=(gconst113*r20);
IkReal x4951=(gconst113*r00);
IkReal x4952=(gconst112*r21);
IkReal x4953=((1.0)*x4944);
IkReal x4954=((1.0)*x4943);
evalcond[0]=((((-1.0)*r22*x4953))+((x4943*x4950))+(((-1.0)*x4952*x4954)));
evalcond[1]=((((-1.0)*x4947*x4954))+sj0+((x4943*x4951))+(((-1.0)*r02*x4953)));
evalcond[2]=(((x4943*x4945))+(((-1.0)*r12*x4953))+(((-1.0)*x4949*x4954))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4946))+(((-1.0)*cj1*sj2))+(((-1.0)*x4952*x4953))+((x4944*x4950))+((r22*x4943)));
evalcond[4]=(((cj0*x4948))+(((-1.0)*x4947*x4953))+(((-1.0)*cj0*cj1*x4946))+((r02*x4943))+((x4944*x4951)));
evalcond[5]=((((-1.0)*cj1*sj0*x4946))+((r12*x4943))+((sj0*x4948))+(((-1.0)*x4949*x4953))+((x4944*x4945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4955=((1.0)*gconst112);
CheckValue<IkReal> x4956=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4956.valid){
continue;
}
CheckValue<IkReal> x4957 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*r11*sj0*x4955))+(((-1.0)*cj0*r01*x4955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4956.value)))+(x4957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4958=IKsin(j4);
IkReal x4959=IKcos(j4);
IkReal x4960=(gconst113*r10);
IkReal x4961=((1.0)*cj2);
IkReal x4962=(gconst112*r01);
IkReal x4963=(sj1*sj2);
IkReal x4964=(gconst112*r11);
IkReal x4965=(gconst113*r20);
IkReal x4966=(gconst113*r00);
IkReal x4967=(gconst112*r21);
IkReal x4968=((1.0)*x4959);
IkReal x4969=((1.0)*x4958);
evalcond[0]=((((-1.0)*r22*x4968))+(((-1.0)*x4967*x4969))+((x4958*x4965)));
evalcond[1]=(sj0+(((-1.0)*r02*x4968))+(((-1.0)*x4962*x4969))+((x4958*x4966)));
evalcond[2]=((((-1.0)*r12*x4968))+(((-1.0)*x4964*x4969))+((x4958*x4960))+(((-1.0)*cj0)));
evalcond[3]=(((x4959*x4965))+((r22*x4958))+(((-1.0)*sj1*x4961))+(((-1.0)*cj1*sj2))+(((-1.0)*x4967*x4968)));
evalcond[4]=((((-1.0)*cj0*cj1*x4961))+((x4959*x4966))+((r02*x4958))+(((-1.0)*x4962*x4968))+((cj0*x4963)));
evalcond[5]=(((x4959*x4960))+((r12*x4958))+((sj0*x4963))+(((-1.0)*cj1*sj0*x4961))+(((-1.0)*x4964*x4968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4970=((1.0)*gconst112);
CheckValue<IkReal> x4971=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r01))+(((-1.0)*r00*x4970)))),-1);
if(!x4971.valid){
continue;
}
CheckValue<IkReal> x4972 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4970))+((cj0*gconst113*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4971.value)))+(x4972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4973=IKsin(j4);
IkReal x4974=IKcos(j4);
IkReal x4975=(gconst113*r10);
IkReal x4976=((1.0)*cj2);
IkReal x4977=(gconst112*r01);
IkReal x4978=(sj1*sj2);
IkReal x4979=(gconst112*r11);
IkReal x4980=(gconst113*r20);
IkReal x4981=(gconst113*r00);
IkReal x4982=(gconst112*r21);
IkReal x4983=((1.0)*x4974);
IkReal x4984=((1.0)*x4973);
evalcond[0]=((((-1.0)*r22*x4983))+((x4973*x4980))+(((-1.0)*x4982*x4984)));
evalcond[1]=((((-1.0)*x4977*x4984))+((x4973*x4981))+sj0+(((-1.0)*r02*x4983)));
evalcond[2]=((((-1.0)*r12*x4983))+(((-1.0)*x4979*x4984))+((x4973*x4975))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4982*x4983))+((r22*x4973))+((x4974*x4980))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4976)));
evalcond[4]=((((-1.0)*x4977*x4983))+(((-1.0)*cj0*cj1*x4976))+((x4974*x4981))+((r02*x4973))+((cj0*x4978)));
evalcond[5]=(((sj0*x4978))+((r12*x4973))+((x4974*x4975))+(((-1.0)*cj1*sj0*x4976))+(((-1.0)*x4979*x4983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4985=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4985;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4986=((1.0)*sj5);
IkReal x4987=((((-1.0)*r00*x4986))+(((-1.0)*cj5*r01)));
j4eval[0]=x4987;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4986))))));
j4eval[2]=IKsign(x4987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4988=cj5*cj5;
IkReal x4989=r11*r11;
IkReal x4990=(r11*sj5);
IkReal x4991=(cj5*r10);
IkReal x4992=(x4989+(r12*r12)+(((-1.0)*x4988*x4989))+(((-2.0)*x4990*x4991))+((x4988*(r10*r10))));
j4eval[0]=x4992;
j4eval[1]=IKsign(x4992);
j4eval[2]=((IKabs(r12))+(IKabs((x4991+(((-1.0)*x4990))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4993=cj5*cj5;
IkReal x4994=r11*r11;
IkReal x4995=(cj5*r10);
IkReal x4996=(r11*sj5);
CheckValue<IkReal> x4997=IKPowWithIntegerCheck(IKsign((x4994+(r12*r12)+((x4993*(r10*r10)))+(((-1.0)*x4993*x4994))+(((-2.0)*x4995*x4996)))),-1);
if(!x4997.valid){
continue;
}
CheckValue<IkReal> x4998 = IKatan2WithCheck(IkReal((x4995+(((-1.0)*x4996)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4997.value)))+(x4998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4999=IKcos(j4);
IkReal x5000=IKsin(j4);
IkReal x5001=(cj5*r10);
IkReal x5002=((1.0)*cj1);
IkReal x5003=((1.0)*x4999);
IkReal x5004=(cj5*x5000);
IkReal x5005=(cj5*x4999);
IkReal x5006=((1.0)*sj5*x5000);
evalcond[0]=(((r12*x5000))+((x4999*x5001))+(((-1.0)*r11*sj5*x5003)));
evalcond[1]=(((r20*x5004))+(((-1.0)*r22*x5003))+(((-1.0)*r21*x5006)));
evalcond[2]=(((r00*x5004))+(((-1.0)*r02*x5003))+(((-1.0)*r01*x5006)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5003))+(((-1.0)*r11*x5006))+((x5000*x5001)));
evalcond[4]=(((r02*x5000))+(((-1.0)*r01*sj5*x5003))+((sj1*sj2))+((r00*x5005))+(((-1.0)*cj2*x5002)));
evalcond[5]=(((r20*x5005))+(((-1.0)*cj2*sj1))+((r22*x5000))+(((-1.0)*sj2*x5002))+(((-1.0)*r21*sj5*x5003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5007=((1.0)*sj5);
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
CheckValue<IkReal> x5009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5007))+(((-1.0)*cj5*r01)))),-1);
if(!x5009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5008.value)+(((1.5707963267949)*(x5009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5010=IKcos(j4);
IkReal x5011=IKsin(j4);
IkReal x5012=(cj5*r10);
IkReal x5013=((1.0)*cj1);
IkReal x5014=((1.0)*x5010);
IkReal x5015=(cj5*x5011);
IkReal x5016=(cj5*x5010);
IkReal x5017=((1.0)*sj5*x5011);
evalcond[0]=(((x5010*x5012))+(((-1.0)*r11*sj5*x5014))+((r12*x5011)));
evalcond[1]=(((r20*x5015))+(((-1.0)*r21*x5017))+(((-1.0)*r22*x5014)));
evalcond[2]=((((-1.0)*r02*x5014))+(((-1.0)*r01*x5017))+((r00*x5015)));
evalcond[3]=((-1.0)+((x5011*x5012))+(((-1.0)*r11*x5017))+(((-1.0)*r12*x5014)));
evalcond[4]=((((-1.0)*r01*sj5*x5014))+((r02*x5011))+((sj1*sj2))+(((-1.0)*cj2*x5013))+((r00*x5016)));
evalcond[5]=((((-1.0)*r21*sj5*x5014))+((r20*x5016))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x5013))+((r22*x5011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5018=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5018.valid){
continue;
}
CheckValue<IkReal> x5019 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5018.value)))+(x5019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5020=IKcos(j4);
IkReal x5021=IKsin(j4);
IkReal x5022=(cj5*r10);
IkReal x5023=((1.0)*cj1);
IkReal x5024=((1.0)*x5020);
IkReal x5025=(cj5*x5021);
IkReal x5026=(cj5*x5020);
IkReal x5027=((1.0)*sj5*x5021);
evalcond[0]=(((r12*x5021))+((x5020*x5022))+(((-1.0)*r11*sj5*x5024)));
evalcond[1]=(((r20*x5025))+(((-1.0)*r21*x5027))+(((-1.0)*r22*x5024)));
evalcond[2]=((((-1.0)*r02*x5024))+(((-1.0)*r01*x5027))+((r00*x5025)));
evalcond[3]=((-1.0)+((x5021*x5022))+(((-1.0)*r12*x5024))+(((-1.0)*r11*x5027)));
evalcond[4]=(((r02*x5021))+(((-1.0)*r01*sj5*x5024))+((sj1*sj2))+(((-1.0)*cj2*x5023))+((r00*x5026)));
evalcond[5]=(((r20*x5026))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x5023))+((r22*x5021))+(((-1.0)*r21*sj5*x5024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5028=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5028;
j4eval[1]=IKsign(x5028);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5029=((1.0)*sj5);
IkReal x5030=((((-1.0)*r20*x5029))+(((-1.0)*cj5*r21)));
j4eval[0]=x5030;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x5029))+((cj5*r00))))));
j4eval[2]=IKsign(x5030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5031=(sj1*sj2);
IkReal x5032=(cj5*r10);
IkReal x5033=(r11*sj5);
IkReal x5034=(cj1*cj2);
IkReal x5035=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5035;
j4eval[1]=IKsign(x5035);
j4eval[2]=((IKabs(((((-1.0)*r12*x5034))+((r12*x5031)))))+(IKabs(((((-1.0)*x5031*x5032))+(((-1.0)*x5033*x5034))+((x5031*x5033))+((x5032*x5034))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5036=(sj1*sj2);
IkReal x5037=(cj5*r10);
IkReal x5038=(r11*sj5);
IkReal x5039=(cj1*cj2);
CheckValue<IkReal> x5040 = IKatan2WithCheck(IkReal((((x5036*x5038))+((x5037*x5039))+(((-1.0)*x5036*x5037))+(((-1.0)*x5038*x5039)))),IkReal(((((-1.0)*r12*x5039))+((r12*x5036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5040.valid){
continue;
}
CheckValue<IkReal> x5041=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5040.value)+(((1.5707963267949)*(x5041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5042=IKcos(j4);
IkReal x5043=IKsin(j4);
IkReal x5044=(cj5*r10);
IkReal x5045=((1.0)*sj2);
IkReal x5046=((1.0)*x5042);
IkReal x5047=(cj5*x5043);
IkReal x5048=(cj5*x5042);
IkReal x5049=((1.0)*sj5*x5043);
evalcond[0]=((((-1.0)*r11*sj5*x5046))+((x5042*x5044))+((r12*x5043)));
evalcond[1]=((((-1.0)*r21*x5049))+((r20*x5047))+(((-1.0)*r22*x5046)));
evalcond[2]=((((-1.0)*r02*x5046))+((r00*x5047))+(((-1.0)*r01*x5049)));
evalcond[3]=((1.0)+((x5043*x5044))+(((-1.0)*r12*x5046))+(((-1.0)*r11*x5049)));
evalcond[4]=((((-1.0)*r01*sj5*x5046))+((r02*x5043))+((r00*x5048))+((cj1*cj2))+(((-1.0)*sj1*x5045)));
evalcond[5]=((((-1.0)*r21*sj5*x5046))+(((-1.0)*cj2*sj1))+((r20*x5048))+(((-1.0)*cj1*x5045))+((r22*x5043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5050=((1.0)*sj5);
CheckValue<IkReal> x5051=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x5050)))),-1);
if(!x5051.valid){
continue;
}
CheckValue<IkReal> x5052 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x5050))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5051.value)))+(x5052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5053=IKcos(j4);
IkReal x5054=IKsin(j4);
IkReal x5055=(cj5*r10);
IkReal x5056=((1.0)*sj2);
IkReal x5057=((1.0)*x5053);
IkReal x5058=(cj5*x5054);
IkReal x5059=(cj5*x5053);
IkReal x5060=((1.0)*sj5*x5054);
evalcond[0]=((((-1.0)*r11*sj5*x5057))+((r12*x5054))+((x5053*x5055)));
evalcond[1]=(((r20*x5058))+(((-1.0)*r22*x5057))+(((-1.0)*r21*x5060)));
evalcond[2]=(((r00*x5058))+(((-1.0)*r02*x5057))+(((-1.0)*r01*x5060)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5057))+(((-1.0)*r11*x5060))+((x5054*x5055)));
evalcond[4]=((((-1.0)*sj1*x5056))+((r00*x5059))+((cj1*cj2))+((r02*x5054))+(((-1.0)*r01*sj5*x5057)));
evalcond[5]=(((r20*x5059))+((r22*x5054))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5056))+(((-1.0)*r21*sj5*x5057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5061=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5061.valid){
continue;
}
CheckValue<IkReal> x5062 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5061.value)))+(x5062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5063=IKcos(j4);
IkReal x5064=IKsin(j4);
IkReal x5065=(cj5*r10);
IkReal x5066=((1.0)*sj2);
IkReal x5067=((1.0)*x5063);
IkReal x5068=(cj5*x5064);
IkReal x5069=(cj5*x5063);
IkReal x5070=((1.0)*sj5*x5064);
evalcond[0]=((((-1.0)*r11*sj5*x5067))+((x5063*x5065))+((r12*x5064)));
evalcond[1]=((((-1.0)*r21*x5070))+((r20*x5068))+(((-1.0)*r22*x5067)));
evalcond[2]=((((-1.0)*r02*x5067))+(((-1.0)*r01*x5070))+((r00*x5068)));
evalcond[3]=((1.0)+((x5064*x5065))+(((-1.0)*r12*x5067))+(((-1.0)*r11*x5070)));
evalcond[4]=((((-1.0)*r01*sj5*x5067))+((r02*x5064))+(((-1.0)*sj1*x5066))+((cj1*cj2))+((r00*x5069)));
evalcond[5]=((((-1.0)*r21*sj5*x5067))+((r20*x5069))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5066))+((r22*x5064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5071=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5071);
rxp0_2=(py*r00);
rxp1_0=(r21*x5071);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5072=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5072);
rxp0_2=(py*r00);
rxp1_0=(r21*x5072);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5073=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5073);
rxp0_2=(py*r00);
rxp1_0=(r21*x5073);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5076=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x5076.valid){
continue;
}
IkReal x5074=x5076.value;
IkReal x5075=(cj0*x5074);
cj4array[0]=(((cj1*cj2*x5075))+(((-1.0)*sj1*sj2*x5075)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5077=IKsin(j4);
IkReal x5078=IKcos(j4);
IkReal x5079=(cj5*r20);
IkReal x5080=((1.0)*sj5);
evalcond[0]=(r12*x5077);
evalcond[1]=((((-1.0)*r12*x5078))+(((-1.0)*cj0)));
evalcond[2]=(((x5077*x5079))+(((-1.0)*r21*x5077*x5080)));
evalcond[3]=(((cj5*r00*x5077))+(((-1.0)*r01*x5077*x5080)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x5078*x5080))+((x5078*x5079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5082=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x5082.valid){
continue;
}
IkReal x5081=x5082.value;
cj4array[0]=(((cj2*sj1*x5081))+((cj1*sj2*x5081)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5083=IKsin(j4);
IkReal x5084=IKcos(j4);
IkReal x5085=(cj5*r00);
IkReal x5086=((1.0)*cj0);
IkReal x5087=((1.0)*r01*sj5);
evalcond[0]=(r12*x5083);
evalcond[1]=((((-1.0)*r12*x5084))+(((-1.0)*x5086)));
evalcond[2]=((((-1.0)*r21*sj5*x5083))+((cj5*r20*x5083)));
evalcond[3]=((((-1.0)*x5083*x5087))+((x5083*x5085)));
evalcond[4]=(((x5084*x5085))+(((-1.0)*cj1*cj2*x5086))+((cj0*sj1*sj2))+(((-1.0)*x5084*x5087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5088=IKPowWithIntegerCheck(r12,-1);
if(!x5088.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5088.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5089=IKsin(j4);
IkReal x5090=IKcos(j4);
IkReal x5091=((1.0)*cj1);
IkReal x5092=((1.0)*sj5);
IkReal x5093=(cj5*x5090);
IkReal x5094=(cj5*x5089);
evalcond[0]=(r12*x5089);
evalcond[1]=((((-1.0)*r21*x5089*x5092))+((r20*x5094)));
evalcond[2]=(((r00*x5094))+(((-1.0)*r01*x5089*x5092)));
evalcond[3]=((((-1.0)*sj2*x5091))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x5090*x5092))+((r20*x5093)));
evalcond[4]=(((r00*x5093))+((cj0*sj1*sj2))+(((-1.0)*cj0*cj2*x5091))+(((-1.0)*r01*x5090*x5092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5095=((1.0)*sj5);
CheckValue<IkReal> x5096 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x5095))+((cj0*cj5*r00))+(((-1.0)*cj0*r01*x5095))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5096.valid){
continue;
}
CheckValue<IkReal> x5097=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5096.value)+(((1.5707963267949)*(x5097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5098=IKsin(j4);
IkReal x5099=IKcos(j4);
IkReal x5100=((1.0)*cj1);
IkReal x5101=(sj1*sj2);
IkReal x5102=(cj5*r10);
IkReal x5103=((1.0)*x5099);
IkReal x5104=(cj5*x5098);
IkReal x5105=(cj5*x5099);
IkReal x5106=((1.0)*sj5*x5098);
evalcond[0]=((((-1.0)*r21*x5106))+((r20*x5104))+(((-1.0)*r22*x5103)));
evalcond[1]=(((r00*x5104))+sj0+(((-1.0)*r02*x5103))+(((-1.0)*r01*x5106)));
evalcond[2]=(((x5098*x5102))+(((-1.0)*r12*x5103))+(((-1.0)*cj0))+(((-1.0)*r11*x5106)));
evalcond[3]=(((r20*x5105))+(((-1.0)*sj2*x5100))+(((-1.0)*r21*sj5*x5103))+((r22*x5098))+(((-1.0)*cj2*sj1)));
evalcond[4]=((((-1.0)*cj0*cj2*x5100))+((r00*x5105))+(((-1.0)*r01*sj5*x5103))+((cj0*x5101))+((r02*x5098)));
evalcond[5]=((((-1.0)*r11*sj5*x5103))+(((-1.0)*cj2*sj0*x5100))+((sj0*x5101))+((x5099*x5102))+((r12*x5098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5107=((1.0)*sj5);
CheckValue<IkReal> x5108 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5107))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5108.valid){
continue;
}
CheckValue<IkReal> x5109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5107))+(((-1.0)*cj5*r01)))),-1);
if(!x5109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5108.value)+(((1.5707963267949)*(x5109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5110=IKsin(j4);
IkReal x5111=IKcos(j4);
IkReal x5112=((1.0)*cj1);
IkReal x5113=(sj1*sj2);
IkReal x5114=(cj5*r10);
IkReal x5115=((1.0)*x5111);
IkReal x5116=(cj5*x5110);
IkReal x5117=(cj5*x5111);
IkReal x5118=((1.0)*sj5*x5110);
evalcond[0]=(((r20*x5116))+(((-1.0)*r22*x5115))+(((-1.0)*r21*x5118)));
evalcond[1]=(((r00*x5116))+sj0+(((-1.0)*r02*x5115))+(((-1.0)*r01*x5118)));
evalcond[2]=(((x5110*x5114))+(((-1.0)*r11*x5118))+(((-1.0)*r12*x5115))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x5117))+(((-1.0)*r21*sj5*x5115))+(((-1.0)*sj2*x5112))+(((-1.0)*cj2*sj1))+((r22*x5110)));
evalcond[4]=(((r00*x5117))+(((-1.0)*r01*sj5*x5115))+((cj0*x5113))+((r02*x5110))+(((-1.0)*cj0*cj2*x5112)));
evalcond[5]=((((-1.0)*r11*sj5*x5115))+(((-1.0)*cj2*sj0*x5112))+((sj0*x5113))+((x5111*x5114))+((r12*x5110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5119=((1.0)*sj5);
CheckValue<IkReal> x5120=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5119)))),-1);
if(!x5120.valid){
continue;
}
CheckValue<IkReal> x5121 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5120.value)))+(x5121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5122=IKsin(j4);
IkReal x5123=IKcos(j4);
IkReal x5124=((1.0)*cj1);
IkReal x5125=(sj1*sj2);
IkReal x5126=(cj5*r10);
IkReal x5127=((1.0)*x5123);
IkReal x5128=(cj5*x5122);
IkReal x5129=(cj5*x5123);
IkReal x5130=((1.0)*sj5*x5122);
evalcond[0]=((((-1.0)*r21*x5130))+((r20*x5128))+(((-1.0)*r22*x5127)));
evalcond[1]=(sj0+(((-1.0)*r01*x5130))+((r00*x5128))+(((-1.0)*r02*x5127)));
evalcond[2]=(((x5122*x5126))+(((-1.0)*r12*x5127))+(((-1.0)*r11*x5130))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x5122))+(((-1.0)*cj2*sj1))+((r20*x5129))+(((-1.0)*sj2*x5124))+(((-1.0)*r21*sj5*x5127)));
evalcond[4]=((((-1.0)*cj0*cj2*x5124))+((r00*x5129))+((cj0*x5125))+(((-1.0)*r01*sj5*x5127))+((r02*x5122)));
evalcond[5]=(((r12*x5122))+((x5123*x5126))+(((-1.0)*r11*sj5*x5127))+((sj0*x5125))+(((-1.0)*cj2*sj0*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5131=((1.0)*cj5);
IkReal x5132=((1.0)*sj5);
IkReal x5133=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x5133;
j0eval[1]=((IKabs(((((-1.0)*r10*x5132))+(((-1.0)*r11*x5131)))))+(IKabs(((((-1.0)*r01*x5131))+(((-1.0)*r00*x5132))))));
j0eval[2]=IKsign(x5133);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5134=cj5*cj5;
IkReal x5135=r21*r21;
IkReal x5136=(sj1*sj2);
IkReal x5137=(r21*sj5);
IkReal x5138=(cj1*cj2);
IkReal x5139=(cj5*r20);
IkReal x5140=((r22*r22)+(((-1.0)*x5134*x5135))+((x5134*(r20*r20)))+x5135+(((-2.0)*x5137*x5139)));
j4eval[0]=x5140;
j4eval[1]=IKsign(x5140);
j4eval[2]=((IKabs(((((-1.0)*x5136*x5137))+((x5137*x5138))+(((-1.0)*x5138*x5139))+((x5136*x5139)))))+(IKabs((((r22*x5136))+(((-1.0)*r22*x5138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.1265126745929)*py))+(((0.237230316178975)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.1265126745929)*px))+(((-0.237230316178975)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1265126745929)*py))+(((0.237230316178975)*px))))+IKsqr(((((-1.1265126745929)*px))+(((-0.237230316178975)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.1265126745929)*py))+(((0.237230316178975)*px))), ((((-1.1265126745929)*px))+(((-0.237230316178975)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5141=IKsin(j0);
IkReal x5142=IKcos(j0);
evalcond[0]=((((0.179)*x5141))+(((-1.0)*px))+(((-0.85)*x5142)));
evalcond[1]=((((-0.179)*x5142))+(((-1.0)*py))+(((-0.85)*x5141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5143=((1.0)*sj5);
IkReal x5144=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5143)));
j4eval[0]=x5144;
j4eval[1]=IKsign(x5144);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5143))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5145=cj5*cj5;
IkReal x5146=((1.0)*r21);
IkReal x5147=(cj5*sj5);
IkReal x5148=(((r01*r21))+(((-1.0)*r00*x5146*x5147))+(((-1.0)*r01*x5145*x5146))+(((-1.0)*r01*r20*x5147))+((r00*r20*x5145))+((r02*r22)));
j4eval[0]=x5148;
j4eval[1]=IKsign(x5148);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5146)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5149=cj5*cj5;
IkReal x5150=(cj5*r20);
IkReal x5151=((1.0)*sj5);
IkReal x5152=(r11*r21);
IkReal x5153=(((r12*r22))+x5152+(((-1.0)*x5149*x5152))+(((-1.0)*cj5*r10*r21*x5151))+((r10*r20*x5149))+(((-1.0)*r11*x5150*x5151)));
j4eval[0]=x5153;
j4eval[1]=IKsign(x5153);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5151))+((sj0*x5150))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5154=cj5*cj5;
IkReal x5155=(cj5*r20);
IkReal x5156=((1.0)*sj5);
IkReal x5157=(r11*r21);
CheckValue<IkReal> x5158=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5155*x5156))+((r12*r22))+x5157+((r10*r20*x5154))+(((-1.0)*cj5*r10*r21*x5156))+(((-1.0)*x5154*x5157)))),-1);
if(!x5158.valid){
continue;
}
CheckValue<IkReal> x5159 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5156))+((sj0*x5155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5158.value)))+(x5159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5160=IKsin(j4);
IkReal x5161=IKcos(j4);
IkReal x5162=(cj5*r00);
IkReal x5163=(r11*sj5);
IkReal x5164=(r01*sj5);
IkReal x5165=(cj5*r20);
IkReal x5166=(r21*sj5);
IkReal x5167=(cj5*r10);
IkReal x5168=((1.0)*x5161);
IkReal x5169=((1.0)*x5160);
evalcond[0]=((((-1.0)*r22*x5168))+((x5160*x5165))+(((-1.0)*x5166*x5169)));
evalcond[1]=((((-1.0)*r22*x5169))+(((-1.0)*x5165*x5168))+((x5161*x5166)));
evalcond[2]=(sj0+((x5160*x5162))+(((-1.0)*r02*x5168))+(((-1.0)*x5164*x5169)));
evalcond[3]=(cj0+(((-1.0)*r02*x5169))+(((-1.0)*x5162*x5168))+((x5161*x5164)));
evalcond[4]=(sj0+(((-1.0)*r12*x5169))+((x5161*x5163))+(((-1.0)*x5167*x5168)));
evalcond[5]=(((x5160*x5167))+(((-1.0)*r12*x5168))+(((-1.0)*x5163*x5169))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5170=cj5*cj5;
IkReal x5171=((1.0)*r21);
IkReal x5172=(cj5*sj5);
CheckValue<IkReal> x5173 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5173.valid){
continue;
}
CheckValue<IkReal> x5174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5170*x5171))+((r01*r21))+(((-1.0)*r01*r20*x5172))+((r00*r20*x5170))+(((-1.0)*r00*x5171*x5172))+((r02*r22)))),-1);
if(!x5174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5173.value)+(((1.5707963267949)*(x5174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5175=IKsin(j4);
IkReal x5176=IKcos(j4);
IkReal x5177=(cj5*r00);
IkReal x5178=(r11*sj5);
IkReal x5179=(r01*sj5);
IkReal x5180=(cj5*r20);
IkReal x5181=(r21*sj5);
IkReal x5182=(cj5*r10);
IkReal x5183=((1.0)*x5176);
IkReal x5184=((1.0)*x5175);
evalcond[0]=((((-1.0)*r22*x5183))+((x5175*x5180))+(((-1.0)*x5181*x5184)));
evalcond[1]=((((-1.0)*r22*x5184))+((x5176*x5181))+(((-1.0)*x5180*x5183)));
evalcond[2]=(sj0+(((-1.0)*r02*x5183))+((x5175*x5177))+(((-1.0)*x5179*x5184)));
evalcond[3]=(cj0+(((-1.0)*r02*x5184))+(((-1.0)*x5177*x5183))+((x5176*x5179)));
evalcond[4]=(sj0+(((-1.0)*x5182*x5183))+(((-1.0)*r12*x5184))+((x5176*x5178)));
evalcond[5]=((((-1.0)*r12*x5183))+((x5175*x5182))+(((-1.0)*x5178*x5184))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5185=((1.0)*sj5);
CheckValue<IkReal> x5186=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5185)))),-1);
if(!x5186.valid){
continue;
}
CheckValue<IkReal> x5187 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5186.value)))+(x5187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5188=IKsin(j4);
IkReal x5189=IKcos(j4);
IkReal x5190=(cj5*r00);
IkReal x5191=(r11*sj5);
IkReal x5192=(r01*sj5);
IkReal x5193=(cj5*r20);
IkReal x5194=(r21*sj5);
IkReal x5195=(cj5*r10);
IkReal x5196=((1.0)*x5189);
IkReal x5197=((1.0)*x5188);
evalcond[0]=(((x5188*x5193))+(((-1.0)*r22*x5196))+(((-1.0)*x5194*x5197)));
evalcond[1]=((((-1.0)*x5193*x5196))+(((-1.0)*r22*x5197))+((x5189*x5194)));
evalcond[2]=(sj0+((x5188*x5190))+(((-1.0)*x5192*x5197))+(((-1.0)*r02*x5196)));
evalcond[3]=(cj0+(((-1.0)*x5190*x5196))+(((-1.0)*r02*x5197))+((x5189*x5192)));
evalcond[4]=((((-1.0)*r12*x5197))+sj0+(((-1.0)*x5195*x5196))+((x5189*x5191)));
evalcond[5]=((((-1.0)*r12*x5196))+((x5188*x5195))+(((-1.0)*x5191*x5197))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.1265126745929)*py))+(((0.237230316178975)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.1265126745929)*px))+(((-0.237230316178975)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1265126745929)*py))+(((0.237230316178975)*px))))+IKsqr(((((-1.1265126745929)*px))+(((-0.237230316178975)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.1265126745929)*py))+(((0.237230316178975)*px))), ((((-1.1265126745929)*px))+(((-0.237230316178975)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5198=IKsin(j0);
IkReal x5199=IKcos(j0);
evalcond[0]=((((-0.85)*x5199))+(((0.179)*x5198))+(((-1.0)*px)));
evalcond[1]=((((-0.85)*x5198))+(((-1.0)*py))+(((-0.179)*x5199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5200=((1.0)*sj5);
IkReal x5201=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5200)));
j4eval[0]=x5201;
j4eval[1]=IKsign(x5201);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5200)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5202=((1.0)*sj5);
IkReal x5203=((((-1.0)*r00*x5202))+(((-1.0)*cj5*r01)));
j4eval[0]=x5203;
j4eval[1]=IKsign(x5203);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5202))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5204=cj5*cj5;
IkReal x5205=((1.0)*r21);
IkReal x5206=(cj5*sj5);
IkReal x5207=((1.0)*r20);
IkReal x5208=((((-1.0)*r00*x5205*x5206))+(((-1.0)*r01*x5204*x5205))+((r01*r21))+((r00*r20*x5204))+(((-1.0)*r01*x5206*x5207))+((r02*r22)));
j4eval[0]=x5208;
j4eval[1]=IKsign(x5208);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5207))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5209=cj5*cj5;
IkReal x5210=((1.0)*r21);
IkReal x5211=(cj5*sj5);
IkReal x5212=((1.0)*r20);
CheckValue<IkReal> x5213=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5210*x5211))+((r01*r21))+(((-1.0)*r01*x5211*x5212))+((r00*r20*x5209))+(((-1.0)*r01*x5209*x5210))+((r02*r22)))),-1);
if(!x5213.valid){
continue;
}
CheckValue<IkReal> x5214 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5212)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5213.value)))+(x5214.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5215=IKsin(j4);
IkReal x5216=IKcos(j4);
IkReal x5217=((1.0)*cj0);
IkReal x5218=(cj5*r00);
IkReal x5219=(r11*sj5);
IkReal x5220=(r01*sj5);
IkReal x5221=(cj5*r20);
IkReal x5222=(r21*sj5);
IkReal x5223=(cj5*r10);
IkReal x5224=((1.0)*x5216);
IkReal x5225=((1.0)*x5215);
evalcond[0]=(((x5215*x5221))+(((-1.0)*x5222*x5225))+(((-1.0)*r22*x5224)));
evalcond[1]=((((-1.0)*x5221*x5224))+((x5216*x5222))+(((-1.0)*r22*x5225)));
evalcond[2]=(sj0+((x5215*x5218))+(((-1.0)*x5220*x5225))+(((-1.0)*r02*x5224)));
evalcond[3]=((((-1.0)*x5217))+((x5215*x5223))+(((-1.0)*x5219*x5225))+(((-1.0)*r12*x5224)));
evalcond[4]=((((-1.0)*x5217))+((x5216*x5220))+(((-1.0)*x5218*x5224))+(((-1.0)*r02*x5225)));
evalcond[5]=((((-1.0)*x5223*x5224))+(((-1.0)*sj0))+((x5216*x5219))+(((-1.0)*r12*x5225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5226=((1.0)*sj5);
CheckValue<IkReal> x5227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5226))+(((-1.0)*cj5*r01)))),-1);
if(!x5227.valid){
continue;
}
CheckValue<IkReal> x5228 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5226))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5227.value)))+(x5228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5229=IKsin(j4);
IkReal x5230=IKcos(j4);
IkReal x5231=((1.0)*cj0);
IkReal x5232=(cj5*r00);
IkReal x5233=(r11*sj5);
IkReal x5234=(r01*sj5);
IkReal x5235=(cj5*r20);
IkReal x5236=(r21*sj5);
IkReal x5237=(cj5*r10);
IkReal x5238=((1.0)*x5230);
IkReal x5239=((1.0)*x5229);
evalcond[0]=((((-1.0)*x5236*x5239))+(((-1.0)*r22*x5238))+((x5229*x5235)));
evalcond[1]=((((-1.0)*x5235*x5238))+(((-1.0)*r22*x5239))+((x5230*x5236)));
evalcond[2]=(sj0+(((-1.0)*x5234*x5239))+(((-1.0)*r02*x5238))+((x5229*x5232)));
evalcond[3]=((((-1.0)*x5231))+(((-1.0)*r12*x5238))+((x5229*x5237))+(((-1.0)*x5233*x5239)));
evalcond[4]=((((-1.0)*x5231))+(((-1.0)*r02*x5239))+(((-1.0)*x5232*x5238))+((x5230*x5234)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5239))+((x5230*x5233))+(((-1.0)*x5237*x5238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5240=((1.0)*sj5);
CheckValue<IkReal> x5241 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5241.valid){
continue;
}
CheckValue<IkReal> x5242=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5240)))),-1);
if(!x5242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5241.value)+(((1.5707963267949)*(x5242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5243=IKsin(j4);
IkReal x5244=IKcos(j4);
IkReal x5245=((1.0)*cj0);
IkReal x5246=(cj5*r00);
IkReal x5247=(r11*sj5);
IkReal x5248=(r01*sj5);
IkReal x5249=(cj5*r20);
IkReal x5250=(r21*sj5);
IkReal x5251=(cj5*r10);
IkReal x5252=((1.0)*x5244);
IkReal x5253=((1.0)*x5243);
evalcond[0]=((((-1.0)*r22*x5252))+(((-1.0)*x5250*x5253))+((x5243*x5249)));
evalcond[1]=((((-1.0)*x5249*x5252))+((x5244*x5250))+(((-1.0)*r22*x5253)));
evalcond[2]=(sj0+(((-1.0)*x5248*x5253))+(((-1.0)*r02*x5252))+((x5243*x5246)));
evalcond[3]=((((-1.0)*x5245))+(((-1.0)*r12*x5252))+((x5243*x5251))+(((-1.0)*x5247*x5253)));
evalcond[4]=((((-1.0)*r02*x5253))+(((-1.0)*x5245))+((x5244*x5248))+(((-1.0)*x5246*x5252)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5253))+((x5244*x5247))+(((-1.0)*x5251*x5252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.58659217877095)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.58659217877095)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.58659217877095)*px))+IKsqr(((-5.58659217877095)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.58659217877095)*px), ((-5.58659217877095)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.179)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.179)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5254=((1.0)*sj5);
IkReal x5255=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5254)));
j4eval[0]=x5255;
j4eval[1]=IKsign(x5255);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5254))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5256=cj5*cj5;
IkReal x5257=((1.0)*r21);
IkReal x5258=(cj5*sj5);
IkReal x5259=((((-1.0)*r00*x5257*x5258))+(((-1.0)*r01*x5256*x5257))+((r01*r21))+(((-1.0)*r01*r20*x5258))+((r00*r20*x5256))+((r02*r22)));
j4eval[0]=x5259;
j4eval[1]=IKsign(x5259);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x5257))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5260=cj5*cj5;
IkReal x5261=(cj5*r20);
IkReal x5262=((1.0)*sj5);
IkReal x5263=(r11*r21);
IkReal x5264=((((-1.0)*x5260*x5263))+((r10*r20*x5260))+(((-1.0)*cj5*r10*r21*x5262))+x5263+((r12*r22))+(((-1.0)*r11*x5261*x5262)));
j4eval[0]=x5264;
j4eval[1]=IKsign(x5264);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x5261))+(((-1.0)*r21*sj0*x5262))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5265=cj5*cj5;
IkReal x5266=(cj5*r20);
IkReal x5267=((1.0)*sj5);
IkReal x5268=(r11*r21);
CheckValue<IkReal> x5269=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5265*x5268))+((r10*r20*x5265))+(((-1.0)*cj5*r10*r21*x5267))+x5268+((r12*r22))+(((-1.0)*r11*x5266*x5267)))),-1);
if(!x5269.valid){
continue;
}
CheckValue<IkReal> x5270 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x5266))+(((-1.0)*r21*sj0*x5267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5269.value)))+(x5270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5271=IKsin(j4);
IkReal x5272=IKcos(j4);
IkReal x5273=(cj5*r00);
IkReal x5274=(r11*sj5);
IkReal x5275=(r01*sj5);
IkReal x5276=(cj5*r20);
IkReal x5277=(r21*sj5);
IkReal x5278=(cj5*r10);
IkReal x5279=((1.0)*x5272);
IkReal x5280=((1.0)*x5271);
evalcond[0]=(((x5271*x5276))+(((-1.0)*x5277*x5280))+(((-1.0)*r22*x5279)));
evalcond[1]=((((-1.0)*r22*x5280))+((x5272*x5277))+(((-1.0)*x5276*x5279)));
evalcond[2]=(sj0+(((-1.0)*x5275*x5280))+((x5271*x5273))+(((-1.0)*r02*x5279)));
evalcond[3]=(((x5272*x5275))+cj0+(((-1.0)*r02*x5280))+(((-1.0)*x5273*x5279)));
evalcond[4]=(((x5272*x5274))+sj0+(((-1.0)*x5278*x5279))+(((-1.0)*r12*x5280)));
evalcond[5]=((((-1.0)*x5274*x5280))+(((-1.0)*r12*x5279))+((x5271*x5278))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5281=cj5*cj5;
IkReal x5282=((1.0)*r21);
IkReal x5283=(cj5*sj5);
CheckValue<IkReal> x5284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5284.valid){
continue;
}
CheckValue<IkReal> x5285=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5281*x5282))+((r01*r21))+(((-1.0)*r01*r20*x5283))+(((-1.0)*r00*x5282*x5283))+((r02*r22))+((r00*r20*x5281)))),-1);
if(!x5285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5284.value)+(((1.5707963267949)*(x5285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5286=IKsin(j4);
IkReal x5287=IKcos(j4);
IkReal x5288=(cj5*r00);
IkReal x5289=(r11*sj5);
IkReal x5290=(r01*sj5);
IkReal x5291=(cj5*r20);
IkReal x5292=(r21*sj5);
IkReal x5293=(cj5*r10);
IkReal x5294=((1.0)*x5287);
IkReal x5295=((1.0)*x5286);
evalcond[0]=((((-1.0)*r22*x5294))+((x5286*x5291))+(((-1.0)*x5292*x5295)));
evalcond[1]=((((-1.0)*r22*x5295))+((x5287*x5292))+(((-1.0)*x5291*x5294)));
evalcond[2]=(sj0+((x5286*x5288))+(((-1.0)*r02*x5294))+(((-1.0)*x5290*x5295)));
evalcond[3]=(cj0+(((-1.0)*x5288*x5294))+(((-1.0)*r02*x5295))+((x5287*x5290)));
evalcond[4]=(sj0+(((-1.0)*r12*x5295))+(((-1.0)*x5293*x5294))+((x5287*x5289)));
evalcond[5]=((((-1.0)*x5289*x5295))+((x5286*x5293))+(((-1.0)*r12*x5294))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5296=((1.0)*sj5);
CheckValue<IkReal> x5297=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5296)))),-1);
if(!x5297.valid){
continue;
}
CheckValue<IkReal> x5298 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5296))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5297.value)))+(x5298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5299=IKsin(j4);
IkReal x5300=IKcos(j4);
IkReal x5301=(cj5*r00);
IkReal x5302=(r11*sj5);
IkReal x5303=(r01*sj5);
IkReal x5304=(cj5*r20);
IkReal x5305=(r21*sj5);
IkReal x5306=(cj5*r10);
IkReal x5307=((1.0)*x5300);
IkReal x5308=((1.0)*x5299);
evalcond[0]=((((-1.0)*r22*x5307))+(((-1.0)*x5305*x5308))+((x5299*x5304)));
evalcond[1]=((((-1.0)*r22*x5308))+((x5300*x5305))+(((-1.0)*x5304*x5307)));
evalcond[2]=((((-1.0)*x5303*x5308))+sj0+(((-1.0)*r02*x5307))+((x5299*x5301)));
evalcond[3]=(((x5300*x5303))+cj0+(((-1.0)*x5301*x5307))+(((-1.0)*r02*x5308)));
evalcond[4]=((((-1.0)*x5306*x5307))+sj0+((x5300*x5302))+(((-1.0)*r12*x5308)));
evalcond[5]=((((-1.0)*r12*x5307))+(((-1.0)*x5302*x5308))+(((-1.0)*cj0))+((x5299*x5306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.58659217877095)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.58659217877095)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.58659217877095)*px))+IKsqr(((-5.58659217877095)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.58659217877095)*px), ((-5.58659217877095)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.179)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.179)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5309=((1.0)*sj5);
IkReal x5310=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5309)));
j4eval[0]=x5310;
j4eval[1]=IKsign(x5310);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5309))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5311=((1.0)*sj5);
IkReal x5312=((((-1.0)*r00*x5311))+(((-1.0)*cj5*r01)));
j4eval[0]=x5312;
j4eval[1]=IKsign(x5312);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x5311))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5313=cj5*cj5;
IkReal x5314=((1.0)*r21);
IkReal x5315=(cj5*sj5);
IkReal x5316=((1.0)*r20);
IkReal x5317=((((-1.0)*r00*x5314*x5315))+((r01*r21))+(((-1.0)*r01*x5313*x5314))+((r00*r20*x5313))+(((-1.0)*r01*x5315*x5316))+((r02*r22)));
j4eval[0]=x5317;
j4eval[1]=IKsign(x5317);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x5316))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5318=cj5*cj5;
IkReal x5319=((1.0)*r21);
IkReal x5320=(cj5*sj5);
IkReal x5321=((1.0)*r20);
CheckValue<IkReal> x5322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5318*x5319))+((r01*r21))+((r00*r20*x5318))+(((-1.0)*r00*x5319*x5320))+(((-1.0)*r01*x5320*x5321))+((r02*r22)))),-1);
if(!x5322.valid){
continue;
}
CheckValue<IkReal> x5323 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5321)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5322.value)))+(x5323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5324=IKsin(j4);
IkReal x5325=IKcos(j4);
IkReal x5326=((1.0)*cj0);
IkReal x5327=(cj5*r00);
IkReal x5328=(r11*sj5);
IkReal x5329=(r01*sj5);
IkReal x5330=(cj5*r20);
IkReal x5331=(r21*sj5);
IkReal x5332=(cj5*r10);
IkReal x5333=((1.0)*x5325);
IkReal x5334=((1.0)*x5324);
evalcond[0]=((((-1.0)*x5331*x5334))+((x5324*x5330))+(((-1.0)*r22*x5333)));
evalcond[1]=(((x5325*x5331))+(((-1.0)*x5330*x5333))+(((-1.0)*r22*x5334)));
evalcond[2]=(sj0+(((-1.0)*r02*x5333))+((x5324*x5327))+(((-1.0)*x5329*x5334)));
evalcond[3]=(((x5324*x5332))+(((-1.0)*x5328*x5334))+(((-1.0)*r12*x5333))+(((-1.0)*x5326)));
evalcond[4]=(((x5325*x5329))+(((-1.0)*r02*x5334))+(((-1.0)*x5326))+(((-1.0)*x5327*x5333)));
evalcond[5]=((((-1.0)*sj0))+((x5325*x5328))+(((-1.0)*x5332*x5333))+(((-1.0)*r12*x5334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5335=((1.0)*sj5);
CheckValue<IkReal> x5336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5335))+(((-1.0)*cj5*r01)))),-1);
if(!x5336.valid){
continue;
}
CheckValue<IkReal> x5337 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5336.value)))+(x5337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5338=IKsin(j4);
IkReal x5339=IKcos(j4);
IkReal x5340=((1.0)*cj0);
IkReal x5341=(cj5*r00);
IkReal x5342=(r11*sj5);
IkReal x5343=(r01*sj5);
IkReal x5344=(cj5*r20);
IkReal x5345=(r21*sj5);
IkReal x5346=(cj5*r10);
IkReal x5347=((1.0)*x5339);
IkReal x5348=((1.0)*x5338);
evalcond[0]=((((-1.0)*x5345*x5348))+((x5338*x5344))+(((-1.0)*r22*x5347)));
evalcond[1]=((((-1.0)*x5344*x5347))+((x5339*x5345))+(((-1.0)*r22*x5348)));
evalcond[2]=((((-1.0)*r02*x5347))+sj0+((x5338*x5341))+(((-1.0)*x5343*x5348)));
evalcond[3]=((((-1.0)*x5340))+((x5338*x5346))+(((-1.0)*r12*x5347))+(((-1.0)*x5342*x5348)));
evalcond[4]=((((-1.0)*r02*x5348))+(((-1.0)*x5340))+((x5339*x5343))+(((-1.0)*x5341*x5347)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5346*x5347))+(((-1.0)*r12*x5348))+((x5339*x5342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5349=((1.0)*sj5);
CheckValue<IkReal> x5350 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5350.valid){
continue;
}
CheckValue<IkReal> x5351=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5349)))),-1);
if(!x5351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5350.value)+(((1.5707963267949)*(x5351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5352=IKsin(j4);
IkReal x5353=IKcos(j4);
IkReal x5354=((1.0)*cj0);
IkReal x5355=(cj5*r00);
IkReal x5356=(r11*sj5);
IkReal x5357=(r01*sj5);
IkReal x5358=(cj5*r20);
IkReal x5359=(r21*sj5);
IkReal x5360=(cj5*r10);
IkReal x5361=((1.0)*x5353);
IkReal x5362=((1.0)*x5352);
evalcond[0]=((((-1.0)*r22*x5361))+((x5352*x5358))+(((-1.0)*x5359*x5362)));
evalcond[1]=((((-1.0)*r22*x5362))+((x5353*x5359))+(((-1.0)*x5358*x5361)));
evalcond[2]=(sj0+((x5352*x5355))+(((-1.0)*r02*x5361))+(((-1.0)*x5357*x5362)));
evalcond[3]=((((-1.0)*x5354))+(((-1.0)*x5356*x5362))+(((-1.0)*r12*x5361))+((x5352*x5360)));
evalcond[4]=((((-1.0)*x5354))+((x5353*x5357))+(((-1.0)*r02*x5362))+(((-1.0)*x5355*x5361)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5360*x5361))+((x5353*x5356))+(((-1.0)*r12*x5362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.1265126745929)*py))+(((0.237230316178975)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1265126745929)*px))+(((-0.237230316178975)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1265126745929)*py))+(((0.237230316178975)*px))))+IKsqr(((((1.1265126745929)*px))+(((-0.237230316178975)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.1265126745929)*py))+(((0.237230316178975)*px))), ((((1.1265126745929)*px))+(((-0.237230316178975)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5363=IKsin(j0);
IkReal x5364=IKcos(j0);
evalcond[0]=((((0.85)*x5364))+(((-1.0)*px))+(((0.179)*x5363)));
evalcond[1]=((((0.85)*x5363))+(((-1.0)*py))+(((-0.179)*x5364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5365=((1.0)*sj5);
IkReal x5366=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5365)));
j4eval[0]=x5366;
j4eval[1]=IKsign(x5366);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5365)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5367=((1.0)*sj5);
IkReal x5368=((((-1.0)*r00*x5367))+(((-1.0)*cj5*r01)));
j4eval[0]=x5368;
j4eval[1]=IKsign(x5368);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x5367))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5369=cj5*cj5;
IkReal x5370=((1.0)*r21);
IkReal x5371=(cj5*sj5);
IkReal x5372=((1.0)*r20);
IkReal x5373=((((-1.0)*r00*x5370*x5371))+((r00*r20*x5369))+(((-1.0)*r01*x5369*x5370))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x5371*x5372)));
j4eval[0]=x5373;
j4eval[1]=IKsign(x5373);
j4eval[2]=((IKabs(((((-1.0)*cj5*sj0*x5372))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5374=cj5*cj5;
IkReal x5375=((1.0)*r21);
IkReal x5376=(cj5*sj5);
IkReal x5377=((1.0)*r20);
CheckValue<IkReal> x5378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5376*x5377))+(((-1.0)*r01*x5374*x5375))+((r01*r21))+(((-1.0)*r00*x5375*x5376))+((r00*r20*x5374))+((r02*r22)))),-1);
if(!x5378.valid){
continue;
}
CheckValue<IkReal> x5379 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x5377))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5378.value)))+(x5379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5380=IKsin(j4);
IkReal x5381=IKcos(j4);
IkReal x5382=((1.0)*cj0);
IkReal x5383=(cj5*r00);
IkReal x5384=(r11*sj5);
IkReal x5385=(r01*sj5);
IkReal x5386=(cj5*r20);
IkReal x5387=(r21*sj5);
IkReal x5388=(cj5*r10);
IkReal x5389=((1.0)*x5381);
IkReal x5390=((1.0)*x5380);
evalcond[0]=((((-1.0)*x5387*x5390))+((x5380*x5386))+(((-1.0)*r22*x5389)));
evalcond[1]=(((x5381*x5387))+(((-1.0)*x5386*x5389))+(((-1.0)*r22*x5390)));
evalcond[2]=(sj0+(((-1.0)*x5385*x5390))+(((-1.0)*r02*x5389))+((x5380*x5383)));
evalcond[3]=((((-1.0)*x5384*x5390))+(((-1.0)*r12*x5389))+(((-1.0)*x5382))+((x5380*x5388)));
evalcond[4]=(((x5381*x5385))+(((-1.0)*r02*x5390))+(((-1.0)*x5382))+(((-1.0)*x5383*x5389)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5388*x5389))+((x5381*x5384))+(((-1.0)*r12*x5390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5391=((1.0)*sj5);
CheckValue<IkReal> x5392=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5391))+(((-1.0)*cj5*r01)))),-1);
if(!x5392.valid){
continue;
}
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5391))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5392.value)))+(x5393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5394=IKsin(j4);
IkReal x5395=IKcos(j4);
IkReal x5396=((1.0)*cj0);
IkReal x5397=(cj5*r00);
IkReal x5398=(r11*sj5);
IkReal x5399=(r01*sj5);
IkReal x5400=(cj5*r20);
IkReal x5401=(r21*sj5);
IkReal x5402=(cj5*r10);
IkReal x5403=((1.0)*x5395);
IkReal x5404=((1.0)*x5394);
evalcond[0]=((((-1.0)*r22*x5403))+((x5394*x5400))+(((-1.0)*x5401*x5404)));
evalcond[1]=((((-1.0)*x5400*x5403))+(((-1.0)*r22*x5404))+((x5395*x5401)));
evalcond[2]=(sj0+(((-1.0)*r02*x5403))+(((-1.0)*x5399*x5404))+((x5394*x5397)));
evalcond[3]=((((-1.0)*x5398*x5404))+(((-1.0)*r12*x5403))+(((-1.0)*x5396))+((x5394*x5402)));
evalcond[4]=((((-1.0)*r02*x5404))+(((-1.0)*x5397*x5403))+(((-1.0)*x5396))+((x5395*x5399)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5404))+(((-1.0)*x5402*x5403))+((x5395*x5398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5405=((1.0)*sj5);
CheckValue<IkReal> x5406=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5405)))),-1);
if(!x5406.valid){
continue;
}
CheckValue<IkReal> x5407 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5406.value)))+(x5407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5408=IKsin(j4);
IkReal x5409=IKcos(j4);
IkReal x5410=((1.0)*cj0);
IkReal x5411=(cj5*r00);
IkReal x5412=(r11*sj5);
IkReal x5413=(r01*sj5);
IkReal x5414=(cj5*r20);
IkReal x5415=(r21*sj5);
IkReal x5416=(cj5*r10);
IkReal x5417=((1.0)*x5409);
IkReal x5418=((1.0)*x5408);
evalcond[0]=((((-1.0)*x5415*x5418))+((x5408*x5414))+(((-1.0)*r22*x5417)));
evalcond[1]=((((-1.0)*x5414*x5417))+(((-1.0)*r22*x5418))+((x5409*x5415)));
evalcond[2]=((((-1.0)*r02*x5417))+sj0+((x5408*x5411))+(((-1.0)*x5413*x5418)));
evalcond[3]=((((-1.0)*x5412*x5418))+((x5408*x5416))+(((-1.0)*x5410))+(((-1.0)*r12*x5417)));
evalcond[4]=((((-1.0)*r02*x5418))+(((-1.0)*x5410))+(((-1.0)*x5411*x5417))+((x5409*x5413)));
evalcond[5]=((((-1.0)*x5416*x5417))+(((-1.0)*sj0))+(((-1.0)*r12*x5418))+((x5409*x5412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.1265126745929)*py))+(((0.237230316178975)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1265126745929)*px))+(((-0.237230316178975)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1265126745929)*py))+(((0.237230316178975)*px))))+IKsqr(((((1.1265126745929)*px))+(((-0.237230316178975)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.1265126745929)*py))+(((0.237230316178975)*px))), ((((1.1265126745929)*px))+(((-0.237230316178975)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5419=IKsin(j0);
IkReal x5420=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.85)*x5420))+(((0.179)*x5419)));
evalcond[1]=((((0.85)*x5419))+(((-1.0)*py))+(((-0.179)*x5420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5421=((1.0)*sj5);
IkReal x5422=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5421)));
j4eval[0]=x5422;
j4eval[1]=IKsign(x5422);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5421))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5423=cj5*cj5;
IkReal x5424=((1.0)*r21);
IkReal x5425=(cj5*sj5);
IkReal x5426=((((-1.0)*r01*r20*x5425))+(((-1.0)*r01*x5423*x5424))+((r00*r20*x5423))+((r01*r21))+(((-1.0)*r00*x5424*x5425))+((r02*r22)));
j4eval[0]=x5426;
j4eval[1]=IKsign(x5426);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x5424))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5427=cj5*cj5;
IkReal x5428=(cj5*r20);
IkReal x5429=((1.0)*sj5);
IkReal x5430=(r11*r21);
IkReal x5431=((((-1.0)*x5427*x5430))+x5430+(((-1.0)*cj5*r10*r21*x5429))+((r12*r22))+((r10*r20*x5427))+(((-1.0)*r11*x5428*x5429)));
j4eval[0]=x5431;
j4eval[1]=IKsign(x5431);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5429))+((sj0*x5428))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5432=cj5*cj5;
IkReal x5433=(cj5*r20);
IkReal x5434=((1.0)*sj5);
IkReal x5435=(r11*r21);
CheckValue<IkReal> x5436 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x5433))+(((-1.0)*r21*sj0*x5434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5436.valid){
continue;
}
CheckValue<IkReal> x5437=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x5434))+x5435+(((-1.0)*x5432*x5435))+((r10*r20*x5432))+((r12*r22))+(((-1.0)*r11*x5433*x5434)))),-1);
if(!x5437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5436.value)+(((1.5707963267949)*(x5437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5438=IKsin(j4);
IkReal x5439=IKcos(j4);
IkReal x5440=(cj5*r00);
IkReal x5441=(r11*sj5);
IkReal x5442=(r01*sj5);
IkReal x5443=(cj5*r20);
IkReal x5444=(r21*sj5);
IkReal x5445=(cj5*r10);
IkReal x5446=((1.0)*x5439);
IkReal x5447=((1.0)*x5438);
evalcond[0]=((((-1.0)*x5444*x5447))+((x5438*x5443))+(((-1.0)*r22*x5446)));
evalcond[1]=((((-1.0)*x5443*x5446))+((x5439*x5444))+(((-1.0)*r22*x5447)));
evalcond[2]=(sj0+(((-1.0)*x5442*x5447))+((x5438*x5440))+(((-1.0)*r02*x5446)));
evalcond[3]=(cj0+((x5439*x5442))+(((-1.0)*r02*x5447))+(((-1.0)*x5440*x5446)));
evalcond[4]=((((-1.0)*x5445*x5446))+sj0+(((-1.0)*r12*x5447))+((x5439*x5441)));
evalcond[5]=((((-1.0)*r12*x5446))+((x5438*x5445))+(((-1.0)*x5441*x5447))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5448=cj5*cj5;
IkReal x5449=((1.0)*r21);
IkReal x5450=(cj5*sj5);
CheckValue<IkReal> x5451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x5450))+(((-1.0)*r01*x5448*x5449))+((r01*r21))+((r00*r20*x5448))+((r02*r22))+(((-1.0)*r00*x5449*x5450)))),-1);
if(!x5451.valid){
continue;
}
CheckValue<IkReal> x5452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x5449))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5451.value)))+(x5452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5453=IKsin(j4);
IkReal x5454=IKcos(j4);
IkReal x5455=(cj5*r00);
IkReal x5456=(r11*sj5);
IkReal x5457=(r01*sj5);
IkReal x5458=(cj5*r20);
IkReal x5459=(r21*sj5);
IkReal x5460=(cj5*r10);
IkReal x5461=((1.0)*x5454);
IkReal x5462=((1.0)*x5453);
evalcond[0]=((((-1.0)*x5459*x5462))+((x5453*x5458))+(((-1.0)*r22*x5461)));
evalcond[1]=(((x5454*x5459))+(((-1.0)*x5458*x5461))+(((-1.0)*r22*x5462)));
evalcond[2]=(sj0+(((-1.0)*r02*x5461))+(((-1.0)*x5457*x5462))+((x5453*x5455)));
evalcond[3]=(cj0+((x5454*x5457))+(((-1.0)*r02*x5462))+(((-1.0)*x5455*x5461)));
evalcond[4]=(sj0+((x5454*x5456))+(((-1.0)*r12*x5462))+(((-1.0)*x5460*x5461)));
evalcond[5]=((((-1.0)*r12*x5461))+((x5453*x5460))+(((-1.0)*x5456*x5462))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5463=((1.0)*sj5);
CheckValue<IkReal> x5464=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5463)))),-1);
if(!x5464.valid){
continue;
}
CheckValue<IkReal> x5465 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5464.value)))+(x5465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5466=IKsin(j4);
IkReal x5467=IKcos(j4);
IkReal x5468=(cj5*r00);
IkReal x5469=(r11*sj5);
IkReal x5470=(r01*sj5);
IkReal x5471=(cj5*r20);
IkReal x5472=(r21*sj5);
IkReal x5473=(cj5*r10);
IkReal x5474=((1.0)*x5467);
IkReal x5475=((1.0)*x5466);
evalcond[0]=(((x5466*x5471))+(((-1.0)*x5472*x5475))+(((-1.0)*r22*x5474)));
evalcond[1]=(((x5467*x5472))+(((-1.0)*r22*x5475))+(((-1.0)*x5471*x5474)));
evalcond[2]=(((x5466*x5468))+sj0+(((-1.0)*x5470*x5475))+(((-1.0)*r02*x5474)));
evalcond[3]=((((-1.0)*x5468*x5474))+cj0+((x5467*x5470))+(((-1.0)*r02*x5475)));
evalcond[4]=(((x5467*x5469))+sj0+(((-1.0)*r12*x5475))+(((-1.0)*x5473*x5474)));
evalcond[5]=(((x5466*x5473))+(((-1.0)*r12*x5474))+(((-1.0)*x5469*x5475))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.58659217877095)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.58659217877095)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.58659217877095)*px))+IKsqr(((-5.58659217877095)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.58659217877095)*px), ((-5.58659217877095)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.179)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.179)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5476=((1.0)*sj5);
IkReal x5477=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5476)));
j4eval[0]=x5477;
j4eval[1]=IKsign(x5477);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5476))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5478=((1.0)*sj5);
IkReal x5479=((((-1.0)*r00*x5478))+(((-1.0)*cj5*r01)));
j4eval[0]=x5479;
j4eval[1]=IKsign(x5479);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x5478))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5480=cj5*cj5;
IkReal x5481=((1.0)*r21);
IkReal x5482=(cj5*sj5);
IkReal x5483=((1.0)*r20);
IkReal x5484=((((-1.0)*r00*x5481*x5482))+((r01*r21))+((r00*r20*x5480))+(((-1.0)*r01*x5480*x5481))+((r02*r22))+(((-1.0)*r01*x5482*x5483)));
j4eval[0]=x5484;
j4eval[1]=IKsign(x5484);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5483)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5485=cj5*cj5;
IkReal x5486=((1.0)*r21);
IkReal x5487=(cj5*sj5);
IkReal x5488=((1.0)*r20);
CheckValue<IkReal> x5489=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x5485))+(((-1.0)*r01*x5485*x5486))+(((-1.0)*r01*x5487*x5488))+((r02*r22))+(((-1.0)*r00*x5486*x5487)))),-1);
if(!x5489.valid){
continue;
}
CheckValue<IkReal> x5490 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5488)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5489.value)))+(x5490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5491=IKsin(j4);
IkReal x5492=IKcos(j4);
IkReal x5493=((1.0)*cj0);
IkReal x5494=(cj5*r00);
IkReal x5495=(r11*sj5);
IkReal x5496=(r01*sj5);
IkReal x5497=(cj5*r20);
IkReal x5498=(r21*sj5);
IkReal x5499=(cj5*r10);
IkReal x5500=((1.0)*x5492);
IkReal x5501=((1.0)*x5491);
evalcond[0]=((((-1.0)*r22*x5500))+(((-1.0)*x5498*x5501))+((x5491*x5497)));
evalcond[1]=((((-1.0)*r22*x5501))+(((-1.0)*x5497*x5500))+((x5492*x5498)));
evalcond[2]=(sj0+(((-1.0)*x5496*x5501))+(((-1.0)*r02*x5500))+((x5491*x5494)));
evalcond[3]=((((-1.0)*x5493))+(((-1.0)*r12*x5500))+((x5491*x5499))+(((-1.0)*x5495*x5501)));
evalcond[4]=((((-1.0)*x5493))+(((-1.0)*r02*x5501))+((x5492*x5496))+(((-1.0)*x5494*x5500)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5501))+((x5492*x5495))+(((-1.0)*x5499*x5500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5502=((1.0)*sj5);
CheckValue<IkReal> x5503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5502))+(((-1.0)*cj5*r01)))),-1);
if(!x5503.valid){
continue;
}
CheckValue<IkReal> x5504 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5502))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5503.value)))+(x5504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5505=IKsin(j4);
IkReal x5506=IKcos(j4);
IkReal x5507=((1.0)*cj0);
IkReal x5508=(cj5*r00);
IkReal x5509=(r11*sj5);
IkReal x5510=(r01*sj5);
IkReal x5511=(cj5*r20);
IkReal x5512=(r21*sj5);
IkReal x5513=(cj5*r10);
IkReal x5514=((1.0)*x5506);
IkReal x5515=((1.0)*x5505);
evalcond[0]=((((-1.0)*r22*x5514))+(((-1.0)*x5512*x5515))+((x5505*x5511)));
evalcond[1]=((((-1.0)*r22*x5515))+(((-1.0)*x5511*x5514))+((x5506*x5512)));
evalcond[2]=((((-1.0)*x5510*x5515))+sj0+(((-1.0)*r02*x5514))+((x5505*x5508)));
evalcond[3]=((((-1.0)*r12*x5514))+(((-1.0)*x5507))+((x5505*x5513))+(((-1.0)*x5509*x5515)));
evalcond[4]=((((-1.0)*r02*x5515))+(((-1.0)*x5507))+(((-1.0)*x5508*x5514))+((x5506*x5510)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5513*x5514))+(((-1.0)*r12*x5515))+((x5506*x5509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5516=((1.0)*sj5);
CheckValue<IkReal> x5517 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5517.valid){
continue;
}
CheckValue<IkReal> x5518=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5516)))),-1);
if(!x5518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5517.value)+(((1.5707963267949)*(x5518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5519=IKsin(j4);
IkReal x5520=IKcos(j4);
IkReal x5521=((1.0)*cj0);
IkReal x5522=(cj5*r00);
IkReal x5523=(r11*sj5);
IkReal x5524=(r01*sj5);
IkReal x5525=(cj5*r20);
IkReal x5526=(r21*sj5);
IkReal x5527=(cj5*r10);
IkReal x5528=((1.0)*x5520);
IkReal x5529=((1.0)*x5519);
evalcond[0]=((((-1.0)*r22*x5528))+(((-1.0)*x5526*x5529))+((x5519*x5525)));
evalcond[1]=((((-1.0)*r22*x5529))+((x5520*x5526))+(((-1.0)*x5525*x5528)));
evalcond[2]=(sj0+(((-1.0)*r02*x5528))+((x5519*x5522))+(((-1.0)*x5524*x5529)));
evalcond[3]=((((-1.0)*x5523*x5529))+(((-1.0)*x5521))+((x5519*x5527))+(((-1.0)*r12*x5528)));
evalcond[4]=((((-1.0)*x5521))+(((-1.0)*r02*x5529))+((x5520*x5524))+(((-1.0)*x5522*x5528)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5527*x5528))+((x5520*x5523))+(((-1.0)*r12*x5529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.58659217877095)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.58659217877095)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.58659217877095)*px))+IKsqr(((-5.58659217877095)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.58659217877095)*px), ((-5.58659217877095)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.179)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.179)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5530=((1.0)*sj5);
IkReal x5531=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5530)));
j4eval[0]=x5531;
j4eval[1]=IKsign(x5531);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5530))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5532=cj5*cj5;
IkReal x5533=((1.0)*r21);
IkReal x5534=(cj5*sj5);
IkReal x5535=((((-1.0)*r01*r20*x5534))+((r01*r21))+(((-1.0)*r01*x5532*x5533))+(((-1.0)*r00*x5533*x5534))+((r00*r20*x5532))+((r02*r22)));
j4eval[0]=x5535;
j4eval[1]=IKsign(x5535);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x5533))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5536=cj5*cj5;
IkReal x5537=(cj5*r20);
IkReal x5538=((1.0)*sj5);
IkReal x5539=(r11*r21);
IkReal x5540=((((-1.0)*r11*x5537*x5538))+x5539+((r10*r20*x5536))+(((-1.0)*cj5*r10*r21*x5538))+((r12*r22))+(((-1.0)*x5536*x5539)));
j4eval[0]=x5540;
j4eval[1]=IKsign(x5540);
j4eval[2]=((IKabs((((sj0*x5537))+(((-1.0)*r21*sj0*x5538)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5541=cj5*cj5;
IkReal x5542=(cj5*r20);
IkReal x5543=((1.0)*sj5);
IkReal x5544=(r11*r21);
CheckValue<IkReal> x5545 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x5542))+(((-1.0)*r21*sj0*x5543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5545.valid){
continue;
}
CheckValue<IkReal> x5546=IKPowWithIntegerCheck(IKsign((((r10*r20*x5541))+x5544+((r12*r22))+(((-1.0)*r11*x5542*x5543))+(((-1.0)*x5541*x5544))+(((-1.0)*cj5*r10*r21*x5543)))),-1);
if(!x5546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5545.value)+(((1.5707963267949)*(x5546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5547=IKsin(j4);
IkReal x5548=IKcos(j4);
IkReal x5549=(cj5*r00);
IkReal x5550=(r11*sj5);
IkReal x5551=(r01*sj5);
IkReal x5552=(cj5*r20);
IkReal x5553=(r21*sj5);
IkReal x5554=(cj5*r10);
IkReal x5555=((1.0)*x5548);
IkReal x5556=((1.0)*x5547);
evalcond[0]=((((-1.0)*x5553*x5556))+((x5547*x5552))+(((-1.0)*r22*x5555)));
evalcond[1]=((((-1.0)*x5552*x5555))+((x5548*x5553))+(((-1.0)*r22*x5556)));
evalcond[2]=(sj0+(((-1.0)*x5551*x5556))+((x5547*x5549))+(((-1.0)*r02*x5555)));
evalcond[3]=(cj0+(((-1.0)*x5549*x5555))+((x5548*x5551))+(((-1.0)*r02*x5556)));
evalcond[4]=(sj0+(((-1.0)*r12*x5556))+((x5548*x5550))+(((-1.0)*x5554*x5555)));
evalcond[5]=((((-1.0)*x5550*x5556))+((x5547*x5554))+(((-1.0)*r12*x5555))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5557=cj5*cj5;
IkReal x5558=((1.0)*r21);
IkReal x5559=(cj5*sj5);
CheckValue<IkReal> x5560=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*r20*x5559))+((r00*r20*x5557))+(((-1.0)*r00*x5558*x5559))+((r02*r22))+(((-1.0)*r01*x5557*x5558)))),-1);
if(!x5560.valid){
continue;
}
CheckValue<IkReal> x5561 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x5558))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5560.value)))+(x5561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5562=IKsin(j4);
IkReal x5563=IKcos(j4);
IkReal x5564=(cj5*r00);
IkReal x5565=(r11*sj5);
IkReal x5566=(r01*sj5);
IkReal x5567=(cj5*r20);
IkReal x5568=(r21*sj5);
IkReal x5569=(cj5*r10);
IkReal x5570=((1.0)*x5563);
IkReal x5571=((1.0)*x5562);
evalcond[0]=(((x5562*x5567))+(((-1.0)*x5568*x5571))+(((-1.0)*r22*x5570)));
evalcond[1]=(((x5563*x5568))+(((-1.0)*x5567*x5570))+(((-1.0)*r22*x5571)));
evalcond[2]=(sj0+((x5562*x5564))+(((-1.0)*r02*x5570))+(((-1.0)*x5566*x5571)));
evalcond[3]=((((-1.0)*x5564*x5570))+cj0+((x5563*x5566))+(((-1.0)*r02*x5571)));
evalcond[4]=(sj0+(((-1.0)*r12*x5571))+((x5563*x5565))+(((-1.0)*x5569*x5570)));
evalcond[5]=(((x5562*x5569))+(((-1.0)*r12*x5570))+(((-1.0)*x5565*x5571))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5572=((1.0)*sj5);
CheckValue<IkReal> x5573 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5573.valid){
continue;
}
CheckValue<IkReal> x5574=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5572)))),-1);
if(!x5574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5573.value)+(((1.5707963267949)*(x5574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5575=IKsin(j4);
IkReal x5576=IKcos(j4);
IkReal x5577=(cj5*r00);
IkReal x5578=(r11*sj5);
IkReal x5579=(r01*sj5);
IkReal x5580=(cj5*r20);
IkReal x5581=(r21*sj5);
IkReal x5582=(cj5*r10);
IkReal x5583=((1.0)*x5576);
IkReal x5584=((1.0)*x5575);
evalcond[0]=(((x5575*x5580))+(((-1.0)*r22*x5583))+(((-1.0)*x5581*x5584)));
evalcond[1]=(((x5576*x5581))+(((-1.0)*x5580*x5583))+(((-1.0)*r22*x5584)));
evalcond[2]=(sj0+((x5575*x5577))+(((-1.0)*x5579*x5584))+(((-1.0)*r02*x5583)));
evalcond[3]=((((-1.0)*x5577*x5583))+cj0+(((-1.0)*r02*x5584))+((x5576*x5579)));
evalcond[4]=((((-1.0)*r12*x5584))+sj0+(((-1.0)*x5582*x5583))+((x5576*x5578)));
evalcond[5]=((((-1.0)*r12*x5583))+((x5575*x5582))+(((-1.0)*x5578*x5584))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5585=(r00*sj5);
IkReal x5586=(cj5*r01);
IkReal x5587=(cj1*cj2);
IkReal x5588=((1000.0)*px);
IkReal x5589=(sj1*sj2);
IkReal x5590=((850.0)*cj1);
IkReal x5591=((574.0)*x5589);
CheckValue<IkReal> x5592=IKPowWithIntegerCheck(((((179.0)*x5589))+(((-179.0)*x5587))),-1);
if(!x5592.valid){
continue;
}
CheckValue<IkReal> x5593=IKPowWithIntegerCheck((x5589+(((-1.0)*x5587))),-1);
if(!x5593.valid){
continue;
}
if( IKabs(((x5592.value)*(((((-1.0)*x5586*x5590))+((x5586*x5591))+(((-574.0)*x5585*x5587))+(((-1.0)*x5585*x5590))+((x5585*x5591))+((x5588*x5589))+(((-1.0)*x5587*x5588))+(((-574.0)*x5586*x5587)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5593.value)*(((((-1.0)*x5585))+(((-1.0)*x5586)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5592.value)*(((((-1.0)*x5586*x5590))+((x5586*x5591))+(((-574.0)*x5585*x5587))+(((-1.0)*x5585*x5590))+((x5585*x5591))+((x5588*x5589))+(((-1.0)*x5587*x5588))+(((-574.0)*x5586*x5587))))))+IKsqr(((x5593.value)*(((((-1.0)*x5585))+(((-1.0)*x5586))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5592.value)*(((((-1.0)*x5586*x5590))+((x5586*x5591))+(((-574.0)*x5585*x5587))+(((-1.0)*x5585*x5590))+((x5585*x5591))+((x5588*x5589))+(((-1.0)*x5587*x5588))+(((-574.0)*x5586*x5587))))), ((x5593.value)*(((((-1.0)*x5585))+(((-1.0)*x5586))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5594=IKcos(j0);
IkReal x5595=IKsin(j0);
IkReal x5596=(sj1*sj2);
IkReal x5597=(cj1*cj2);
IkReal x5598=(cj5*r01);
IkReal x5599=(cj5*r11);
IkReal x5600=((0.85)*cj1);
IkReal x5601=((0.138)*sj5);
IkReal x5602=((0.712)*x5594);
IkReal x5603=((0.712)*x5595);
evalcond[0]=(((r00*sj5))+x5598+(((-1.0)*x5594*x5597))+((x5594*x5596)));
evalcond[1]=(((x5595*x5596))+x5599+((r10*sj5))+(((-1.0)*x5595*x5597)));
evalcond[2]=(((x5596*x5602))+(((-1.0)*x5597*x5602))+(((0.138)*x5598))+(((-1.0)*px))+((r00*x5601))+(((0.179)*x5595))+(((-1.0)*x5594*x5600)));
evalcond[3]=(((x5596*x5603))+(((-1.0)*x5597*x5603))+(((0.138)*x5599))+(((-1.0)*py))+(((-0.179)*x5594))+(((-1.0)*x5595*x5600))+((r10*x5601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5604=((1.0)*sj5);
IkReal x5605=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5604)));
j4eval[0]=x5605;
j4eval[1]=IKsign(x5605);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5604))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5606=((1.0)*sj5);
IkReal x5607=((((-1.0)*r00*x5606))+(((-1.0)*cj5*r01)));
j4eval[0]=x5607;
j4eval[1]=IKsign(x5607);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5606)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5608=((1.0)*sj5);
IkReal x5609=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5609;
j4eval[1]=((IKabs(((((-1.0)*cj0*r01*x5608))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x5608))+((cj5*r10*sj0)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x5609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5611 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5611)==0){
continue;
}
IkReal x5610=pow(x5611,-0.5);
CheckValue<IkReal> x5612 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5612.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5612.value));
IkReal gconst115=((-1.0)*r21*x5610);
IkReal gconst116=(r20*x5610);
CheckValue<IkReal> x5613 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5613.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5613.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5616 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5616.valid){
continue;
}
IkReal x5614=((-1.0)*(x5616.value));
IkReal x5615=x5610;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5614;
IkReal gconst114=x5614;
IkReal gconst115=((-1.0)*r21*x5615);
IkReal gconst116=(r20*x5615);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5619 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5619.valid){
continue;
}
IkReal x5617=((-1.0)*(x5619.value));
IkReal x5618=x5610;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5617;
IkReal gconst114=x5617;
IkReal gconst115=((-1.0)*r21*x5618);
IkReal gconst116=(r20*x5618);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x5622 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5622.valid){
continue;
}
IkReal x5620=((-1.0)*(x5622.value));
IkReal x5621=x5610;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5620;
IkReal gconst114=x5620;
IkReal gconst115=((-1.0)*r21*x5621);
IkReal gconst116=(r20*x5621);
IkReal x5623=r22*r22;
CheckValue<IkReal> x5626=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5623))),-1);
if(!x5626.valid){
continue;
}
IkReal x5624=x5626.value;
IkReal x5625=(x5623+((x5624*(r20*r20*r20*r20)))+((x5624*(r21*r21*r21*r21)))+(((2.0)*x5624*(r20*r20)*(r21*r21))));
j4eval[0]=x5625;
j4eval[1]=IKsign(x5625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5627=(sj1*sj2);
IkReal x5628=(gconst115*r21);
IkReal x5629=(cj1*cj2);
IkReal x5630=(gconst116*r20);
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5629))+((r22*x5627)))),IkReal(((((-1.0)*x5629*x5630))+((x5627*x5630))+((x5628*x5629))+(((-1.0)*x5627*x5628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
CheckValue<IkReal> x5632=IKPowWithIntegerCheck(IKsign(((x5630*x5630)+(r22*r22)+(x5628*x5628)+(((-2.0)*x5628*x5630)))),-1);
if(!x5632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5631.value)+(((1.5707963267949)*(x5632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5633=IKsin(j4);
IkReal x5634=IKcos(j4);
IkReal x5635=(cj2*sj1);
IkReal x5636=(cj1*sj2);
IkReal x5637=((1.0)*x5634);
IkReal x5638=(gconst116*x5633);
IkReal x5639=(gconst115*x5634);
IkReal x5640=((1.0)*x5633);
evalcond[0]=((((-1.0)*gconst115*r21*x5640))+((r20*x5638))+(((-1.0)*r22*x5637)));
evalcond[1]=(sj0+(((-1.0)*r02*x5637))+(((-1.0)*gconst115*r01*x5640))+((r00*x5638)));
evalcond[2]=((((-1.0)*r12*x5637))+(((-1.0)*gconst115*r11*x5640))+((r10*x5638))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5640))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5639))+(((-1.0)*gconst116*r20*x5637)));
evalcond[4]=(((r01*x5639))+(((-1.0)*gconst116*r00*x5637))+(((-1.0)*r02*x5640))+((cj0*x5636))+((cj0*x5635)));
evalcond[5]=(((r11*x5639))+(((-1.0)*r12*x5640))+((sj0*x5636))+((sj0*x5635))+(((-1.0)*gconst116*r10*x5637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5641=((1.0)*gconst115);
CheckValue<IkReal> x5642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r01))+(((-1.0)*r00*x5641)))),-1);
if(!x5642.valid){
continue;
}
CheckValue<IkReal> x5643 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5641))+((cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5642.value)))+(x5643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5644=IKsin(j4);
IkReal x5645=IKcos(j4);
IkReal x5646=(cj2*sj1);
IkReal x5647=(cj1*sj2);
IkReal x5648=((1.0)*x5645);
IkReal x5649=(gconst116*x5644);
IkReal x5650=(gconst115*x5645);
IkReal x5651=((1.0)*x5644);
evalcond[0]=((((-1.0)*r22*x5648))+(((-1.0)*gconst115*r21*x5651))+((r20*x5649)));
evalcond[1]=(sj0+((r00*x5649))+(((-1.0)*gconst115*r01*x5651))+(((-1.0)*r02*x5648)));
evalcond[2]=((((-1.0)*r12*x5648))+(((-1.0)*gconst115*r11*x5651))+(((-1.0)*cj0))+((r10*x5649)));
evalcond[3]=((((-1.0)*r22*x5651))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst116*r20*x5648))+((sj1*sj2))+((r21*x5650)));
evalcond[4]=(((cj0*x5646))+((cj0*x5647))+((r01*x5650))+(((-1.0)*gconst116*r00*x5648))+(((-1.0)*r02*x5651)));
evalcond[5]=((((-1.0)*r12*x5651))+((sj0*x5646))+((sj0*x5647))+((r11*x5650))+(((-1.0)*gconst116*r10*x5648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5652=((1.0)*gconst115);
CheckValue<IkReal> x5653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5652))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5653.valid){
continue;
}
CheckValue<IkReal> x5654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5652))+(((-1.0)*gconst116*r11)))),-1);
if(!x5654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5653.value)+(((1.5707963267949)*(x5654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5655=IKsin(j4);
IkReal x5656=IKcos(j4);
IkReal x5657=(cj2*sj1);
IkReal x5658=(cj1*sj2);
IkReal x5659=((1.0)*x5656);
IkReal x5660=(gconst116*x5655);
IkReal x5661=(gconst115*x5656);
IkReal x5662=((1.0)*x5655);
evalcond[0]=((((-1.0)*r22*x5659))+(((-1.0)*gconst115*r21*x5662))+((r20*x5660)));
evalcond[1]=(((r00*x5660))+sj0+(((-1.0)*r02*x5659))+(((-1.0)*gconst115*r01*x5662)));
evalcond[2]=((((-1.0)*r12*x5659))+(((-1.0)*gconst115*r11*x5662))+((r10*x5660))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5662))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst116*r20*x5659))+((r21*x5661)));
evalcond[4]=(((r01*x5661))+((cj0*x5658))+((cj0*x5657))+(((-1.0)*r02*x5662))+(((-1.0)*gconst116*r00*x5659)));
evalcond[5]=(((sj0*x5658))+((sj0*x5657))+(((-1.0)*gconst116*r10*x5659))+((r11*x5661))+(((-1.0)*r12*x5662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5664 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5664)==0){
continue;
}
IkReal x5663=pow(x5664,-0.5);
CheckValue<IkReal> x5665 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5665.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5665.value))));
IkReal gconst118=((1.0)*r21*x5663);
IkReal gconst119=((-1.0)*r20*x5663);
CheckValue<IkReal> x5666 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5666.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5666.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5669 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5669.valid){
continue;
}
IkReal x5667=((1.0)*(x5669.value));
IkReal x5668=x5663;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5667)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5667)));
IkReal gconst118=((1.0)*r21*x5668);
IkReal gconst119=((-1.0)*r20*x5668);
IkReal x5670=r22*r22;
IkReal x5671=((1.0)*x5670);
CheckValue<IkReal> x5675=IKPowWithIntegerCheck(((-1.0)+x5670),-1);
if(!x5675.valid){
continue;
}
IkReal x5672=x5675.value;
if((((1.0)+(((-1.0)*x5671)))) < -0.00001)
continue;
IkReal x5673=IKsqrt(((1.0)+(((-1.0)*x5671))));
IkReal x5674=(sj0*x5672*x5673);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5674+(((-1.0)*x5671*x5674))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5678 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5678.valid){
continue;
}
IkReal x5676=((1.0)*(x5678.value));
IkReal x5677=x5663;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5676)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5676)));
IkReal gconst118=((1.0)*r21*x5677);
IkReal gconst119=((-1.0)*r20*x5677);
IkReal x5679=r22*r22;
IkReal x5680=((1.0)*x5679);
CheckValue<IkReal> x5684=IKPowWithIntegerCheck(((-1.0)+x5679),-1);
if(!x5684.valid){
continue;
}
IkReal x5681=x5684.value;
if((((1.0)+(((-1.0)*x5680)))) < -0.00001)
continue;
IkReal x5682=IKsqrt(((1.0)+(((-1.0)*x5680))));
IkReal x5683=(cj0*x5681*x5682);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5683+(((-1.0)*x5680*x5683))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5687 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5687.valid){
continue;
}
IkReal x5685=((1.0)*(x5687.value));
IkReal x5686=x5663;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5685)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5685)));
IkReal gconst118=((1.0)*r21*x5686);
IkReal gconst119=((-1.0)*r20*x5686);
IkReal x5688=r22*r22;
IkReal x5689=(cj0*r02);
IkReal x5690=(r12*sj0);
CheckValue<IkReal> x5694=IKPowWithIntegerCheck(((-1.0)+x5688),-1);
if(!x5694.valid){
continue;
}
IkReal x5691=x5694.value;
if((((1.0)+(((-1.0)*x5688)))) < -0.00001)
continue;
IkReal x5692=IKsqrt(((1.0)+(((-1.0)*x5688))));
IkReal x5693=((1.0)*r22*x5691*x5692);
j4eval[0]=0;
j4eval[1]=((IKabs((x5690+x5689)))+(IKabs(((((-1.0)*x5690*x5693))+(((-1.0)*x5689*x5693))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5695=((1.0)*gconst118);
CheckValue<IkReal> x5696=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x5696.valid){
continue;
}
CheckValue<IkReal> x5697 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5695))+((cj0*gconst119*r00))+(((-1.0)*r11*sj0*x5695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5696.value)))+(x5697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5698=IKsin(j4);
IkReal x5699=IKcos(j4);
IkReal x5700=(cj2*sj1);
IkReal x5701=(gconst118*r01);
IkReal x5702=(gconst119*r10);
IkReal x5703=(gconst119*r20);
IkReal x5704=(gconst118*r21);
IkReal x5705=(gconst119*r00);
IkReal x5706=(gconst118*r11);
IkReal x5707=(cj1*sj2);
IkReal x5708=((1.0)*x5699);
IkReal x5709=((1.0)*x5698);
evalcond[0]=((((-1.0)*r22*x5708))+(((-1.0)*x5704*x5709))+((x5698*x5703)));
evalcond[1]=(sj0+(((-1.0)*x5701*x5709))+(((-1.0)*r02*x5708))+((x5698*x5705)));
evalcond[2]=((((-1.0)*r12*x5708))+(((-1.0)*x5706*x5709))+(((-1.0)*cj0))+((x5698*x5702)));
evalcond[3]=((((-1.0)*r22*x5709))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5703*x5708))+((x5699*x5704)));
evalcond[4]=((((-1.0)*r02*x5709))+(((-1.0)*x5705*x5708))+((x5699*x5701))+((cj0*x5707))+((cj0*x5700)));
evalcond[5]=((((-1.0)*r12*x5709))+(((-1.0)*x5702*x5708))+((sj0*x5700))+((sj0*x5707))+((x5699*x5706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5710=((1.0)*gconst118);
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5710))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
CheckValue<IkReal> x5712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5710))+(((-1.0)*gconst119*r01)))),-1);
if(!x5712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5711.value)+(((1.5707963267949)*(x5712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5713=IKsin(j4);
IkReal x5714=IKcos(j4);
IkReal x5715=(cj2*sj1);
IkReal x5716=(gconst118*r01);
IkReal x5717=(gconst119*r10);
IkReal x5718=(gconst119*r20);
IkReal x5719=(gconst118*r21);
IkReal x5720=(gconst119*r00);
IkReal x5721=(gconst118*r11);
IkReal x5722=(cj1*sj2);
IkReal x5723=((1.0)*x5714);
IkReal x5724=((1.0)*x5713);
evalcond[0]=((((-1.0)*x5719*x5724))+(((-1.0)*r22*x5723))+((x5713*x5718)));
evalcond[1]=(sj0+(((-1.0)*r02*x5723))+((x5713*x5720))+(((-1.0)*x5716*x5724)));
evalcond[2]=((((-1.0)*r12*x5723))+(((-1.0)*x5721*x5724))+((x5713*x5717))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5718*x5723))+(((-1.0)*r22*x5724))+((x5714*x5719)));
evalcond[4]=(((cj0*x5715))+(((-1.0)*r02*x5724))+((cj0*x5722))+(((-1.0)*x5720*x5723))+((x5714*x5716)));
evalcond[5]=(((sj0*x5722))+(((-1.0)*r12*x5724))+(((-1.0)*x5717*x5723))+((x5714*x5721))+((sj0*x5715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5725=((1.0)*gconst118);
CheckValue<IkReal> x5726=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r11))+(((-1.0)*r10*x5725)))),-1);
if(!x5726.valid){
continue;
}
CheckValue<IkReal> x5727 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5725))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5726.value)))+(x5727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5728=IKsin(j4);
IkReal x5729=IKcos(j4);
IkReal x5730=(cj2*sj1);
IkReal x5731=(gconst118*r01);
IkReal x5732=(gconst119*r10);
IkReal x5733=(gconst119*r20);
IkReal x5734=(gconst118*r21);
IkReal x5735=(gconst119*r00);
IkReal x5736=(gconst118*r11);
IkReal x5737=(cj1*sj2);
IkReal x5738=((1.0)*x5729);
IkReal x5739=((1.0)*x5728);
evalcond[0]=((((-1.0)*x5734*x5739))+((x5728*x5733))+(((-1.0)*r22*x5738)));
evalcond[1]=(sj0+(((-1.0)*r02*x5738))+((x5728*x5735))+(((-1.0)*x5731*x5739)));
evalcond[2]=((((-1.0)*r12*x5738))+((x5728*x5732))+(((-1.0)*x5736*x5739))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5733*x5738))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5729*x5734))+(((-1.0)*r22*x5739)));
evalcond[4]=((((-1.0)*r02*x5739))+(((-1.0)*x5735*x5738))+((x5729*x5731))+((cj0*x5737))+((cj0*x5730)));
evalcond[5]=((((-1.0)*x5732*x5738))+(((-1.0)*r12*x5739))+((x5729*x5736))+((sj0*x5737))+((sj0*x5730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5740=((-1.0)*r00);
IkReal x5742 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5742)==0){
continue;
}
IkReal x5741=pow(x5742,-0.5);
CheckValue<IkReal> x5743 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5740),IKFAST_ATAN2_MAGTHRESH);
if(!x5743.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5743.value));
IkReal gconst121=(r01*x5741);
IkReal gconst122=(x5740*x5741);
CheckValue<IkReal> x5744 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5744.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5744.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5745=((-1.0)*r00);
IkReal x5746=x5741;
CheckValue<IkReal> x5748 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5745),IKFAST_ATAN2_MAGTHRESH);
if(!x5748.valid){
continue;
}
IkReal x5747=((-1.0)*(x5748.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5747;
IkReal gconst120=x5747;
IkReal gconst121=(r01*x5746);
IkReal gconst122=(x5745*x5746);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5749=((1.0)*gconst121);
CheckValue<IkReal> x5750 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5749))+((cj0*gconst122*r00))+(((-1.0)*r11*sj0*x5749))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5750.valid){
continue;
}
CheckValue<IkReal> x5751=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x5751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5750.value)+(((1.5707963267949)*(x5751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5752=IKsin(j4);
IkReal x5753=IKcos(j4);
IkReal x5754=(gconst121*r11);
IkReal x5755=(gconst122*r00);
IkReal x5756=(cj2*sj1);
IkReal x5757=(gconst121*r01);
IkReal x5758=(gconst121*r21);
IkReal x5759=(cj1*sj2);
IkReal x5760=((1.0)*x5753);
IkReal x5761=(gconst122*x5752);
IkReal x5762=((1.0)*x5752);
evalcond[0]=((((-1.0)*x5758*x5762))+(((-1.0)*r22*x5760))+((r20*x5761)));
evalcond[1]=(sj0+(((-1.0)*x5757*x5762))+((x5752*x5755))+(((-1.0)*r02*x5760)));
evalcond[2]=((((-1.0)*r12*x5760))+((r10*x5761))+(((-1.0)*x5754*x5762))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst122*r20*x5760))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5762))+((x5753*x5758)));
evalcond[4]=((((-1.0)*x5755*x5760))+((x5753*x5757))+(((-1.0)*r02*x5762))+((cj0*x5756))+((cj0*x5759)));
evalcond[5]=((((-1.0)*r12*x5762))+(((-1.0)*gconst122*r10*x5760))+((x5753*x5754))+((sj0*x5759))+((sj0*x5756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5763=((1.0)*gconst121);
CheckValue<IkReal> x5764 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5763))+((gconst122*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5764.valid){
continue;
}
CheckValue<IkReal> x5765=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r11))+(((-1.0)*r10*x5763)))),-1);
if(!x5765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5764.value)+(((1.5707963267949)*(x5765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5766=IKsin(j4);
IkReal x5767=IKcos(j4);
IkReal x5768=(gconst121*r11);
IkReal x5769=(gconst122*r00);
IkReal x5770=(cj2*sj1);
IkReal x5771=(gconst121*r01);
IkReal x5772=(gconst121*r21);
IkReal x5773=(cj1*sj2);
IkReal x5774=((1.0)*x5767);
IkReal x5775=(gconst122*x5766);
IkReal x5776=((1.0)*x5766);
evalcond[0]=((((-1.0)*r22*x5774))+((r20*x5775))+(((-1.0)*x5772*x5776)));
evalcond[1]=(sj0+((x5766*x5769))+(((-1.0)*x5771*x5776))+(((-1.0)*r02*x5774)));
evalcond[2]=((((-1.0)*r12*x5774))+((r10*x5775))+(((-1.0)*x5768*x5776))+(((-1.0)*cj0)));
evalcond[3]=(((x5767*x5772))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst122*r20*x5774))+((sj1*sj2))+(((-1.0)*r22*x5776)));
evalcond[4]=(((x5767*x5771))+(((-1.0)*x5769*x5774))+((cj0*x5770))+((cj0*x5773))+(((-1.0)*r02*x5776)));
evalcond[5]=(((x5767*x5768))+(((-1.0)*gconst122*r10*x5774))+(((-1.0)*r12*x5776))+((sj0*x5770))+((sj0*x5773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5777=((-1.0)*r01);
IkReal x5779 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5779)==0){
continue;
}
IkReal x5778=pow(x5779,-0.5);
CheckValue<IkReal> x5780 = IKatan2WithCheck(IkReal(x5777),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5780.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5780.value))));
IkReal gconst124=(x5777*x5778);
IkReal gconst125=((1.0)*r00*x5778);
CheckValue<IkReal> x5781 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5781.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5781.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5782=((-1.0)*r01);
CheckValue<IkReal> x5785 = IKatan2WithCheck(IkReal(x5782),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5785.valid){
continue;
}
IkReal x5783=((1.0)*(x5785.value));
IkReal x5784=x5778;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5783)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5783)));
IkReal gconst124=(x5782*x5784);
IkReal gconst125=((1.0)*r00*x5784);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5786=((-1.0)*r01);
CheckValue<IkReal> x5789 = IKatan2WithCheck(IkReal(x5786),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5789.valid){
continue;
}
IkReal x5787=((1.0)*(x5789.value));
IkReal x5788=x5778;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5787)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5787)));
IkReal gconst124=(x5786*x5788);
IkReal gconst125=((1.0)*r00*x5788);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5790=((-1.0)*r01);
CheckValue<IkReal> x5793 = IKatan2WithCheck(IkReal(x5790),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5793.valid){
continue;
}
IkReal x5791=((1.0)*(x5793.value));
IkReal x5792=x5778;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5791)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5791)));
IkReal gconst124=(x5790*x5792);
IkReal gconst125=((1.0)*r00*x5792);
IkReal x5794=r02*r02;
IkReal x5795=(r12*sj0);
IkReal x5796=x5778;
IkReal x5797=(cj0*x5796);
j4eval[0]=((IKabs((((x5794*x5797))+((r02*x5795*x5796))+(((-1.0)*x5797)))))+(IKabs((x5795+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5798=((1.0)*gconst124);
CheckValue<IkReal> x5799 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*r11*sj0*x5798))+(((-1.0)*cj0*r01*x5798))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5799.valid){
continue;
}
CheckValue<IkReal> x5800=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5799.value)+(((1.5707963267949)*(x5800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5801=IKsin(j4);
IkReal x5802=IKcos(j4);
IkReal x5803=(cj2*sj1);
IkReal x5804=(cj1*sj2);
IkReal x5805=((1.0)*x5802);
IkReal x5806=(gconst125*x5801);
IkReal x5807=(gconst124*x5802);
IkReal x5808=((1.0)*x5801);
evalcond[0]=((((-1.0)*r22*x5805))+((r20*x5806))+(((-1.0)*gconst124*r21*x5808)));
evalcond[1]=(sj0+((r00*x5806))+(((-1.0)*gconst124*r01*x5808))+(((-1.0)*r02*x5805)));
evalcond[2]=((((-1.0)*gconst124*r11*x5808))+(((-1.0)*r12*x5805))+((r10*x5806))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5808))+((r21*x5807))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x5805)));
evalcond[4]=(((r01*x5807))+((cj0*x5803))+((cj0*x5804))+(((-1.0)*r02*x5808))+(((-1.0)*gconst125*r00*x5805)));
evalcond[5]=((((-1.0)*r12*x5808))+(((-1.0)*gconst125*r10*x5805))+((r11*x5807))+((sj0*x5803))+((sj0*x5804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5809=((1.0)*gconst124);
CheckValue<IkReal> x5810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5809))+(((-1.0)*gconst125*r01)))),-1);
if(!x5810.valid){
continue;
}
CheckValue<IkReal> x5811 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5809))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5810.value)))+(x5811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5812=IKsin(j4);
IkReal x5813=IKcos(j4);
IkReal x5814=(cj2*sj1);
IkReal x5815=(cj1*sj2);
IkReal x5816=((1.0)*x5813);
IkReal x5817=(gconst125*x5812);
IkReal x5818=(gconst124*x5813);
IkReal x5819=((1.0)*x5812);
evalcond[0]=(((r20*x5817))+(((-1.0)*gconst124*r21*x5819))+(((-1.0)*r22*x5816)));
evalcond[1]=(sj0+(((-1.0)*r02*x5816))+(((-1.0)*gconst124*r01*x5819))+((r00*x5817)));
evalcond[2]=((((-1.0)*r12*x5816))+(((-1.0)*gconst124*r11*x5819))+(((-1.0)*cj0))+((r10*x5817)));
evalcond[3]=(((r21*x5818))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x5816))+(((-1.0)*r22*x5819)));
evalcond[4]=((((-1.0)*r02*x5819))+((cj0*x5815))+((cj0*x5814))+(((-1.0)*gconst125*r00*x5816))+((r01*x5818)));
evalcond[5]=((((-1.0)*r12*x5819))+((sj0*x5815))+((sj0*x5814))+((r11*x5818))+(((-1.0)*gconst125*r10*x5816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5820=((1.0)*gconst124);
CheckValue<IkReal> x5821 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r20*sj0))+(((-1.0)*r21*sj0*x5820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5821.valid){
continue;
}
CheckValue<IkReal> x5822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5820))+(((-1.0)*gconst125*r11)))),-1);
if(!x5822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5821.value)+(((1.5707963267949)*(x5822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5823=IKsin(j4);
IkReal x5824=IKcos(j4);
IkReal x5825=(cj2*sj1);
IkReal x5826=(cj1*sj2);
IkReal x5827=((1.0)*x5824);
IkReal x5828=(gconst125*x5823);
IkReal x5829=(gconst124*x5824);
IkReal x5830=((1.0)*x5823);
evalcond[0]=((((-1.0)*r22*x5827))+((r20*x5828))+(((-1.0)*gconst124*r21*x5830)));
evalcond[1]=((((-1.0)*r02*x5827))+sj0+(((-1.0)*gconst124*r01*x5830))+((r00*x5828)));
evalcond[2]=((((-1.0)*gconst124*r11*x5830))+(((-1.0)*r12*x5827))+((r10*x5828))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5829))+(((-1.0)*r22*x5830))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x5827)));
evalcond[4]=((((-1.0)*r02*x5830))+(((-1.0)*gconst125*r00*x5827))+((r01*x5829))+((cj0*x5825))+((cj0*x5826)));
evalcond[5]=((((-1.0)*gconst125*r10*x5827))+((r11*x5829))+((sj0*x5825))+((sj0*x5826))+(((-1.0)*r12*x5830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5831=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5831;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x5831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5832=((1.0)*sj5);
IkReal x5833=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5832)));
j4eval[0]=x5833;
j4eval[1]=IKsign(x5833);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5832)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5834=cj5*cj5;
IkReal x5835=r01*r01;
IkReal x5836=(cj5*r00);
IkReal x5837=(r01*sj5);
IkReal x5838=((((-1.0)*x5834*x5835))+((x5834*(r00*r00)))+(r02*r02)+(((-2.0)*x5836*x5837))+x5835);
j4eval[0]=x5838;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5836))+x5837))));
j4eval[2]=IKsign(x5838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5839=cj5*cj5;
IkReal x5840=r01*r01;
IkReal x5841=(r01*sj5);
IkReal x5842=(cj5*r00);
CheckValue<IkReal> x5843 = IKatan2WithCheck(IkReal(((((-1.0)*x5842))+x5841)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5843.valid){
continue;
}
CheckValue<IkReal> x5844=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5839*x5840))+((x5839*(r00*r00)))+(((-2.0)*x5841*x5842))+(r02*r02)+x5840)),-1);
if(!x5844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5843.value)+(((1.5707963267949)*(x5844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5845=IKsin(j4);
IkReal x5846=IKcos(j4);
IkReal x5847=(cj5*r00);
IkReal x5848=(cj5*r20);
IkReal x5849=(cj5*r10);
IkReal x5850=((1.0)*x5846);
IkReal x5851=(sj5*x5846);
IkReal x5852=((1.0)*x5845);
IkReal x5853=(sj5*x5852);
evalcond[0]=((((-1.0)*r21*x5853))+((x5845*x5848))+(((-1.0)*r22*x5850)));
evalcond[1]=(((x5845*x5849))+(((-1.0)*r11*x5853))+(((-1.0)*r12*x5850)));
evalcond[2]=((((-1.0)*x5847*x5850))+((r01*x5851))+(((-1.0)*r02*x5852)));
evalcond[3]=((1.0)+((x5845*x5847))+(((-1.0)*r01*x5853))+(((-1.0)*r02*x5850)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5849*x5850))+((r11*x5851))+((cj1*sj2))+(((-1.0)*r12*x5852)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5848*x5850))+(((-1.0)*r22*x5852))+((r21*x5851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5854=((1.0)*sj5);
CheckValue<IkReal> x5855 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x5854))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5855.valid){
continue;
}
CheckValue<IkReal> x5856=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5854)))),-1);
if(!x5856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5855.value)+(((1.5707963267949)*(x5856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5857=IKsin(j4);
IkReal x5858=IKcos(j4);
IkReal x5859=(cj5*r00);
IkReal x5860=(cj5*r20);
IkReal x5861=(cj5*r10);
IkReal x5862=((1.0)*x5858);
IkReal x5863=(sj5*x5858);
IkReal x5864=((1.0)*x5857);
IkReal x5865=(sj5*x5864);
evalcond[0]=((((-1.0)*r22*x5862))+((x5857*x5860))+(((-1.0)*r21*x5865)));
evalcond[1]=((((-1.0)*r11*x5865))+((x5857*x5861))+(((-1.0)*r12*x5862)));
evalcond[2]=((((-1.0)*x5859*x5862))+(((-1.0)*r02*x5864))+((r01*x5863)));
evalcond[3]=((1.0)+((x5857*x5859))+(((-1.0)*r02*x5862))+(((-1.0)*r01*x5865)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5861*x5862))+((cj1*sj2))+((r11*x5863))+(((-1.0)*r12*x5864)));
evalcond[5]=((((-1.0)*r22*x5864))+((r21*x5863))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5860*x5862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5866 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5866.valid){
continue;
}
CheckValue<IkReal> x5867=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5866.value)+(((1.5707963267949)*(x5867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5868=IKsin(j4);
IkReal x5869=IKcos(j4);
IkReal x5870=(cj5*r00);
IkReal x5871=(cj5*r20);
IkReal x5872=(cj5*r10);
IkReal x5873=((1.0)*x5869);
IkReal x5874=(sj5*x5869);
IkReal x5875=((1.0)*x5868);
IkReal x5876=(sj5*x5875);
evalcond[0]=((((-1.0)*r22*x5873))+((x5868*x5871))+(((-1.0)*r21*x5876)));
evalcond[1]=((((-1.0)*r12*x5873))+(((-1.0)*r11*x5876))+((x5868*x5872)));
evalcond[2]=((((-1.0)*r02*x5875))+(((-1.0)*x5870*x5873))+((r01*x5874)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5873))+((x5868*x5870))+(((-1.0)*r01*x5876)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x5875))+((cj1*sj2))+(((-1.0)*x5872*x5873))+((r11*x5874)));
evalcond[5]=((((-1.0)*r22*x5875))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5871*x5873))+((r21*x5874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5877=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5877;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x5877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5878=((1.0)*sj5);
IkReal x5879=((((-1.0)*r20*x5878))+(((-1.0)*cj5*r21)));
j4eval[0]=x5879;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x5878)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5880=cj5*cj5;
IkReal x5881=r01*r01;
IkReal x5882=(r01*sj5);
IkReal x5883=(cj5*r00);
IkReal x5884=((((-1.0)*x5881))+((x5880*x5881))+(((-1.0)*(r02*r02)))+(((2.0)*x5882*x5883))+(((-1.0)*x5880*(r00*r00))));
j4eval[0]=x5884;
j4eval[1]=IKsign(x5884);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5883))+x5882))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5885=cj5*cj5;
IkReal x5886=r01*r01;
IkReal x5887=(r01*sj5);
IkReal x5888=(cj5*r00);
CheckValue<IkReal> x5889 = IKatan2WithCheck(IkReal(((((-1.0)*x5888))+x5887)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5889.valid){
continue;
}
CheckValue<IkReal> x5890=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5886))+(((-1.0)*(r02*r02)))+(((2.0)*x5887*x5888))+(((-1.0)*x5885*(r00*r00)))+((x5885*x5886)))),-1);
if(!x5890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5889.value)+(((1.5707963267949)*(x5890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5891=IKsin(j4);
IkReal x5892=IKcos(j4);
IkReal x5893=(cj5*r00);
IkReal x5894=((1.0)*cj1);
IkReal x5895=(cj5*r20);
IkReal x5896=(cj5*r10);
IkReal x5897=((1.0)*x5892);
IkReal x5898=(sj5*x5892);
IkReal x5899=((1.0)*x5891);
IkReal x5900=(sj5*x5899);
evalcond[0]=((((-1.0)*r22*x5897))+(((-1.0)*r21*x5900))+((x5891*x5895)));
evalcond[1]=((((-1.0)*r11*x5900))+(((-1.0)*r12*x5897))+((x5891*x5896)));
evalcond[2]=((((-1.0)*x5893*x5897))+(((-1.0)*r02*x5899))+((r01*x5898)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x5900))+(((-1.0)*r02*x5897))+((x5891*x5893)));
evalcond[4]=(((r21*x5898))+(((-1.0)*r22*x5899))+(((-1.0)*cj2*x5894))+((sj1*sj2))+(((-1.0)*x5895*x5897)));
evalcond[5]=((((-1.0)*r12*x5899))+(((-1.0)*x5896*x5897))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x5894))+((r11*x5898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5901=((1.0)*sj5);
CheckValue<IkReal> x5902 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x5901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5902.valid){
continue;
}
CheckValue<IkReal> x5903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5901))+(((-1.0)*cj5*r21)))),-1);
if(!x5903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5902.value)+(((1.5707963267949)*(x5903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5904=IKsin(j4);
IkReal x5905=IKcos(j4);
IkReal x5906=(cj5*r00);
IkReal x5907=((1.0)*cj1);
IkReal x5908=(cj5*r20);
IkReal x5909=(cj5*r10);
IkReal x5910=((1.0)*x5905);
IkReal x5911=(sj5*x5905);
IkReal x5912=((1.0)*x5904);
IkReal x5913=(sj5*x5912);
evalcond[0]=((((-1.0)*r21*x5913))+(((-1.0)*r22*x5910))+((x5904*x5908)));
evalcond[1]=((((-1.0)*r11*x5913))+(((-1.0)*r12*x5910))+((x5904*x5909)));
evalcond[2]=(((r01*x5911))+(((-1.0)*x5906*x5910))+(((-1.0)*r02*x5912)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5910))+((x5904*x5906))+(((-1.0)*r01*x5913)));
evalcond[4]=((((-1.0)*cj2*x5907))+(((-1.0)*r22*x5912))+((sj1*sj2))+(((-1.0)*x5908*x5910))+((r21*x5911)));
evalcond[5]=((((-1.0)*r12*x5912))+(((-1.0)*sj2*x5907))+(((-1.0)*cj2*sj1))+(((-1.0)*x5909*x5910))+((r11*x5911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5914=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5914.valid){
continue;
}
CheckValue<IkReal> x5915 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5914.value)))+(x5915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5916=IKsin(j4);
IkReal x5917=IKcos(j4);
IkReal x5918=(cj5*r00);
IkReal x5919=((1.0)*cj1);
IkReal x5920=(cj5*r20);
IkReal x5921=(cj5*r10);
IkReal x5922=((1.0)*x5917);
IkReal x5923=(sj5*x5917);
IkReal x5924=((1.0)*x5916);
IkReal x5925=(sj5*x5924);
evalcond[0]=((((-1.0)*r22*x5922))+((x5916*x5920))+(((-1.0)*r21*x5925)));
evalcond[1]=(((x5916*x5921))+(((-1.0)*r12*x5922))+(((-1.0)*r11*x5925)));
evalcond[2]=((((-1.0)*x5918*x5922))+(((-1.0)*r02*x5924))+((r01*x5923)));
evalcond[3]=((-1.0)+((x5916*x5918))+(((-1.0)*r01*x5925))+(((-1.0)*r02*x5922)));
evalcond[4]=((((-1.0)*r22*x5924))+(((-1.0)*cj2*x5919))+((sj1*sj2))+(((-1.0)*x5920*x5922))+((r21*x5923)));
evalcond[5]=((((-1.0)*sj2*x5919))+(((-1.0)*cj2*sj1))+((r11*x5923))+(((-1.0)*r12*x5924))+(((-1.0)*x5921*x5922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5926=((-1.0)*r10);
IkReal x5928 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5928)==0){
continue;
}
IkReal x5927=pow(x5928,-0.5);
CheckValue<IkReal> x5929 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5926),IKFAST_ATAN2_MAGTHRESH);
if(!x5929.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5929.value));
IkReal gconst127=(r11*x5927);
IkReal gconst128=(x5926*x5927);
CheckValue<IkReal> x5930 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5930.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5930.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5931=((-1.0)*r10);
IkReal x5932=x5927;
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5931),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
IkReal x5933=((-1.0)*(x5934.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5933;
IkReal gconst126=x5933;
IkReal gconst127=(r11*x5932);
IkReal gconst128=(x5931*x5932);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5935=((1.0)*gconst127);
CheckValue<IkReal> x5936 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5935))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*r11*sj0*x5935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5936.valid){
continue;
}
CheckValue<IkReal> x5937=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5936.value)+(((1.5707963267949)*(x5937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5938=IKsin(j4);
IkReal x5939=IKcos(j4);
IkReal x5940=(cj2*sj1);
IkReal x5941=(gconst128*r10);
IkReal x5942=(cj1*sj2);
IkReal x5943=((1.0)*x5939);
IkReal x5944=(gconst127*x5939);
IkReal x5945=((1.0)*x5938);
IkReal x5946=(gconst128*x5938);
evalcond[0]=((((-1.0)*gconst127*r21*x5945))+(((-1.0)*r22*x5943))+((r20*x5946)));
evalcond[1]=((((-1.0)*gconst127*r01*x5945))+sj0+((r00*x5946))+(((-1.0)*r02*x5943)));
evalcond[2]=((((-1.0)*r12*x5943))+(((-1.0)*gconst127*r11*x5945))+((x5938*x5941))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5945))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5944))+(((-1.0)*gconst128*r20*x5943)));
evalcond[4]=((((-1.0)*gconst128*r00*x5943))+((cj0*x5942))+((cj0*x5940))+((r01*x5944))+(((-1.0)*r02*x5945)));
evalcond[5]=((((-1.0)*r12*x5945))+(((-1.0)*x5941*x5943))+((r11*x5944))+((sj0*x5942))+((sj0*x5940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5947=((1.0)*gconst127);
CheckValue<IkReal> x5948=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r01))+(((-1.0)*r00*x5947)))),-1);
if(!x5948.valid){
continue;
}
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x5947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5948.value)))+(x5949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5950=IKsin(j4);
IkReal x5951=IKcos(j4);
IkReal x5952=(cj2*sj1);
IkReal x5953=(gconst128*r10);
IkReal x5954=(cj1*sj2);
IkReal x5955=((1.0)*x5951);
IkReal x5956=(gconst127*x5951);
IkReal x5957=((1.0)*x5950);
IkReal x5958=(gconst128*x5950);
evalcond[0]=(((r20*x5958))+(((-1.0)*r22*x5955))+(((-1.0)*gconst127*r21*x5957)));
evalcond[1]=(sj0+(((-1.0)*r02*x5955))+(((-1.0)*gconst127*r01*x5957))+((r00*x5958)));
evalcond[2]=((((-1.0)*gconst127*r11*x5957))+((x5950*x5953))+(((-1.0)*r12*x5955))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5956))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5957))+(((-1.0)*gconst128*r20*x5955)));
evalcond[4]=((((-1.0)*r02*x5957))+(((-1.0)*gconst128*r00*x5955))+((cj0*x5954))+((cj0*x5952))+((r01*x5956)));
evalcond[5]=(((sj0*x5952))+((sj0*x5954))+((r11*x5956))+(((-1.0)*x5953*x5955))+(((-1.0)*r12*x5957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5959=((-1.0)*r11);
IkReal x5961 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5961)==0){
continue;
}
IkReal x5960=pow(x5961,-0.5);
CheckValue<IkReal> x5962 = IKatan2WithCheck(IkReal(x5959),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5962.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5962.value))));
IkReal gconst130=(x5959*x5960);
IkReal gconst131=((1.0)*r10*x5960);
CheckValue<IkReal> x5963 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5963.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5963.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5964=((-1.0)*r11);
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal(x5964),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
IkReal x5965=((1.0)*(x5967.value));
IkReal x5966=x5960;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5965)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5965)));
IkReal gconst130=(x5964*x5966);
IkReal gconst131=((1.0)*r10*x5966);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5968=((-1.0)*r11);
CheckValue<IkReal> x5971 = IKatan2WithCheck(IkReal(x5968),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5971.valid){
continue;
}
IkReal x5969=((1.0)*(x5971.value));
IkReal x5970=x5960;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5969)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5969)));
IkReal gconst130=(x5968*x5970);
IkReal gconst131=((1.0)*r10*x5970);
IkReal x5972=r12*r12;
IkReal x5973=(cj0*r02);
IkReal x5974=x5960;
IkReal x5975=(sj0*x5974);
j4eval[0]=((IKabs((((r12*x5973*x5974))+(((-1.0)*x5975))+((x5972*x5975)))))+(IKabs((((r12*sj0))+x5973))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5976=((-1.0)*r11);
CheckValue<IkReal> x5979 = IKatan2WithCheck(IkReal(x5976),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5979.valid){
continue;
}
IkReal x5977=((1.0)*(x5979.value));
IkReal x5978=x5960;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5977)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5977)));
IkReal gconst130=(x5976*x5978);
IkReal gconst131=((1.0)*r10*x5978);
IkReal x5980=r12*r12;
IkReal x5981=(sj1*sj2);
IkReal x5982=((1.0)*cj1*cj2);
CheckValue<IkReal> x5986=IKPowWithIntegerCheck(((-1.0)+x5980),-1);
if(!x5986.valid){
continue;
}
IkReal x5983=x5986.value;
if((((1.0)+(((-1.0)*x5980)))) < -0.00001)
continue;
IkReal x5984=IKsqrt(((1.0)+(((-1.0)*x5980))));
IkReal x5985=(r12*r22*x5983*x5984);
j4eval[0]=((IKabs((((r22*x5981))+(((-1.0)*r22*x5982)))))+(IKabs((((x5981*x5985))+(((-1.0)*x5982*x5985))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5987=(gconst131*r20);
IkReal x5988=(cj1*cj2);
IkReal x5989=(sj1*sj2);
IkReal x5990=(gconst130*r21);
CheckValue<IkReal> x5991 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5988))+((r22*x5989)))),IkReal((((x5988*x5990))+((x5987*x5989))+(((-1.0)*x5989*x5990))+(((-1.0)*x5987*x5988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5991.valid){
continue;
}
CheckValue<IkReal> x5992=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x5990*x5990)+(x5987*x5987)+(((-2.0)*x5987*x5990)))),-1);
if(!x5992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5991.value)+(((1.5707963267949)*(x5992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5993=IKsin(j4);
IkReal x5994=IKcos(j4);
IkReal x5995=(cj2*sj1);
IkReal x5996=(gconst131*r20);
IkReal x5997=(gconst131*r10);
IkReal x5998=(gconst131*r00);
IkReal x5999=(cj1*sj2);
IkReal x6000=((1.0)*x5994);
IkReal x6001=(gconst130*x5994);
IkReal x6002=((1.0)*x5993);
evalcond[0]=(((x5993*x5996))+(((-1.0)*r22*x6000))+(((-1.0)*gconst130*r21*x6002)));
evalcond[1]=(sj0+(((-1.0)*gconst130*r01*x6002))+((x5993*x5998))+(((-1.0)*r02*x6000)));
evalcond[2]=((((-1.0)*r12*x6000))+((x5993*x5997))+(((-1.0)*gconst130*r11*x6002))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6001))+(((-1.0)*x5996*x6000))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6002)));
evalcond[4]=((((-1.0)*x5998*x6000))+((cj0*x5995))+((cj0*x5999))+((r01*x6001))+(((-1.0)*r02*x6002)));
evalcond[5]=(((sj0*x5995))+((sj0*x5999))+((r11*x6001))+(((-1.0)*r12*x6002))+(((-1.0)*x5997*x6000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6003=((1.0)*gconst130);
CheckValue<IkReal> x6004 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6003))+(((-1.0)*r11*sj0*x6003))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6004.valid){
continue;
}
CheckValue<IkReal> x6005=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x6005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6004.value)+(((1.5707963267949)*(x6005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6006=IKsin(j4);
IkReal x6007=IKcos(j4);
IkReal x6008=(cj2*sj1);
IkReal x6009=(gconst131*r20);
IkReal x6010=(gconst131*r10);
IkReal x6011=(gconst131*r00);
IkReal x6012=(cj1*sj2);
IkReal x6013=((1.0)*x6007);
IkReal x6014=(gconst130*x6007);
IkReal x6015=((1.0)*x6006);
evalcond[0]=(((x6006*x6009))+(((-1.0)*gconst130*r21*x6015))+(((-1.0)*r22*x6013)));
evalcond[1]=(sj0+(((-1.0)*r02*x6013))+((x6006*x6011))+(((-1.0)*gconst130*r01*x6015)));
evalcond[2]=((((-1.0)*gconst130*r11*x6015))+((x6006*x6010))+(((-1.0)*r12*x6013))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6014))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6009*x6013))+(((-1.0)*r22*x6015)));
evalcond[4]=(((r01*x6014))+((cj0*x6008))+(((-1.0)*r02*x6015))+((cj0*x6012))+(((-1.0)*x6011*x6013)));
evalcond[5]=(((r11*x6014))+(((-1.0)*r12*x6015))+(((-1.0)*x6010*x6013))+((sj0*x6008))+((sj0*x6012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6016=((1.0)*gconst130);
CheckValue<IkReal> x6017=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x6016)))),-1);
if(!x6017.valid){
continue;
}
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x6016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6017.value)))+(x6018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6019=IKsin(j4);
IkReal x6020=IKcos(j4);
IkReal x6021=(cj2*sj1);
IkReal x6022=(gconst131*r20);
IkReal x6023=(gconst131*r10);
IkReal x6024=(gconst131*r00);
IkReal x6025=(cj1*sj2);
IkReal x6026=((1.0)*x6020);
IkReal x6027=(gconst130*x6020);
IkReal x6028=((1.0)*x6019);
evalcond[0]=((((-1.0)*gconst130*r21*x6028))+(((-1.0)*r22*x6026))+((x6019*x6022)));
evalcond[1]=((((-1.0)*gconst130*r01*x6028))+sj0+((x6019*x6024))+(((-1.0)*r02*x6026)));
evalcond[2]=((((-1.0)*gconst130*r11*x6028))+((x6019*x6023))+(((-1.0)*cj0))+(((-1.0)*r12*x6026)));
evalcond[3]=((((-1.0)*r22*x6028))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6027))+(((-1.0)*x6022*x6026)));
evalcond[4]=((((-1.0)*x6024*x6026))+((r01*x6027))+((cj0*x6021))+((cj0*x6025))+(((-1.0)*r02*x6028)));
evalcond[5]=(((sj0*x6021))+((sj0*x6025))+(((-1.0)*x6023*x6026))+((r11*x6027))+(((-1.0)*r12*x6028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6029=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6029;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6030=((1.0)*sj5);
IkReal x6031=((((-1.0)*r00*x6030))+(((-1.0)*cj5*r01)));
j4eval[0]=x6031;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x6030)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6032=cj5*cj5;
IkReal x6033=r11*r11;
IkReal x6034=(cj5*r10);
IkReal x6035=(r11*sj5);
IkReal x6036=((((2.0)*x6034*x6035))+(((-1.0)*x6032*(r10*r10)))+((x6032*x6033))+(((-1.0)*(r12*r12)))+(((-1.0)*x6033)));
j4eval[0]=x6036;
j4eval[1]=((IKabs(r12))+(IKabs((x6035+(((-1.0)*x6034))))));
j4eval[2]=IKsign(x6036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6037=cj5*cj5;
IkReal x6038=r11*r11;
IkReal x6039=(cj5*r10);
IkReal x6040=(r11*sj5);
CheckValue<IkReal> x6041 = IKatan2WithCheck(IkReal((x6040+(((-1.0)*x6039)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6041.valid){
continue;
}
CheckValue<IkReal> x6042=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*x6037*(r10*r10)))+((x6037*x6038))+(((-1.0)*x6038))+(((2.0)*x6039*x6040)))),-1);
if(!x6042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6041.value)+(((1.5707963267949)*(x6042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6043=IKsin(j4);
IkReal x6044=IKcos(j4);
IkReal x6045=(cj5*r00);
IkReal x6046=((1.0)*x6044);
IkReal x6047=(sj5*x6044);
IkReal x6048=(cj5*x6043);
IkReal x6049=((1.0)*x6043);
IkReal x6050=(sj5*x6049);
evalcond[0]=((((-1.0)*r21*x6050))+(((-1.0)*r22*x6046))+((r20*x6048)));
evalcond[1]=((((-1.0)*r02*x6046))+((x6043*x6045))+(((-1.0)*r01*x6050)));
evalcond[2]=(((r11*x6047))+(((-1.0)*cj5*r10*x6046))+(((-1.0)*r12*x6049)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x6050))+(((-1.0)*r12*x6046))+((r10*x6048)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x6049))+((cj1*sj2))+(((-1.0)*x6045*x6046))+((r01*x6047)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6049))+((r21*x6047))+(((-1.0)*cj5*r20*x6046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6051=((1.0)*sj5);
CheckValue<IkReal> x6052 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6052.valid){
continue;
}
CheckValue<IkReal> x6053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6051))+(((-1.0)*cj5*r01)))),-1);
if(!x6053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6052.value)+(((1.5707963267949)*(x6053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6054=IKsin(j4);
IkReal x6055=IKcos(j4);
IkReal x6056=(cj5*r00);
IkReal x6057=((1.0)*x6055);
IkReal x6058=(sj5*x6055);
IkReal x6059=(cj5*x6054);
IkReal x6060=((1.0)*x6054);
IkReal x6061=(sj5*x6060);
evalcond[0]=((((-1.0)*r22*x6057))+((r20*x6059))+(((-1.0)*r21*x6061)));
evalcond[1]=((((-1.0)*r01*x6061))+(((-1.0)*r02*x6057))+((x6054*x6056)));
evalcond[2]=((((-1.0)*cj5*r10*x6057))+((r11*x6058))+(((-1.0)*r12*x6060)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6057))+(((-1.0)*r11*x6061))+((r10*x6059)));
evalcond[4]=(((cj2*sj1))+((r01*x6058))+((cj1*sj2))+(((-1.0)*x6056*x6057))+(((-1.0)*r02*x6060)));
evalcond[5]=((((-1.0)*r22*x6060))+(((-1.0)*cj5*r20*x6057))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6062=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6062.valid){
continue;
}
CheckValue<IkReal> x6063 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6062.value)))+(x6063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6064=IKsin(j4);
IkReal x6065=IKcos(j4);
IkReal x6066=(cj5*r00);
IkReal x6067=((1.0)*x6065);
IkReal x6068=(sj5*x6065);
IkReal x6069=(cj5*x6064);
IkReal x6070=((1.0)*x6064);
IkReal x6071=(sj5*x6070);
evalcond[0]=((((-1.0)*r22*x6067))+(((-1.0)*r21*x6071))+((r20*x6069)));
evalcond[1]=((((-1.0)*r01*x6071))+(((-1.0)*r02*x6067))+((x6064*x6066)));
evalcond[2]=((((-1.0)*cj5*r10*x6067))+((r11*x6068))+(((-1.0)*r12*x6070)));
evalcond[3]=((-1.0)+((r10*x6069))+(((-1.0)*r11*x6071))+(((-1.0)*r12*x6067)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x6070))+((r01*x6068))+(((-1.0)*x6066*x6067)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6067))+((r21*x6068))+(((-1.0)*r22*x6070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6072=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6072;
j4eval[1]=IKsign(x6072);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6073=((1.0)*sj5);
IkReal x6074=((((-1.0)*r20*x6073))+(((-1.0)*cj5*r21)));
j4eval[0]=x6074;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6073))+((cj5*r00))))));
j4eval[2]=IKsign(x6074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6075=cj5*cj5;
IkReal x6076=r11*r11;
IkReal x6077=(r11*sj5);
IkReal x6078=(cj5*r10);
IkReal x6079=((r12*r12)+(((-1.0)*x6075*x6076))+(((-2.0)*x6077*x6078))+x6076+((x6075*(r10*r10))));
j4eval[0]=x6079;
j4eval[1]=IKsign(x6079);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6078))+x6077))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6080=cj5*cj5;
IkReal x6081=r11*r11;
IkReal x6082=(cj5*r10);
IkReal x6083=(r11*sj5);
CheckValue<IkReal> x6084 = IKatan2WithCheck(IkReal((x6083+(((-1.0)*x6082)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6084.valid){
continue;
}
CheckValue<IkReal> x6085=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6081+(((-2.0)*x6082*x6083))+((x6080*(r10*r10)))+(((-1.0)*x6080*x6081)))),-1);
if(!x6085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6084.value)+(((1.5707963267949)*(x6085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6086=IKsin(j4);
IkReal x6087=IKcos(j4);
IkReal x6088=(cj5*r00);
IkReal x6089=((1.0)*cj1);
IkReal x6090=((1.0)*x6087);
IkReal x6091=(sj5*x6087);
IkReal x6092=(cj5*x6086);
IkReal x6093=((1.0)*x6086);
IkReal x6094=(sj5*x6093);
evalcond[0]=((((-1.0)*r22*x6090))+(((-1.0)*r21*x6094))+((r20*x6092)));
evalcond[1]=((((-1.0)*r01*x6094))+((x6086*x6088))+(((-1.0)*r02*x6090)));
evalcond[2]=((((-1.0)*cj5*r10*x6090))+((r11*x6091))+(((-1.0)*r12*x6093)));
evalcond[3]=((1.0)+((r10*x6092))+(((-1.0)*r11*x6094))+(((-1.0)*r12*x6090)));
evalcond[4]=((((-1.0)*r22*x6093))+((sj1*sj2))+(((-1.0)*cj5*r20*x6090))+((r21*x6091))+(((-1.0)*cj2*x6089)));
evalcond[5]=((((-1.0)*sj2*x6089))+(((-1.0)*cj2*sj1))+((r01*x6091))+(((-1.0)*r02*x6093))+(((-1.0)*x6088*x6090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6095=((1.0)*sj5);
CheckValue<IkReal> x6096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6095))+(((-1.0)*cj5*r21)))),-1);
if(!x6096.valid){
continue;
}
CheckValue<IkReal> x6097 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6095))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6096.value)))+(x6097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6098=IKsin(j4);
IkReal x6099=IKcos(j4);
IkReal x6100=(cj5*r00);
IkReal x6101=((1.0)*cj1);
IkReal x6102=((1.0)*x6099);
IkReal x6103=(sj5*x6099);
IkReal x6104=(cj5*x6098);
IkReal x6105=((1.0)*x6098);
IkReal x6106=(sj5*x6105);
evalcond[0]=((((-1.0)*r22*x6102))+((r20*x6104))+(((-1.0)*r21*x6106)));
evalcond[1]=((((-1.0)*r02*x6102))+(((-1.0)*r01*x6106))+((x6098*x6100)));
evalcond[2]=(((r11*x6103))+(((-1.0)*cj5*r10*x6102))+(((-1.0)*r12*x6105)));
evalcond[3]=((1.0)+((r10*x6104))+(((-1.0)*r12*x6102))+(((-1.0)*r11*x6106)));
evalcond[4]=(((r21*x6103))+(((-1.0)*cj5*r20*x6102))+(((-1.0)*cj2*x6101))+((sj1*sj2))+(((-1.0)*r22*x6105)));
evalcond[5]=((((-1.0)*r02*x6105))+(((-1.0)*sj2*x6101))+(((-1.0)*cj2*sj1))+((r01*x6103))+(((-1.0)*x6100*x6102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6107=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6107.valid){
continue;
}
CheckValue<IkReal> x6108 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6107.value)))+(x6108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6109=IKsin(j4);
IkReal x6110=IKcos(j4);
IkReal x6111=(cj5*r00);
IkReal x6112=((1.0)*cj1);
IkReal x6113=((1.0)*x6110);
IkReal x6114=(sj5*x6110);
IkReal x6115=(cj5*x6109);
IkReal x6116=((1.0)*x6109);
IkReal x6117=(sj5*x6116);
evalcond[0]=((((-1.0)*r22*x6113))+((r20*x6115))+(((-1.0)*r21*x6117)));
evalcond[1]=((((-1.0)*r02*x6113))+((x6109*x6111))+(((-1.0)*r01*x6117)));
evalcond[2]=((((-1.0)*r12*x6116))+(((-1.0)*cj5*r10*x6113))+((r11*x6114)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6113))+(((-1.0)*r11*x6117))+((r10*x6115)));
evalcond[4]=((((-1.0)*r22*x6116))+((sj1*sj2))+(((-1.0)*cj5*r20*x6113))+((r21*x6114))+(((-1.0)*cj2*x6112)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x6111*x6113))+(((-1.0)*r02*x6116))+((r01*x6114))+(((-1.0)*sj2*x6112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6118=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6118);
rxp0_2=(py*r00);
rxp1_0=(r21*x6118);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6119=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6119);
rxp0_2=(py*r00);
rxp1_0=(r21*x6119);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6120=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6120);
rxp0_2=(py*r00);
rxp1_0=(r21*x6120);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6123=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6123.valid){
continue;
}
IkReal x6121=x6123.value;
IkReal x6122=((1.0)*cj0*x6121);
cj4array[0]=((((-1.0)*cj2*sj1*x6122))+(((-1.0)*cj1*sj2*x6122)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6124=IKsin(j4);
IkReal x6125=IKcos(j4);
IkReal x6126=(cj5*r20);
IkReal x6127=((1.0)*x6125);
IkReal x6128=((1.0)*sj5*x6124);
evalcond[0]=((-1.0)*r12*x6124);
evalcond[1]=((((-1.0)*r12*x6127))+(((-1.0)*cj0)));
evalcond[2]=(((x6124*x6126))+(((-1.0)*r21*x6128)));
evalcond[3]=(((cj5*r00*x6124))+(((-1.0)*r01*x6128)));
evalcond[4]=(((r21*sj5*x6125))+(((-1.0)*x6126*x6127))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6130=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6130.valid){
continue;
}
IkReal x6129=x6130.value;
cj4array[0]=(((cj1*cj2*x6129))+(((-1.0)*sj1*sj2*x6129)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6131=IKsin(j4);
IkReal x6132=IKcos(j4);
IkReal x6133=(cj5*r00);
IkReal x6134=(r01*sj5);
IkReal x6135=((1.0)*x6132);
IkReal x6136=((1.0)*x6131);
evalcond[0]=((-1.0)*r12*x6131);
evalcond[1]=((((-1.0)*r12*x6135))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x6136))+((cj5*r20*x6131)));
evalcond[3]=(((x6131*x6133))+(((-1.0)*x6134*x6136)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x6133*x6135))+((cj0*cj1*sj2))+((x6132*x6134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6137=IKPowWithIntegerCheck(r12,-1);
if(!x6137.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6137.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6138=IKsin(j4);
IkReal x6139=IKcos(j4);
IkReal x6140=(sj5*x6139);
IkReal x6141=(cj5*x6138);
IkReal x6142=((1.0)*sj5*x6138);
IkReal x6143=((1.0)*cj5*x6139);
evalcond[0]=((-1.0)*r12*x6138);
evalcond[1]=((((-1.0)*r21*x6142))+((r20*x6141)));
evalcond[2]=((((-1.0)*r01*x6142))+((r00*x6141)));
evalcond[3]=((((-1.0)*r20*x6143))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6140)));
evalcond[4]=((((-1.0)*r00*x6143))+((r01*x6140))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6144=((1.0)*sj5);
CheckValue<IkReal> x6145=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6145.valid){
continue;
}
CheckValue<IkReal> x6146 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x6144))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6145.value)))+(x6146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6147=IKsin(j4);
IkReal x6148=IKcos(j4);
IkReal x6149=(cj5*r00);
IkReal x6150=(cj2*sj1);
IkReal x6151=(cj1*sj2);
IkReal x6152=((1.0)*x6148);
IkReal x6153=(sj5*x6148);
IkReal x6154=(cj5*x6147);
IkReal x6155=((1.0)*x6147);
IkReal x6156=(sj5*x6155);
evalcond[0]=((((-1.0)*r22*x6152))+((r20*x6154))+(((-1.0)*r21*x6156)));
evalcond[1]=((((-1.0)*r02*x6152))+sj0+(((-1.0)*r01*x6156))+((x6147*x6149)));
evalcond[2]=((((-1.0)*r11*x6156))+(((-1.0)*r12*x6152))+((r10*x6154))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6153))+(((-1.0)*r22*x6155))+(((-1.0)*cj5*r20*x6152))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r02*x6155))+((cj0*x6151))+((cj0*x6150))+(((-1.0)*x6149*x6152))+((r01*x6153)));
evalcond[5]=(((sj0*x6151))+((sj0*x6150))+(((-1.0)*cj5*r10*x6152))+(((-1.0)*r12*x6155))+((r11*x6153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6157=((1.0)*sj5);
CheckValue<IkReal> x6158 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6157))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6158.valid){
continue;
}
CheckValue<IkReal> x6159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6157))+(((-1.0)*cj5*r01)))),-1);
if(!x6159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6158.value)+(((1.5707963267949)*(x6159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6160=IKsin(j4);
IkReal x6161=IKcos(j4);
IkReal x6162=(cj5*r00);
IkReal x6163=(cj2*sj1);
IkReal x6164=(cj1*sj2);
IkReal x6165=((1.0)*x6161);
IkReal x6166=(sj5*x6161);
IkReal x6167=(cj5*x6160);
IkReal x6168=((1.0)*x6160);
IkReal x6169=(sj5*x6168);
evalcond[0]=(((r20*x6167))+(((-1.0)*r21*x6169))+(((-1.0)*r22*x6165)));
evalcond[1]=(sj0+(((-1.0)*r02*x6165))+(((-1.0)*r01*x6169))+((x6160*x6162)));
evalcond[2]=(((r10*x6167))+(((-1.0)*r11*x6169))+(((-1.0)*r12*x6165))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6166))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6168))+(((-1.0)*cj5*r20*x6165)));
evalcond[4]=(((r01*x6166))+(((-1.0)*r02*x6168))+((cj0*x6163))+((cj0*x6164))+(((-1.0)*x6162*x6165)));
evalcond[5]=((((-1.0)*cj5*r10*x6165))+((sj0*x6164))+((sj0*x6163))+(((-1.0)*r12*x6168))+((r11*x6166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6170=((1.0)*sj5);
CheckValue<IkReal> x6171 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6171.valid){
continue;
}
CheckValue<IkReal> x6172=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6170)))),-1);
if(!x6172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6171.value)+(((1.5707963267949)*(x6172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6173=IKsin(j4);
IkReal x6174=IKcos(j4);
IkReal x6175=(cj5*r00);
IkReal x6176=(cj2*sj1);
IkReal x6177=(cj1*sj2);
IkReal x6178=((1.0)*x6174);
IkReal x6179=(sj5*x6174);
IkReal x6180=(cj5*x6173);
IkReal x6181=((1.0)*x6173);
IkReal x6182=(sj5*x6181);
evalcond[0]=(((r20*x6180))+(((-1.0)*r22*x6178))+(((-1.0)*r21*x6182)));
evalcond[1]=(sj0+((x6173*x6175))+(((-1.0)*r01*x6182))+(((-1.0)*r02*x6178)));
evalcond[2]=((((-1.0)*r12*x6178))+(((-1.0)*r11*x6182))+((r10*x6180))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6181))+(((-1.0)*cj1*cj2))+((r21*x6179))+((sj1*sj2))+(((-1.0)*cj5*r20*x6178)));
evalcond[4]=((((-1.0)*r02*x6181))+(((-1.0)*x6175*x6178))+((r01*x6179))+((cj0*x6177))+((cj0*x6176)));
evalcond[5]=(((r11*x6179))+((sj0*x6177))+((sj0*x6176))+(((-1.0)*r12*x6181))+(((-1.0)*cj5*r10*x6178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6183=cj5*cj5;
IkReal x6184=r21*r21;
IkReal x6185=(sj1*sj2);
IkReal x6186=(r21*sj5);
IkReal x6187=(cj1*cj2);
IkReal x6188=(cj5*r20);
CheckValue<IkReal> x6189 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6187))+((r22*x6185)))),IkReal(((((-1.0)*x6185*x6186))+((x6186*x6187))+((x6185*x6188))+(((-1.0)*x6187*x6188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6189.valid){
continue;
}
CheckValue<IkReal> x6190=IKPowWithIntegerCheck(IKsign(((r22*r22)+x6184+((x6183*(r20*r20)))+(((-2.0)*x6186*x6188))+(((-1.0)*x6183*x6184)))),-1);
if(!x6190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6189.value)+(((1.5707963267949)*(x6190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6191=IKsin(j4);
IkReal x6192=IKcos(j4);
IkReal x6193=(cj5*r20);
IkReal x6194=(r21*sj5);
IkReal x6195=((1.0)*x6192);
IkReal x6196=((1.0)*x6191);
evalcond[0]=(((x6191*x6193))+(((-1.0)*x6194*x6196))+(((-1.0)*r22*x6195)));
evalcond[1]=((((-1.0)*x6193*x6195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6196))+((x6192*x6194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6197=(cj5*sj4);
IkReal x6198=(sj4*sj5);
if( IKabs((((r01*x6198))+(((-1.0)*r00*x6197))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6197))+(((-1.0)*r11*x6198))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x6198))+(((-1.0)*r00*x6197))+((cj4*r02))))+IKsqr((((r10*x6197))+(((-1.0)*r11*x6198))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x6198))+(((-1.0)*r00*x6197))+((cj4*r02))), (((r10*x6197))+(((-1.0)*r11*x6198))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6199=IKcos(j0);
IkReal x6200=IKsin(j0);
IkReal x6201=(sj1*sj2);
IkReal x6202=(cj5*r11);
IkReal x6203=(cj5*r00);
IkReal x6204=(cj5*r01);
IkReal x6205=((1.0)*sj4);
IkReal x6206=(r01*sj5);
IkReal x6207=((1.0)*cj4);
IkReal x6208=(cj5*r10);
IkReal x6209=(cj1*cj2);
IkReal x6210=(r00*sj5);
IkReal x6211=(r11*sj5);
IkReal x6212=(r10*sj5);
IkReal x6213=(cj2*sj1);
IkReal x6214=((0.712)*x6199);
IkReal x6215=(cj1*x6199);
IkReal x6216=((0.712)*x6200);
IkReal x6217=(cj1*x6200);
evalcond[0]=(x6200+(((-1.0)*r02*x6207))+(((-1.0)*x6205*x6206))+((sj4*x6203)));
evalcond[1]=((((-1.0)*x6205*x6211))+(((-1.0)*x6199))+(((-1.0)*r12*x6207))+((sj4*x6208)));
evalcond[2]=(((x6199*x6201))+x6204+x6210+(((-1.0)*x6199*x6209)));
evalcond[3]=(x6202+x6212+(((-1.0)*x6200*x6209))+((x6200*x6201)));
evalcond[4]=((((-1.0)*r02*x6205))+((x6199*x6213))+((cj4*x6206))+((sj2*x6215))+(((-1.0)*x6203*x6207)));
evalcond[5]=((((-1.0)*x6207*x6208))+((x6200*x6213))+((cj4*x6211))+(((-1.0)*r12*x6205))+((sj2*x6217)));
evalcond[6]=((((0.138)*x6210))+(((-1.0)*x6209*x6214))+((x6201*x6214))+(((-1.0)*px))+(((-0.85)*x6215))+(((0.138)*x6204))+(((0.179)*x6200)));
evalcond[7]=((((0.138)*x6212))+(((-1.0)*x6209*x6216))+(((-0.179)*x6199))+((x6201*x6216))+(((-1.0)*py))+(((-0.85)*x6217))+(((0.138)*x6202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6218=((1.0)*cj5);
IkReal x6219=((1.0)*sj5);
CheckValue<IkReal> x6220 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6218))+(((-1.0)*r10*x6219)))),IkReal(((((-1.0)*r00*x6219))+(((-1.0)*r01*x6218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6220.valid){
continue;
}
CheckValue<IkReal> x6221=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x6221.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6220.value)+(((1.5707963267949)*(x6221.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6222=IKcos(j0);
IkReal x6223=IKsin(j0);
IkReal x6224=(sj1*sj2);
IkReal x6225=(cj1*cj2);
IkReal x6226=(cj5*r01);
IkReal x6227=(cj5*r11);
IkReal x6228=((0.85)*cj1);
IkReal x6229=((0.138)*sj5);
IkReal x6230=((0.712)*x6222);
IkReal x6231=((0.712)*x6223);
evalcond[0]=(((r00*sj5))+x6226+((x6222*x6224))+(((-1.0)*x6222*x6225)));
evalcond[1]=((((-1.0)*x6223*x6225))+x6227+((r10*sj5))+((x6223*x6224)));
evalcond[2]=((((0.138)*x6226))+(((-1.0)*x6225*x6230))+(((-1.0)*x6222*x6228))+(((-1.0)*px))+((r00*x6229))+((x6224*x6230))+(((0.179)*x6223)));
evalcond[3]=((((0.138)*x6227))+(((-1.0)*x6225*x6231))+((r10*x6229))+(((-1.0)*py))+((x6224*x6231))+(((-0.179)*x6222))+(((-1.0)*x6223*x6228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6232=((1.0)*sj5);
IkReal x6233=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6232)));
j4eval[0]=x6233;
j4eval[1]=IKsign(x6233);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x6232))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6234=((1.0)*sj5);
IkReal x6235=((((-1.0)*r00*x6234))+(((-1.0)*cj5*r01)));
j4eval[0]=x6235;
j4eval[1]=IKsign(x6235);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6234))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6236=((1.0)*sj5);
IkReal x6237=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6237;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x6236))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x6236))))));
j4eval[2]=IKsign(x6237);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6239 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6239)==0){
continue;
}
IkReal x6238=pow(x6239,-0.5);
CheckValue<IkReal> x6240 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6240.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6240.value));
IkReal gconst115=((-1.0)*r21*x6238);
IkReal gconst116=(r20*x6238);
CheckValue<IkReal> x6241 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6241.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6241.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6244 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6244.valid){
continue;
}
IkReal x6242=((-1.0)*(x6244.value));
IkReal x6243=x6238;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6242;
IkReal gconst114=x6242;
IkReal gconst115=((-1.0)*r21*x6243);
IkReal gconst116=(r20*x6243);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6247 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6247.valid){
continue;
}
IkReal x6245=((-1.0)*(x6247.value));
IkReal x6246=x6238;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6245;
IkReal gconst114=x6245;
IkReal gconst115=((-1.0)*r21*x6246);
IkReal gconst116=(r20*x6246);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x6250 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6250.valid){
continue;
}
IkReal x6248=((-1.0)*(x6250.value));
IkReal x6249=x6238;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6248;
IkReal gconst114=x6248;
IkReal gconst115=((-1.0)*r21*x6249);
IkReal gconst116=(r20*x6249);
IkReal x6251=r22*r22;
CheckValue<IkReal> x6254=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6251))),-1);
if(!x6254.valid){
continue;
}
IkReal x6252=x6254.value;
IkReal x6253=(x6251+(((2.0)*x6252*(r20*r20)*(r21*r21)))+((x6252*(r21*r21*r21*r21)))+((x6252*(r20*r20*r20*r20))));
j4eval[0]=x6253;
j4eval[1]=IKsign(x6253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6255=(sj1*sj2);
IkReal x6256=(gconst115*r21);
IkReal x6257=(cj1*cj2);
IkReal x6258=(gconst116*r20);
CheckValue<IkReal> x6259 = IKatan2WithCheck(IkReal((((r22*x6255))+(((-1.0)*r22*x6257)))),IkReal(((((-1.0)*x6255*x6256))+(((-1.0)*x6257*x6258))+((x6256*x6257))+((x6255*x6258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6259.valid){
continue;
}
CheckValue<IkReal> x6260=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x6256*x6258))+(x6256*x6256)+(x6258*x6258))),-1);
if(!x6260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6259.value)+(((1.5707963267949)*(x6260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6261=IKsin(j4);
IkReal x6262=IKcos(j4);
IkReal x6263=(cj2*sj1);
IkReal x6264=(cj1*sj2);
IkReal x6265=((1.0)*x6262);
IkReal x6266=(gconst116*x6261);
IkReal x6267=(gconst115*x6262);
IkReal x6268=((1.0)*x6261);
evalcond[0]=((((-1.0)*r22*x6265))+((r20*x6266))+(((-1.0)*gconst115*r21*x6268)));
evalcond[1]=(sj0+((r00*x6266))+(((-1.0)*r02*x6265))+(((-1.0)*gconst115*r01*x6268)));
evalcond[2]=((((-1.0)*gconst115*r11*x6268))+((r10*x6266))+(((-1.0)*cj0))+(((-1.0)*r12*x6265)));
evalcond[3]=(((r21*x6267))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst116*r20*x6265))+(((-1.0)*r22*x6268)));
evalcond[4]=(((r01*x6267))+(((-1.0)*r02*x6268))+(((-1.0)*gconst116*r00*x6265))+((cj0*x6264))+((cj0*x6263)));
evalcond[5]=((((-1.0)*gconst116*r10*x6265))+((sj0*x6263))+((sj0*x6264))+(((-1.0)*r12*x6268))+((r11*x6267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6269=((1.0)*gconst115);
CheckValue<IkReal> x6270=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r01))+(((-1.0)*r00*x6269)))),-1);
if(!x6270.valid){
continue;
}
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*r21*x6269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6270.value)))+(x6271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6272=IKsin(j4);
IkReal x6273=IKcos(j4);
IkReal x6274=(cj2*sj1);
IkReal x6275=(cj1*sj2);
IkReal x6276=((1.0)*x6273);
IkReal x6277=(gconst116*x6272);
IkReal x6278=(gconst115*x6273);
IkReal x6279=((1.0)*x6272);
evalcond[0]=((((-1.0)*gconst115*r21*x6279))+(((-1.0)*r22*x6276))+((r20*x6277)));
evalcond[1]=(sj0+((r00*x6277))+(((-1.0)*r02*x6276))+(((-1.0)*gconst115*r01*x6279)));
evalcond[2]=((((-1.0)*gconst115*r11*x6279))+((r10*x6277))+(((-1.0)*r12*x6276))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6278))+(((-1.0)*r22*x6279))+(((-1.0)*gconst116*r20*x6276)));
evalcond[4]=(((r01*x6278))+(((-1.0)*r02*x6279))+(((-1.0)*gconst116*r00*x6276))+((cj0*x6274))+((cj0*x6275)));
evalcond[5]=((((-1.0)*gconst116*r10*x6276))+((sj0*x6274))+((sj0*x6275))+(((-1.0)*r12*x6279))+((r11*x6278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6280=((1.0)*gconst115);
CheckValue<IkReal> x6281=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r11))+(((-1.0)*r10*x6280)))),-1);
if(!x6281.valid){
continue;
}
CheckValue<IkReal> x6282 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6280))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6281.value)))+(x6282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6283=IKsin(j4);
IkReal x6284=IKcos(j4);
IkReal x6285=(cj2*sj1);
IkReal x6286=(cj1*sj2);
IkReal x6287=((1.0)*x6284);
IkReal x6288=(gconst116*x6283);
IkReal x6289=(gconst115*x6284);
IkReal x6290=((1.0)*x6283);
evalcond[0]=((((-1.0)*r22*x6287))+(((-1.0)*gconst115*r21*x6290))+((r20*x6288)));
evalcond[1]=(sj0+(((-1.0)*r02*x6287))+(((-1.0)*gconst115*r01*x6290))+((r00*x6288)));
evalcond[2]=((((-1.0)*gconst115*r11*x6290))+(((-1.0)*r12*x6287))+((r10*x6288))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst116*r20*x6287))+(((-1.0)*r22*x6290))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6289)));
evalcond[4]=((((-1.0)*gconst116*r00*x6287))+((cj0*x6285))+((cj0*x6286))+(((-1.0)*r02*x6290))+((r01*x6289)));
evalcond[5]=((((-1.0)*gconst116*r10*x6287))+((r11*x6289))+((sj0*x6285))+((sj0*x6286))+(((-1.0)*r12*x6290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6292 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6292)==0){
continue;
}
IkReal x6291=pow(x6292,-0.5);
CheckValue<IkReal> x6293 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6293.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6293.value))));
IkReal gconst118=((1.0)*r21*x6291);
IkReal gconst119=((-1.0)*r20*x6291);
CheckValue<IkReal> x6294 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6294.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6294.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6297 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6297.valid){
continue;
}
IkReal x6295=((1.0)*(x6297.value));
IkReal x6296=x6291;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6295)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6295)));
IkReal gconst118=((1.0)*r21*x6296);
IkReal gconst119=((-1.0)*r20*x6296);
IkReal x6298=r22*r22;
IkReal x6299=((1.0)*x6298);
CheckValue<IkReal> x6303=IKPowWithIntegerCheck(((-1.0)+x6298),-1);
if(!x6303.valid){
continue;
}
IkReal x6300=x6303.value;
if((((1.0)+(((-1.0)*x6299)))) < -0.00001)
continue;
IkReal x6301=IKsqrt(((1.0)+(((-1.0)*x6299))));
IkReal x6302=(sj0*x6300*x6301);
j4eval[0]=((IKabs((x6302+(((-1.0)*x6299*x6302)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6306 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6306.valid){
continue;
}
IkReal x6304=((1.0)*(x6306.value));
IkReal x6305=x6291;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6304)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6304)));
IkReal gconst118=((1.0)*r21*x6305);
IkReal gconst119=((-1.0)*r20*x6305);
IkReal x6307=r22*r22;
IkReal x6308=((1.0)*x6307);
CheckValue<IkReal> x6312=IKPowWithIntegerCheck(((-1.0)+x6307),-1);
if(!x6312.valid){
continue;
}
IkReal x6309=x6312.value;
if((((1.0)+(((-1.0)*x6308)))) < -0.00001)
continue;
IkReal x6310=IKsqrt(((1.0)+(((-1.0)*x6308))));
IkReal x6311=(cj0*x6309*x6310);
j4eval[0]=((IKabs((x6311+(((-1.0)*x6308*x6311)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6315 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6315.valid){
continue;
}
IkReal x6313=((1.0)*(x6315.value));
IkReal x6314=x6291;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6313)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6313)));
IkReal gconst118=((1.0)*r21*x6314);
IkReal gconst119=((-1.0)*r20*x6314);
IkReal x6316=r22*r22;
IkReal x6317=(cj0*r02);
IkReal x6318=(r12*sj0);
CheckValue<IkReal> x6322=IKPowWithIntegerCheck(((-1.0)+x6316),-1);
if(!x6322.valid){
continue;
}
IkReal x6319=x6322.value;
if((((1.0)+(((-1.0)*x6316)))) < -0.00001)
continue;
IkReal x6320=IKsqrt(((1.0)+(((-1.0)*x6316))));
IkReal x6321=((1.0)*r22*x6319*x6320);
j4eval[0]=0;
j4eval[1]=((IKabs((x6317+x6318)))+(IKabs(((((-1.0)*x6318*x6321))+(((-1.0)*x6317*x6321))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6323=((1.0)*gconst118);
CheckValue<IkReal> x6324=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x6324.valid){
continue;
}
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*r11*sj0*x6323))+(((-1.0)*cj0*r01*x6323))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6324.value)))+(x6325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6326=IKsin(j4);
IkReal x6327=IKcos(j4);
IkReal x6328=(cj2*sj1);
IkReal x6329=(gconst118*r01);
IkReal x6330=(gconst119*r10);
IkReal x6331=(gconst119*r20);
IkReal x6332=(gconst118*r21);
IkReal x6333=(gconst119*r00);
IkReal x6334=(gconst118*r11);
IkReal x6335=(cj1*sj2);
IkReal x6336=((1.0)*x6327);
IkReal x6337=((1.0)*x6326);
evalcond[0]=(((x6326*x6331))+(((-1.0)*r22*x6336))+(((-1.0)*x6332*x6337)));
evalcond[1]=(sj0+((x6326*x6333))+(((-1.0)*r02*x6336))+(((-1.0)*x6329*x6337)));
evalcond[2]=((((-1.0)*r12*x6336))+((x6326*x6330))+(((-1.0)*x6334*x6337))+(((-1.0)*cj0)));
evalcond[3]=(((x6327*x6332))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6331*x6336))+(((-1.0)*r22*x6337)));
evalcond[4]=(((cj0*x6328))+(((-1.0)*x6333*x6336))+((x6327*x6329))+(((-1.0)*r02*x6337))+((cj0*x6335)));
evalcond[5]=((((-1.0)*r12*x6337))+(((-1.0)*x6330*x6336))+((sj0*x6335))+((x6327*x6334))+((sj0*x6328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6338=((1.0)*gconst118);
CheckValue<IkReal> x6339 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6338))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6339.valid){
continue;
}
CheckValue<IkReal> x6340=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r01))+(((-1.0)*r00*x6338)))),-1);
if(!x6340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6339.value)+(((1.5707963267949)*(x6340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6341=IKsin(j4);
IkReal x6342=IKcos(j4);
IkReal x6343=(cj2*sj1);
IkReal x6344=(gconst118*r01);
IkReal x6345=(gconst119*r10);
IkReal x6346=(gconst119*r20);
IkReal x6347=(gconst118*r21);
IkReal x6348=(gconst119*r00);
IkReal x6349=(gconst118*r11);
IkReal x6350=(cj1*sj2);
IkReal x6351=((1.0)*x6342);
IkReal x6352=((1.0)*x6341);
evalcond[0]=(((x6341*x6346))+(((-1.0)*x6347*x6352))+(((-1.0)*r22*x6351)));
evalcond[1]=(((x6341*x6348))+sj0+(((-1.0)*x6344*x6352))+(((-1.0)*r02*x6351)));
evalcond[2]=(((x6341*x6345))+(((-1.0)*x6349*x6352))+(((-1.0)*r12*x6351))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x6342*x6347))+(((-1.0)*r22*x6352))+(((-1.0)*x6346*x6351)));
evalcond[4]=(((cj0*x6343))+(((-1.0)*r02*x6352))+((x6342*x6344))+(((-1.0)*x6348*x6351))+((cj0*x6350)));
evalcond[5]=(((sj0*x6343))+(((-1.0)*x6345*x6351))+(((-1.0)*r12*x6352))+((x6342*x6349))+((sj0*x6350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6353=((1.0)*gconst118);
CheckValue<IkReal> x6354 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6353))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6354.valid){
continue;
}
CheckValue<IkReal> x6355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6353))+(((-1.0)*gconst119*r11)))),-1);
if(!x6355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6354.value)+(((1.5707963267949)*(x6355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6356=IKsin(j4);
IkReal x6357=IKcos(j4);
IkReal x6358=(cj2*sj1);
IkReal x6359=(gconst118*r01);
IkReal x6360=(gconst119*r10);
IkReal x6361=(gconst119*r20);
IkReal x6362=(gconst118*r21);
IkReal x6363=(gconst119*r00);
IkReal x6364=(gconst118*r11);
IkReal x6365=(cj1*sj2);
IkReal x6366=((1.0)*x6357);
IkReal x6367=((1.0)*x6356);
evalcond[0]=((((-1.0)*x6362*x6367))+((x6356*x6361))+(((-1.0)*r22*x6366)));
evalcond[1]=(sj0+(((-1.0)*r02*x6366))+((x6356*x6363))+(((-1.0)*x6359*x6367)));
evalcond[2]=(((x6356*x6360))+(((-1.0)*r12*x6366))+(((-1.0)*x6364*x6367))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x6361*x6366))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6367))+((x6357*x6362)));
evalcond[4]=((((-1.0)*r02*x6367))+((cj0*x6365))+(((-1.0)*x6363*x6366))+((x6357*x6359))+((cj0*x6358)));
evalcond[5]=((((-1.0)*x6360*x6366))+((sj0*x6365))+((sj0*x6358))+(((-1.0)*r12*x6367))+((x6357*x6364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6368=((-1.0)*r00);
IkReal x6370 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6370)==0){
continue;
}
IkReal x6369=pow(x6370,-0.5);
CheckValue<IkReal> x6371 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6368),IKFAST_ATAN2_MAGTHRESH);
if(!x6371.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6371.value));
IkReal gconst121=(r01*x6369);
IkReal gconst122=(x6368*x6369);
CheckValue<IkReal> x6372 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6372.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6372.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6373=((-1.0)*r00);
IkReal x6374=x6369;
CheckValue<IkReal> x6376 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6373),IKFAST_ATAN2_MAGTHRESH);
if(!x6376.valid){
continue;
}
IkReal x6375=((-1.0)*(x6376.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x6375;
IkReal gconst120=x6375;
IkReal gconst121=(r01*x6374);
IkReal gconst122=(x6373*x6374);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6377=((1.0)*gconst121);
CheckValue<IkReal> x6378 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x6377))+((gconst122*r10*sj0))+(((-1.0)*r11*sj0*x6377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6378.valid){
continue;
}
CheckValue<IkReal> x6379=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x6379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6378.value)+(((1.5707963267949)*(x6379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6380=IKsin(j4);
IkReal x6381=IKcos(j4);
IkReal x6382=(gconst121*r11);
IkReal x6383=(gconst122*r00);
IkReal x6384=(cj2*sj1);
IkReal x6385=(gconst121*r01);
IkReal x6386=(gconst121*r21);
IkReal x6387=(cj1*sj2);
IkReal x6388=((1.0)*x6381);
IkReal x6389=(gconst122*x6380);
IkReal x6390=((1.0)*x6380);
evalcond[0]=((((-1.0)*x6386*x6390))+(((-1.0)*r22*x6388))+((r20*x6389)));
evalcond[1]=(sj0+((x6380*x6383))+(((-1.0)*x6385*x6390))+(((-1.0)*r02*x6388)));
evalcond[2]=((((-1.0)*x6382*x6390))+(((-1.0)*r12*x6388))+((r10*x6389))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst122*r20*x6388))+((x6381*x6386))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6390)));
evalcond[4]=((((-1.0)*x6383*x6388))+((cj0*x6384))+((cj0*x6387))+((x6381*x6385))+(((-1.0)*r02*x6390)));
evalcond[5]=(((sj0*x6384))+((sj0*x6387))+((x6381*x6382))+(((-1.0)*gconst122*r10*x6388))+(((-1.0)*r12*x6390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6391=((1.0)*gconst121);
CheckValue<IkReal> x6392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r11))+(((-1.0)*r10*x6391)))),-1);
if(!x6392.valid){
continue;
}
CheckValue<IkReal> x6393 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst122*r20*sj0))+(((-1.0)*r21*sj0*x6391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6392.value)))+(x6393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6394=IKsin(j4);
IkReal x6395=IKcos(j4);
IkReal x6396=(gconst121*r11);
IkReal x6397=(gconst122*r00);
IkReal x6398=(cj2*sj1);
IkReal x6399=(gconst121*r01);
IkReal x6400=(gconst121*r21);
IkReal x6401=(cj1*sj2);
IkReal x6402=((1.0)*x6395);
IkReal x6403=(gconst122*x6394);
IkReal x6404=((1.0)*x6394);
evalcond[0]=(((r20*x6403))+(((-1.0)*x6400*x6404))+(((-1.0)*r22*x6402)));
evalcond[1]=(sj0+(((-1.0)*r02*x6402))+((x6394*x6397))+(((-1.0)*x6399*x6404)));
evalcond[2]=(((r10*x6403))+(((-1.0)*x6396*x6404))+(((-1.0)*r12*x6402))+(((-1.0)*cj0)));
evalcond[3]=(((x6395*x6400))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst122*r20*x6402))+(((-1.0)*r22*x6404)));
evalcond[4]=(((cj0*x6398))+((cj0*x6401))+((x6395*x6399))+(((-1.0)*r02*x6404))+(((-1.0)*x6397*x6402)));
evalcond[5]=(((sj0*x6401))+((sj0*x6398))+((x6395*x6396))+(((-1.0)*r12*x6404))+(((-1.0)*gconst122*r10*x6402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6405=((-1.0)*r01);
IkReal x6407 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6407)==0){
continue;
}
IkReal x6406=pow(x6407,-0.5);
CheckValue<IkReal> x6408 = IKatan2WithCheck(IkReal(x6405),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6408.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6408.value))));
IkReal gconst124=(x6405*x6406);
IkReal gconst125=((1.0)*r00*x6406);
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6409.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6410=((-1.0)*r01);
CheckValue<IkReal> x6413 = IKatan2WithCheck(IkReal(x6410),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6413.valid){
continue;
}
IkReal x6411=((1.0)*(x6413.value));
IkReal x6412=x6406;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6411)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6411)));
IkReal gconst124=(x6410*x6412);
IkReal gconst125=((1.0)*r00*x6412);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x6414=((-1.0)*r01);
CheckValue<IkReal> x6417 = IKatan2WithCheck(IkReal(x6414),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6417.valid){
continue;
}
IkReal x6415=((1.0)*(x6417.value));
IkReal x6416=x6406;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6415)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6415)));
IkReal gconst124=(x6414*x6416);
IkReal gconst125=((1.0)*r00*x6416);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6418=((-1.0)*r01);
CheckValue<IkReal> x6421 = IKatan2WithCheck(IkReal(x6418),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6421.valid){
continue;
}
IkReal x6419=((1.0)*(x6421.value));
IkReal x6420=x6406;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6419)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6419)));
IkReal gconst124=(x6418*x6420);
IkReal gconst125=((1.0)*r00*x6420);
IkReal x6422=r02*r02;
IkReal x6423=(r12*sj0);
IkReal x6424=x6406;
IkReal x6425=(cj0*x6424);
j4eval[0]=((IKabs(((((-1.0)*x6425))+((r02*x6423*x6424))+((x6422*x6425)))))+(IKabs((x6423+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6426=((1.0)*gconst124);
CheckValue<IkReal> x6427 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*r11*sj0*x6426))+((cj0*gconst125*r00))+(((-1.0)*cj0*r01*x6426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6427.valid){
continue;
}
CheckValue<IkReal> x6428=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x6428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6427.value)+(((1.5707963267949)*(x6428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6429=IKsin(j4);
IkReal x6430=IKcos(j4);
IkReal x6431=(cj2*sj1);
IkReal x6432=(cj1*sj2);
IkReal x6433=((1.0)*x6430);
IkReal x6434=(gconst125*x6429);
IkReal x6435=(gconst124*x6430);
IkReal x6436=((1.0)*x6429);
evalcond[0]=((((-1.0)*r22*x6433))+(((-1.0)*gconst124*r21*x6436))+((r20*x6434)));
evalcond[1]=(sj0+(((-1.0)*r02*x6433))+(((-1.0)*gconst124*r01*x6436))+((r00*x6434)));
evalcond[2]=((((-1.0)*r12*x6433))+(((-1.0)*gconst124*r11*x6436))+((r10*x6434))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6436))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x6433))+((r21*x6435)));
evalcond[4]=(((r01*x6435))+(((-1.0)*r02*x6436))+((cj0*x6431))+((cj0*x6432))+(((-1.0)*gconst125*r00*x6433)));
evalcond[5]=(((r11*x6435))+(((-1.0)*r12*x6436))+((sj0*x6432))+((sj0*x6431))+(((-1.0)*gconst125*r10*x6433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6437=((1.0)*gconst124);
CheckValue<IkReal> x6438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6437))+(((-1.0)*gconst125*r01)))),-1);
if(!x6438.valid){
continue;
}
CheckValue<IkReal> x6439 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6437))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6438.value)))+(x6439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6440=IKsin(j4);
IkReal x6441=IKcos(j4);
IkReal x6442=(cj2*sj1);
IkReal x6443=(cj1*sj2);
IkReal x6444=((1.0)*x6441);
IkReal x6445=(gconst125*x6440);
IkReal x6446=(gconst124*x6441);
IkReal x6447=((1.0)*x6440);
evalcond[0]=((((-1.0)*gconst124*r21*x6447))+(((-1.0)*r22*x6444))+((r20*x6445)));
evalcond[1]=(((r00*x6445))+sj0+(((-1.0)*r02*x6444))+(((-1.0)*gconst124*r01*x6447)));
evalcond[2]=((((-1.0)*gconst124*r11*x6447))+(((-1.0)*r12*x6444))+((r10*x6445))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6446))+(((-1.0)*gconst125*r20*x6444))+(((-1.0)*r22*x6447)));
evalcond[4]=((((-1.0)*gconst125*r00*x6444))+((r01*x6446))+(((-1.0)*r02*x6447))+((cj0*x6443))+((cj0*x6442)));
evalcond[5]=(((r11*x6446))+((sj0*x6443))+((sj0*x6442))+(((-1.0)*r12*x6447))+(((-1.0)*gconst125*r10*x6444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6448=((1.0)*gconst124);
CheckValue<IkReal> x6449 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r20*sj0))+(((-1.0)*r21*sj0*x6448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6449.valid){
continue;
}
CheckValue<IkReal> x6450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6448))+(((-1.0)*gconst125*r11)))),-1);
if(!x6450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6449.value)+(((1.5707963267949)*(x6450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6451=IKsin(j4);
IkReal x6452=IKcos(j4);
IkReal x6453=(cj2*sj1);
IkReal x6454=(cj1*sj2);
IkReal x6455=((1.0)*x6452);
IkReal x6456=(gconst125*x6451);
IkReal x6457=(gconst124*x6452);
IkReal x6458=((1.0)*x6451);
evalcond[0]=((((-1.0)*gconst124*r21*x6458))+(((-1.0)*r22*x6455))+((r20*x6456)));
evalcond[1]=(sj0+((r00*x6456))+(((-1.0)*r02*x6455))+(((-1.0)*gconst124*r01*x6458)));
evalcond[2]=((((-1.0)*gconst124*r11*x6458))+(((-1.0)*r12*x6455))+(((-1.0)*cj0))+((r10*x6456)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6457))+(((-1.0)*gconst125*r20*x6455))+(((-1.0)*r22*x6458)));
evalcond[4]=((((-1.0)*gconst125*r00*x6455))+((r01*x6457))+(((-1.0)*r02*x6458))+((cj0*x6454))+((cj0*x6453)));
evalcond[5]=(((r11*x6457))+((sj0*x6453))+((sj0*x6454))+(((-1.0)*r12*x6458))+(((-1.0)*gconst125*r10*x6455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6459=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6459;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x6459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6460=((1.0)*sj5);
IkReal x6461=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6460)));
j4eval[0]=x6461;
j4eval[1]=IKsign(x6461);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x6460)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6462=cj5*cj5;
IkReal x6463=r01*r01;
IkReal x6464=(cj5*r00);
IkReal x6465=(r01*sj5);
IkReal x6466=((((-2.0)*x6464*x6465))+((x6462*(r00*r00)))+x6463+(((-1.0)*x6462*x6463))+(r02*r02));
j4eval[0]=x6466;
j4eval[1]=((IKabs(r02))+(IKabs((x6465+(((-1.0)*x6464))))));
j4eval[2]=IKsign(x6466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6467=cj5*cj5;
IkReal x6468=r01*r01;
IkReal x6469=(r01*sj5);
IkReal x6470=(cj5*r00);
CheckValue<IkReal> x6471=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6469*x6470))+(((-1.0)*x6467*x6468))+x6468+(r02*r02)+((x6467*(r00*r00))))),-1);
if(!x6471.valid){
continue;
}
CheckValue<IkReal> x6472 = IKatan2WithCheck(IkReal((x6469+(((-1.0)*x6470)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6471.value)))+(x6472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6473=IKsin(j4);
IkReal x6474=IKcos(j4);
IkReal x6475=(cj5*r00);
IkReal x6476=(cj5*r20);
IkReal x6477=(cj5*r10);
IkReal x6478=((1.0)*x6474);
IkReal x6479=(sj5*x6474);
IkReal x6480=((1.0)*x6473);
IkReal x6481=(sj5*x6480);
evalcond[0]=((((-1.0)*r21*x6481))+((x6473*x6476))+(((-1.0)*r22*x6478)));
evalcond[1]=((((-1.0)*r12*x6478))+((x6473*x6477))+(((-1.0)*r11*x6481)));
evalcond[2]=((((-1.0)*r02*x6480))+((r01*x6479))+(((-1.0)*x6475*x6478)));
evalcond[3]=((1.0)+((x6473*x6475))+(((-1.0)*r01*x6481))+(((-1.0)*r02*x6478)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x6480))+((cj1*sj2))+((r11*x6479))+(((-1.0)*x6477*x6478)));
evalcond[5]=((((-1.0)*r22*x6480))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6476*x6478))+((r21*x6479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6482=((1.0)*sj5);
CheckValue<IkReal> x6483 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x6482))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6483.valid){
continue;
}
CheckValue<IkReal> x6484=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6482)))),-1);
if(!x6484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6483.value)+(((1.5707963267949)*(x6484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6485=IKsin(j4);
IkReal x6486=IKcos(j4);
IkReal x6487=(cj5*r00);
IkReal x6488=(cj5*r20);
IkReal x6489=(cj5*r10);
IkReal x6490=((1.0)*x6486);
IkReal x6491=(sj5*x6486);
IkReal x6492=((1.0)*x6485);
IkReal x6493=(sj5*x6492);
evalcond[0]=((((-1.0)*r22*x6490))+((x6485*x6488))+(((-1.0)*r21*x6493)));
evalcond[1]=((((-1.0)*r11*x6493))+(((-1.0)*r12*x6490))+((x6485*x6489)));
evalcond[2]=((((-1.0)*x6487*x6490))+((r01*x6491))+(((-1.0)*r02*x6492)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6490))+(((-1.0)*r01*x6493))+((x6485*x6487)));
evalcond[4]=(((cj2*sj1))+((r11*x6491))+(((-1.0)*x6489*x6490))+(((-1.0)*r12*x6492))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x6492))+(((-1.0)*x6488*x6490))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6494 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6494.valid){
continue;
}
CheckValue<IkReal> x6495=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6494.value)+(((1.5707963267949)*(x6495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6496=IKsin(j4);
IkReal x6497=IKcos(j4);
IkReal x6498=(cj5*r00);
IkReal x6499=(cj5*r20);
IkReal x6500=(cj5*r10);
IkReal x6501=((1.0)*x6497);
IkReal x6502=(sj5*x6497);
IkReal x6503=((1.0)*x6496);
IkReal x6504=(sj5*x6503);
evalcond[0]=(((x6496*x6499))+(((-1.0)*r21*x6504))+(((-1.0)*r22*x6501)));
evalcond[1]=((((-1.0)*r12*x6501))+(((-1.0)*r11*x6504))+((x6496*x6500)));
evalcond[2]=((((-1.0)*x6498*x6501))+(((-1.0)*r02*x6503))+((r01*x6502)));
evalcond[3]=((1.0)+((x6496*x6498))+(((-1.0)*r01*x6504))+(((-1.0)*r02*x6501)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x6503))+(((-1.0)*x6500*x6501))+((cj1*sj2))+((r11*x6502)));
evalcond[5]=(((r21*x6502))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6503))+(((-1.0)*x6499*x6501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6505=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6505;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x6505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6506=((1.0)*sj5);
IkReal x6507=((((-1.0)*r20*x6506))+(((-1.0)*cj5*r21)));
j4eval[0]=x6507;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x6506))))));
j4eval[2]=IKsign(x6507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6508=cj5*cj5;
IkReal x6509=r01*r01;
IkReal x6510=(r01*sj5);
IkReal x6511=(cj5*r00);
IkReal x6512=((((-1.0)*(r02*r02)))+(((-1.0)*x6508*(r00*r00)))+(((-1.0)*x6509))+((x6508*x6509))+(((2.0)*x6510*x6511)));
j4eval[0]=x6512;
j4eval[1]=IKsign(x6512);
j4eval[2]=((IKabs(r02))+(IKabs((x6510+(((-1.0)*x6511))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6513=cj5*cj5;
IkReal x6514=r01*r01;
IkReal x6515=(r01*sj5);
IkReal x6516=(cj5*r00);
CheckValue<IkReal> x6517=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6513*(r00*r00)))+((x6513*x6514))+(((-1.0)*(r02*r02)))+(((2.0)*x6515*x6516))+(((-1.0)*x6514)))),-1);
if(!x6517.valid){
continue;
}
CheckValue<IkReal> x6518 = IKatan2WithCheck(IkReal((x6515+(((-1.0)*x6516)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6517.value)))+(x6518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6519=IKsin(j4);
IkReal x6520=IKcos(j4);
IkReal x6521=(cj5*r00);
IkReal x6522=((1.0)*cj1);
IkReal x6523=(cj5*r20);
IkReal x6524=(cj5*r10);
IkReal x6525=((1.0)*x6520);
IkReal x6526=(sj5*x6520);
IkReal x6527=((1.0)*x6519);
IkReal x6528=(sj5*x6527);
evalcond[0]=((((-1.0)*r22*x6525))+(((-1.0)*r21*x6528))+((x6519*x6523)));
evalcond[1]=((((-1.0)*r11*x6528))+(((-1.0)*r12*x6525))+((x6519*x6524)));
evalcond[2]=((((-1.0)*x6521*x6525))+(((-1.0)*r02*x6527))+((r01*x6526)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6525))+(((-1.0)*r01*x6528))+((x6519*x6521)));
evalcond[4]=((((-1.0)*cj2*x6522))+(((-1.0)*r22*x6527))+((sj1*sj2))+((r21*x6526))+(((-1.0)*x6523*x6525)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x6522))+(((-1.0)*r12*x6527))+(((-1.0)*x6524*x6525))+((r11*x6526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6529=((1.0)*sj5);
CheckValue<IkReal> x6530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6529))+(((-1.0)*cj5*r21)))),-1);
if(!x6530.valid){
continue;
}
CheckValue<IkReal> x6531 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x6529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6530.value)))+(x6531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6532=IKsin(j4);
IkReal x6533=IKcos(j4);
IkReal x6534=(cj5*r00);
IkReal x6535=((1.0)*cj1);
IkReal x6536=(cj5*r20);
IkReal x6537=(cj5*r10);
IkReal x6538=((1.0)*x6533);
IkReal x6539=(sj5*x6533);
IkReal x6540=((1.0)*x6532);
IkReal x6541=(sj5*x6540);
evalcond[0]=((((-1.0)*r22*x6538))+(((-1.0)*r21*x6541))+((x6532*x6536)));
evalcond[1]=((((-1.0)*r12*x6538))+(((-1.0)*r11*x6541))+((x6532*x6537)));
evalcond[2]=((((-1.0)*x6534*x6538))+((r01*x6539))+(((-1.0)*r02*x6540)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6538))+((x6532*x6534))+(((-1.0)*r01*x6541)));
evalcond[4]=(((r21*x6539))+(((-1.0)*r22*x6540))+(((-1.0)*x6536*x6538))+((sj1*sj2))+(((-1.0)*cj2*x6535)));
evalcond[5]=((((-1.0)*x6537*x6538))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x6540))+((r11*x6539))+(((-1.0)*sj2*x6535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6542=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6542.valid){
continue;
}
CheckValue<IkReal> x6543 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6542.value)))+(x6543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6544=IKsin(j4);
IkReal x6545=IKcos(j4);
IkReal x6546=(cj5*r00);
IkReal x6547=((1.0)*cj1);
IkReal x6548=(cj5*r20);
IkReal x6549=(cj5*r10);
IkReal x6550=((1.0)*x6545);
IkReal x6551=(sj5*x6545);
IkReal x6552=((1.0)*x6544);
IkReal x6553=(sj5*x6552);
evalcond[0]=((((-1.0)*r22*x6550))+((x6544*x6548))+(((-1.0)*r21*x6553)));
evalcond[1]=(((x6544*x6549))+(((-1.0)*r11*x6553))+(((-1.0)*r12*x6550)));
evalcond[2]=((((-1.0)*x6546*x6550))+(((-1.0)*r02*x6552))+((r01*x6551)));
evalcond[3]=((-1.0)+((x6544*x6546))+(((-1.0)*r02*x6550))+(((-1.0)*r01*x6553)));
evalcond[4]=((((-1.0)*cj2*x6547))+(((-1.0)*r22*x6552))+((sj1*sj2))+(((-1.0)*x6548*x6550))+((r21*x6551)));
evalcond[5]=((((-1.0)*sj2*x6547))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x6552))+((r11*x6551))+(((-1.0)*x6549*x6550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6554=((-1.0)*r10);
IkReal x6556 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6556)==0){
continue;
}
IkReal x6555=pow(x6556,-0.5);
CheckValue<IkReal> x6557 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6554),IKFAST_ATAN2_MAGTHRESH);
if(!x6557.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6557.value));
IkReal gconst127=(r11*x6555);
IkReal gconst128=(x6554*x6555);
CheckValue<IkReal> x6558 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6558.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6558.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6559=((-1.0)*r10);
IkReal x6560=x6555;
CheckValue<IkReal> x6562 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6559),IKFAST_ATAN2_MAGTHRESH);
if(!x6562.valid){
continue;
}
IkReal x6561=((-1.0)*(x6562.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x6561;
IkReal gconst126=x6561;
IkReal gconst127=(r11*x6560);
IkReal gconst128=(x6559*x6560);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6563=((1.0)*gconst127);
CheckValue<IkReal> x6564 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x6563))+((cj0*gconst128*r00))+(((-1.0)*r11*sj0*x6563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6564.valid){
continue;
}
CheckValue<IkReal> x6565=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x6565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6564.value)+(((1.5707963267949)*(x6565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6566=IKsin(j4);
IkReal x6567=IKcos(j4);
IkReal x6568=(cj2*sj1);
IkReal x6569=(gconst128*r10);
IkReal x6570=(cj1*sj2);
IkReal x6571=((1.0)*x6567);
IkReal x6572=(gconst127*x6567);
IkReal x6573=((1.0)*x6566);
IkReal x6574=(gconst128*x6566);
evalcond[0]=((((-1.0)*gconst127*r21*x6573))+(((-1.0)*r22*x6571))+((r20*x6574)));
evalcond[1]=(sj0+(((-1.0)*gconst127*r01*x6573))+(((-1.0)*r02*x6571))+((r00*x6574)));
evalcond[2]=(((x6566*x6569))+(((-1.0)*r12*x6571))+(((-1.0)*gconst127*r11*x6573))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6573))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst128*r20*x6571))+((r21*x6572)));
evalcond[4]=(((cj0*x6570))+((r01*x6572))+(((-1.0)*gconst128*r00*x6571))+(((-1.0)*r02*x6573))+((cj0*x6568)));
evalcond[5]=(((r11*x6572))+((sj0*x6568))+((sj0*x6570))+(((-1.0)*x6569*x6571))+(((-1.0)*r12*x6573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6575=((1.0)*gconst127);
CheckValue<IkReal> x6576 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x6575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6576.valid){
continue;
}
CheckValue<IkReal> x6577=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r01))+(((-1.0)*r00*x6575)))),-1);
if(!x6577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6576.value)+(((1.5707963267949)*(x6577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6578=IKsin(j4);
IkReal x6579=IKcos(j4);
IkReal x6580=(cj2*sj1);
IkReal x6581=(gconst128*r10);
IkReal x6582=(cj1*sj2);
IkReal x6583=((1.0)*x6579);
IkReal x6584=(gconst127*x6579);
IkReal x6585=((1.0)*x6578);
IkReal x6586=(gconst128*x6578);
evalcond[0]=((((-1.0)*gconst127*r21*x6585))+(((-1.0)*r22*x6583))+((r20*x6586)));
evalcond[1]=(sj0+(((-1.0)*r02*x6583))+((r00*x6586))+(((-1.0)*gconst127*r01*x6585)));
evalcond[2]=((((-1.0)*gconst127*r11*x6585))+(((-1.0)*r12*x6583))+((x6578*x6581))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6584))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6585))+(((-1.0)*gconst128*r20*x6583)));
evalcond[4]=(((cj0*x6582))+((cj0*x6580))+(((-1.0)*gconst128*r00*x6583))+(((-1.0)*r02*x6585))+((r01*x6584)));
evalcond[5]=(((sj0*x6582))+((sj0*x6580))+((r11*x6584))+(((-1.0)*x6581*x6583))+(((-1.0)*r12*x6585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6587=((-1.0)*r11);
IkReal x6589 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6589)==0){
continue;
}
IkReal x6588=pow(x6589,-0.5);
CheckValue<IkReal> x6590 = IKatan2WithCheck(IkReal(x6587),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6590.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6590.value))));
IkReal gconst130=(x6587*x6588);
IkReal gconst131=((1.0)*r10*x6588);
CheckValue<IkReal> x6591 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6591.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6591.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6592=((-1.0)*r11);
CheckValue<IkReal> x6595 = IKatan2WithCheck(IkReal(x6592),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6595.valid){
continue;
}
IkReal x6593=((1.0)*(x6595.value));
IkReal x6594=x6588;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6593)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6593)));
IkReal gconst130=(x6592*x6594);
IkReal gconst131=((1.0)*r10*x6594);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6596=((-1.0)*r11);
CheckValue<IkReal> x6599 = IKatan2WithCheck(IkReal(x6596),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6599.valid){
continue;
}
IkReal x6597=((1.0)*(x6599.value));
IkReal x6598=x6588;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6597)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6597)));
IkReal gconst130=(x6596*x6598);
IkReal gconst131=((1.0)*r10*x6598);
IkReal x6600=r12*r12;
IkReal x6601=(cj0*r02);
IkReal x6602=x6588;
IkReal x6603=(sj0*x6602);
j4eval[0]=((IKabs((x6601+((r12*sj0)))))+(IKabs((((x6600*x6603))+((r12*x6601*x6602))+(((-1.0)*x6603))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6604=((-1.0)*r11);
CheckValue<IkReal> x6607 = IKatan2WithCheck(IkReal(x6604),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6607.valid){
continue;
}
IkReal x6605=((1.0)*(x6607.value));
IkReal x6606=x6588;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6605)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6605)));
IkReal gconst130=(x6604*x6606);
IkReal gconst131=((1.0)*r10*x6606);
IkReal x6608=r12*r12;
IkReal x6609=(sj1*sj2);
IkReal x6610=((1.0)*cj1*cj2);
CheckValue<IkReal> x6614=IKPowWithIntegerCheck(((-1.0)+x6608),-1);
if(!x6614.valid){
continue;
}
IkReal x6611=x6614.value;
if((((1.0)+(((-1.0)*x6608)))) < -0.00001)
continue;
IkReal x6612=IKsqrt(((1.0)+(((-1.0)*x6608))));
IkReal x6613=(r12*r22*x6611*x6612);
j4eval[0]=((IKabs((((r22*x6609))+(((-1.0)*r22*x6610)))))+(IKabs((((x6609*x6613))+(((-1.0)*x6610*x6613))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6615=(gconst131*r20);
IkReal x6616=(cj1*cj2);
IkReal x6617=(sj1*sj2);
IkReal x6618=(gconst130*r21);
CheckValue<IkReal> x6619=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x6618*x6618)+(((-2.0)*x6615*x6618))+(x6615*x6615))),-1);
if(!x6619.valid){
continue;
}
CheckValue<IkReal> x6620 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6616))+((r22*x6617)))),IkReal(((((-1.0)*x6617*x6618))+(((-1.0)*x6615*x6616))+((x6616*x6618))+((x6615*x6617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6619.value)))+(x6620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6621=IKsin(j4);
IkReal x6622=IKcos(j4);
IkReal x6623=(cj2*sj1);
IkReal x6624=(gconst131*r20);
IkReal x6625=(gconst131*r10);
IkReal x6626=(gconst131*r00);
IkReal x6627=(cj1*sj2);
IkReal x6628=((1.0)*x6622);
IkReal x6629=(gconst130*x6622);
IkReal x6630=((1.0)*x6621);
evalcond[0]=((((-1.0)*gconst130*r21*x6630))+(((-1.0)*r22*x6628))+((x6621*x6624)));
evalcond[1]=(sj0+(((-1.0)*r02*x6628))+((x6621*x6626))+(((-1.0)*gconst130*r01*x6630)));
evalcond[2]=((((-1.0)*r12*x6628))+(((-1.0)*gconst130*r11*x6630))+((x6621*x6625))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6630))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6624*x6628))+((r21*x6629)));
evalcond[4]=(((r01*x6629))+((cj0*x6627))+((cj0*x6623))+(((-1.0)*r02*x6630))+(((-1.0)*x6626*x6628)));
evalcond[5]=((((-1.0)*x6625*x6628))+((r11*x6629))+((sj0*x6623))+((sj0*x6627))+(((-1.0)*r12*x6630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6631=((1.0)*gconst130);
CheckValue<IkReal> x6632 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst131*r10*sj0))+(((-1.0)*r11*sj0*x6631))+(((-1.0)*cj0*r01*x6631))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6632.valid){
continue;
}
CheckValue<IkReal> x6633=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x6633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6632.value)+(((1.5707963267949)*(x6633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6634=IKsin(j4);
IkReal x6635=IKcos(j4);
IkReal x6636=(cj2*sj1);
IkReal x6637=(gconst131*r20);
IkReal x6638=(gconst131*r10);
IkReal x6639=(gconst131*r00);
IkReal x6640=(cj1*sj2);
IkReal x6641=((1.0)*x6635);
IkReal x6642=(gconst130*x6635);
IkReal x6643=((1.0)*x6634);
evalcond[0]=((((-1.0)*gconst130*r21*x6643))+(((-1.0)*r22*x6641))+((x6634*x6637)));
evalcond[1]=(sj0+(((-1.0)*r02*x6641))+(((-1.0)*gconst130*r01*x6643))+((x6634*x6639)));
evalcond[2]=((((-1.0)*gconst130*r11*x6643))+((x6634*x6638))+(((-1.0)*cj0))+(((-1.0)*r12*x6641)));
evalcond[3]=((((-1.0)*r22*x6643))+((r21*x6642))+(((-1.0)*x6637*x6641))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x6639*x6641))+((r01*x6642))+(((-1.0)*r02*x6643))+((cj0*x6640))+((cj0*x6636)));
evalcond[5]=((((-1.0)*x6638*x6641))+((r11*x6642))+(((-1.0)*r12*x6643))+((sj0*x6636))+((sj0*x6640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6644=((1.0)*gconst130);
CheckValue<IkReal> x6645=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x6644)))),-1);
if(!x6645.valid){
continue;
}
CheckValue<IkReal> x6646 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x6644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6645.value)))+(x6646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6647=IKsin(j4);
IkReal x6648=IKcos(j4);
IkReal x6649=(cj2*sj1);
IkReal x6650=(gconst131*r20);
IkReal x6651=(gconst131*r10);
IkReal x6652=(gconst131*r00);
IkReal x6653=(cj1*sj2);
IkReal x6654=((1.0)*x6648);
IkReal x6655=(gconst130*x6648);
IkReal x6656=((1.0)*x6647);
evalcond[0]=((((-1.0)*r22*x6654))+((x6647*x6650))+(((-1.0)*gconst130*r21*x6656)));
evalcond[1]=(sj0+((x6647*x6652))+(((-1.0)*gconst130*r01*x6656))+(((-1.0)*r02*x6654)));
evalcond[2]=(((x6647*x6651))+(((-1.0)*r12*x6654))+(((-1.0)*gconst130*r11*x6656))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6656))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6650*x6654))+((r21*x6655)));
evalcond[4]=((((-1.0)*x6652*x6654))+((r01*x6655))+((cj0*x6649))+(((-1.0)*r02*x6656))+((cj0*x6653)));
evalcond[5]=((((-1.0)*x6651*x6654))+((r11*x6655))+(((-1.0)*r12*x6656))+((sj0*x6653))+((sj0*x6649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6657=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6657;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6658=((1.0)*sj5);
IkReal x6659=((((-1.0)*r00*x6658))+(((-1.0)*cj5*r01)));
j4eval[0]=x6659;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x6658)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6660=cj5*cj5;
IkReal x6661=r11*r11;
IkReal x6662=(cj5*r10);
IkReal x6663=(r11*sj5);
IkReal x6664=(((x6660*x6661))+(((-1.0)*x6660*(r10*r10)))+(((-1.0)*x6661))+(((2.0)*x6662*x6663))+(((-1.0)*(r12*r12))));
j4eval[0]=x6664;
j4eval[1]=((IKabs(r12))+(IKabs((x6663+(((-1.0)*x6662))))));
j4eval[2]=IKsign(x6664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6665=cj5*cj5;
IkReal x6666=r11*r11;
IkReal x6667=(cj5*r10);
IkReal x6668=(r11*sj5);
CheckValue<IkReal> x6669=IKPowWithIntegerCheck(IKsign(((((2.0)*x6667*x6668))+(((-1.0)*x6666))+(((-1.0)*(r12*r12)))+(((-1.0)*x6665*(r10*r10)))+((x6665*x6666)))),-1);
if(!x6669.valid){
continue;
}
CheckValue<IkReal> x6670 = IKatan2WithCheck(IkReal((x6668+(((-1.0)*x6667)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6669.value)))+(x6670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6671=IKsin(j4);
IkReal x6672=IKcos(j4);
IkReal x6673=(cj5*r00);
IkReal x6674=((1.0)*x6672);
IkReal x6675=(sj5*x6672);
IkReal x6676=(cj5*x6671);
IkReal x6677=((1.0)*x6671);
IkReal x6678=(sj5*x6677);
evalcond[0]=(((r20*x6676))+(((-1.0)*r21*x6678))+(((-1.0)*r22*x6674)));
evalcond[1]=((((-1.0)*r02*x6674))+(((-1.0)*r01*x6678))+((x6671*x6673)));
evalcond[2]=(((r11*x6675))+(((-1.0)*r12*x6677))+(((-1.0)*cj5*r10*x6674)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6674))+(((-1.0)*r11*x6678))+((r10*x6676)));
evalcond[4]=((((-1.0)*x6673*x6674))+(((-1.0)*r02*x6677))+((cj2*sj1))+((cj1*sj2))+((r01*x6675)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6677))+((r21*x6675))+(((-1.0)*cj5*r20*x6674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6679=((1.0)*sj5);
CheckValue<IkReal> x6680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6679))+(((-1.0)*cj5*r01)))),-1);
if(!x6680.valid){
continue;
}
CheckValue<IkReal> x6681 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6680.value)))+(x6681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6682=IKsin(j4);
IkReal x6683=IKcos(j4);
IkReal x6684=(cj5*r00);
IkReal x6685=((1.0)*x6683);
IkReal x6686=(sj5*x6683);
IkReal x6687=(cj5*x6682);
IkReal x6688=((1.0)*x6682);
IkReal x6689=(sj5*x6688);
evalcond[0]=((((-1.0)*r21*x6689))+((r20*x6687))+(((-1.0)*r22*x6685)));
evalcond[1]=((((-1.0)*r01*x6689))+(((-1.0)*r02*x6685))+((x6682*x6684)));
evalcond[2]=(((r11*x6686))+(((-1.0)*cj5*r10*x6685))+(((-1.0)*r12*x6688)));
evalcond[3]=((-1.0)+((r10*x6687))+(((-1.0)*r11*x6689))+(((-1.0)*r12*x6685)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x6688))+((cj1*sj2))+((r01*x6686))+(((-1.0)*x6684*x6685)));
evalcond[5]=(((r21*x6686))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6685))+(((-1.0)*r22*x6688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6690=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6690.valid){
continue;
}
CheckValue<IkReal> x6691 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6690.value)))+(x6691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6692=IKsin(j4);
IkReal x6693=IKcos(j4);
IkReal x6694=(cj5*r00);
IkReal x6695=((1.0)*x6693);
IkReal x6696=(sj5*x6693);
IkReal x6697=(cj5*x6692);
IkReal x6698=((1.0)*x6692);
IkReal x6699=(sj5*x6698);
evalcond[0]=((((-1.0)*r21*x6699))+((r20*x6697))+(((-1.0)*r22*x6695)));
evalcond[1]=((((-1.0)*r01*x6699))+(((-1.0)*r02*x6695))+((x6692*x6694)));
evalcond[2]=(((r11*x6696))+(((-1.0)*cj5*r10*x6695))+(((-1.0)*r12*x6698)));
evalcond[3]=((-1.0)+((r10*x6697))+(((-1.0)*r12*x6695))+(((-1.0)*r11*x6699)));
evalcond[4]=((((-1.0)*x6694*x6695))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x6698))+((r01*x6696)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6696))+(((-1.0)*r22*x6698))+(((-1.0)*cj5*r20*x6695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6700=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6700;
j4eval[1]=IKsign(x6700);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6701=((1.0)*sj5);
IkReal x6702=((((-1.0)*r20*x6701))+(((-1.0)*cj5*r21)));
j4eval[0]=x6702;
j4eval[1]=((IKabs(((((-1.0)*r01*x6701))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x6702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6703=cj5*cj5;
IkReal x6704=r11*r11;
IkReal x6705=(r11*sj5);
IkReal x6706=(cj5*r10);
IkReal x6707=((r12*r12)+((x6703*(r10*r10)))+(((-1.0)*x6703*x6704))+x6704+(((-2.0)*x6705*x6706)));
j4eval[0]=x6707;
j4eval[1]=IKsign(x6707);
j4eval[2]=((IKabs(r12))+(IKabs((x6705+(((-1.0)*x6706))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6708=cj5*cj5;
IkReal x6709=r11*r11;
IkReal x6710=(cj5*r10);
IkReal x6711=(r11*sj5);
CheckValue<IkReal> x6712=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6708*x6709))+(r12*r12)+((x6708*(r10*r10)))+(((-2.0)*x6710*x6711))+x6709)),-1);
if(!x6712.valid){
continue;
}
CheckValue<IkReal> x6713 = IKatan2WithCheck(IkReal(((((-1.0)*x6710))+x6711)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6712.value)))+(x6713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6714=IKsin(j4);
IkReal x6715=IKcos(j4);
IkReal x6716=(cj5*r00);
IkReal x6717=((1.0)*cj1);
IkReal x6718=((1.0)*x6715);
IkReal x6719=(sj5*x6715);
IkReal x6720=(cj5*x6714);
IkReal x6721=((1.0)*x6714);
IkReal x6722=(sj5*x6721);
evalcond[0]=(((r20*x6720))+(((-1.0)*r21*x6722))+(((-1.0)*r22*x6718)));
evalcond[1]=(((x6714*x6716))+(((-1.0)*r02*x6718))+(((-1.0)*r01*x6722)));
evalcond[2]=(((r11*x6719))+(((-1.0)*r12*x6721))+(((-1.0)*cj5*r10*x6718)));
evalcond[3]=((1.0)+(((-1.0)*r11*x6722))+((r10*x6720))+(((-1.0)*r12*x6718)));
evalcond[4]=((((-1.0)*r22*x6721))+(((-1.0)*cj5*r20*x6718))+(((-1.0)*cj2*x6717))+((sj1*sj2))+((r21*x6719)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x6717))+(((-1.0)*r02*x6721))+(((-1.0)*x6716*x6718))+((r01*x6719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6723=((1.0)*sj5);
CheckValue<IkReal> x6724 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6723))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6724.valid){
continue;
}
CheckValue<IkReal> x6725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6723))+(((-1.0)*cj5*r21)))),-1);
if(!x6725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6724.value)+(((1.5707963267949)*(x6725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6726=IKsin(j4);
IkReal x6727=IKcos(j4);
IkReal x6728=(cj5*r00);
IkReal x6729=((1.0)*cj1);
IkReal x6730=((1.0)*x6727);
IkReal x6731=(sj5*x6727);
IkReal x6732=(cj5*x6726);
IkReal x6733=((1.0)*x6726);
IkReal x6734=(sj5*x6733);
evalcond[0]=((((-1.0)*r22*x6730))+((r20*x6732))+(((-1.0)*r21*x6734)));
evalcond[1]=((((-1.0)*r01*x6734))+(((-1.0)*r02*x6730))+((x6726*x6728)));
evalcond[2]=((((-1.0)*cj5*r10*x6730))+(((-1.0)*r12*x6733))+((r11*x6731)));
evalcond[3]=((1.0)+(((-1.0)*r11*x6734))+(((-1.0)*r12*x6730))+((r10*x6732)));
evalcond[4]=(((r21*x6731))+(((-1.0)*r22*x6733))+(((-1.0)*cj5*r20*x6730))+((sj1*sj2))+(((-1.0)*cj2*x6729)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x6728*x6730))+(((-1.0)*r02*x6733))+(((-1.0)*sj2*x6729))+((r01*x6731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6735=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6735.valid){
continue;
}
CheckValue<IkReal> x6736 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6735.value)))+(x6736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6737=IKsin(j4);
IkReal x6738=IKcos(j4);
IkReal x6739=(cj5*r00);
IkReal x6740=((1.0)*cj1);
IkReal x6741=((1.0)*x6738);
IkReal x6742=(sj5*x6738);
IkReal x6743=(cj5*x6737);
IkReal x6744=((1.0)*x6737);
IkReal x6745=(sj5*x6744);
evalcond[0]=((((-1.0)*r21*x6745))+(((-1.0)*r22*x6741))+((r20*x6743)));
evalcond[1]=((((-1.0)*r01*x6745))+(((-1.0)*r02*x6741))+((x6737*x6739)));
evalcond[2]=((((-1.0)*cj5*r10*x6741))+(((-1.0)*r12*x6744))+((r11*x6742)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6741))+(((-1.0)*r11*x6745))+((r10*x6743)));
evalcond[4]=(((r21*x6742))+(((-1.0)*r22*x6744))+(((-1.0)*cj5*r20*x6741))+((sj1*sj2))+(((-1.0)*cj2*x6740)));
evalcond[5]=((((-1.0)*sj2*x6740))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x6744))+((r01*x6742))+(((-1.0)*x6739*x6741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6746=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6746);
rxp0_2=(py*r00);
rxp1_0=(r21*x6746);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6747=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6747);
rxp0_2=(py*r00);
rxp1_0=(r21*x6747);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6748=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6748);
rxp0_2=(py*r00);
rxp1_0=(r21*x6748);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6751=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6751.valid){
continue;
}
IkReal x6749=x6751.value;
IkReal x6750=((1.0)*cj0*x6749);
cj4array[0]=((((-1.0)*cj2*sj1*x6750))+(((-1.0)*cj1*sj2*x6750)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6752=IKsin(j4);
IkReal x6753=IKcos(j4);
IkReal x6754=(cj5*r20);
IkReal x6755=((1.0)*x6753);
IkReal x6756=((1.0)*sj5*x6752);
evalcond[0]=((-1.0)*r12*x6752);
evalcond[1]=((((-1.0)*r12*x6755))+(((-1.0)*cj0)));
evalcond[2]=(((x6752*x6754))+(((-1.0)*r21*x6756)));
evalcond[3]=((((-1.0)*r01*x6756))+((cj5*r00*x6752)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*sj5*x6753))+(((-1.0)*x6754*x6755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6758=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6758.valid){
continue;
}
IkReal x6757=x6758.value;
cj4array[0]=((((-1.0)*sj1*sj2*x6757))+((cj1*cj2*x6757)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6759=IKsin(j4);
IkReal x6760=IKcos(j4);
IkReal x6761=(cj5*r00);
IkReal x6762=(r01*sj5);
IkReal x6763=((1.0)*x6760);
IkReal x6764=((1.0)*x6759);
evalcond[0]=((-1.0)*r12*x6759);
evalcond[1]=((((-1.0)*r12*x6763))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x6764))+((cj5*r20*x6759)));
evalcond[3]=(((x6759*x6761))+(((-1.0)*x6762*x6764)));
evalcond[4]=(((cj0*cj2*sj1))+((x6760*x6762))+((cj0*cj1*sj2))+(((-1.0)*x6761*x6763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6765=IKPowWithIntegerCheck(r12,-1);
if(!x6765.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6765.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6766=IKsin(j4);
IkReal x6767=IKcos(j4);
IkReal x6768=(sj5*x6767);
IkReal x6769=(cj5*x6766);
IkReal x6770=((1.0)*sj5*x6766);
IkReal x6771=((1.0)*cj5*x6767);
evalcond[0]=((-1.0)*r12*x6766);
evalcond[1]=(((r20*x6769))+(((-1.0)*r21*x6770)));
evalcond[2]=((((-1.0)*r01*x6770))+((r00*x6769)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6768))+(((-1.0)*r20*x6771)));
evalcond[4]=(((r01*x6768))+(((-1.0)*r00*x6771))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6772=((1.0)*sj5);
CheckValue<IkReal> x6773=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6773.valid){
continue;
}
CheckValue<IkReal> x6774 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x6772))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6773.value)))+(x6774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6775=IKsin(j4);
IkReal x6776=IKcos(j4);
IkReal x6777=(cj5*r00);
IkReal x6778=(cj2*sj1);
IkReal x6779=(cj1*sj2);
IkReal x6780=((1.0)*x6776);
IkReal x6781=(sj5*x6776);
IkReal x6782=(cj5*x6775);
IkReal x6783=((1.0)*x6775);
IkReal x6784=(sj5*x6783);
evalcond[0]=(((r20*x6782))+(((-1.0)*r21*x6784))+(((-1.0)*r22*x6780)));
evalcond[1]=(sj0+((x6775*x6777))+(((-1.0)*r02*x6780))+(((-1.0)*r01*x6784)));
evalcond[2]=((((-1.0)*r12*x6780))+(((-1.0)*r11*x6784))+((r10*x6782))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6781))+(((-1.0)*cj5*r20*x6780))+(((-1.0)*r22*x6783)));
evalcond[4]=(((cj0*x6779))+((cj0*x6778))+(((-1.0)*r02*x6783))+((r01*x6781))+(((-1.0)*x6777*x6780)));
evalcond[5]=(((sj0*x6779))+((sj0*x6778))+((r11*x6781))+(((-1.0)*r12*x6783))+(((-1.0)*cj5*r10*x6780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6785=((1.0)*sj5);
CheckValue<IkReal> x6786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6785))+(((-1.0)*cj5*r01)))),-1);
if(!x6786.valid){
continue;
}
CheckValue<IkReal> x6787 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6786.value)))+(x6787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6788=IKsin(j4);
IkReal x6789=IKcos(j4);
IkReal x6790=(cj5*r00);
IkReal x6791=(cj2*sj1);
IkReal x6792=(cj1*sj2);
IkReal x6793=((1.0)*x6789);
IkReal x6794=(sj5*x6789);
IkReal x6795=(cj5*x6788);
IkReal x6796=((1.0)*x6788);
IkReal x6797=(sj5*x6796);
evalcond[0]=(((r20*x6795))+(((-1.0)*r22*x6793))+(((-1.0)*r21*x6797)));
evalcond[1]=(sj0+(((-1.0)*r01*x6797))+((x6788*x6790))+(((-1.0)*r02*x6793)));
evalcond[2]=((((-1.0)*r11*x6797))+((r10*x6795))+(((-1.0)*cj0))+(((-1.0)*r12*x6793)));
evalcond[3]=(((r21*x6794))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6796))+(((-1.0)*cj5*r20*x6793)));
evalcond[4]=(((r01*x6794))+((cj0*x6791))+((cj0*x6792))+(((-1.0)*x6790*x6793))+(((-1.0)*r02*x6796)));
evalcond[5]=((((-1.0)*cj5*r10*x6793))+((sj0*x6791))+((sj0*x6792))+((r11*x6794))+(((-1.0)*r12*x6796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6798=((1.0)*sj5);
CheckValue<IkReal> x6799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6798))+(((-1.0)*cj5*r11)))),-1);
if(!x6799.valid){
continue;
}
CheckValue<IkReal> x6800 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6798))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6799.value)))+(x6800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6801=IKsin(j4);
IkReal x6802=IKcos(j4);
IkReal x6803=(cj5*r00);
IkReal x6804=(cj2*sj1);
IkReal x6805=(cj1*sj2);
IkReal x6806=((1.0)*x6802);
IkReal x6807=(sj5*x6802);
IkReal x6808=(cj5*x6801);
IkReal x6809=((1.0)*x6801);
IkReal x6810=(sj5*x6809);
evalcond[0]=((((-1.0)*r21*x6810))+((r20*x6808))+(((-1.0)*r22*x6806)));
evalcond[1]=(((x6801*x6803))+sj0+(((-1.0)*r02*x6806))+(((-1.0)*r01*x6810)));
evalcond[2]=((((-1.0)*r12*x6806))+((r10*x6808))+(((-1.0)*r11*x6810))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6807))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6809))+(((-1.0)*cj5*r20*x6806)));
evalcond[4]=((((-1.0)*x6803*x6806))+(((-1.0)*r02*x6809))+((r01*x6807))+((cj0*x6804))+((cj0*x6805)));
evalcond[5]=(((sj0*x6805))+((sj0*x6804))+(((-1.0)*r12*x6809))+((r11*x6807))+(((-1.0)*cj5*r10*x6806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6811=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x6811;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x6811);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6812=r21*r21;
IkReal x6813=cj5*cj5;
IkReal x6814=(sj1*sj2);
IkReal x6815=(r21*sj5);
IkReal x6816=(cj1*cj2);
IkReal x6817=(cj5*r20);
IkReal x6818=((((-1.0)*x6812))+(((2.0)*x6815*x6817))+((x6812*x6813))+(((-1.0)*(r22*r22)))+(((-1.0)*x6813*(r20*r20))));
j4eval[0]=x6818;
j4eval[1]=((IKabs(((((-1.0)*r22*x6816))+((r22*x6814)))))+(IKabs((((x6814*x6817))+((x6815*x6816))+(((-1.0)*x6816*x6817))+(((-1.0)*x6814*x6815))))));
j4eval[2]=IKsign(x6818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.1265126745929)*py))+(((0.237230316178975)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.1265126745929)*px))+(((-0.237230316178975)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1265126745929)*py))+(((0.237230316178975)*px))))+IKsqr(((((-1.1265126745929)*px))+(((-0.237230316178975)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.1265126745929)*py))+(((0.237230316178975)*px))), ((((-1.1265126745929)*px))+(((-0.237230316178975)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6819=IKsin(j0);
IkReal x6820=IKcos(j0);
evalcond[0]=((((-0.85)*x6820))+(((-1.0)*px))+(((0.179)*x6819)));
evalcond[1]=((((-1.0)*py))+(((-0.179)*x6820))+(((-0.85)*x6819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6821=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6821;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6822=((1.0)*sj5);
IkReal x6823=((((-1.0)*r00*x6822))+(((-1.0)*cj5*r01)));
j4eval[0]=x6823;
j4eval[1]=IKsign(x6823);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6822)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6824=cj5*cj5;
IkReal x6825=((1.0)*r21);
IkReal x6826=(cj5*r20);
IkReal x6827=((((-1.0)*r02*r22))+(((-1.0)*r01*x6825))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x6824))+((r01*sj5*x6826))+((r01*r21*x6824)));
j4eval[0]=x6827;
j4eval[1]=IKsign(x6827);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x6825))+((cj0*x6826)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6828=cj5*cj5;
IkReal x6829=((1.0)*r21);
IkReal x6830=(cj5*r20);
CheckValue<IkReal> x6831=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r01*x6829))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x6828))+((r01*sj5*x6830))+((r01*r21*x6828)))),-1);
if(!x6831.valid){
continue;
}
CheckValue<IkReal> x6832 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6829))+((cj0*x6830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6831.value)))+(x6832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6833=IKcos(j4);
IkReal x6834=IKsin(j4);
IkReal x6835=(r11*sj5);
IkReal x6836=(r21*sj5);
IkReal x6837=(r01*sj5);
IkReal x6838=((1.0)*x6833);
IkReal x6839=((1.0)*x6834);
IkReal x6840=(cj5*x6833);
IkReal x6841=(cj5*x6834);
evalcond[0]=(((r22*x6834))+((r20*x6840))+(((-1.0)*x6836*x6838)));
evalcond[1]=((((-1.0)*r22*x6838))+((r20*x6841))+(((-1.0)*x6836*x6839)));
evalcond[2]=(((r02*x6834))+cj0+(((-1.0)*x6837*x6838))+((r00*x6840)));
evalcond[3]=(sj0+((r12*x6834))+(((-1.0)*x6835*x6838))+((r10*x6840)));
evalcond[4]=(sj0+(((-1.0)*r02*x6838))+(((-1.0)*x6837*x6839))+((r00*x6841)));
evalcond[5]=((((-1.0)*r12*x6838))+(((-1.0)*x6835*x6839))+(((-1.0)*cj0))+((r10*x6841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6842=((1.0)*sj5);
CheckValue<IkReal> x6843 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6842)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6843.valid){
continue;
}
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6842))+(((-1.0)*cj5*r01)))),-1);
if(!x6844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6843.value)+(((1.5707963267949)*(x6844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6845=IKcos(j4);
IkReal x6846=IKsin(j4);
IkReal x6847=(r11*sj5);
IkReal x6848=(r21*sj5);
IkReal x6849=(r01*sj5);
IkReal x6850=((1.0)*x6845);
IkReal x6851=((1.0)*x6846);
IkReal x6852=(cj5*x6845);
IkReal x6853=(cj5*x6846);
evalcond[0]=(((r22*x6846))+((r20*x6852))+(((-1.0)*x6848*x6850)));
evalcond[1]=(((r20*x6853))+(((-1.0)*r22*x6850))+(((-1.0)*x6848*x6851)));
evalcond[2]=(cj0+((r00*x6852))+(((-1.0)*x6849*x6850))+((r02*x6846)));
evalcond[3]=(sj0+((r12*x6846))+((r10*x6852))+(((-1.0)*x6847*x6850)));
evalcond[4]=(sj0+(((-1.0)*r02*x6850))+((r00*x6853))+(((-1.0)*x6849*x6851)));
evalcond[5]=(((r10*x6853))+(((-1.0)*x6847*x6851))+(((-1.0)*r12*x6850))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6854 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6854.valid){
continue;
}
CheckValue<IkReal> x6855=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6854.value)+(((1.5707963267949)*(x6855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6856=IKcos(j4);
IkReal x6857=IKsin(j4);
IkReal x6858=(r11*sj5);
IkReal x6859=(r21*sj5);
IkReal x6860=(r01*sj5);
IkReal x6861=((1.0)*x6856);
IkReal x6862=((1.0)*x6857);
IkReal x6863=(cj5*x6856);
IkReal x6864=(cj5*x6857);
evalcond[0]=(((r22*x6857))+((r20*x6863))+(((-1.0)*x6859*x6861)));
evalcond[1]=((((-1.0)*r22*x6861))+((r20*x6864))+(((-1.0)*x6859*x6862)));
evalcond[2]=(((r02*x6857))+(((-1.0)*x6860*x6861))+cj0+((r00*x6863)));
evalcond[3]=(sj0+((r12*x6857))+(((-1.0)*x6858*x6861))+((r10*x6863)));
evalcond[4]=(sj0+(((-1.0)*x6860*x6862))+(((-1.0)*r02*x6861))+((r00*x6864)));
evalcond[5]=((((-1.0)*r12*x6861))+(((-1.0)*x6858*x6862))+((r10*x6864))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.1265126745929)*py))+(((0.237230316178975)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.1265126745929)*px))+(((-0.237230316178975)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1265126745929)*py))+(((0.237230316178975)*px))))+IKsqr(((((-1.1265126745929)*px))+(((-0.237230316178975)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.1265126745929)*py))+(((0.237230316178975)*px))), ((((-1.1265126745929)*px))+(((-0.237230316178975)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6865=IKsin(j0);
IkReal x6866=IKcos(j0);
evalcond[0]=((((0.179)*x6865))+(((-1.0)*px))+(((-0.85)*x6866)));
evalcond[1]=((((-0.179)*x6866))+(((-1.0)*py))+(((-0.85)*x6865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6867=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6867;
j4eval[1]=IKsign(x6867);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6868=((1.0)*sj5);
IkReal x6869=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6868)));
j4eval[0]=x6869;
j4eval[1]=IKsign(x6869);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6868))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6870=((1.0)*sj5);
IkReal x6871=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6870)));
j4eval[0]=x6871;
j4eval[1]=IKsign(x6871);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6870))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6872=((1.0)*sj5);
CheckValue<IkReal> x6873 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6872))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6873.valid){
continue;
}
CheckValue<IkReal> x6874=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6872)))),-1);
if(!x6874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6873.value)+(((1.5707963267949)*(x6874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6875=IKcos(j4);
IkReal x6876=IKsin(j4);
IkReal x6877=((1.0)*cj0);
IkReal x6878=(r11*sj5);
IkReal x6879=(r21*sj5);
IkReal x6880=(r01*sj5);
IkReal x6881=((1.0)*x6875);
IkReal x6882=(cj5*x6875);
IkReal x6883=((1.0)*x6876);
IkReal x6884=(cj5*x6876);
evalcond[0]=(((r20*x6882))+((r22*x6876))+(((-1.0)*x6879*x6881)));
evalcond[1]=(((r20*x6884))+(((-1.0)*x6879*x6883))+(((-1.0)*r22*x6881)));
evalcond[2]=(sj0+(((-1.0)*r02*x6881))+((r00*x6884))+(((-1.0)*x6880*x6883)));
evalcond[3]=(((r02*x6876))+(((-1.0)*x6877))+((r00*x6882))+(((-1.0)*x6880*x6881)));
evalcond[4]=((((-1.0)*sj0))+((r12*x6876))+(((-1.0)*x6878*x6881))+((r10*x6882)));
evalcond[5]=((((-1.0)*x6877))+(((-1.0)*x6878*x6883))+(((-1.0)*r12*x6881))+((r10*x6884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6885=((1.0)*sj5);
CheckValue<IkReal> x6886 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6886.valid){
continue;
}
CheckValue<IkReal> x6887=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6885)))),-1);
if(!x6887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6886.value)+(((1.5707963267949)*(x6887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6888=IKcos(j4);
IkReal x6889=IKsin(j4);
IkReal x6890=((1.0)*cj0);
IkReal x6891=(r11*sj5);
IkReal x6892=(r21*sj5);
IkReal x6893=(r01*sj5);
IkReal x6894=((1.0)*x6888);
IkReal x6895=(cj5*x6888);
IkReal x6896=((1.0)*x6889);
IkReal x6897=(cj5*x6889);
evalcond[0]=((((-1.0)*x6892*x6894))+((r22*x6889))+((r20*x6895)));
evalcond[1]=((((-1.0)*x6892*x6896))+(((-1.0)*r22*x6894))+((r20*x6897)));
evalcond[2]=(sj0+(((-1.0)*x6893*x6896))+(((-1.0)*r02*x6894))+((r00*x6897)));
evalcond[3]=(((r02*x6889))+(((-1.0)*x6893*x6894))+(((-1.0)*x6890))+((r00*x6895)));
evalcond[4]=(((r10*x6895))+(((-1.0)*sj0))+(((-1.0)*x6891*x6894))+((r12*x6889)));
evalcond[5]=(((r10*x6897))+(((-1.0)*x6891*x6896))+(((-1.0)*x6890))+(((-1.0)*r12*x6894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6898 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6898.valid){
continue;
}
CheckValue<IkReal> x6899=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6898.value)+(((1.5707963267949)*(x6899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6900=IKcos(j4);
IkReal x6901=IKsin(j4);
IkReal x6902=((1.0)*cj0);
IkReal x6903=(r11*sj5);
IkReal x6904=(r21*sj5);
IkReal x6905=(r01*sj5);
IkReal x6906=((1.0)*x6900);
IkReal x6907=(cj5*x6900);
IkReal x6908=((1.0)*x6901);
IkReal x6909=(cj5*x6901);
evalcond[0]=((((-1.0)*x6904*x6906))+((r22*x6901))+((r20*x6907)));
evalcond[1]=((((-1.0)*x6904*x6908))+(((-1.0)*r22*x6906))+((r20*x6909)));
evalcond[2]=((((-1.0)*r02*x6906))+((r00*x6909))+sj0+(((-1.0)*x6905*x6908)));
evalcond[3]=(((r00*x6907))+(((-1.0)*x6905*x6906))+(((-1.0)*x6902))+((r02*x6901)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6907))+((r12*x6901))+(((-1.0)*x6903*x6906)));
evalcond[5]=((((-1.0)*r12*x6906))+(((-1.0)*x6902))+((r10*x6909))+(((-1.0)*x6903*x6908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.58659217877095)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.58659217877095)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.58659217877095)*px))+IKsqr(((-5.58659217877095)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.58659217877095)*px), ((-5.58659217877095)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.179)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.179)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6910=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6910;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6911=((1.0)*sj5);
IkReal x6912=((((-1.0)*r00*x6911))+(((-1.0)*cj5*r01)));
j4eval[0]=x6912;
j4eval[1]=IKsign(x6912);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x6911))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6913=cj5*cj5;
IkReal x6914=((1.0)*r21);
IkReal x6915=(cj5*r20);
IkReal x6916=(((r01*r21*x6913))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6913))+((r01*sj5*x6915))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6914)));
j4eval[0]=x6916;
j4eval[1]=IKsign(x6916);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x6914))+((cj0*x6915)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6917=cj5*cj5;
IkReal x6918=((1.0)*r21);
IkReal x6919=(cj5*r20);
CheckValue<IkReal> x6920 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6918))+((cj0*x6919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6920.valid){
continue;
}
CheckValue<IkReal> x6921=IKPowWithIntegerCheck(IKsign((((r01*r21*x6917))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6917))+((r01*sj5*x6919))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6918)))),-1);
if(!x6921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6920.value)+(((1.5707963267949)*(x6921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6922=IKcos(j4);
IkReal x6923=IKsin(j4);
IkReal x6924=(r11*sj5);
IkReal x6925=(r21*sj5);
IkReal x6926=(r01*sj5);
IkReal x6927=((1.0)*x6922);
IkReal x6928=((1.0)*x6923);
IkReal x6929=(cj5*x6922);
IkReal x6930=(cj5*x6923);
evalcond[0]=(((r20*x6929))+(((-1.0)*x6925*x6927))+((r22*x6923)));
evalcond[1]=(((r20*x6930))+(((-1.0)*r22*x6927))+(((-1.0)*x6925*x6928)));
evalcond[2]=(cj0+((r00*x6929))+((r02*x6923))+(((-1.0)*x6926*x6927)));
evalcond[3]=(sj0+((r10*x6929))+(((-1.0)*x6924*x6927))+((r12*x6923)));
evalcond[4]=(sj0+((r00*x6930))+(((-1.0)*r02*x6927))+(((-1.0)*x6926*x6928)));
evalcond[5]=(((r10*x6930))+(((-1.0)*x6924*x6928))+(((-1.0)*r12*x6927))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6931=((1.0)*sj5);
CheckValue<IkReal> x6932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6931))+(((-1.0)*cj5*r01)))),-1);
if(!x6932.valid){
continue;
}
CheckValue<IkReal> x6933 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6931)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6932.value)))+(x6933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6934=IKcos(j4);
IkReal x6935=IKsin(j4);
IkReal x6936=(r11*sj5);
IkReal x6937=(r21*sj5);
IkReal x6938=(r01*sj5);
IkReal x6939=((1.0)*x6934);
IkReal x6940=((1.0)*x6935);
IkReal x6941=(cj5*x6934);
IkReal x6942=(cj5*x6935);
evalcond[0]=(((r22*x6935))+(((-1.0)*x6937*x6939))+((r20*x6941)));
evalcond[1]=((((-1.0)*r22*x6939))+((r20*x6942))+(((-1.0)*x6937*x6940)));
evalcond[2]=(cj0+(((-1.0)*x6938*x6939))+((r00*x6941))+((r02*x6935)));
evalcond[3]=(sj0+((r10*x6941))+((r12*x6935))+(((-1.0)*x6936*x6939)));
evalcond[4]=(sj0+(((-1.0)*r02*x6939))+(((-1.0)*x6938*x6940))+((r00*x6942)));
evalcond[5]=(((r10*x6942))+(((-1.0)*r12*x6939))+(((-1.0)*cj0))+(((-1.0)*x6936*x6940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6943 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6943.valid){
continue;
}
CheckValue<IkReal> x6944=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6943.value)+(((1.5707963267949)*(x6944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6945=IKcos(j4);
IkReal x6946=IKsin(j4);
IkReal x6947=(r11*sj5);
IkReal x6948=(r21*sj5);
IkReal x6949=(r01*sj5);
IkReal x6950=((1.0)*x6945);
IkReal x6951=((1.0)*x6946);
IkReal x6952=(cj5*x6945);
IkReal x6953=(cj5*x6946);
evalcond[0]=(((r22*x6946))+(((-1.0)*x6948*x6950))+((r20*x6952)));
evalcond[1]=((((-1.0)*x6948*x6951))+((r20*x6953))+(((-1.0)*r22*x6950)));
evalcond[2]=(cj0+((r02*x6946))+(((-1.0)*x6949*x6950))+((r00*x6952)));
evalcond[3]=(sj0+((r10*x6952))+(((-1.0)*x6947*x6950))+((r12*x6946)));
evalcond[4]=(sj0+(((-1.0)*r02*x6950))+(((-1.0)*x6949*x6951))+((r00*x6953)));
evalcond[5]=(((r10*x6953))+(((-1.0)*r12*x6950))+(((-1.0)*x6947*x6951))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.58659217877095)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.58659217877095)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.58659217877095)*px))+IKsqr(((-5.58659217877095)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.58659217877095)*px), ((-5.58659217877095)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.179)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.179)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6954=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6954;
j4eval[1]=IKsign(x6954);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6955=((1.0)*sj5);
IkReal x6956=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6955)));
j4eval[0]=x6956;
j4eval[1]=IKsign(x6956);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6955))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6957=((1.0)*sj5);
IkReal x6958=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6957)));
j4eval[0]=x6958;
j4eval[1]=IKsign(x6958);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6957))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6959=((1.0)*sj5);
CheckValue<IkReal> x6960 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6959))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6960.valid){
continue;
}
CheckValue<IkReal> x6961=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6959)))),-1);
if(!x6961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6960.value)+(((1.5707963267949)*(x6961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6962=IKcos(j4);
IkReal x6963=IKsin(j4);
IkReal x6964=((1.0)*cj0);
IkReal x6965=(r11*sj5);
IkReal x6966=(r21*sj5);
IkReal x6967=(r01*sj5);
IkReal x6968=((1.0)*x6962);
IkReal x6969=(cj5*x6962);
IkReal x6970=((1.0)*x6963);
IkReal x6971=(cj5*x6963);
evalcond[0]=(((r22*x6963))+(((-1.0)*x6966*x6968))+((r20*x6969)));
evalcond[1]=((((-1.0)*x6966*x6970))+(((-1.0)*r22*x6968))+((r20*x6971)));
evalcond[2]=((((-1.0)*r02*x6968))+sj0+((r00*x6971))+(((-1.0)*x6967*x6970)));
evalcond[3]=(((r00*x6969))+((r02*x6963))+(((-1.0)*x6964))+(((-1.0)*x6967*x6968)));
evalcond[4]=((((-1.0)*x6965*x6968))+((r10*x6969))+(((-1.0)*sj0))+((r12*x6963)));
evalcond[5]=((((-1.0)*x6965*x6970))+(((-1.0)*r12*x6968))+(((-1.0)*x6964))+((r10*x6971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6972=((1.0)*sj5);
CheckValue<IkReal> x6973 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6973.valid){
continue;
}
CheckValue<IkReal> x6974=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6972)))),-1);
if(!x6974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6973.value)+(((1.5707963267949)*(x6974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6975=IKcos(j4);
IkReal x6976=IKsin(j4);
IkReal x6977=((1.0)*cj0);
IkReal x6978=(r11*sj5);
IkReal x6979=(r21*sj5);
IkReal x6980=(r01*sj5);
IkReal x6981=((1.0)*x6975);
IkReal x6982=(cj5*x6975);
IkReal x6983=((1.0)*x6976);
IkReal x6984=(cj5*x6976);
evalcond[0]=(((r22*x6976))+((r20*x6982))+(((-1.0)*x6979*x6981)));
evalcond[1]=(((r20*x6984))+(((-1.0)*r22*x6981))+(((-1.0)*x6979*x6983)));
evalcond[2]=(sj0+((r00*x6984))+(((-1.0)*x6980*x6983))+(((-1.0)*r02*x6981)));
evalcond[3]=((((-1.0)*x6977))+((r02*x6976))+((r00*x6982))+(((-1.0)*x6980*x6981)));
evalcond[4]=(((r12*x6976))+(((-1.0)*x6978*x6981))+(((-1.0)*sj0))+((r10*x6982)));
evalcond[5]=((((-1.0)*x6978*x6983))+((r10*x6984))+(((-1.0)*r12*x6981))+(((-1.0)*x6977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6985 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6985.valid){
continue;
}
CheckValue<IkReal> x6986=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6985.value)+(((1.5707963267949)*(x6986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6987=IKcos(j4);
IkReal x6988=IKsin(j4);
IkReal x6989=((1.0)*cj0);
IkReal x6990=(r11*sj5);
IkReal x6991=(r21*sj5);
IkReal x6992=(r01*sj5);
IkReal x6993=((1.0)*x6987);
IkReal x6994=(cj5*x6987);
IkReal x6995=((1.0)*x6988);
IkReal x6996=(cj5*x6988);
evalcond[0]=(((r22*x6988))+((r20*x6994))+(((-1.0)*x6991*x6993)));
evalcond[1]=(((r20*x6996))+(((-1.0)*r22*x6993))+(((-1.0)*x6991*x6995)));
evalcond[2]=(sj0+((r00*x6996))+(((-1.0)*x6992*x6995))+(((-1.0)*r02*x6993)));
evalcond[3]=((((-1.0)*x6989))+((r02*x6988))+((r00*x6994))+(((-1.0)*x6992*x6993)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6994))+(((-1.0)*x6990*x6993))+((r12*x6988)));
evalcond[5]=((((-1.0)*r12*x6993))+((r10*x6996))+(((-1.0)*x6989))+(((-1.0)*x6990*x6995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.1265126745929)*py))+(((0.237230316178975)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1265126745929)*px))+(((-0.237230316178975)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1265126745929)*py))+(((0.237230316178975)*px))))+IKsqr(((((1.1265126745929)*px))+(((-0.237230316178975)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.1265126745929)*py))+(((0.237230316178975)*px))), ((((1.1265126745929)*px))+(((-0.237230316178975)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6997=IKsin(j0);
IkReal x6998=IKcos(j0);
evalcond[0]=((((0.85)*x6998))+(((-1.0)*px))+(((0.179)*x6997)));
evalcond[1]=((((0.85)*x6997))+(((-0.179)*x6998))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6999=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6999;
j4eval[1]=IKsign(x6999);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7000=((1.0)*sj5);
IkReal x7001=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7000)));
j4eval[0]=x7001;
j4eval[1]=IKsign(x7001);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7000)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7002=((1.0)*sj5);
IkReal x7003=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7002)));
j4eval[0]=x7003;
j4eval[1]=IKsign(x7003);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7002)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7004=((1.0)*sj5);
CheckValue<IkReal> x7005=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7004)))),-1);
if(!x7005.valid){
continue;
}
CheckValue<IkReal> x7006 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7004)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7005.value)))+(x7006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7007=IKcos(j4);
IkReal x7008=IKsin(j4);
IkReal x7009=((1.0)*cj0);
IkReal x7010=(r11*sj5);
IkReal x7011=(r21*sj5);
IkReal x7012=(r01*sj5);
IkReal x7013=((1.0)*x7007);
IkReal x7014=(cj5*x7007);
IkReal x7015=((1.0)*x7008);
IkReal x7016=(cj5*x7008);
evalcond[0]=((((-1.0)*x7011*x7013))+((r20*x7014))+((r22*x7008)));
evalcond[1]=((((-1.0)*r22*x7013))+(((-1.0)*x7011*x7015))+((r20*x7016)));
evalcond[2]=(sj0+(((-1.0)*x7012*x7015))+((r00*x7016))+(((-1.0)*r02*x7013)));
evalcond[3]=((((-1.0)*x7012*x7013))+((r02*x7008))+(((-1.0)*x7009))+((r00*x7014)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x7010*x7013))+((r12*x7008))+((r10*x7014)));
evalcond[5]=((((-1.0)*x7010*x7015))+(((-1.0)*x7009))+(((-1.0)*r12*x7013))+((r10*x7016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7017=((1.0)*sj5);
CheckValue<IkReal> x7018 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7018.valid){
continue;
}
CheckValue<IkReal> x7019=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7017)))),-1);
if(!x7019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7018.value)+(((1.5707963267949)*(x7019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7020=IKcos(j4);
IkReal x7021=IKsin(j4);
IkReal x7022=((1.0)*cj0);
IkReal x7023=(r11*sj5);
IkReal x7024=(r21*sj5);
IkReal x7025=(r01*sj5);
IkReal x7026=((1.0)*x7020);
IkReal x7027=(cj5*x7020);
IkReal x7028=((1.0)*x7021);
IkReal x7029=(cj5*x7021);
evalcond[0]=((((-1.0)*x7024*x7026))+((r20*x7027))+((r22*x7021)));
evalcond[1]=((((-1.0)*r22*x7026))+(((-1.0)*x7024*x7028))+((r20*x7029)));
evalcond[2]=((((-1.0)*x7025*x7028))+sj0+((r00*x7029))+(((-1.0)*r02*x7026)));
evalcond[3]=((((-1.0)*x7025*x7026))+((r00*x7027))+((r02*x7021))+(((-1.0)*x7022)));
evalcond[4]=((((-1.0)*sj0))+((r12*x7021))+((r10*x7027))+(((-1.0)*x7023*x7026)));
evalcond[5]=((((-1.0)*r12*x7026))+((r10*x7029))+(((-1.0)*x7022))+(((-1.0)*x7023*x7028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7030 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7030.valid){
continue;
}
CheckValue<IkReal> x7031=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7030.value)+(((1.5707963267949)*(x7031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7032=IKcos(j4);
IkReal x7033=IKsin(j4);
IkReal x7034=((1.0)*cj0);
IkReal x7035=(r11*sj5);
IkReal x7036=(r21*sj5);
IkReal x7037=(r01*sj5);
IkReal x7038=((1.0)*x7032);
IkReal x7039=(cj5*x7032);
IkReal x7040=((1.0)*x7033);
IkReal x7041=(cj5*x7033);
evalcond[0]=((((-1.0)*x7036*x7038))+((r20*x7039))+((r22*x7033)));
evalcond[1]=((((-1.0)*r22*x7038))+(((-1.0)*x7036*x7040))+((r20*x7041)));
evalcond[2]=(sj0+((r00*x7041))+(((-1.0)*r02*x7038))+(((-1.0)*x7037*x7040)));
evalcond[3]=(((r00*x7039))+(((-1.0)*x7037*x7038))+((r02*x7033))+(((-1.0)*x7034)));
evalcond[4]=((((-1.0)*sj0))+((r12*x7033))+(((-1.0)*x7035*x7038))+((r10*x7039)));
evalcond[5]=((((-1.0)*x7035*x7040))+((r10*x7041))+(((-1.0)*r12*x7038))+(((-1.0)*x7034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.1265126745929)*py))+(((0.237230316178975)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1265126745929)*px))+(((-0.237230316178975)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1265126745929)*py))+(((0.237230316178975)*px))))+IKsqr(((((1.1265126745929)*px))+(((-0.237230316178975)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.1265126745929)*py))+(((0.237230316178975)*px))), ((((1.1265126745929)*px))+(((-0.237230316178975)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7042=IKsin(j0);
IkReal x7043=IKcos(j0);
evalcond[0]=((((0.85)*x7043))+(((0.179)*x7042))+(((-1.0)*px)));
evalcond[1]=((((0.85)*x7042))+(((-1.0)*py))+(((-0.179)*x7043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7044=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7044;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x7044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7045=((1.0)*sj5);
IkReal x7046=((((-1.0)*r00*x7045))+(((-1.0)*cj5*r01)));
j4eval[0]=x7046;
j4eval[1]=IKsign(x7046);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7045))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7047=cj5*cj5;
IkReal x7048=((1.0)*r21);
IkReal x7049=(cj5*r20);
IkReal x7050=((((-1.0)*r02*r22))+(((-1.0)*r01*x7048))+(((-1.0)*r00*r20*x7047))+((r01*r21*x7047))+((cj5*r00*r21*sj5))+((r01*sj5*x7049)));
j4eval[0]=x7050;
j4eval[1]=IKsign(x7050);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x7048))+((cj0*x7049)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7051=cj5*cj5;
IkReal x7052=((1.0)*r21);
IkReal x7053=(cj5*r20);
CheckValue<IkReal> x7054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7052))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x7051))+((r01*sj5*x7053))+((cj5*r00*r21*sj5))+((r01*r21*x7051)))),-1);
if(!x7054.valid){
continue;
}
CheckValue<IkReal> x7055 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x7053))+(((-1.0)*cj0*sj5*x7052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7054.value)))+(x7055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7056=IKcos(j4);
IkReal x7057=IKsin(j4);
IkReal x7058=(r11*sj5);
IkReal x7059=(r21*sj5);
IkReal x7060=(r01*sj5);
IkReal x7061=((1.0)*x7056);
IkReal x7062=((1.0)*x7057);
IkReal x7063=(cj5*x7056);
IkReal x7064=(cj5*x7057);
evalcond[0]=((((-1.0)*x7059*x7061))+((r20*x7063))+((r22*x7057)));
evalcond[1]=((((-1.0)*x7059*x7062))+((r20*x7064))+(((-1.0)*r22*x7061)));
evalcond[2]=(cj0+((r02*x7057))+((r00*x7063))+(((-1.0)*x7060*x7061)));
evalcond[3]=(sj0+(((-1.0)*x7058*x7061))+((r12*x7057))+((r10*x7063)));
evalcond[4]=(sj0+((r00*x7064))+(((-1.0)*r02*x7061))+(((-1.0)*x7060*x7062)));
evalcond[5]=((((-1.0)*x7058*x7062))+(((-1.0)*r12*x7061))+((r10*x7064))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7065=((1.0)*sj5);
CheckValue<IkReal> x7066 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7065)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7066.valid){
continue;
}
CheckValue<IkReal> x7067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7065))+(((-1.0)*cj5*r01)))),-1);
if(!x7067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7066.value)+(((1.5707963267949)*(x7067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7068=IKcos(j4);
IkReal x7069=IKsin(j4);
IkReal x7070=(r11*sj5);
IkReal x7071=(r21*sj5);
IkReal x7072=(r01*sj5);
IkReal x7073=((1.0)*x7068);
IkReal x7074=((1.0)*x7069);
IkReal x7075=(cj5*x7068);
IkReal x7076=(cj5*x7069);
evalcond[0]=(((r22*x7069))+(((-1.0)*x7071*x7073))+((r20*x7075)));
evalcond[1]=((((-1.0)*x7071*x7074))+((r20*x7076))+(((-1.0)*r22*x7073)));
evalcond[2]=(cj0+(((-1.0)*x7072*x7073))+((r00*x7075))+((r02*x7069)));
evalcond[3]=(((r12*x7069))+sj0+(((-1.0)*x7070*x7073))+((r10*x7075)));
evalcond[4]=(sj0+(((-1.0)*x7072*x7074))+((r00*x7076))+(((-1.0)*r02*x7073)));
evalcond[5]=((((-1.0)*x7070*x7074))+(((-1.0)*r12*x7073))+((r10*x7076))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7077 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7077.valid){
continue;
}
CheckValue<IkReal> x7078=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7077.value)+(((1.5707963267949)*(x7078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7079=IKcos(j4);
IkReal x7080=IKsin(j4);
IkReal x7081=(r11*sj5);
IkReal x7082=(r21*sj5);
IkReal x7083=(r01*sj5);
IkReal x7084=((1.0)*x7079);
IkReal x7085=((1.0)*x7080);
IkReal x7086=(cj5*x7079);
IkReal x7087=(cj5*x7080);
evalcond[0]=(((r22*x7080))+(((-1.0)*x7082*x7084))+((r20*x7086)));
evalcond[1]=((((-1.0)*x7082*x7085))+(((-1.0)*r22*x7084))+((r20*x7087)));
evalcond[2]=(((r00*x7086))+cj0+((r02*x7080))+(((-1.0)*x7083*x7084)));
evalcond[3]=(sj0+((r12*x7080))+((r10*x7086))+(((-1.0)*x7081*x7084)));
evalcond[4]=(sj0+((r00*x7087))+(((-1.0)*x7083*x7085))+(((-1.0)*r02*x7084)));
evalcond[5]=((((-1.0)*r12*x7084))+((r10*x7087))+(((-1.0)*cj0))+(((-1.0)*x7081*x7085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.58659217877095)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.58659217877095)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.58659217877095)*px))+IKsqr(((-5.58659217877095)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.58659217877095)*px), ((-5.58659217877095)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.179)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.179)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7088=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7088;
j4eval[1]=IKsign(x7088);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7089=((1.0)*sj5);
IkReal x7090=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7089)));
j4eval[0]=x7090;
j4eval[1]=IKsign(x7090);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7089))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7091=((1.0)*sj5);
IkReal x7092=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7091)));
j4eval[0]=x7092;
j4eval[1]=IKsign(x7092);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7091)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7093=((1.0)*sj5);
CheckValue<IkReal> x7094 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7093)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7094.valid){
continue;
}
CheckValue<IkReal> x7095=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7093)))),-1);
if(!x7095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7094.value)+(((1.5707963267949)*(x7095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7096=IKcos(j4);
IkReal x7097=IKsin(j4);
IkReal x7098=((1.0)*cj0);
IkReal x7099=(r11*sj5);
IkReal x7100=(r21*sj5);
IkReal x7101=(r01*sj5);
IkReal x7102=((1.0)*x7096);
IkReal x7103=(cj5*x7096);
IkReal x7104=((1.0)*x7097);
IkReal x7105=(cj5*x7097);
evalcond[0]=(((r22*x7097))+(((-1.0)*x7100*x7102))+((r20*x7103)));
evalcond[1]=((((-1.0)*x7100*x7104))+(((-1.0)*r22*x7102))+((r20*x7105)));
evalcond[2]=(sj0+(((-1.0)*x7101*x7104))+(((-1.0)*r02*x7102))+((r00*x7105)));
evalcond[3]=((((-1.0)*x7098))+(((-1.0)*x7101*x7102))+((r02*x7097))+((r00*x7103)));
evalcond[4]=((((-1.0)*sj0))+((r12*x7097))+((r10*x7103))+(((-1.0)*x7099*x7102)));
evalcond[5]=((((-1.0)*x7098))+(((-1.0)*r12*x7102))+((r10*x7105))+(((-1.0)*x7099*x7104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7106=((1.0)*sj5);
CheckValue<IkReal> x7107=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7106)))),-1);
if(!x7107.valid){
continue;
}
CheckValue<IkReal> x7108 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7107.value)))+(x7108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7109=IKcos(j4);
IkReal x7110=IKsin(j4);
IkReal x7111=((1.0)*cj0);
IkReal x7112=(r11*sj5);
IkReal x7113=(r21*sj5);
IkReal x7114=(r01*sj5);
IkReal x7115=((1.0)*x7109);
IkReal x7116=(cj5*x7109);
IkReal x7117=((1.0)*x7110);
IkReal x7118=(cj5*x7110);
evalcond[0]=(((r22*x7110))+((r20*x7116))+(((-1.0)*x7113*x7115)));
evalcond[1]=((((-1.0)*r22*x7115))+((r20*x7118))+(((-1.0)*x7113*x7117)));
evalcond[2]=(sj0+(((-1.0)*r02*x7115))+(((-1.0)*x7114*x7117))+((r00*x7118)));
evalcond[3]=(((r02*x7110))+(((-1.0)*x7114*x7115))+((r00*x7116))+(((-1.0)*x7111)));
evalcond[4]=(((r12*x7110))+(((-1.0)*sj0))+(((-1.0)*x7112*x7115))+((r10*x7116)));
evalcond[5]=((((-1.0)*r12*x7115))+(((-1.0)*x7112*x7117))+((r10*x7118))+(((-1.0)*x7111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7119 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7119.valid){
continue;
}
CheckValue<IkReal> x7120=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7119.value)+(((1.5707963267949)*(x7120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7121=IKcos(j4);
IkReal x7122=IKsin(j4);
IkReal x7123=((1.0)*cj0);
IkReal x7124=(r11*sj5);
IkReal x7125=(r21*sj5);
IkReal x7126=(r01*sj5);
IkReal x7127=((1.0)*x7121);
IkReal x7128=(cj5*x7121);
IkReal x7129=((1.0)*x7122);
IkReal x7130=(cj5*x7122);
evalcond[0]=(((r20*x7128))+((r22*x7122))+(((-1.0)*x7125*x7127)));
evalcond[1]=((((-1.0)*r22*x7127))+((r20*x7130))+(((-1.0)*x7125*x7129)));
evalcond[2]=(sj0+((r00*x7130))+(((-1.0)*x7126*x7129))+(((-1.0)*r02*x7127)));
evalcond[3]=(((r00*x7128))+(((-1.0)*x7123))+(((-1.0)*x7126*x7127))+((r02*x7122)));
evalcond[4]=((((-1.0)*sj0))+((r10*x7128))+((r12*x7122))+(((-1.0)*x7124*x7127)));
evalcond[5]=(((r10*x7130))+(((-1.0)*x7123))+(((-1.0)*r12*x7127))+(((-1.0)*x7124*x7129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.58659217877095)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.58659217877095)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.58659217877095)*px))+IKsqr(((-5.58659217877095)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.58659217877095)*px), ((-5.58659217877095)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.179)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.179)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7131=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7131;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x7131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7132=((1.0)*sj5);
IkReal x7133=((((-1.0)*r00*x7132))+(((-1.0)*cj5*r01)));
j4eval[0]=x7133;
j4eval[1]=IKsign(x7133);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7132)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7134=cj5*cj5;
IkReal x7135=((1.0)*r21);
IkReal x7136=(cj5*r20);
IkReal x7137=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x7134))+(((-1.0)*r01*x7135))+((cj5*r00*r21*sj5))+((r01*r21*x7134))+((r01*sj5*x7136)));
j4eval[0]=x7137;
j4eval[1]=IKsign(x7137);
j4eval[2]=((IKabs((((cj0*x7136))+(((-1.0)*cj0*sj5*x7135)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7138=cj5*cj5;
IkReal x7139=((1.0)*r21);
IkReal x7140=(cj5*r20);
CheckValue<IkReal> x7141=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x7138))+(((-1.0)*r01*x7139))+((r01*sj5*x7140))+((cj5*r00*r21*sj5))+((r01*r21*x7138)))),-1);
if(!x7141.valid){
continue;
}
CheckValue<IkReal> x7142 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x7140))+(((-1.0)*cj0*sj5*x7139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7141.value)))+(x7142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7143=IKcos(j4);
IkReal x7144=IKsin(j4);
IkReal x7145=(r11*sj5);
IkReal x7146=(r21*sj5);
IkReal x7147=(r01*sj5);
IkReal x7148=((1.0)*x7143);
IkReal x7149=((1.0)*x7144);
IkReal x7150=(cj5*x7143);
IkReal x7151=(cj5*x7144);
evalcond[0]=(((r20*x7150))+((r22*x7144))+(((-1.0)*x7146*x7148)));
evalcond[1]=((((-1.0)*r22*x7148))+((r20*x7151))+(((-1.0)*x7146*x7149)));
evalcond[2]=(cj0+((r00*x7150))+((r02*x7144))+(((-1.0)*x7147*x7148)));
evalcond[3]=(sj0+(((-1.0)*x7145*x7148))+((r12*x7144))+((r10*x7150)));
evalcond[4]=(sj0+((r00*x7151))+(((-1.0)*x7147*x7149))+(((-1.0)*r02*x7148)));
evalcond[5]=((((-1.0)*x7145*x7149))+(((-1.0)*r12*x7148))+((r10*x7151))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7152=((1.0)*sj5);
CheckValue<IkReal> x7153=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7152))+(((-1.0)*cj5*r01)))),-1);
if(!x7153.valid){
continue;
}
CheckValue<IkReal> x7154 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x7152))+((cj5*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7153.value)))+(x7154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7155=IKcos(j4);
IkReal x7156=IKsin(j4);
IkReal x7157=(r11*sj5);
IkReal x7158=(r21*sj5);
IkReal x7159=(r01*sj5);
IkReal x7160=((1.0)*x7155);
IkReal x7161=((1.0)*x7156);
IkReal x7162=(cj5*x7155);
IkReal x7163=(cj5*x7156);
evalcond[0]=(((r22*x7156))+(((-1.0)*x7158*x7160))+((r20*x7162)));
evalcond[1]=((((-1.0)*r22*x7160))+(((-1.0)*x7158*x7161))+((r20*x7163)));
evalcond[2]=(((r02*x7156))+(((-1.0)*x7159*x7160))+cj0+((r00*x7162)));
evalcond[3]=(sj0+(((-1.0)*x7157*x7160))+((r12*x7156))+((r10*x7162)));
evalcond[4]=((((-1.0)*r02*x7160))+sj0+(((-1.0)*x7159*x7161))+((r00*x7163)));
evalcond[5]=((((-1.0)*x7157*x7161))+(((-1.0)*r12*x7160))+((r10*x7163))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7164 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7164.valid){
continue;
}
CheckValue<IkReal> x7165=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7164.value)+(((1.5707963267949)*(x7165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7166=IKcos(j4);
IkReal x7167=IKsin(j4);
IkReal x7168=(r11*sj5);
IkReal x7169=(r21*sj5);
IkReal x7170=(r01*sj5);
IkReal x7171=((1.0)*x7166);
IkReal x7172=((1.0)*x7167);
IkReal x7173=(cj5*x7166);
IkReal x7174=(cj5*x7167);
evalcond[0]=((((-1.0)*x7169*x7171))+((r20*x7173))+((r22*x7167)));
evalcond[1]=((((-1.0)*x7169*x7172))+(((-1.0)*r22*x7171))+((r20*x7174)));
evalcond[2]=((((-1.0)*x7170*x7171))+cj0+((r00*x7173))+((r02*x7167)));
evalcond[3]=(sj0+(((-1.0)*x7168*x7171))+((r10*x7173))+((r12*x7167)));
evalcond[4]=((((-1.0)*x7170*x7172))+sj0+(((-1.0)*r02*x7171))+((r00*x7174)));
evalcond[5]=((((-1.0)*x7168*x7172))+((r10*x7174))+(((-1.0)*r12*x7171))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7175=(sj1*sj2);
IkReal x7176=(cj1*cj2);
IkReal x7177=(r00*sj5);
IkReal x7178=(cj5*r01);
IkReal x7179=((1000.0)*px);
IkReal x7180=((850.0)*cj1);
CheckValue<IkReal> x7181=IKPowWithIntegerCheck(((((-179.0)*x7176))+(((179.0)*x7175))),-1);
if(!x7181.valid){
continue;
}
CheckValue<IkReal> x7182=IKPowWithIntegerCheck((x7175+(((-1.0)*x7176))),-1);
if(!x7182.valid){
continue;
}
if( IKabs(((x7181.value)*((((x7178*x7180))+(((850.0)*x7176*x7177))+(((850.0)*x7176*x7178))+(((-850.0)*x7175*x7178))+(((-850.0)*x7175*x7177))+((x7177*x7180))+(((-1.0)*x7176*x7179))+((x7175*x7179)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7182.value)*((x7177+x7178)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7181.value)*((((x7178*x7180))+(((850.0)*x7176*x7177))+(((850.0)*x7176*x7178))+(((-850.0)*x7175*x7178))+(((-850.0)*x7175*x7177))+((x7177*x7180))+(((-1.0)*x7176*x7179))+((x7175*x7179))))))+IKsqr(((x7182.value)*((x7177+x7178))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7181.value)*((((x7178*x7180))+(((850.0)*x7176*x7177))+(((850.0)*x7176*x7178))+(((-850.0)*x7175*x7178))+(((-850.0)*x7175*x7177))+((x7177*x7180))+(((-1.0)*x7176*x7179))+((x7175*x7179))))), ((x7182.value)*((x7177+x7178))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7183=IKcos(j0);
IkReal x7184=IKsin(j0);
IkReal x7185=(sj1*sj2);
IkReal x7186=(cj1*cj2);
IkReal x7187=(cj5*r11);
IkReal x7188=((0.85)*cj1);
IkReal x7189=(r10*sj5);
IkReal x7190=(r00*sj5);
IkReal x7191=(cj5*r01);
IkReal x7192=((0.712)*x7183);
IkReal x7193=((0.712)*x7184);
evalcond[0]=(((x7183*x7185))+(((-1.0)*x7183*x7186))+(((-1.0)*x7191))+(((-1.0)*x7190)));
evalcond[1]=((((-1.0)*x7189))+(((-1.0)*x7187))+((x7184*x7185))+(((-1.0)*x7184*x7186)));
evalcond[2]=((((-1.0)*x7186*x7192))+(((-1.0)*px))+(((0.179)*x7184))+(((-1.0)*x7183*x7188))+((x7185*x7192))+(((0.138)*x7190))+(((0.138)*x7191)));
evalcond[3]=((((0.138)*x7187))+(((0.138)*x7189))+(((-1.0)*x7184*x7188))+(((-1.0)*x7186*x7193))+(((-1.0)*py))+(((-0.179)*x7183))+((x7185*x7193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7194=((1.0)*sj5);
IkReal x7195=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7194)));
j4eval[0]=x7195;
j4eval[1]=IKsign(x7195);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7194))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7196=((1.0)*sj5);
IkReal x7197=((((-1.0)*r00*x7196))+(((-1.0)*cj5*r01)));
j4eval[0]=x7197;
j4eval[1]=IKsign(x7197);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7196))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7198=((1.0)*sj5);
IkReal x7199=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7199;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r11*sj0*x7198))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x7198))))));
j4eval[2]=IKsign(x7199);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7201 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7201)==0){
continue;
}
IkReal x7200=pow(x7201,-0.5);
CheckValue<IkReal> x7202 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7202.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7202.value));
IkReal gconst133=((-1.0)*r21*x7200);
IkReal gconst134=(r20*x7200);
CheckValue<IkReal> x7203 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7203.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7203.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7206 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7206.valid){
continue;
}
IkReal x7204=((-1.0)*(x7206.value));
IkReal x7205=x7200;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7204;
IkReal gconst132=x7204;
IkReal gconst133=((-1.0)*r21*x7205);
IkReal gconst134=(r20*x7205);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7209 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7209.valid){
continue;
}
IkReal x7207=((-1.0)*(x7209.value));
IkReal x7208=x7200;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7207;
IkReal gconst132=x7207;
IkReal gconst133=((-1.0)*r21*x7208);
IkReal gconst134=(r20*x7208);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7212 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7212.valid){
continue;
}
IkReal x7210=((-1.0)*(x7212.value));
IkReal x7211=x7200;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7210;
IkReal gconst132=x7210;
IkReal gconst133=((-1.0)*r21*x7211);
IkReal gconst134=(r20*x7211);
IkReal x7213=((1.0)*(r22*r22));
CheckValue<IkReal> x7217=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7213))),-1);
if(!x7217.valid){
continue;
}
IkReal x7214=x7217.value;
IkReal x7215=((1.0)*x7214);
IkReal x7216=((((-1.0)*x7215*(r21*r21*r21*r21)))+(((-2.0)*x7214*(r20*r20)*(r21*r21)))+(((-1.0)*x7215*(r20*r20*r20*r20)))+(((-1.0)*x7213)));
j4eval[0]=x7216;
j4eval[1]=IKsign(x7216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7218=(gconst134*r20);
IkReal x7219=(cj1*cj2);
IkReal x7220=(gconst133*r21);
IkReal x7221=(sj1*sj2);
CheckValue<IkReal> x7222 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7219))+((r22*x7221)))),IkReal((((x7219*x7220))+(((-1.0)*x7220*x7221))+((x7218*x7221))+(((-1.0)*x7218*x7219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7222.valid){
continue;
}
CheckValue<IkReal> x7223=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7220*x7220)))+(((-1.0)*(r22*r22)))+(((2.0)*x7218*x7220))+(((-1.0)*(x7218*x7218))))),-1);
if(!x7223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7222.value)+(((1.5707963267949)*(x7223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7224=IKsin(j4);
IkReal x7225=IKcos(j4);
IkReal x7226=(gconst134*r10);
IkReal x7227=(cj2*sj1);
IkReal x7228=(gconst133*r11);
IkReal x7229=(gconst133*r01);
IkReal x7230=(gconst133*r21);
IkReal x7231=(cj1*sj2);
IkReal x7232=((1.0)*x7225);
IkReal x7233=((1.0)*x7224);
IkReal x7234=(gconst134*x7225);
IkReal x7235=(gconst134*x7224);
evalcond[0]=(((r20*x7235))+(((-1.0)*x7230*x7233))+(((-1.0)*r22*x7232)));
evalcond[1]=(sj0+((r00*x7235))+(((-1.0)*x7229*x7233))+(((-1.0)*r02*x7232)));
evalcond[2]=((((-1.0)*x7228*x7233))+((x7224*x7226))+(((-1.0)*r12*x7232))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7234))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7230*x7232))+((r22*x7224)));
evalcond[4]=(((r00*x7234))+(((-1.0)*x7229*x7232))+((cj0*x7231))+((r02*x7224))+((cj0*x7227)));
evalcond[5]=(((sj0*x7227))+(((-1.0)*x7228*x7232))+((sj0*x7231))+((x7225*x7226))+((r12*x7224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7236=((1.0)*gconst133);
CheckValue<IkReal> x7237 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*r21*x7236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7237.valid){
continue;
}
CheckValue<IkReal> x7238=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst134*r01))+(((-1.0)*r00*x7236)))),-1);
if(!x7238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7237.value)+(((1.5707963267949)*(x7238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7239=IKsin(j4);
IkReal x7240=IKcos(j4);
IkReal x7241=(gconst134*r10);
IkReal x7242=(cj2*sj1);
IkReal x7243=(gconst133*r11);
IkReal x7244=(gconst133*r01);
IkReal x7245=(gconst133*r21);
IkReal x7246=(cj1*sj2);
IkReal x7247=((1.0)*x7240);
IkReal x7248=((1.0)*x7239);
IkReal x7249=(gconst134*x7240);
IkReal x7250=(gconst134*x7239);
evalcond[0]=((((-1.0)*x7245*x7248))+(((-1.0)*r22*x7247))+((r20*x7250)));
evalcond[1]=(sj0+(((-1.0)*x7244*x7248))+((r00*x7250))+(((-1.0)*r02*x7247)));
evalcond[2]=((((-1.0)*r12*x7247))+((x7239*x7241))+(((-1.0)*cj0))+(((-1.0)*x7243*x7248)));
evalcond[3]=((((-1.0)*x7245*x7247))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7249))+((r22*x7239)));
evalcond[4]=(((cj0*x7246))+((cj0*x7242))+(((-1.0)*x7244*x7247))+((r00*x7249))+((r02*x7239)));
evalcond[5]=(((x7240*x7241))+((r12*x7239))+((sj0*x7246))+((sj0*x7242))+(((-1.0)*x7243*x7247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7251=((1.0)*gconst133);
CheckValue<IkReal> x7252 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7251))+((gconst134*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7252.valid){
continue;
}
CheckValue<IkReal> x7253=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7251))+(((-1.0)*gconst134*r11)))),-1);
if(!x7253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7252.value)+(((1.5707963267949)*(x7253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7254=IKsin(j4);
IkReal x7255=IKcos(j4);
IkReal x7256=(gconst134*r10);
IkReal x7257=(cj2*sj1);
IkReal x7258=(gconst133*r11);
IkReal x7259=(gconst133*r01);
IkReal x7260=(gconst133*r21);
IkReal x7261=(cj1*sj2);
IkReal x7262=((1.0)*x7255);
IkReal x7263=((1.0)*x7254);
IkReal x7264=(gconst134*x7255);
IkReal x7265=(gconst134*x7254);
evalcond[0]=((((-1.0)*r22*x7262))+(((-1.0)*x7260*x7263))+((r20*x7265)));
evalcond[1]=(sj0+(((-1.0)*x7259*x7263))+((r00*x7265))+(((-1.0)*r02*x7262)));
evalcond[2]=((((-1.0)*x7258*x7263))+(((-1.0)*r12*x7262))+((x7254*x7256))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7254))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7260*x7262))+((r20*x7264)));
evalcond[4]=(((cj0*x7261))+((r02*x7254))+(((-1.0)*x7259*x7262))+((r00*x7264))+((cj0*x7257)));
evalcond[5]=(((sj0*x7261))+(((-1.0)*x7258*x7262))+((r12*x7254))+((sj0*x7257))+((x7255*x7256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7267 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7267)==0){
continue;
}
IkReal x7266=pow(x7267,-0.5);
CheckValue<IkReal> x7268 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7268.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7268.value))));
IkReal gconst136=((1.0)*r21*x7266);
IkReal gconst137=((-1.0)*r20*x7266);
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7269.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7272 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7272.valid){
continue;
}
IkReal x7270=((1.0)*(x7272.value));
IkReal x7271=x7266;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7270)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7270)));
IkReal gconst136=((1.0)*r21*x7271);
IkReal gconst137=((-1.0)*r20*x7271);
IkReal x7273=r22*r22;
IkReal x7274=((1.0)*x7273);
CheckValue<IkReal> x7278=IKPowWithIntegerCheck(((-1.0)+x7273),-1);
if(!x7278.valid){
continue;
}
IkReal x7275=x7278.value;
if((((1.0)+(((-1.0)*x7274)))) < -0.00001)
continue;
IkReal x7276=IKsqrt(((1.0)+(((-1.0)*x7274))));
IkReal x7277=(sj0*x7275*x7276);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7277+(((-1.0)*x7274*x7277))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7281 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7281.valid){
continue;
}
IkReal x7279=((1.0)*(x7281.value));
IkReal x7280=x7266;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7279)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7279)));
IkReal gconst136=((1.0)*r21*x7280);
IkReal gconst137=((-1.0)*r20*x7280);
IkReal x7282=r22*r22;
IkReal x7283=((1.0)*x7282);
CheckValue<IkReal> x7287=IKPowWithIntegerCheck(((-1.0)+x7282),-1);
if(!x7287.valid){
continue;
}
IkReal x7284=x7287.value;
if((((1.0)+(((-1.0)*x7283)))) < -0.00001)
continue;
IkReal x7285=IKsqrt(((1.0)+(((-1.0)*x7283))));
IkReal x7286=(cj0*x7284*x7285);
j4eval[0]=((IKabs((x7286+(((-1.0)*x7283*x7286)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7290 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7290.valid){
continue;
}
IkReal x7288=((1.0)*(x7290.value));
IkReal x7289=x7266;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7288)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7288)));
IkReal gconst136=((1.0)*r21*x7289);
IkReal gconst137=((-1.0)*r20*x7289);
IkReal x7291=r22*r22;
IkReal x7292=(cj0*r02);
IkReal x7293=(r12*sj0);
CheckValue<IkReal> x7297=IKPowWithIntegerCheck(((-1.0)+x7291),-1);
if(!x7297.valid){
continue;
}
IkReal x7294=x7297.value;
if((((1.0)+(((-1.0)*x7291)))) < -0.00001)
continue;
IkReal x7295=IKsqrt(((1.0)+(((-1.0)*x7291))));
IkReal x7296=((1.0)*r22*x7294*x7295);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x7292+x7293)))+(IKabs(((((-1.0)*x7293*x7296))+(((-1.0)*x7292*x7296))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7298=((1.0)*gconst136);
CheckValue<IkReal> x7299 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x7298))+((gconst137*r10*sj0))+((cj0*gconst137*r00))+(((-1.0)*cj0*r01*x7298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7299.valid){
continue;
}
CheckValue<IkReal> x7300=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7299.value)+(((1.5707963267949)*(x7300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7301=IKsin(j4);
IkReal x7302=IKcos(j4);
IkReal x7303=(gconst136*r01);
IkReal x7304=(cj2*sj1);
IkReal x7305=(gconst136*r11);
IkReal x7306=(gconst136*r21);
IkReal x7307=(cj1*sj2);
IkReal x7308=((1.0)*x7302);
IkReal x7309=(gconst137*x7302);
IkReal x7310=((1.0)*x7301);
IkReal x7311=(gconst137*x7301);
evalcond[0]=(((r20*x7311))+(((-1.0)*r22*x7308))+(((-1.0)*x7306*x7310)));
evalcond[1]=((((-1.0)*r02*x7308))+sj0+(((-1.0)*x7303*x7310))+((r00*x7311)));
evalcond[2]=(((r10*x7311))+(((-1.0)*r12*x7308))+(((-1.0)*x7305*x7310))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7301))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7309))+(((-1.0)*x7306*x7308)));
evalcond[4]=(((r02*x7301))+(((-1.0)*x7303*x7308))+((r00*x7309))+((cj0*x7304))+((cj0*x7307)));
evalcond[5]=(((r12*x7301))+((r10*x7309))+((sj0*x7304))+((sj0*x7307))+(((-1.0)*x7305*x7308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7312=((1.0)*gconst136);
CheckValue<IkReal> x7313 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7312))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7313.valid){
continue;
}
CheckValue<IkReal> x7314=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x7312)))),-1);
if(!x7314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7313.value)+(((1.5707963267949)*(x7314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7315=IKsin(j4);
IkReal x7316=IKcos(j4);
IkReal x7317=(gconst136*r01);
IkReal x7318=(cj2*sj1);
IkReal x7319=(gconst136*r11);
IkReal x7320=(gconst136*r21);
IkReal x7321=(cj1*sj2);
IkReal x7322=((1.0)*x7316);
IkReal x7323=(gconst137*x7316);
IkReal x7324=((1.0)*x7315);
IkReal x7325=(gconst137*x7315);
evalcond[0]=((((-1.0)*r22*x7322))+((r20*x7325))+(((-1.0)*x7320*x7324)));
evalcond[1]=((((-1.0)*x7317*x7324))+sj0+((r00*x7325))+(((-1.0)*r02*x7322)));
evalcond[2]=(((r10*x7325))+(((-1.0)*x7319*x7324))+(((-1.0)*r12*x7322))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7315))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7323))+(((-1.0)*x7320*x7322)));
evalcond[4]=(((r02*x7315))+(((-1.0)*x7317*x7322))+((r00*x7323))+((cj0*x7321))+((cj0*x7318)));
evalcond[5]=(((r12*x7315))+((r10*x7323))+((sj0*x7318))+(((-1.0)*x7319*x7322))+((sj0*x7321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7326=((1.0)*gconst136);
CheckValue<IkReal> x7327=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x7326)))),-1);
if(!x7327.valid){
continue;
}
CheckValue<IkReal> x7328 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x7326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7327.value)))+(x7328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7329=IKsin(j4);
IkReal x7330=IKcos(j4);
IkReal x7331=(gconst136*r01);
IkReal x7332=(cj2*sj1);
IkReal x7333=(gconst136*r11);
IkReal x7334=(gconst136*r21);
IkReal x7335=(cj1*sj2);
IkReal x7336=((1.0)*x7330);
IkReal x7337=(gconst137*x7330);
IkReal x7338=((1.0)*x7329);
IkReal x7339=(gconst137*x7329);
evalcond[0]=(((r20*x7339))+(((-1.0)*r22*x7336))+(((-1.0)*x7334*x7338)));
evalcond[1]=((((-1.0)*r02*x7336))+sj0+(((-1.0)*x7331*x7338))+((r00*x7339)));
evalcond[2]=(((r10*x7339))+(((-1.0)*r12*x7336))+(((-1.0)*x7333*x7338))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7329))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7337))+(((-1.0)*x7334*x7336)));
evalcond[4]=((((-1.0)*x7331*x7336))+((r00*x7337))+((cj0*x7335))+((cj0*x7332))+((r02*x7329)));
evalcond[5]=(((r10*x7337))+((sj0*x7335))+((sj0*x7332))+((r12*x7329))+(((-1.0)*x7333*x7336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7340=((-1.0)*r00);
IkReal x7342 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7342)==0){
continue;
}
IkReal x7341=pow(x7342,-0.5);
CheckValue<IkReal> x7343 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7340),IKFAST_ATAN2_MAGTHRESH);
if(!x7343.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7343.value));
IkReal gconst139=(r01*x7341);
IkReal gconst140=(x7340*x7341);
CheckValue<IkReal> x7344 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7344.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7344.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7345=((-1.0)*r00);
IkReal x7346=x7341;
CheckValue<IkReal> x7348 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7345),IKFAST_ATAN2_MAGTHRESH);
if(!x7348.valid){
continue;
}
IkReal x7347=((-1.0)*(x7348.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7347;
IkReal gconst138=x7347;
IkReal gconst139=(r01*x7346);
IkReal gconst140=(x7345*x7346);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7349=((1.0)*gconst139);
CheckValue<IkReal> x7350=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7350.valid){
continue;
}
CheckValue<IkReal> x7351 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x7349))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7349))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7350.value)))+(x7351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7352=IKsin(j4);
IkReal x7353=IKcos(j4);
IkReal x7354=(cj2*sj1);
IkReal x7355=(gconst140*r10);
IkReal x7356=(cj1*sj2);
IkReal x7357=((1.0)*x7353);
IkReal x7358=(gconst140*x7353);
IkReal x7359=(gconst140*x7352);
IkReal x7360=((1.0)*gconst139*x7352);
evalcond[0]=((((-1.0)*r22*x7357))+(((-1.0)*r21*x7360))+((r20*x7359)));
evalcond[1]=(sj0+((r00*x7359))+(((-1.0)*r02*x7357))+(((-1.0)*r01*x7360)));
evalcond[2]=(((x7352*x7355))+(((-1.0)*r12*x7357))+(((-1.0)*r11*x7360))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst139*r21*x7357))+((r20*x7358))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7352)));
evalcond[4]=(((r00*x7358))+(((-1.0)*gconst139*r01*x7357))+((cj0*x7356))+((cj0*x7354))+((r02*x7352)));
evalcond[5]=(((x7353*x7355))+((r12*x7352))+((sj0*x7356))+((sj0*x7354))+(((-1.0)*gconst139*r11*x7357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7361=((1.0)*gconst139);
CheckValue<IkReal> x7362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7361))+(((-1.0)*gconst140*r11)))),-1);
if(!x7362.valid){
continue;
}
CheckValue<IkReal> x7363 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7361))+((gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7362.value)))+(x7363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7364=IKsin(j4);
IkReal x7365=IKcos(j4);
IkReal x7366=(cj2*sj1);
IkReal x7367=(gconst140*r10);
IkReal x7368=(cj1*sj2);
IkReal x7369=((1.0)*x7365);
IkReal x7370=(gconst140*x7365);
IkReal x7371=(gconst140*x7364);
IkReal x7372=((1.0)*gconst139*x7364);
evalcond[0]=(((r20*x7371))+(((-1.0)*r22*x7369))+(((-1.0)*r21*x7372)));
evalcond[1]=((((-1.0)*r01*x7372))+sj0+((r00*x7371))+(((-1.0)*r02*x7369)));
evalcond[2]=(((x7364*x7367))+(((-1.0)*r11*x7372))+(((-1.0)*r12*x7369))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst139*r21*x7369))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7370))+((r22*x7364)));
evalcond[4]=((((-1.0)*gconst139*r01*x7369))+((r00*x7370))+((cj0*x7368))+((cj0*x7366))+((r02*x7364)));
evalcond[5]=(((r12*x7364))+(((-1.0)*gconst139*r11*x7369))+((sj0*x7368))+((sj0*x7366))+((x7365*x7367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7373=((-1.0)*r01);
IkReal x7375 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7375)==0){
continue;
}
IkReal x7374=pow(x7375,-0.5);
CheckValue<IkReal> x7376 = IKatan2WithCheck(IkReal(x7373),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7376.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7376.value))));
IkReal gconst142=(x7373*x7374);
IkReal gconst143=((1.0)*r00*x7374);
CheckValue<IkReal> x7377 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7377.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7377.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7378=((-1.0)*r01);
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(x7378),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
IkReal x7379=((1.0)*(x7381.value));
IkReal x7380=x7374;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7379)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7379)));
IkReal gconst142=(x7378*x7380);
IkReal gconst143=((1.0)*r00*x7380);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7382=((-1.0)*r01);
CheckValue<IkReal> x7385 = IKatan2WithCheck(IkReal(x7382),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7385.valid){
continue;
}
IkReal x7383=((1.0)*(x7385.value));
IkReal x7384=x7374;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7383)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7383)));
IkReal gconst142=(x7382*x7384);
IkReal gconst143=((1.0)*r00*x7384);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7386=((-1.0)*r01);
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal(x7386),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
IkReal x7387=((1.0)*(x7389.value));
IkReal x7388=x7374;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7387)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7387)));
IkReal gconst142=(x7386*x7388);
IkReal gconst143=((1.0)*r00*x7388);
IkReal x7390=r02*r02;
IkReal x7391=(r12*sj0);
IkReal x7392=x7374;
IkReal x7393=(cj0*x7392);
j4eval[0]=((IKabs(((((-1.0)*x7393))+((x7390*x7393))+((r02*x7391*x7392)))))+(IKabs((x7391+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7394=((1.0)*gconst142);
CheckValue<IkReal> x7395=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7395.valid){
continue;
}
CheckValue<IkReal> x7396 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7394))+(((-1.0)*r11*sj0*x7394))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7395.value)))+(x7396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7397=IKsin(j4);
IkReal x7398=IKcos(j4);
IkReal x7399=(gconst143*r00);
IkReal x7400=(cj2*sj1);
IkReal x7401=(gconst142*r21);
IkReal x7402=(gconst142*r11);
IkReal x7403=(gconst142*r01);
IkReal x7404=(cj1*sj2);
IkReal x7405=((1.0)*x7398);
IkReal x7406=((1.0)*x7397);
IkReal x7407=(gconst143*x7398);
IkReal x7408=(gconst143*x7397);
evalcond[0]=(((r20*x7408))+(((-1.0)*r22*x7405))+(((-1.0)*x7401*x7406)));
evalcond[1]=((((-1.0)*x7403*x7406))+((x7397*x7399))+sj0+(((-1.0)*r02*x7405)));
evalcond[2]=((((-1.0)*r12*x7405))+(((-1.0)*x7402*x7406))+((r10*x7408))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7407))+((r22*x7397))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7401*x7405)));
evalcond[4]=((((-1.0)*x7403*x7405))+((r02*x7397))+((x7398*x7399))+((cj0*x7404))+((cj0*x7400)));
evalcond[5]=(((r12*x7397))+(((-1.0)*x7402*x7405))+((r10*x7407))+((sj0*x7404))+((sj0*x7400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7409=((1.0)*gconst142);
CheckValue<IkReal> x7410 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7409))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7410.valid){
continue;
}
CheckValue<IkReal> x7411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7409))+(((-1.0)*gconst143*r01)))),-1);
if(!x7411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7410.value)+(((1.5707963267949)*(x7411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7412=IKsin(j4);
IkReal x7413=IKcos(j4);
IkReal x7414=(gconst143*r00);
IkReal x7415=(cj2*sj1);
IkReal x7416=(gconst142*r21);
IkReal x7417=(gconst142*r11);
IkReal x7418=(gconst142*r01);
IkReal x7419=(cj1*sj2);
IkReal x7420=((1.0)*x7413);
IkReal x7421=((1.0)*x7412);
IkReal x7422=(gconst143*x7413);
IkReal x7423=(gconst143*x7412);
evalcond[0]=((((-1.0)*x7416*x7421))+(((-1.0)*r22*x7420))+((r20*x7423)));
evalcond[1]=(sj0+(((-1.0)*r02*x7420))+(((-1.0)*x7418*x7421))+((x7412*x7414)));
evalcond[2]=((((-1.0)*r12*x7420))+((r10*x7423))+(((-1.0)*cj0))+(((-1.0)*x7417*x7421)));
evalcond[3]=((((-1.0)*x7416*x7420))+((r20*x7422))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7412)));
evalcond[4]=(((cj0*x7415))+((cj0*x7419))+((x7413*x7414))+((r02*x7412))+(((-1.0)*x7418*x7420)));
evalcond[5]=(((sj0*x7415))+((sj0*x7419))+((r10*x7422))+((r12*x7412))+(((-1.0)*x7417*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7424=((1.0)*gconst142);
CheckValue<IkReal> x7425=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r11))+(((-1.0)*r10*x7424)))),-1);
if(!x7425.valid){
continue;
}
CheckValue<IkReal> x7426 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7424))+((gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7425.value)))+(x7426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7427=IKsin(j4);
IkReal x7428=IKcos(j4);
IkReal x7429=(gconst143*r00);
IkReal x7430=(cj2*sj1);
IkReal x7431=(gconst142*r21);
IkReal x7432=(gconst142*r11);
IkReal x7433=(gconst142*r01);
IkReal x7434=(cj1*sj2);
IkReal x7435=((1.0)*x7428);
IkReal x7436=((1.0)*x7427);
IkReal x7437=(gconst143*x7428);
IkReal x7438=(gconst143*x7427);
evalcond[0]=((((-1.0)*r22*x7435))+((r20*x7438))+(((-1.0)*x7431*x7436)));
evalcond[1]=(sj0+(((-1.0)*r02*x7435))+((x7427*x7429))+(((-1.0)*x7433*x7436)));
evalcond[2]=(((r10*x7438))+(((-1.0)*r12*x7435))+(((-1.0)*cj0))+(((-1.0)*x7432*x7436)));
evalcond[3]=(((r20*x7437))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7427))+(((-1.0)*x7431*x7435)));
evalcond[4]=(((r02*x7427))+((cj0*x7430))+((cj0*x7434))+((x7428*x7429))+(((-1.0)*x7433*x7435)));
evalcond[5]=(((r10*x7437))+((r12*x7427))+((sj0*x7434))+((sj0*x7430))+(((-1.0)*x7432*x7435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7439=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7439;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x7439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7440=((1.0)*sj5);
IkReal x7441=((((-1.0)*r10*x7440))+(((-1.0)*cj5*r11)));
j4eval[0]=x7441;
j4eval[1]=IKsign(x7441);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7440))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7442=(cj1*sj2);
IkReal x7443=(cj5*r00);
IkReal x7444=((1.0)*r02);
IkReal x7445=(cj2*sj1);
IkReal x7446=((1.0)*r01*sj5);
IkReal x7447=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7447;
j4eval[1]=((IKabs(((((-1.0)*x7442*x7446))+((x7442*x7443))+((x7443*x7445))+(((-1.0)*x7445*x7446)))))+(IKabs(((((-1.0)*x7442*x7444))+(((-1.0)*x7444*x7445))))));
j4eval[2]=IKsign(x7447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7448=(cj1*sj2);
IkReal x7449=(cj5*r00);
IkReal x7450=((1.0)*r02);
IkReal x7451=(cj2*sj1);
IkReal x7452=((1.0)*r01*sj5);
CheckValue<IkReal> x7453=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7453.valid){
continue;
}
CheckValue<IkReal> x7454 = IKatan2WithCheck(IkReal(((((-1.0)*x7451*x7452))+((x7449*x7451))+((x7448*x7449))+(((-1.0)*x7448*x7452)))),IkReal(((((-1.0)*x7450*x7451))+(((-1.0)*x7448*x7450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7453.value)))+(x7454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7455=IKcos(j4);
IkReal x7456=IKsin(j4);
IkReal x7457=((1.0)*x7455);
IkReal x7458=(cj5*x7455);
IkReal x7459=(cj5*x7456);
IkReal x7460=((1.0)*sj5*x7456);
evalcond[0]=(((r02*x7456))+((r00*x7458))+(((-1.0)*r01*sj5*x7457)));
evalcond[1]=(((r20*x7459))+(((-1.0)*r21*x7460))+(((-1.0)*r22*x7457)));
evalcond[2]=((((-1.0)*r11*x7460))+((r10*x7459))+(((-1.0)*r12*x7457)));
evalcond[3]=((1.0)+((r00*x7459))+(((-1.0)*r02*x7457))+(((-1.0)*r01*x7460)));
evalcond[4]=(((cj2*sj1))+((r12*x7456))+(((-1.0)*r11*sj5*x7457))+((cj1*sj2))+((r10*x7458)));
evalcond[5]=(((r20*x7458))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7456))+(((-1.0)*r21*sj5*x7457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7461=((1.0)*sj5);
CheckValue<IkReal> x7462=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7461)))),-1);
if(!x7462.valid){
continue;
}
CheckValue<IkReal> x7463 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7462.value)))+(x7463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7464=IKcos(j4);
IkReal x7465=IKsin(j4);
IkReal x7466=((1.0)*x7464);
IkReal x7467=(cj5*x7464);
IkReal x7468=(cj5*x7465);
IkReal x7469=((1.0)*sj5*x7465);
evalcond[0]=((((-1.0)*r01*sj5*x7466))+((r02*x7465))+((r00*x7467)));
evalcond[1]=((((-1.0)*r22*x7466))+(((-1.0)*r21*x7469))+((r20*x7468)));
evalcond[2]=(((r10*x7468))+(((-1.0)*r12*x7466))+(((-1.0)*r11*x7469)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7466))+((r00*x7468))+(((-1.0)*r01*x7469)));
evalcond[4]=(((cj2*sj1))+((r10*x7467))+((cj1*sj2))+(((-1.0)*r11*sj5*x7466))+((r12*x7465)));
evalcond[5]=((((-1.0)*r21*sj5*x7466))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7467))+((r22*x7465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7470 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7470.valid){
continue;
}
CheckValue<IkReal> x7471=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7470.value)+(((1.5707963267949)*(x7471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7472=IKcos(j4);
IkReal x7473=IKsin(j4);
IkReal x7474=((1.0)*x7472);
IkReal x7475=(cj5*x7472);
IkReal x7476=(cj5*x7473);
IkReal x7477=((1.0)*sj5*x7473);
evalcond[0]=(((r02*x7473))+(((-1.0)*r01*sj5*x7474))+((r00*x7475)));
evalcond[1]=(((r20*x7476))+(((-1.0)*r21*x7477))+(((-1.0)*r22*x7474)));
evalcond[2]=(((r10*x7476))+(((-1.0)*r11*x7477))+(((-1.0)*r12*x7474)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7474))+(((-1.0)*r01*x7477))+((r00*x7476)));
evalcond[4]=(((r10*x7475))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x7474))+((r12*x7473)));
evalcond[5]=(((r20*x7475))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7473))+(((-1.0)*r21*sj5*x7474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7478=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7478;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x7478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7479=((1.0)*sj5);
IkReal x7480=((((-1.0)*r20*x7479))+(((-1.0)*cj5*r21)));
j4eval[0]=x7480;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x7479))))));
j4eval[2]=IKsign(x7480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7481=cj5*cj5;
IkReal x7482=r01*r01;
IkReal x7483=(cj5*r00);
IkReal x7484=(r01*sj5);
IkReal x7485=((r02*r02)+x7482+((x7481*(r00*r00)))+(((-2.0)*x7483*x7484))+(((-1.0)*x7481*x7482)));
j4eval[0]=x7485;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7484))+x7483))));
j4eval[2]=IKsign(x7485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7486=cj5*cj5;
IkReal x7487=r01*r01;
IkReal x7488=(r01*sj5);
IkReal x7489=(cj5*r00);
CheckValue<IkReal> x7490 = IKatan2WithCheck(IkReal(((((-1.0)*x7488))+x7489)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7490.valid){
continue;
}
CheckValue<IkReal> x7491=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7486*x7487))+(((-2.0)*x7488*x7489))+(r02*r02)+x7487+((x7486*(r00*r00))))),-1);
if(!x7491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7490.value)+(((1.5707963267949)*(x7491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7492=IKcos(j4);
IkReal x7493=IKsin(j4);
IkReal x7494=((1.0)*cj1);
IkReal x7495=((1.0)*x7492);
IkReal x7496=(cj5*x7492);
IkReal x7497=(cj5*x7493);
IkReal x7498=((1.0)*sj5*x7493);
evalcond[0]=(((r00*x7496))+((r02*x7493))+(((-1.0)*r01*sj5*x7495)));
evalcond[1]=(((r20*x7497))+(((-1.0)*r21*x7498))+(((-1.0)*r22*x7495)));
evalcond[2]=(((r10*x7497))+(((-1.0)*r11*x7498))+(((-1.0)*r12*x7495)));
evalcond[3]=((-1.0)+((r00*x7497))+(((-1.0)*r01*x7498))+(((-1.0)*r02*x7495)));
evalcond[4]=(((r22*x7493))+((sj1*sj2))+((r20*x7496))+(((-1.0)*r21*sj5*x7495))+(((-1.0)*cj2*x7494)));
evalcond[5]=((((-1.0)*sj2*x7494))+(((-1.0)*cj2*sj1))+((r12*x7493))+((r10*x7496))+(((-1.0)*r11*sj5*x7495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7499=((1.0)*sj5);
CheckValue<IkReal> x7500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7499))+(((-1.0)*cj5*r21)))),-1);
if(!x7500.valid){
continue;
}
CheckValue<IkReal> x7501 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x7499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7500.value)))+(x7501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7502=IKcos(j4);
IkReal x7503=IKsin(j4);
IkReal x7504=((1.0)*cj1);
IkReal x7505=((1.0)*x7502);
IkReal x7506=(cj5*x7502);
IkReal x7507=(cj5*x7503);
IkReal x7508=((1.0)*sj5*x7503);
evalcond[0]=(((r00*x7506))+(((-1.0)*r01*sj5*x7505))+((r02*x7503)));
evalcond[1]=((((-1.0)*r22*x7505))+(((-1.0)*r21*x7508))+((r20*x7507)));
evalcond[2]=(((r10*x7507))+(((-1.0)*r11*x7508))+(((-1.0)*r12*x7505)));
evalcond[3]=((-1.0)+((r00*x7507))+(((-1.0)*r01*x7508))+(((-1.0)*r02*x7505)));
evalcond[4]=(((r20*x7506))+((sj1*sj2))+(((-1.0)*cj2*x7504))+((r22*x7503))+(((-1.0)*r21*sj5*x7505)));
evalcond[5]=(((r12*x7503))+(((-1.0)*cj2*sj1))+((r10*x7506))+(((-1.0)*sj2*x7504))+(((-1.0)*r11*sj5*x7505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7509=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7509.valid){
continue;
}
CheckValue<IkReal> x7510 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7509.value)))+(x7510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7511=IKcos(j4);
IkReal x7512=IKsin(j4);
IkReal x7513=((1.0)*cj1);
IkReal x7514=((1.0)*x7511);
IkReal x7515=(cj5*x7511);
IkReal x7516=(cj5*x7512);
IkReal x7517=((1.0)*sj5*x7512);
evalcond[0]=(((r00*x7515))+((r02*x7512))+(((-1.0)*r01*sj5*x7514)));
evalcond[1]=(((r20*x7516))+(((-1.0)*r21*x7517))+(((-1.0)*r22*x7514)));
evalcond[2]=(((r10*x7516))+(((-1.0)*r12*x7514))+(((-1.0)*r11*x7517)));
evalcond[3]=((-1.0)+((r00*x7516))+(((-1.0)*r01*x7517))+(((-1.0)*r02*x7514)));
evalcond[4]=(((r20*x7515))+((sj1*sj2))+(((-1.0)*cj2*x7513))+((r22*x7512))+(((-1.0)*r21*sj5*x7514)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r12*x7512))+(((-1.0)*sj2*x7513))+((r10*x7515))+(((-1.0)*r11*sj5*x7514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7518=((-1.0)*r10);
IkReal x7520 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7520)==0){
continue;
}
IkReal x7519=pow(x7520,-0.5);
CheckValue<IkReal> x7521 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7518),IKFAST_ATAN2_MAGTHRESH);
if(!x7521.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7521.value));
IkReal gconst145=(r11*x7519);
IkReal gconst146=(x7518*x7519);
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7522.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7523=((-1.0)*r10);
IkReal x7524=x7519;
CheckValue<IkReal> x7526 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7523),IKFAST_ATAN2_MAGTHRESH);
if(!x7526.valid){
continue;
}
IkReal x7525=((-1.0)*(x7526.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7525;
IkReal gconst144=x7525;
IkReal gconst145=(r11*x7524);
IkReal gconst146=(x7523*x7524);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7527=((1.0)*gconst145);
CheckValue<IkReal> x7528=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x7528.valid){
continue;
}
CheckValue<IkReal> x7529 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*r11*sj0*x7527))+(((-1.0)*cj0*r01*x7527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7528.value)))+(x7529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7530=IKsin(j4);
IkReal x7531=IKcos(j4);
IkReal x7532=(gconst145*r11);
IkReal x7533=(cj2*sj1);
IkReal x7534=(gconst145*r01);
IkReal x7535=(gconst145*r21);
IkReal x7536=(cj1*sj2);
IkReal x7537=((1.0)*x7531);
IkReal x7538=(gconst146*x7531);
IkReal x7539=(gconst146*x7530);
IkReal x7540=((1.0)*x7530);
evalcond[0]=((((-1.0)*x7535*x7540))+(((-1.0)*r22*x7537))+((r20*x7539)));
evalcond[1]=(sj0+(((-1.0)*x7534*x7540))+((r00*x7539))+(((-1.0)*r02*x7537)));
evalcond[2]=(((r10*x7539))+(((-1.0)*r12*x7537))+(((-1.0)*x7532*x7540))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7530))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7538))+(((-1.0)*x7535*x7537)));
evalcond[4]=(((cj0*x7533))+((cj0*x7536))+(((-1.0)*x7534*x7537))+((r00*x7538))+((r02*x7530)));
evalcond[5]=(((r10*x7538))+(((-1.0)*x7532*x7537))+((sj0*x7533))+((sj0*x7536))+((r12*x7530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7541=((1.0)*gconst145);
CheckValue<IkReal> x7542=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r01))+(((-1.0)*r00*x7541)))),-1);
if(!x7542.valid){
continue;
}
CheckValue<IkReal> x7543 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7541))+((cj0*gconst146*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7542.value)))+(x7543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7544=IKsin(j4);
IkReal x7545=IKcos(j4);
IkReal x7546=(gconst145*r11);
IkReal x7547=(cj2*sj1);
IkReal x7548=(gconst145*r01);
IkReal x7549=(gconst145*r21);
IkReal x7550=(cj1*sj2);
IkReal x7551=((1.0)*x7545);
IkReal x7552=(gconst146*x7545);
IkReal x7553=(gconst146*x7544);
IkReal x7554=((1.0)*x7544);
evalcond[0]=((((-1.0)*r22*x7551))+(((-1.0)*x7549*x7554))+((r20*x7553)));
evalcond[1]=(sj0+((r00*x7553))+(((-1.0)*r02*x7551))+(((-1.0)*x7548*x7554)));
evalcond[2]=(((r10*x7553))+(((-1.0)*r12*x7551))+(((-1.0)*x7546*x7554))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7544))+(((-1.0)*x7549*x7551))+((r20*x7552)));
evalcond[4]=(((cj0*x7547))+((cj0*x7550))+((r02*x7544))+((r00*x7552))+(((-1.0)*x7548*x7551)));
evalcond[5]=(((r10*x7552))+((sj0*x7550))+((sj0*x7547))+((r12*x7544))+(((-1.0)*x7546*x7551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7555=((-1.0)*r11);
IkReal x7557 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7557)==0){
continue;
}
IkReal x7556=pow(x7557,-0.5);
CheckValue<IkReal> x7558 = IKatan2WithCheck(IkReal(x7555),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7558.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7558.value))));
IkReal gconst148=(x7555*x7556);
IkReal gconst149=((1.0)*r10*x7556);
CheckValue<IkReal> x7559 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7559.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7559.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7560=((-1.0)*r11);
CheckValue<IkReal> x7563 = IKatan2WithCheck(IkReal(x7560),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7563.valid){
continue;
}
IkReal x7561=((1.0)*(x7563.value));
IkReal x7562=x7556;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7561)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7561)));
IkReal gconst148=(x7560*x7562);
IkReal gconst149=((1.0)*r10*x7562);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7564=((-1.0)*r11);
CheckValue<IkReal> x7567 = IKatan2WithCheck(IkReal(x7564),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7567.valid){
continue;
}
IkReal x7565=((1.0)*(x7567.value));
IkReal x7566=x7556;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7565)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7565)));
IkReal gconst148=(x7564*x7566);
IkReal gconst149=((1.0)*r10*x7566);
IkReal x7568=r12*r12;
IkReal x7569=(cj0*r02);
IkReal x7570=x7556;
IkReal x7571=(sj0*x7570);
j4eval[0]=((IKabs((((r12*x7569*x7570))+((x7568*x7571))+(((-1.0)*x7571)))))+(IKabs((((r12*sj0))+x7569))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7572=((-1.0)*r11);
CheckValue<IkReal> x7575 = IKatan2WithCheck(IkReal(x7572),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7575.valid){
continue;
}
IkReal x7573=((1.0)*(x7575.value));
IkReal x7574=x7556;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7573)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7573)));
IkReal gconst148=(x7572*x7574);
IkReal gconst149=((1.0)*r10*x7574);
IkReal x7576=r12*r12;
IkReal x7577=(sj1*sj2);
IkReal x7578=((1.0)+(((-1.0)*x7576)));
IkReal x7579=((1.0)*cj1*cj2);
CheckValue<IkReal> x7586=IKPowWithIntegerCheck(x7578,-1);
if(!x7586.valid){
continue;
}
IkReal x7580=x7586.value;
CheckValue<IkReal> x7587=IKPowWithIntegerCheck(((-1.0)+x7576),-1);
if(!x7587.valid){
continue;
}
IkReal x7581=x7587.value;
IkReal x7582=((1.0)*x7580);
if((x7578) < -0.00001)
continue;
IkReal x7583=IKsqrt(x7578);
IkReal x7584=(r12*r22*x7581*x7583);
IkReal x7585=((((-1.0)*x7582*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x7580))+(((-1.0)*(r22*r22)))+(((-1.0)*x7582*(r11*r11)*(r21*r21))));
j4eval[0]=x7585;
j4eval[1]=IKsign(x7585);
j4eval[2]=((IKabs((((x7577*x7584))+(((-1.0)*x7579*x7584)))))+(IKabs(((((-1.0)*r22*x7579))+((r22*x7577))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7588=(gconst149*r20);
IkReal x7589=(sj1*sj2);
IkReal x7590=(gconst148*r21);
IkReal x7591=(cj1*cj2);
CheckValue<IkReal> x7592 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7591))+((r22*x7589)))),IkReal((((x7588*x7589))+(((-1.0)*x7589*x7590))+(((-1.0)*x7588*x7591))+((x7590*x7591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7592.valid){
continue;
}
CheckValue<IkReal> x7593=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7588*x7588)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7590*x7590)))+(((2.0)*x7588*x7590)))),-1);
if(!x7593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7592.value)+(((1.5707963267949)*(x7593.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7594=IKsin(j4);
IkReal x7595=IKcos(j4);
IkReal x7596=(gconst148*r11);
IkReal x7597=(gconst148*r21);
IkReal x7598=(cj2*sj1);
IkReal x7599=(gconst148*r01);
IkReal x7600=(cj1*sj2);
IkReal x7601=((1.0)*x7595);
IkReal x7602=(gconst149*x7595);
IkReal x7603=(gconst149*x7594);
IkReal x7604=((1.0)*x7594);
evalcond[0]=(((r20*x7603))+(((-1.0)*x7597*x7604))+(((-1.0)*r22*x7601)));
evalcond[1]=(sj0+((r00*x7603))+(((-1.0)*x7599*x7604))+(((-1.0)*r02*x7601)));
evalcond[2]=((((-1.0)*x7596*x7604))+((r10*x7603))+(((-1.0)*r12*x7601))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7602))+(((-1.0)*x7597*x7601))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7594)));
evalcond[4]=(((r00*x7602))+((r02*x7594))+((cj0*x7598))+(((-1.0)*x7599*x7601))+((cj0*x7600)));
evalcond[5]=(((sj0*x7598))+(((-1.0)*x7596*x7601))+((r10*x7602))+((r12*x7594))+((sj0*x7600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7605=((1.0)*gconst148);
CheckValue<IkReal> x7606 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7605))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*r11*sj0*x7605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7606.valid){
continue;
}
CheckValue<IkReal> x7607=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x7607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7606.value)+(((1.5707963267949)*(x7607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7608=IKsin(j4);
IkReal x7609=IKcos(j4);
IkReal x7610=(gconst148*r11);
IkReal x7611=(gconst148*r21);
IkReal x7612=(cj2*sj1);
IkReal x7613=(gconst148*r01);
IkReal x7614=(cj1*sj2);
IkReal x7615=((1.0)*x7609);
IkReal x7616=(gconst149*x7609);
IkReal x7617=(gconst149*x7608);
IkReal x7618=((1.0)*x7608);
evalcond[0]=(((r20*x7617))+(((-1.0)*r22*x7615))+(((-1.0)*x7611*x7618)));
evalcond[1]=(((r00*x7617))+sj0+(((-1.0)*x7613*x7618))+(((-1.0)*r02*x7615)));
evalcond[2]=((((-1.0)*r12*x7615))+(((-1.0)*x7610*x7618))+((r10*x7617))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7616))+(((-1.0)*x7611*x7615))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7608)));
evalcond[4]=(((r00*x7616))+(((-1.0)*x7613*x7615))+((cj0*x7614))+((cj0*x7612))+((r02*x7608)));
evalcond[5]=((((-1.0)*x7610*x7615))+((r12*x7608))+((r10*x7616))+((sj0*x7614))+((sj0*x7612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7619=((1.0)*gconst148);
CheckValue<IkReal> x7620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7619))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7620.valid){
continue;
}
CheckValue<IkReal> x7621=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x7619)))),-1);
if(!x7621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7620.value)+(((1.5707963267949)*(x7621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7622=IKsin(j4);
IkReal x7623=IKcos(j4);
IkReal x7624=(gconst148*r11);
IkReal x7625=(gconst148*r21);
IkReal x7626=(cj2*sj1);
IkReal x7627=(gconst148*r01);
IkReal x7628=(cj1*sj2);
IkReal x7629=((1.0)*x7623);
IkReal x7630=(gconst149*x7623);
IkReal x7631=(gconst149*x7622);
IkReal x7632=((1.0)*x7622);
evalcond[0]=((((-1.0)*x7625*x7632))+(((-1.0)*r22*x7629))+((r20*x7631)));
evalcond[1]=(sj0+((r00*x7631))+(((-1.0)*x7627*x7632))+(((-1.0)*r02*x7629)));
evalcond[2]=((((-1.0)*r12*x7629))+((r10*x7631))+(((-1.0)*x7624*x7632))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+(((-1.0)*x7625*x7629))+((sj1*sj2))+((r22*x7622))+((r20*x7630)));
evalcond[4]=(((r02*x7622))+((r00*x7630))+(((-1.0)*x7627*x7629))+((cj0*x7628))+((cj0*x7626)));
evalcond[5]=((((-1.0)*x7624*x7629))+((sj0*x7628))+((sj0*x7626))+((r10*x7630))+((r12*x7622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7633=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7633;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7634=((1.0)*sj5);
IkReal x7635=((((-1.0)*r00*x7634))+(((-1.0)*cj5*r01)));
j4eval[0]=x7635;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7634))))));
j4eval[2]=IKsign(x7635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7636=cj5*cj5;
IkReal x7637=r11*r11;
IkReal x7638=(r11*sj5);
IkReal x7639=(cj5*r10);
IkReal x7640=((r12*r12)+(((-2.0)*x7638*x7639))+(((-1.0)*x7636*x7637))+((x7636*(r10*r10)))+x7637);
j4eval[0]=x7640;
j4eval[1]=IKsign(x7640);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7638))+x7639))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7641=cj5*cj5;
IkReal x7642=r11*r11;
IkReal x7643=(cj5*r10);
IkReal x7644=(r11*sj5);
CheckValue<IkReal> x7645 = IKatan2WithCheck(IkReal(((((-1.0)*x7644))+x7643)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7645.valid){
continue;
}
CheckValue<IkReal> x7646=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7641*x7642))+(r12*r12)+((x7641*(r10*r10)))+(((-2.0)*x7643*x7644))+x7642)),-1);
if(!x7646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7645.value)+(((1.5707963267949)*(x7646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7647=IKcos(j4);
IkReal x7648=IKsin(j4);
IkReal x7649=(cj5*r10);
IkReal x7650=((1.0)*x7647);
IkReal x7651=(cj5*x7648);
IkReal x7652=(cj5*x7647);
IkReal x7653=((1.0)*sj5*x7648);
evalcond[0]=(((r12*x7648))+(((-1.0)*r11*sj5*x7650))+((x7647*x7649)));
evalcond[1]=((((-1.0)*r22*x7650))+(((-1.0)*r21*x7653))+((r20*x7651)));
evalcond[2]=((((-1.0)*r02*x7650))+((r00*x7651))+(((-1.0)*r01*x7653)));
evalcond[3]=((-1.0)+((x7648*x7649))+(((-1.0)*r11*x7653))+(((-1.0)*r12*x7650)));
evalcond[4]=(((cj2*sj1))+((r02*x7648))+((cj1*sj2))+(((-1.0)*r01*sj5*x7650))+((r00*x7652)));
evalcond[5]=(((r22*x7648))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7650))+((r20*x7652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7654=((1.0)*sj5);
CheckValue<IkReal> x7655=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7654))+(((-1.0)*cj5*r01)))),-1);
if(!x7655.valid){
continue;
}
CheckValue<IkReal> x7656 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7655.value)))+(x7656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7657=IKcos(j4);
IkReal x7658=IKsin(j4);
IkReal x7659=(cj5*r10);
IkReal x7660=((1.0)*x7657);
IkReal x7661=(cj5*x7658);
IkReal x7662=(cj5*x7657);
IkReal x7663=((1.0)*sj5*x7658);
evalcond[0]=(((x7657*x7659))+(((-1.0)*r11*sj5*x7660))+((r12*x7658)));
evalcond[1]=(((r20*x7661))+(((-1.0)*r22*x7660))+(((-1.0)*r21*x7663)));
evalcond[2]=(((r00*x7661))+(((-1.0)*r01*x7663))+(((-1.0)*r02*x7660)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7660))+(((-1.0)*r11*x7663))+((x7658*x7659)));
evalcond[4]=(((r00*x7662))+((cj2*sj1))+((r02*x7658))+((cj1*sj2))+(((-1.0)*r01*sj5*x7660)));
evalcond[5]=(((r20*x7662))+((r22*x7658))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7664=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7664.valid){
continue;
}
CheckValue<IkReal> x7665 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7664.value)))+(x7665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7666=IKcos(j4);
IkReal x7667=IKsin(j4);
IkReal x7668=(cj5*r10);
IkReal x7669=((1.0)*x7666);
IkReal x7670=(cj5*x7667);
IkReal x7671=(cj5*x7666);
IkReal x7672=((1.0)*sj5*x7667);
evalcond[0]=(((x7666*x7668))+((r12*x7667))+(((-1.0)*r11*sj5*x7669)));
evalcond[1]=((((-1.0)*r22*x7669))+(((-1.0)*r21*x7672))+((r20*x7670)));
evalcond[2]=((((-1.0)*r01*x7672))+(((-1.0)*r02*x7669))+((r00*x7670)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7669))+((x7667*x7668))+(((-1.0)*r11*x7672)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*sj5*x7669))+((r02*x7667))+((r00*x7671)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7671))+((r22*x7667))+(((-1.0)*r21*sj5*x7669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7673=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7673;
j4eval[1]=IKsign(x7673);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7674=((1.0)*sj5);
IkReal x7675=((((-1.0)*r20*x7674))+(((-1.0)*cj5*r21)));
j4eval[0]=x7675;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7674))+((cj5*r00))))));
j4eval[2]=IKsign(x7675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7676=(sj1*sj2);
IkReal x7677=(cj1*cj2);
IkReal x7678=(r11*sj5);
IkReal x7679=(cj5*r10);
IkReal x7680=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7680;
j4eval[1]=IKsign(x7680);
j4eval[2]=((IKabs((((r12*x7677))+(((-1.0)*r12*x7676)))))+(IKabs(((((-1.0)*x7677*x7679))+(((-1.0)*x7676*x7678))+((x7677*x7678))+((x7676*x7679))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7681=(sj1*sj2);
IkReal x7682=(cj1*cj2);
IkReal x7683=(cj5*r10);
IkReal x7684=(r11*sj5);
CheckValue<IkReal> x7685=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7685.valid){
continue;
}
CheckValue<IkReal> x7686 = IKatan2WithCheck(IkReal((((x7681*x7683))+(((-1.0)*x7682*x7683))+(((-1.0)*x7681*x7684))+((x7682*x7684)))),IkReal((((r12*x7682))+(((-1.0)*r12*x7681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7685.value)))+(x7686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7687=IKcos(j4);
IkReal x7688=IKsin(j4);
IkReal x7689=(cj5*r10);
IkReal x7690=((1.0)*cj1);
IkReal x7691=((1.0)*x7687);
IkReal x7692=(cj5*x7688);
IkReal x7693=(cj5*x7687);
IkReal x7694=((1.0)*sj5*x7688);
evalcond[0]=(((x7687*x7689))+((r12*x7688))+(((-1.0)*r11*sj5*x7691)));
evalcond[1]=((((-1.0)*r21*x7694))+(((-1.0)*r22*x7691))+((r20*x7692)));
evalcond[2]=((((-1.0)*r02*x7691))+(((-1.0)*r01*x7694))+((r00*x7692)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7691))+(((-1.0)*r11*x7694))+((x7688*x7689)));
evalcond[4]=((((-1.0)*r21*sj5*x7691))+((sj1*sj2))+((r20*x7693))+(((-1.0)*cj2*x7690))+((r22*x7688)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r00*x7693))+(((-1.0)*sj2*x7690))+(((-1.0)*r01*sj5*x7691))+((r02*x7688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7695=((1.0)*sj5);
CheckValue<IkReal> x7696 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7695))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7696.valid){
continue;
}
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7695)))),-1);
if(!x7697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7696.value)+(((1.5707963267949)*(x7697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7698=IKcos(j4);
IkReal x7699=IKsin(j4);
IkReal x7700=(cj5*r10);
IkReal x7701=((1.0)*cj1);
IkReal x7702=((1.0)*x7698);
IkReal x7703=(cj5*x7699);
IkReal x7704=(cj5*x7698);
IkReal x7705=((1.0)*sj5*x7699);
evalcond[0]=(((x7698*x7700))+(((-1.0)*r11*sj5*x7702))+((r12*x7699)));
evalcond[1]=((((-1.0)*r22*x7702))+((r20*x7703))+(((-1.0)*r21*x7705)));
evalcond[2]=((((-1.0)*r01*x7705))+(((-1.0)*r02*x7702))+((r00*x7703)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7705))+(((-1.0)*r12*x7702))+((x7699*x7700)));
evalcond[4]=((((-1.0)*r21*sj5*x7702))+((sj1*sj2))+((r20*x7704))+(((-1.0)*cj2*x7701))+((r22*x7699)));
evalcond[5]=(((r02*x7699))+(((-1.0)*r01*sj5*x7702))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x7701))+((r00*x7704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7706=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7706.valid){
continue;
}
CheckValue<IkReal> x7707 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7706.value)))+(x7707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7708=IKcos(j4);
IkReal x7709=IKsin(j4);
IkReal x7710=(cj5*r10);
IkReal x7711=((1.0)*cj1);
IkReal x7712=((1.0)*x7708);
IkReal x7713=(cj5*x7709);
IkReal x7714=(cj5*x7708);
IkReal x7715=((1.0)*sj5*x7709);
evalcond[0]=(((r12*x7709))+(((-1.0)*r11*sj5*x7712))+((x7708*x7710)));
evalcond[1]=((((-1.0)*r22*x7712))+((r20*x7713))+(((-1.0)*r21*x7715)));
evalcond[2]=((((-1.0)*r01*x7715))+(((-1.0)*r02*x7712))+((r00*x7713)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7715))+(((-1.0)*r12*x7712))+((x7709*x7710)));
evalcond[4]=(((r20*x7714))+((sj1*sj2))+(((-1.0)*cj2*x7711))+((r22*x7709))+(((-1.0)*r21*sj5*x7712)));
evalcond[5]=((((-1.0)*r01*sj5*x7712))+((r02*x7709))+(((-1.0)*sj2*x7711))+(((-1.0)*cj2*sj1))+((r00*x7714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7716=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7716);
rxp0_2=(py*r00);
rxp1_0=(r21*x7716);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7717=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7717);
rxp0_2=(py*r00);
rxp1_0=(r21*x7717);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7718=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7718);
rxp0_2=(py*r00);
rxp1_0=(r21*x7718);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7721=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7721.valid){
continue;
}
IkReal x7719=x7721.value;
IkReal x7720=((1.0)*cj0*x7719);
cj4array[0]=((((-1.0)*cj2*sj1*x7720))+(((-1.0)*cj1*sj2*x7720)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7722=IKsin(j4);
IkReal x7723=IKcos(j4);
IkReal x7724=(cj5*r20);
IkReal x7725=((1.0)*sj5);
evalcond[0]=(r12*x7722);
evalcond[1]=((((-1.0)*r12*x7723))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x7722*x7725))+((x7722*x7724)));
evalcond[3]=((((-1.0)*r01*x7722*x7725))+((cj5*r00*x7722)));
evalcond[4]=((((-1.0)*r21*x7723*x7725))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7723*x7724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7727=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7727.valid){
continue;
}
IkReal x7726=x7727.value;
cj4array[0]=((((-1.0)*sj1*sj2*x7726))+((cj1*cj2*x7726)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7728=IKsin(j4);
IkReal x7729=IKcos(j4);
IkReal x7730=(cj5*r00);
IkReal x7731=((1.0)*r01*sj5);
evalcond[0]=(r12*x7728);
evalcond[1]=((((-1.0)*r12*x7729))+(((-1.0)*cj0)));
evalcond[2]=(((cj5*r20*x7728))+(((-1.0)*r21*sj5*x7728)));
evalcond[3]=((((-1.0)*x7728*x7731))+((x7728*x7730)));
evalcond[4]=(((x7729*x7730))+((cj0*cj2*sj1))+(((-1.0)*x7729*x7731))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7732=IKPowWithIntegerCheck(r12,-1);
if(!x7732.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7732.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7733=IKsin(j4);
IkReal x7734=IKcos(j4);
IkReal x7735=(cj5*x7734);
IkReal x7736=((1.0)*r21*sj5);
IkReal x7737=((1.0)*r01*sj5);
IkReal x7738=(cj5*x7733);
evalcond[0]=(r12*x7733);
evalcond[1]=(((r20*x7738))+(((-1.0)*x7733*x7736)));
evalcond[2]=(((r00*x7738))+(((-1.0)*x7733*x7737)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7735))+(((-1.0)*x7734*x7736)));
evalcond[4]=((((-1.0)*x7734*x7737))+((cj0*cj2*sj1))+((r00*x7735))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7739=((1.0)*sj5);
CheckValue<IkReal> x7740 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7739))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x7739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7740.valid){
continue;
}
CheckValue<IkReal> x7741=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7740.value)+(((1.5707963267949)*(x7741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7742=IKsin(j4);
IkReal x7743=IKcos(j4);
IkReal x7744=(cj2*sj1);
IkReal x7745=(cj5*r10);
IkReal x7746=(cj1*sj2);
IkReal x7747=((1.0)*x7743);
IkReal x7748=(cj5*x7742);
IkReal x7749=(cj5*x7743);
IkReal x7750=((1.0)*sj5*x7742);
evalcond[0]=((((-1.0)*r22*x7747))+((r20*x7748))+(((-1.0)*r21*x7750)));
evalcond[1]=(((r00*x7748))+sj0+(((-1.0)*r02*x7747))+(((-1.0)*r01*x7750)));
evalcond[2]=((((-1.0)*r12*x7747))+(((-1.0)*r11*x7750))+((x7742*x7745))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x7747))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7749))+((r22*x7742)));
evalcond[4]=(((r00*x7749))+((r02*x7742))+((cj0*x7744))+((cj0*x7746))+(((-1.0)*r01*sj5*x7747)));
evalcond[5]=(((r12*x7742))+((x7743*x7745))+((sj0*x7744))+((sj0*x7746))+(((-1.0)*r11*sj5*x7747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7751=((1.0)*sj5);
CheckValue<IkReal> x7752 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7752.valid){
continue;
}
CheckValue<IkReal> x7753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7751))+(((-1.0)*cj5*r01)))),-1);
if(!x7753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7752.value)+(((1.5707963267949)*(x7753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7754=IKsin(j4);
IkReal x7755=IKcos(j4);
IkReal x7756=(cj2*sj1);
IkReal x7757=(cj5*r10);
IkReal x7758=(cj1*sj2);
IkReal x7759=((1.0)*x7755);
IkReal x7760=(cj5*x7754);
IkReal x7761=(cj5*x7755);
IkReal x7762=((1.0)*sj5*x7754);
evalcond[0]=((((-1.0)*r22*x7759))+((r20*x7760))+(((-1.0)*r21*x7762)));
evalcond[1]=(sj0+(((-1.0)*r02*x7759))+(((-1.0)*r01*x7762))+((r00*x7760)));
evalcond[2]=((((-1.0)*r12*x7759))+(((-1.0)*r11*x7762))+((x7754*x7757))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x7759))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7761))+((r22*x7754)));
evalcond[4]=(((r02*x7754))+((cj0*x7758))+((cj0*x7756))+(((-1.0)*r01*sj5*x7759))+((r00*x7761)));
evalcond[5]=(((sj0*x7758))+((sj0*x7756))+((x7755*x7757))+(((-1.0)*r11*sj5*x7759))+((r12*x7754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7763=((1.0)*sj5);
CheckValue<IkReal> x7764 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7764.valid){
continue;
}
CheckValue<IkReal> x7765=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7763)))),-1);
if(!x7765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7764.value)+(((1.5707963267949)*(x7765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7766=IKsin(j4);
IkReal x7767=IKcos(j4);
IkReal x7768=(cj2*sj1);
IkReal x7769=(cj5*r10);
IkReal x7770=(cj1*sj2);
IkReal x7771=((1.0)*x7767);
IkReal x7772=(cj5*x7766);
IkReal x7773=(cj5*x7767);
IkReal x7774=((1.0)*sj5*x7766);
evalcond[0]=((((-1.0)*r22*x7771))+((r20*x7772))+(((-1.0)*r21*x7774)));
evalcond[1]=(((r00*x7772))+(((-1.0)*r02*x7771))+sj0+(((-1.0)*r01*x7774)));
evalcond[2]=(((x7766*x7769))+(((-1.0)*r11*x7774))+(((-1.0)*r12*x7771))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7766))+(((-1.0)*r21*sj5*x7771))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7773)));
evalcond[4]=(((r00*x7773))+(((-1.0)*r01*sj5*x7771))+((cj0*x7770))+((cj0*x7768))+((r02*x7766)));
evalcond[5]=(((x7767*x7769))+((sj0*x7770))+((sj0*x7768))+(((-1.0)*r11*sj5*x7771))+((r12*x7766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7775=r21*r21;
IkReal x7776=cj5*cj5;
IkReal x7777=(sj1*sj2);
IkReal x7778=(r21*sj5);
IkReal x7779=(cj5*r20);
IkReal x7780=(cj1*cj2);
CheckValue<IkReal> x7781=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7776*(r20*r20)))+(((2.0)*x7778*x7779))+(((-1.0)*x7775))+((x7775*x7776))+(((-1.0)*(r22*r22))))),-1);
if(!x7781.valid){
continue;
}
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal((((r22*x7777))+(((-1.0)*r22*x7780)))),IkReal((((x7778*x7780))+(((-1.0)*x7777*x7778))+((x7777*x7779))+(((-1.0)*x7779*x7780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7781.value)))+(x7782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7783=IKsin(j4);
IkReal x7784=IKcos(j4);
IkReal x7785=(cj5*r20);
IkReal x7786=(r21*sj5);
IkReal x7787=((1.0)*x7784);
evalcond[0]=(((x7783*x7785))+(((-1.0)*r22*x7787))+(((-1.0)*x7783*x7786)));
evalcond[1]=(((x7784*x7785))+((r22*x7783))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7786*x7787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7788=(cj5*sj4);
IkReal x7789=(sj4*sj5);
if( IKabs((((r01*x7789))+(((-1.0)*r00*x7788))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x7788))+(((-1.0)*r11*x7789))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x7789))+(((-1.0)*r00*x7788))+((cj4*r02))))+IKsqr((((r10*x7788))+(((-1.0)*r11*x7789))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x7789))+(((-1.0)*r00*x7788))+((cj4*r02))), (((r10*x7788))+(((-1.0)*r11*x7789))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7790=IKcos(j0);
IkReal x7791=IKsin(j0);
IkReal x7792=(cj5*r10);
IkReal x7793=(sj1*sj2);
IkReal x7794=(cj5*r00);
IkReal x7795=((1.0)*sj5);
IkReal x7796=(cj5*r11);
IkReal x7797=(cj1*cj2);
IkReal x7798=(cj5*r01);
IkReal x7799=((1.0)*cj4);
IkReal x7800=((0.138)*sj5);
IkReal x7801=(cj2*sj1);
IkReal x7802=((0.712)*x7790);
IkReal x7803=(cj1*x7790);
IkReal x7804=((0.712)*x7791);
IkReal x7805=(cj1*x7791);
evalcond[0]=(((sj4*x7794))+(((-1.0)*r01*sj4*x7795))+(((-1.0)*r02*x7799))+x7791);
evalcond[1]=(((sj4*x7792))+(((-1.0)*r12*x7799))+(((-1.0)*x7790))+(((-1.0)*r11*sj4*x7795)));
evalcond[2]=((((-1.0)*r00*x7795))+(((-1.0)*x7798))+((x7790*x7793))+(((-1.0)*x7790*x7797)));
evalcond[3]=((((-1.0)*r10*x7795))+(((-1.0)*x7796))+((x7791*x7793))+(((-1.0)*x7791*x7797)));
evalcond[4]=((((-1.0)*cj4*r01*x7795))+((r02*sj4))+((cj4*x7794))+((sj2*x7803))+((x7790*x7801)));
evalcond[5]=((((-1.0)*cj4*r11*x7795))+((cj4*x7792))+((r12*sj4))+((x7791*x7801))+((sj2*x7805)));
evalcond[6]=(((r00*x7800))+(((-0.85)*x7803))+(((-1.0)*x7797*x7802))+(((-1.0)*px))+((x7793*x7802))+(((0.179)*x7791))+(((0.138)*x7798)));
evalcond[7]=((((-0.85)*x7805))+(((-0.179)*x7790))+(((-1.0)*x7797*x7804))+(((-1.0)*py))+((x7793*x7804))+((r10*x7800))+(((0.138)*x7796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7806 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7806.valid){
continue;
}
CheckValue<IkReal> x7807=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x7807.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7806.value)+(((1.5707963267949)*(x7807.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7808=IKcos(j0);
IkReal x7809=IKsin(j0);
IkReal x7810=(sj1*sj2);
IkReal x7811=(cj1*cj2);
IkReal x7812=(cj5*r11);
IkReal x7813=((0.85)*cj1);
IkReal x7814=(r10*sj5);
IkReal x7815=(r00*sj5);
IkReal x7816=(cj5*r01);
IkReal x7817=((0.712)*x7808);
IkReal x7818=((0.712)*x7809);
evalcond[0]=((((-1.0)*x7816))+(((-1.0)*x7815))+(((-1.0)*x7808*x7811))+((x7808*x7810)));
evalcond[1]=((((-1.0)*x7812))+(((-1.0)*x7814))+(((-1.0)*x7809*x7811))+((x7809*x7810)));
evalcond[2]=((((-1.0)*x7811*x7817))+(((0.179)*x7809))+((x7810*x7817))+(((-1.0)*px))+(((0.138)*x7815))+(((0.138)*x7816))+(((-1.0)*x7808*x7813)));
evalcond[3]=((((-1.0)*x7811*x7818))+(((-0.179)*x7808))+((x7810*x7818))+(((-1.0)*py))+(((0.138)*x7812))+(((0.138)*x7814))+(((-1.0)*x7809*x7813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7819=((1.0)*sj5);
IkReal x7820=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7819)));
j4eval[0]=x7820;
j4eval[1]=IKsign(x7820);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7819)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7821=((1.0)*sj5);
IkReal x7822=((((-1.0)*r00*x7821))+(((-1.0)*cj5*r01)));
j4eval[0]=x7822;
j4eval[1]=IKsign(x7822);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7821))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7823=((1.0)*sj5);
IkReal x7824=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7824;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x7823))+(((-1.0)*cj0*r01*x7823))))));
j4eval[2]=IKsign(x7824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7826 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7826)==0){
continue;
}
IkReal x7825=pow(x7826,-0.5);
CheckValue<IkReal> x7827 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7827.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7827.value));
IkReal gconst133=((-1.0)*r21*x7825);
IkReal gconst134=(r20*x7825);
CheckValue<IkReal> x7828 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7828.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7828.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7831 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7831.valid){
continue;
}
IkReal x7829=((-1.0)*(x7831.value));
IkReal x7830=x7825;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7829;
IkReal gconst132=x7829;
IkReal gconst133=((-1.0)*r21*x7830);
IkReal gconst134=(r20*x7830);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7834 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7834.valid){
continue;
}
IkReal x7832=((-1.0)*(x7834.value));
IkReal x7833=x7825;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7832;
IkReal gconst132=x7832;
IkReal gconst133=((-1.0)*r21*x7833);
IkReal gconst134=(r20*x7833);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7837 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7837.valid){
continue;
}
IkReal x7835=((-1.0)*(x7837.value));
IkReal x7836=x7825;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7835;
IkReal gconst132=x7835;
IkReal gconst133=((-1.0)*r21*x7836);
IkReal gconst134=(r20*x7836);
IkReal x7838=((1.0)*(r22*r22));
CheckValue<IkReal> x7842=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7838))),-1);
if(!x7842.valid){
continue;
}
IkReal x7839=x7842.value;
IkReal x7840=((1.0)*x7839);
IkReal x7841=((((-2.0)*x7839*(r20*r20)*(r21*r21)))+(((-1.0)*x7840*(r21*r21*r21*r21)))+(((-1.0)*x7840*(r20*r20*r20*r20)))+(((-1.0)*x7838)));
j4eval[0]=x7841;
j4eval[1]=IKsign(x7841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7843=(gconst134*r20);
IkReal x7844=(cj1*cj2);
IkReal x7845=(gconst133*r21);
IkReal x7846=(sj1*sj2);
CheckValue<IkReal> x7847=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7843*x7843)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7845*x7845)))+(((2.0)*x7843*x7845)))),-1);
if(!x7847.valid){
continue;
}
CheckValue<IkReal> x7848 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7844))+((r22*x7846)))),IkReal((((x7843*x7846))+(((-1.0)*x7845*x7846))+(((-1.0)*x7843*x7844))+((x7844*x7845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7847.value)))+(x7848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7849=IKsin(j4);
IkReal x7850=IKcos(j4);
IkReal x7851=(gconst134*r10);
IkReal x7852=(cj2*sj1);
IkReal x7853=(gconst133*r11);
IkReal x7854=(gconst133*r01);
IkReal x7855=(gconst133*r21);
IkReal x7856=(cj1*sj2);
IkReal x7857=((1.0)*x7850);
IkReal x7858=((1.0)*x7849);
IkReal x7859=(gconst134*x7850);
IkReal x7860=(gconst134*x7849);
evalcond[0]=(((r20*x7860))+(((-1.0)*x7855*x7858))+(((-1.0)*r22*x7857)));
evalcond[1]=(sj0+((r00*x7860))+(((-1.0)*x7854*x7858))+(((-1.0)*r02*x7857)));
evalcond[2]=(((x7849*x7851))+(((-1.0)*x7853*x7858))+(((-1.0)*r12*x7857))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7855*x7857))+((r22*x7849))+((r20*x7859)));
evalcond[4]=(((cj0*x7852))+((cj0*x7856))+(((-1.0)*x7854*x7857))+((r00*x7859))+((r02*x7849)));
evalcond[5]=(((r12*x7849))+((sj0*x7852))+((sj0*x7856))+((x7850*x7851))+(((-1.0)*x7853*x7857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7861=((1.0)*gconst133);
CheckValue<IkReal> x7862 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*r21*x7861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7862.valid){
continue;
}
CheckValue<IkReal> x7863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7861))+(((-1.0)*gconst134*r01)))),-1);
if(!x7863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7862.value)+(((1.5707963267949)*(x7863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7864=IKsin(j4);
IkReal x7865=IKcos(j4);
IkReal x7866=(gconst134*r10);
IkReal x7867=(cj2*sj1);
IkReal x7868=(gconst133*r11);
IkReal x7869=(gconst133*r01);
IkReal x7870=(gconst133*r21);
IkReal x7871=(cj1*sj2);
IkReal x7872=((1.0)*x7865);
IkReal x7873=((1.0)*x7864);
IkReal x7874=(gconst134*x7865);
IkReal x7875=(gconst134*x7864);
evalcond[0]=((((-1.0)*r22*x7872))+(((-1.0)*x7870*x7873))+((r20*x7875)));
evalcond[1]=(sj0+((r00*x7875))+(((-1.0)*x7869*x7873))+(((-1.0)*r02*x7872)));
evalcond[2]=(((x7864*x7866))+(((-1.0)*x7868*x7873))+(((-1.0)*r12*x7872))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7870*x7872))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7874))+((r22*x7864)));
evalcond[4]=(((cj0*x7867))+((cj0*x7871))+((r00*x7874))+(((-1.0)*x7869*x7872))+((r02*x7864)));
evalcond[5]=(((x7865*x7866))+(((-1.0)*x7868*x7872))+((r12*x7864))+((sj0*x7867))+((sj0*x7871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7876=((1.0)*gconst133);
CheckValue<IkReal> x7877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7876))+(((-1.0)*gconst134*r11)))),-1);
if(!x7877.valid){
continue;
}
CheckValue<IkReal> x7878 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7876))+((gconst134*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7877.value)))+(x7878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7879=IKsin(j4);
IkReal x7880=IKcos(j4);
IkReal x7881=(gconst134*r10);
IkReal x7882=(cj2*sj1);
IkReal x7883=(gconst133*r11);
IkReal x7884=(gconst133*r01);
IkReal x7885=(gconst133*r21);
IkReal x7886=(cj1*sj2);
IkReal x7887=((1.0)*x7880);
IkReal x7888=((1.0)*x7879);
IkReal x7889=(gconst134*x7880);
IkReal x7890=(gconst134*x7879);
evalcond[0]=((((-1.0)*r22*x7887))+(((-1.0)*x7885*x7888))+((r20*x7890)));
evalcond[1]=(sj0+(((-1.0)*r02*x7887))+(((-1.0)*x7884*x7888))+((r00*x7890)));
evalcond[2]=(((x7879*x7881))+(((-1.0)*r12*x7887))+(((-1.0)*cj0))+(((-1.0)*x7883*x7888)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7889))+(((-1.0)*x7885*x7887))+((r22*x7879)));
evalcond[4]=(((cj0*x7882))+((cj0*x7886))+((r00*x7889))+(((-1.0)*x7884*x7887))+((r02*x7879)));
evalcond[5]=(((sj0*x7882))+((sj0*x7886))+((r12*x7879))+((x7880*x7881))+(((-1.0)*x7883*x7887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7892 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7892)==0){
continue;
}
IkReal x7891=pow(x7892,-0.5);
CheckValue<IkReal> x7893 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7893.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7893.value))));
IkReal gconst136=((1.0)*r21*x7891);
IkReal gconst137=((-1.0)*r20*x7891);
CheckValue<IkReal> x7894 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7894.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7894.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7897 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7897.valid){
continue;
}
IkReal x7895=((1.0)*(x7897.value));
IkReal x7896=x7891;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7895)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7895)));
IkReal gconst136=((1.0)*r21*x7896);
IkReal gconst137=((-1.0)*r20*x7896);
IkReal x7898=r22*r22;
IkReal x7899=((1.0)*x7898);
CheckValue<IkReal> x7903=IKPowWithIntegerCheck(((-1.0)+x7898),-1);
if(!x7903.valid){
continue;
}
IkReal x7900=x7903.value;
if((((1.0)+(((-1.0)*x7899)))) < -0.00001)
continue;
IkReal x7901=IKsqrt(((1.0)+(((-1.0)*x7899))));
IkReal x7902=(sj0*x7900*x7901);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7899*x7902))+x7902))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7906 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7906.valid){
continue;
}
IkReal x7904=((1.0)*(x7906.value));
IkReal x7905=x7891;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7904)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7904)));
IkReal gconst136=((1.0)*r21*x7905);
IkReal gconst137=((-1.0)*r20*x7905);
IkReal x7907=r22*r22;
IkReal x7908=((1.0)*x7907);
CheckValue<IkReal> x7912=IKPowWithIntegerCheck(((-1.0)+x7907),-1);
if(!x7912.valid){
continue;
}
IkReal x7909=x7912.value;
if((((1.0)+(((-1.0)*x7908)))) < -0.00001)
continue;
IkReal x7910=IKsqrt(((1.0)+(((-1.0)*x7908))));
IkReal x7911=(cj0*x7909*x7910);
j4eval[0]=((IKabs(((((-1.0)*x7908*x7911))+x7911)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7915 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7915.valid){
continue;
}
IkReal x7913=((1.0)*(x7915.value));
IkReal x7914=x7891;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7913)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7913)));
IkReal gconst136=((1.0)*r21*x7914);
IkReal gconst137=((-1.0)*r20*x7914);
IkReal x7916=r22*r22;
IkReal x7917=(cj0*r02);
IkReal x7918=(r12*sj0);
CheckValue<IkReal> x7922=IKPowWithIntegerCheck(((-1.0)+x7916),-1);
if(!x7922.valid){
continue;
}
IkReal x7919=x7922.value;
if((((1.0)+(((-1.0)*x7916)))) < -0.00001)
continue;
IkReal x7920=IKsqrt(((1.0)+(((-1.0)*x7916))));
IkReal x7921=((1.0)*r22*x7919*x7920);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x7918+x7917)))+(IKabs(((((-1.0)*x7917*x7921))+(((-1.0)*x7918*x7921))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7923=((1.0)*gconst136);
CheckValue<IkReal> x7924 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7923))+((gconst137*r10*sj0))+(((-1.0)*r11*sj0*x7923))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7924.valid){
continue;
}
CheckValue<IkReal> x7925=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7924.value)+(((1.5707963267949)*(x7925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7926=IKsin(j4);
IkReal x7927=IKcos(j4);
IkReal x7928=(gconst136*r01);
IkReal x7929=(cj2*sj1);
IkReal x7930=(gconst136*r11);
IkReal x7931=(gconst136*r21);
IkReal x7932=(cj1*sj2);
IkReal x7933=((1.0)*x7927);
IkReal x7934=(gconst137*x7927);
IkReal x7935=((1.0)*x7926);
IkReal x7936=(gconst137*x7926);
evalcond[0]=((((-1.0)*r22*x7933))+((r20*x7936))+(((-1.0)*x7931*x7935)));
evalcond[1]=(sj0+(((-1.0)*r02*x7933))+(((-1.0)*x7928*x7935))+((r00*x7936)));
evalcond[2]=((((-1.0)*r12*x7933))+((r10*x7936))+(((-1.0)*x7930*x7935))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7926))+((r20*x7934))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7931*x7933)));
evalcond[4]=(((cj0*x7932))+(((-1.0)*x7928*x7933))+((r02*x7926))+((r00*x7934))+((cj0*x7929)));
evalcond[5]=(((sj0*x7932))+((r12*x7926))+((r10*x7934))+(((-1.0)*x7930*x7933))+((sj0*x7929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7937=((1.0)*gconst136);
CheckValue<IkReal> x7938 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7937))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7938.valid){
continue;
}
CheckValue<IkReal> x7939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7937))+(((-1.0)*gconst137*r01)))),-1);
if(!x7939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7938.value)+(((1.5707963267949)*(x7939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7940=IKsin(j4);
IkReal x7941=IKcos(j4);
IkReal x7942=(gconst136*r01);
IkReal x7943=(cj2*sj1);
IkReal x7944=(gconst136*r11);
IkReal x7945=(gconst136*r21);
IkReal x7946=(cj1*sj2);
IkReal x7947=((1.0)*x7941);
IkReal x7948=(gconst137*x7941);
IkReal x7949=((1.0)*x7940);
IkReal x7950=(gconst137*x7940);
evalcond[0]=((((-1.0)*r22*x7947))+((r20*x7950))+(((-1.0)*x7945*x7949)));
evalcond[1]=(((r00*x7950))+sj0+(((-1.0)*r02*x7947))+(((-1.0)*x7942*x7949)));
evalcond[2]=((((-1.0)*r12*x7947))+(((-1.0)*x7944*x7949))+((r10*x7950))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7948))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7945*x7947))+((r22*x7940)));
evalcond[4]=(((cj0*x7946))+((cj0*x7943))+((r02*x7940))+((r00*x7948))+(((-1.0)*x7942*x7947)));
evalcond[5]=(((sj0*x7946))+((sj0*x7943))+((r12*x7940))+((r10*x7948))+(((-1.0)*x7944*x7947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7951=((1.0)*gconst136);
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x7951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
CheckValue<IkReal> x7953=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x7951)))),-1);
if(!x7953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7952.value)+(((1.5707963267949)*(x7953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7954=IKsin(j4);
IkReal x7955=IKcos(j4);
IkReal x7956=(gconst136*r01);
IkReal x7957=(cj2*sj1);
IkReal x7958=(gconst136*r11);
IkReal x7959=(gconst136*r21);
IkReal x7960=(cj1*sj2);
IkReal x7961=((1.0)*x7955);
IkReal x7962=(gconst137*x7955);
IkReal x7963=((1.0)*x7954);
IkReal x7964=(gconst137*x7954);
evalcond[0]=((((-1.0)*r22*x7961))+((r20*x7964))+(((-1.0)*x7959*x7963)));
evalcond[1]=((((-1.0)*x7956*x7963))+sj0+((r00*x7964))+(((-1.0)*r02*x7961)));
evalcond[2]=((((-1.0)*x7958*x7963))+(((-1.0)*r12*x7961))+((r10*x7964))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7954))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7962))+(((-1.0)*x7959*x7961)));
evalcond[4]=((((-1.0)*x7956*x7961))+((r00*x7962))+((cj0*x7957))+((r02*x7954))+((cj0*x7960)));
evalcond[5]=(((r12*x7954))+(((-1.0)*x7958*x7961))+((sj0*x7957))+((r10*x7962))+((sj0*x7960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7965=((-1.0)*r00);
IkReal x7967 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7967)==0){
continue;
}
IkReal x7966=pow(x7967,-0.5);
CheckValue<IkReal> x7968 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7965),IKFAST_ATAN2_MAGTHRESH);
if(!x7968.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7968.value));
IkReal gconst139=(r01*x7966);
IkReal gconst140=(x7965*x7966);
CheckValue<IkReal> x7969 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7969.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7969.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7970=((-1.0)*r00);
IkReal x7971=x7966;
CheckValue<IkReal> x7973 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7970),IKFAST_ATAN2_MAGTHRESH);
if(!x7973.valid){
continue;
}
IkReal x7972=((-1.0)*(x7973.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7972;
IkReal gconst138=x7972;
IkReal gconst139=(r01*x7971);
IkReal gconst140=(x7970*x7971);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7974=((1.0)*gconst139);
CheckValue<IkReal> x7975=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7975.valid){
continue;
}
CheckValue<IkReal> x7976 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7974))+(((-1.0)*r11*sj0*x7974))+((gconst140*r10*sj0))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7975.value)))+(x7976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7977=IKsin(j4);
IkReal x7978=IKcos(j4);
IkReal x7979=(cj2*sj1);
IkReal x7980=(gconst140*r10);
IkReal x7981=(cj1*sj2);
IkReal x7982=((1.0)*x7978);
IkReal x7983=(gconst140*x7978);
IkReal x7984=(gconst140*x7977);
IkReal x7985=((1.0)*gconst139*x7977);
evalcond[0]=((((-1.0)*r22*x7982))+((r20*x7984))+(((-1.0)*r21*x7985)));
evalcond[1]=(sj0+(((-1.0)*r01*x7985))+((r00*x7984))+(((-1.0)*r02*x7982)));
evalcond[2]=((((-1.0)*r12*x7982))+((x7977*x7980))+(((-1.0)*r11*x7985))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7983))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst139*r21*x7982))+((r22*x7977)));
evalcond[4]=(((r00*x7983))+((r02*x7977))+(((-1.0)*gconst139*r01*x7982))+((cj0*x7979))+((cj0*x7981)));
evalcond[5]=(((r12*x7977))+(((-1.0)*gconst139*r11*x7982))+((sj0*x7981))+((x7978*x7980))+((sj0*x7979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7986=((1.0)*gconst139);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst140*r20*sj0))+(((-1.0)*r21*sj0*x7986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
CheckValue<IkReal> x7988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7986))+(((-1.0)*gconst140*r11)))),-1);
if(!x7988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7987.value)+(((1.5707963267949)*(x7988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7989=IKsin(j4);
IkReal x7990=IKcos(j4);
IkReal x7991=(cj2*sj1);
IkReal x7992=(gconst140*r10);
IkReal x7993=(cj1*sj2);
IkReal x7994=((1.0)*x7990);
IkReal x7995=(gconst140*x7990);
IkReal x7996=(gconst140*x7989);
IkReal x7997=((1.0)*gconst139*x7989);
evalcond[0]=(((r20*x7996))+(((-1.0)*r21*x7997))+(((-1.0)*r22*x7994)));
evalcond[1]=(sj0+(((-1.0)*r01*x7997))+((r00*x7996))+(((-1.0)*r02*x7994)));
evalcond[2]=((((-1.0)*r11*x7997))+(((-1.0)*r12*x7994))+((x7989*x7992))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7995))+((r22*x7989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst139*r21*x7994)));
evalcond[4]=(((r00*x7995))+(((-1.0)*gconst139*r01*x7994))+((cj0*x7993))+((cj0*x7991))+((r02*x7989)));
evalcond[5]=(((x7990*x7992))+(((-1.0)*gconst139*r11*x7994))+((sj0*x7991))+((sj0*x7993))+((r12*x7989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7998=((-1.0)*r01);
IkReal x8000 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8000)==0){
continue;
}
IkReal x7999=pow(x8000,-0.5);
CheckValue<IkReal> x8001 = IKatan2WithCheck(IkReal(x7998),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8001.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8001.value))));
IkReal gconst142=(x7998*x7999);
IkReal gconst143=((1.0)*r00*x7999);
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8002.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8003=((-1.0)*r01);
CheckValue<IkReal> x8006 = IKatan2WithCheck(IkReal(x8003),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8006.valid){
continue;
}
IkReal x8004=((1.0)*(x8006.value));
IkReal x8005=x7999;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8004)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8004)));
IkReal gconst142=(x8003*x8005);
IkReal gconst143=((1.0)*r00*x8005);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x8007=((-1.0)*r01);
CheckValue<IkReal> x8010 = IKatan2WithCheck(IkReal(x8007),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8010.valid){
continue;
}
IkReal x8008=((1.0)*(x8010.value));
IkReal x8009=x7999;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8008)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8008)));
IkReal gconst142=(x8007*x8009);
IkReal gconst143=((1.0)*r00*x8009);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8011=((-1.0)*r01);
CheckValue<IkReal> x8014 = IKatan2WithCheck(IkReal(x8011),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8014.valid){
continue;
}
IkReal x8012=((1.0)*(x8014.value));
IkReal x8013=x7999;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8012)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8012)));
IkReal gconst142=(x8011*x8013);
IkReal gconst143=((1.0)*r00*x8013);
IkReal x8015=r02*r02;
IkReal x8016=(r12*sj0);
IkReal x8017=x7999;
IkReal x8018=(cj0*x8017);
j4eval[0]=((IKabs((x8016+((cj0*r02)))))+(IKabs(((((-1.0)*x8018))+((r02*x8016*x8017))+((x8015*x8018))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8019=((1.0)*gconst142);
CheckValue<IkReal> x8020 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*r11*sj0*x8019))+((gconst143*r10*sj0))+(((-1.0)*cj0*r01*x8019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8020.valid){
continue;
}
CheckValue<IkReal> x8021=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x8021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8020.value)+(((1.5707963267949)*(x8021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8022=IKsin(j4);
IkReal x8023=IKcos(j4);
IkReal x8024=(gconst143*r00);
IkReal x8025=(cj2*sj1);
IkReal x8026=(gconst142*r21);
IkReal x8027=(gconst142*r11);
IkReal x8028=(gconst142*r01);
IkReal x8029=(cj1*sj2);
IkReal x8030=((1.0)*x8023);
IkReal x8031=((1.0)*x8022);
IkReal x8032=(gconst143*x8023);
IkReal x8033=(gconst143*x8022);
evalcond[0]=(((r20*x8033))+(((-1.0)*x8026*x8031))+(((-1.0)*r22*x8030)));
evalcond[1]=((((-1.0)*x8028*x8031))+sj0+((x8022*x8024))+(((-1.0)*r02*x8030)));
evalcond[2]=(((r10*x8033))+(((-1.0)*r12*x8030))+(((-1.0)*x8027*x8031))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x8032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8026*x8030))+((r22*x8022)));
evalcond[4]=((((-1.0)*x8028*x8030))+((cj0*x8029))+((cj0*x8025))+((r02*x8022))+((x8023*x8024)));
evalcond[5]=(((r10*x8032))+((sj0*x8029))+((sj0*x8025))+((r12*x8022))+(((-1.0)*x8027*x8030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8034=((1.0)*gconst142);
CheckValue<IkReal> x8035=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r01))+(((-1.0)*r00*x8034)))),-1);
if(!x8035.valid){
continue;
}
CheckValue<IkReal> x8036 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x8034))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8035.value)))+(x8036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8037=IKsin(j4);
IkReal x8038=IKcos(j4);
IkReal x8039=(gconst143*r00);
IkReal x8040=(cj2*sj1);
IkReal x8041=(gconst142*r21);
IkReal x8042=(gconst142*r11);
IkReal x8043=(gconst142*r01);
IkReal x8044=(cj1*sj2);
IkReal x8045=((1.0)*x8038);
IkReal x8046=((1.0)*x8037);
IkReal x8047=(gconst143*x8038);
IkReal x8048=(gconst143*x8037);
evalcond[0]=(((r20*x8048))+(((-1.0)*x8041*x8046))+(((-1.0)*r22*x8045)));
evalcond[1]=(sj0+((x8037*x8039))+(((-1.0)*x8043*x8046))+(((-1.0)*r02*x8045)));
evalcond[2]=(((r10*x8048))+(((-1.0)*x8042*x8046))+(((-1.0)*r12*x8045))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x8047))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8041*x8045))+((r22*x8037)));
evalcond[4]=(((r02*x8037))+(((-1.0)*x8043*x8045))+((x8038*x8039))+((cj0*x8044))+((cj0*x8040)));
evalcond[5]=(((r10*x8047))+(((-1.0)*x8042*x8045))+((sj0*x8040))+((sj0*x8044))+((r12*x8037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8049=((1.0)*gconst142);
CheckValue<IkReal> x8050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8049))+(((-1.0)*gconst143*r11)))),-1);
if(!x8050.valid){
continue;
}
CheckValue<IkReal> x8051 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst143*r20*sj0))+(((-1.0)*r21*sj0*x8049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8050.value)))+(x8051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8052=IKsin(j4);
IkReal x8053=IKcos(j4);
IkReal x8054=(gconst143*r00);
IkReal x8055=(cj2*sj1);
IkReal x8056=(gconst142*r21);
IkReal x8057=(gconst142*r11);
IkReal x8058=(gconst142*r01);
IkReal x8059=(cj1*sj2);
IkReal x8060=((1.0)*x8053);
IkReal x8061=((1.0)*x8052);
IkReal x8062=(gconst143*x8053);
IkReal x8063=(gconst143*x8052);
evalcond[0]=(((r20*x8063))+(((-1.0)*x8056*x8061))+(((-1.0)*r22*x8060)));
evalcond[1]=(sj0+(((-1.0)*x8058*x8061))+((x8052*x8054))+(((-1.0)*r02*x8060)));
evalcond[2]=(((r10*x8063))+(((-1.0)*x8057*x8061))+(((-1.0)*r12*x8060))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8062))+(((-1.0)*x8056*x8060))+((r22*x8052)));
evalcond[4]=(((r02*x8052))+((cj0*x8055))+((cj0*x8059))+(((-1.0)*x8058*x8060))+((x8053*x8054)));
evalcond[5]=(((r10*x8062))+(((-1.0)*x8057*x8060))+((sj0*x8055))+((sj0*x8059))+((r12*x8052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8064=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8064;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x8064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8065=((1.0)*sj5);
IkReal x8066=((((-1.0)*cj5*r11))+(((-1.0)*r10*x8065)));
j4eval[0]=x8066;
j4eval[1]=IKsign(x8066);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x8065)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8067=(cj1*sj2);
IkReal x8068=(cj5*r00);
IkReal x8069=((1.0)*r02);
IkReal x8070=(cj2*sj1);
IkReal x8071=((1.0)*r01*sj5);
IkReal x8072=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8072;
j4eval[1]=((IKabs(((((-1.0)*x8067*x8069))+(((-1.0)*x8069*x8070)))))+(IKabs((((x8068*x8070))+(((-1.0)*x8067*x8071))+((x8067*x8068))+(((-1.0)*x8070*x8071))))));
j4eval[2]=IKsign(x8072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8073=(cj1*sj2);
IkReal x8074=(cj5*r00);
IkReal x8075=((1.0)*r02);
IkReal x8076=(cj2*sj1);
IkReal x8077=((1.0)*r01*sj5);
CheckValue<IkReal> x8078=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8078.valid){
continue;
}
CheckValue<IkReal> x8079 = IKatan2WithCheck(IkReal(((((-1.0)*x8073*x8077))+((x8074*x8076))+(((-1.0)*x8076*x8077))+((x8073*x8074)))),IkReal(((((-1.0)*x8075*x8076))+(((-1.0)*x8073*x8075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8078.value)))+(x8079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8080=IKcos(j4);
IkReal x8081=IKsin(j4);
IkReal x8082=((1.0)*x8080);
IkReal x8083=(cj5*x8080);
IkReal x8084=(cj5*x8081);
IkReal x8085=((1.0)*sj5*x8081);
evalcond[0]=((((-1.0)*r01*sj5*x8082))+((r00*x8083))+((r02*x8081)));
evalcond[1]=((((-1.0)*r22*x8082))+(((-1.0)*r21*x8085))+((r20*x8084)));
evalcond[2]=(((r10*x8084))+(((-1.0)*r11*x8085))+(((-1.0)*r12*x8082)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8082))+(((-1.0)*r01*x8085))+((r00*x8084)));
evalcond[4]=(((cj2*sj1))+((r10*x8083))+((cj1*sj2))+(((-1.0)*r11*sj5*x8082))+((r12*x8081)));
evalcond[5]=((((-1.0)*r21*sj5*x8082))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8081))+((r20*x8083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8086=((1.0)*sj5);
CheckValue<IkReal> x8087 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x8086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8087.valid){
continue;
}
CheckValue<IkReal> x8088=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8086)))),-1);
if(!x8088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8087.value)+(((1.5707963267949)*(x8088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8089=IKcos(j4);
IkReal x8090=IKsin(j4);
IkReal x8091=((1.0)*x8089);
IkReal x8092=(cj5*x8089);
IkReal x8093=(cj5*x8090);
IkReal x8094=((1.0)*sj5*x8090);
evalcond[0]=((((-1.0)*r01*sj5*x8091))+((r00*x8092))+((r02*x8090)));
evalcond[1]=((((-1.0)*r22*x8091))+((r20*x8093))+(((-1.0)*r21*x8094)));
evalcond[2]=(((r10*x8093))+(((-1.0)*r12*x8091))+(((-1.0)*r11*x8094)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8091))+(((-1.0)*r01*x8094))+((r00*x8093)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x8091))+((r10*x8092))+((cj1*sj2))+((r12*x8090)));
evalcond[5]=((((-1.0)*r21*sj5*x8091))+((r22*x8090))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8095 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8095.valid){
continue;
}
CheckValue<IkReal> x8096=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8095.value)+(((1.5707963267949)*(x8096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8097=IKcos(j4);
IkReal x8098=IKsin(j4);
IkReal x8099=((1.0)*x8097);
IkReal x8100=(cj5*x8097);
IkReal x8101=(cj5*x8098);
IkReal x8102=((1.0)*sj5*x8098);
evalcond[0]=((((-1.0)*r01*sj5*x8099))+((r00*x8100))+((r02*x8098)));
evalcond[1]=(((r20*x8101))+(((-1.0)*r21*x8102))+(((-1.0)*r22*x8099)));
evalcond[2]=((((-1.0)*r11*x8102))+((r10*x8101))+(((-1.0)*r12*x8099)));
evalcond[3]=((1.0)+(((-1.0)*r01*x8102))+(((-1.0)*r02*x8099))+((r00*x8101)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x8099))+((cj1*sj2))+((r10*x8100))+((r12*x8098)));
evalcond[5]=((((-1.0)*r21*sj5*x8099))+((r22*x8098))+((r20*x8100))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8103=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8103;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x8103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8104=((1.0)*sj5);
IkReal x8105=((((-1.0)*r20*x8104))+(((-1.0)*cj5*r21)));
j4eval[0]=x8105;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x8104)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8106=cj5*cj5;
IkReal x8107=r01*r01;
IkReal x8108=(cj5*r00);
IkReal x8109=(r01*sj5);
IkReal x8110=((((-1.0)*x8106*x8107))+((x8106*(r00*r00)))+(((-2.0)*x8108*x8109))+(r02*r02)+x8107);
j4eval[0]=x8110;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8109))+x8108))));
j4eval[2]=IKsign(x8110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8111=cj5*cj5;
IkReal x8112=r01*r01;
IkReal x8113=(r01*sj5);
IkReal x8114=(cj5*r00);
CheckValue<IkReal> x8115 = IKatan2WithCheck(IkReal((x8114+(((-1.0)*x8113)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8113*x8114))+(r02*r02)+((x8111*(r00*r00)))+x8112+(((-1.0)*x8111*x8112)))),-1);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8115.value)+(((1.5707963267949)*(x8116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKcos(j4);
IkReal x8118=IKsin(j4);
IkReal x8119=((1.0)*cj1);
IkReal x8120=((1.0)*x8117);
IkReal x8121=(cj5*x8117);
IkReal x8122=(cj5*x8118);
IkReal x8123=((1.0)*sj5*x8118);
evalcond[0]=(((r02*x8118))+((r00*x8121))+(((-1.0)*r01*sj5*x8120)));
evalcond[1]=((((-1.0)*r21*x8123))+((r20*x8122))+(((-1.0)*r22*x8120)));
evalcond[2]=((((-1.0)*r12*x8120))+(((-1.0)*r11*x8123))+((r10*x8122)));
evalcond[3]=((-1.0)+((r00*x8122))+(((-1.0)*r02*x8120))+(((-1.0)*r01*x8123)));
evalcond[4]=((((-1.0)*r21*sj5*x8120))+((sj1*sj2))+((r20*x8121))+(((-1.0)*cj2*x8119))+((r22*x8118)));
evalcond[5]=((((-1.0)*r11*sj5*x8120))+(((-1.0)*cj2*sj1))+((r12*x8118))+((r10*x8121))+(((-1.0)*sj2*x8119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8124=((1.0)*sj5);
CheckValue<IkReal> x8125 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x8124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8125.valid){
continue;
}
CheckValue<IkReal> x8126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8124))+(((-1.0)*cj5*r21)))),-1);
if(!x8126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8125.value)+(((1.5707963267949)*(x8126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8127=IKcos(j4);
IkReal x8128=IKsin(j4);
IkReal x8129=((1.0)*cj1);
IkReal x8130=((1.0)*x8127);
IkReal x8131=(cj5*x8127);
IkReal x8132=(cj5*x8128);
IkReal x8133=((1.0)*sj5*x8128);
evalcond[0]=(((r00*x8131))+((r02*x8128))+(((-1.0)*r01*sj5*x8130)));
evalcond[1]=((((-1.0)*r22*x8130))+((r20*x8132))+(((-1.0)*r21*x8133)));
evalcond[2]=((((-1.0)*r11*x8133))+(((-1.0)*r12*x8130))+((r10*x8132)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8130))+((r00*x8132))+(((-1.0)*r01*x8133)));
evalcond[4]=((((-1.0)*r21*sj5*x8130))+((sj1*sj2))+((r20*x8131))+((r22*x8128))+(((-1.0)*cj2*x8129)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r12*x8128))+(((-1.0)*r11*sj5*x8130))+(((-1.0)*sj2*x8129))+((r10*x8131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8134=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8134.valid){
continue;
}
CheckValue<IkReal> x8135 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8134.value)))+(x8135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8136=IKcos(j4);
IkReal x8137=IKsin(j4);
IkReal x8138=((1.0)*cj1);
IkReal x8139=((1.0)*x8136);
IkReal x8140=(cj5*x8136);
IkReal x8141=(cj5*x8137);
IkReal x8142=((1.0)*sj5*x8137);
evalcond[0]=(((r02*x8137))+((r00*x8140))+(((-1.0)*r01*sj5*x8139)));
evalcond[1]=((((-1.0)*r21*x8142))+((r20*x8141))+(((-1.0)*r22*x8139)));
evalcond[2]=(((r10*x8141))+(((-1.0)*r12*x8139))+(((-1.0)*r11*x8142)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8139))+(((-1.0)*r01*x8142))+((r00*x8141)));
evalcond[4]=(((r22*x8137))+((r20*x8140))+(((-1.0)*r21*sj5*x8139))+(((-1.0)*cj2*x8138))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj2*x8138))+((r12*x8137))+(((-1.0)*cj2*sj1))+((r10*x8140))+(((-1.0)*r11*sj5*x8139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8143=((-1.0)*r10);
IkReal x8145 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8145)==0){
continue;
}
IkReal x8144=pow(x8145,-0.5);
CheckValue<IkReal> x8146 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8143),IKFAST_ATAN2_MAGTHRESH);
if(!x8146.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8146.value));
IkReal gconst145=(r11*x8144);
IkReal gconst146=(x8143*x8144);
CheckValue<IkReal> x8147 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8147.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8147.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8148=((-1.0)*r10);
IkReal x8149=x8144;
CheckValue<IkReal> x8151 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8148),IKFAST_ATAN2_MAGTHRESH);
if(!x8151.valid){
continue;
}
IkReal x8150=((-1.0)*(x8151.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x8150;
IkReal gconst144=x8150;
IkReal gconst145=(r11*x8149);
IkReal gconst146=(x8148*x8149);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8152=((1.0)*gconst145);
CheckValue<IkReal> x8153=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x8153.valid){
continue;
}
CheckValue<IkReal> x8154 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*r11*sj0*x8152))+(((-1.0)*cj0*r01*x8152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8153.value)))+(x8154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8155=IKsin(j4);
IkReal x8156=IKcos(j4);
IkReal x8157=(gconst145*r11);
IkReal x8158=(cj2*sj1);
IkReal x8159=(gconst145*r01);
IkReal x8160=(gconst145*r21);
IkReal x8161=(cj1*sj2);
IkReal x8162=((1.0)*x8156);
IkReal x8163=(gconst146*x8156);
IkReal x8164=(gconst146*x8155);
IkReal x8165=((1.0)*x8155);
evalcond[0]=((((-1.0)*x8160*x8165))+((r20*x8164))+(((-1.0)*r22*x8162)));
evalcond[1]=(sj0+(((-1.0)*r02*x8162))+(((-1.0)*x8159*x8165))+((r00*x8164)));
evalcond[2]=((((-1.0)*x8157*x8165))+((r10*x8164))+(((-1.0)*r12*x8162))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8155))+(((-1.0)*x8160*x8162))+((r20*x8163)));
evalcond[4]=(((cj0*x8161))+(((-1.0)*x8159*x8162))+((cj0*x8158))+((r00*x8163))+((r02*x8155)));
evalcond[5]=(((sj0*x8158))+(((-1.0)*x8157*x8162))+((r10*x8163))+((sj0*x8161))+((r12*x8155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8166=((1.0)*gconst145);
CheckValue<IkReal> x8167=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r01))+(((-1.0)*r00*x8166)))),-1);
if(!x8167.valid){
continue;
}
CheckValue<IkReal> x8168 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst146*r20))+(((-1.0)*cj0*r21*x8166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8167.value)))+(x8168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8169=IKsin(j4);
IkReal x8170=IKcos(j4);
IkReal x8171=(gconst145*r11);
IkReal x8172=(cj2*sj1);
IkReal x8173=(gconst145*r01);
IkReal x8174=(gconst145*r21);
IkReal x8175=(cj1*sj2);
IkReal x8176=((1.0)*x8170);
IkReal x8177=(gconst146*x8170);
IkReal x8178=(gconst146*x8169);
IkReal x8179=((1.0)*x8169);
evalcond[0]=(((r20*x8178))+(((-1.0)*r22*x8176))+(((-1.0)*x8174*x8179)));
evalcond[1]=(sj0+(((-1.0)*r02*x8176))+((r00*x8178))+(((-1.0)*x8173*x8179)));
evalcond[2]=((((-1.0)*r12*x8176))+(((-1.0)*x8171*x8179))+((r10*x8178))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8169))+((r20*x8177))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8174*x8176)));
evalcond[4]=(((r02*x8169))+((cj0*x8172))+((cj0*x8175))+((r00*x8177))+(((-1.0)*x8173*x8176)));
evalcond[5]=(((sj0*x8172))+((sj0*x8175))+((r12*x8169))+(((-1.0)*x8171*x8176))+((r10*x8177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8180=((-1.0)*r11);
IkReal x8182 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8182)==0){
continue;
}
IkReal x8181=pow(x8182,-0.5);
CheckValue<IkReal> x8183 = IKatan2WithCheck(IkReal(x8180),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8183.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8183.value))));
IkReal gconst148=(x8180*x8181);
IkReal gconst149=((1.0)*r10*x8181);
CheckValue<IkReal> x8184 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8184.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8184.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8185=((-1.0)*r11);
CheckValue<IkReal> x8188 = IKatan2WithCheck(IkReal(x8185),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8188.valid){
continue;
}
IkReal x8186=((1.0)*(x8188.value));
IkReal x8187=x8181;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8186)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8186)));
IkReal gconst148=(x8185*x8187);
IkReal gconst149=((1.0)*r10*x8187);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8189=((-1.0)*r11);
CheckValue<IkReal> x8192 = IKatan2WithCheck(IkReal(x8189),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8192.valid){
continue;
}
IkReal x8190=((1.0)*(x8192.value));
IkReal x8191=x8181;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8190)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8190)));
IkReal gconst148=(x8189*x8191);
IkReal gconst149=((1.0)*r10*x8191);
IkReal x8193=r12*r12;
IkReal x8194=(cj0*r02);
IkReal x8195=x8181;
IkReal x8196=(sj0*x8195);
j4eval[0]=((IKabs((((r12*sj0))+x8194)))+(IKabs(((((-1.0)*x8196))+((x8193*x8196))+((r12*x8194*x8195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8197=((-1.0)*r11);
CheckValue<IkReal> x8200 = IKatan2WithCheck(IkReal(x8197),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8200.valid){
continue;
}
IkReal x8198=((1.0)*(x8200.value));
IkReal x8199=x8181;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8198)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8198)));
IkReal gconst148=(x8197*x8199);
IkReal gconst149=((1.0)*r10*x8199);
IkReal x8201=r12*r12;
IkReal x8202=(sj1*sj2);
IkReal x8203=((1.0)+(((-1.0)*x8201)));
IkReal x8204=((1.0)*cj1*cj2);
CheckValue<IkReal> x8211=IKPowWithIntegerCheck(x8203,-1);
if(!x8211.valid){
continue;
}
IkReal x8205=x8211.value;
CheckValue<IkReal> x8212=IKPowWithIntegerCheck(((-1.0)+x8201),-1);
if(!x8212.valid){
continue;
}
IkReal x8206=x8212.value;
IkReal x8207=((1.0)*x8205);
if((x8203) < -0.00001)
continue;
IkReal x8208=IKsqrt(x8203);
IkReal x8209=(r12*r22*x8206*x8208);
IkReal x8210=((((-1.0)*x8207*(r11*r11)*(r21*r21)))+(((-1.0)*x8207*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x8205)));
j4eval[0]=x8210;
j4eval[1]=IKsign(x8210);
j4eval[2]=((IKabs(((((-1.0)*x8204*x8209))+((x8202*x8209)))))+(IKabs((((r22*x8202))+(((-1.0)*r22*x8204))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8213=(gconst149*r20);
IkReal x8214=(sj1*sj2);
IkReal x8215=(gconst148*r21);
IkReal x8216=(cj1*cj2);
CheckValue<IkReal> x8217 = IKatan2WithCheck(IkReal((((r22*x8214))+(((-1.0)*r22*x8216)))),IkReal(((((-1.0)*x8213*x8216))+(((-1.0)*x8214*x8215))+((x8215*x8216))+((x8213*x8214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8217.valid){
continue;
}
CheckValue<IkReal> x8218=IKPowWithIntegerCheck(IKsign(((((2.0)*x8213*x8215))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8213*x8213)))+(((-1.0)*(x8215*x8215))))),-1);
if(!x8218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8217.value)+(((1.5707963267949)*(x8218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8219=IKsin(j4);
IkReal x8220=IKcos(j4);
IkReal x8221=(gconst148*r11);
IkReal x8222=(gconst148*r21);
IkReal x8223=(cj2*sj1);
IkReal x8224=(gconst148*r01);
IkReal x8225=(cj1*sj2);
IkReal x8226=((1.0)*x8220);
IkReal x8227=(gconst149*x8220);
IkReal x8228=(gconst149*x8219);
IkReal x8229=((1.0)*x8219);
evalcond[0]=(((r20*x8228))+(((-1.0)*r22*x8226))+(((-1.0)*x8222*x8229)));
evalcond[1]=(sj0+(((-1.0)*r02*x8226))+(((-1.0)*x8224*x8229))+((r00*x8228)));
evalcond[2]=((((-1.0)*x8221*x8229))+(((-1.0)*r12*x8226))+((r10*x8228))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x8227))+((r22*x8219))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8222*x8226)));
evalcond[4]=(((cj0*x8225))+((cj0*x8223))+(((-1.0)*x8224*x8226))+((r00*x8227))+((r02*x8219)));
evalcond[5]=(((r12*x8219))+(((-1.0)*x8221*x8226))+((r10*x8227))+((sj0*x8225))+((sj0*x8223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8230=((1.0)*gconst148);
CheckValue<IkReal> x8231 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*r11*sj0*x8230))+(((-1.0)*cj0*r01*x8230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8231.valid){
continue;
}
CheckValue<IkReal> x8232=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x8232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8231.value)+(((1.5707963267949)*(x8232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8233=IKsin(j4);
IkReal x8234=IKcos(j4);
IkReal x8235=(gconst148*r11);
IkReal x8236=(gconst148*r21);
IkReal x8237=(cj2*sj1);
IkReal x8238=(gconst148*r01);
IkReal x8239=(cj1*sj2);
IkReal x8240=((1.0)*x8234);
IkReal x8241=(gconst149*x8234);
IkReal x8242=(gconst149*x8233);
IkReal x8243=((1.0)*x8233);
evalcond[0]=(((r20*x8242))+(((-1.0)*r22*x8240))+(((-1.0)*x8236*x8243)));
evalcond[1]=(sj0+(((-1.0)*x8238*x8243))+(((-1.0)*r02*x8240))+((r00*x8242)));
evalcond[2]=(((r10*x8242))+(((-1.0)*r12*x8240))+(((-1.0)*cj0))+(((-1.0)*x8235*x8243)));
evalcond[3]=(((r20*x8241))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8233))+(((-1.0)*x8236*x8240)));
evalcond[4]=(((r02*x8233))+((cj0*x8239))+((cj0*x8237))+(((-1.0)*x8238*x8240))+((r00*x8241)));
evalcond[5]=(((r12*x8233))+((r10*x8241))+((sj0*x8237))+((sj0*x8239))+(((-1.0)*x8235*x8240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8244=((1.0)*gconst148);
CheckValue<IkReal> x8245 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst149*r20))+(((-1.0)*cj0*r21*x8244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8245.valid){
continue;
}
CheckValue<IkReal> x8246=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8244))+(((-1.0)*gconst149*r01)))),-1);
if(!x8246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8245.value)+(((1.5707963267949)*(x8246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8247=IKsin(j4);
IkReal x8248=IKcos(j4);
IkReal x8249=(gconst148*r11);
IkReal x8250=(gconst148*r21);
IkReal x8251=(cj2*sj1);
IkReal x8252=(gconst148*r01);
IkReal x8253=(cj1*sj2);
IkReal x8254=((1.0)*x8248);
IkReal x8255=(gconst149*x8248);
IkReal x8256=(gconst149*x8247);
IkReal x8257=((1.0)*x8247);
evalcond[0]=((((-1.0)*r22*x8254))+((r20*x8256))+(((-1.0)*x8250*x8257)));
evalcond[1]=(((r00*x8256))+sj0+(((-1.0)*x8252*x8257))+(((-1.0)*r02*x8254)));
evalcond[2]=((((-1.0)*x8249*x8257))+((r10*x8256))+(((-1.0)*r12*x8254))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8255))+((r22*x8247))+(((-1.0)*x8250*x8254)));
evalcond[4]=(((r00*x8255))+((r02*x8247))+(((-1.0)*x8252*x8254))+((cj0*x8251))+((cj0*x8253)));
evalcond[5]=((((-1.0)*x8249*x8254))+((r10*x8255))+((sj0*x8251))+((sj0*x8253))+((r12*x8247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8258=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8258;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x8258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8259=((1.0)*sj5);
IkReal x8260=((((-1.0)*r00*x8259))+(((-1.0)*cj5*r01)));
j4eval[0]=x8260;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x8259))))));
j4eval[2]=IKsign(x8260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8261=cj5*cj5;
IkReal x8262=r11*r11;
IkReal x8263=(r11*sj5);
IkReal x8264=(cj5*r10);
IkReal x8265=((r12*r12)+(((-1.0)*x8261*x8262))+((x8261*(r10*r10)))+(((-2.0)*x8263*x8264))+x8262);
j4eval[0]=x8265;
j4eval[1]=IKsign(x8265);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x8263))+x8264))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8266=cj5*cj5;
IkReal x8267=r11*r11;
IkReal x8268=(cj5*r10);
IkReal x8269=(r11*sj5);
CheckValue<IkReal> x8270 = IKatan2WithCheck(IkReal(((((-1.0)*x8269))+x8268)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8270.valid){
continue;
}
CheckValue<IkReal> x8271=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8268*x8269))+(((-1.0)*x8266*x8267))+((x8266*(r10*r10)))+x8267)),-1);
if(!x8271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8270.value)+(((1.5707963267949)*(x8271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8272=IKcos(j4);
IkReal x8273=IKsin(j4);
IkReal x8274=(cj5*r10);
IkReal x8275=((1.0)*x8272);
IkReal x8276=(cj5*x8273);
IkReal x8277=(cj5*x8272);
IkReal x8278=((1.0)*sj5*x8273);
evalcond[0]=((((-1.0)*r11*sj5*x8275))+((x8272*x8274))+((r12*x8273)));
evalcond[1]=(((r20*x8276))+(((-1.0)*r21*x8278))+(((-1.0)*r22*x8275)));
evalcond[2]=((((-1.0)*r02*x8275))+((r00*x8276))+(((-1.0)*r01*x8278)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8275))+(((-1.0)*r11*x8278))+((x8273*x8274)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*sj5*x8275))+((r02*x8273))+((cj1*sj2))+((r00*x8277)));
evalcond[5]=(((r20*x8277))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8273))+(((-1.0)*r21*sj5*x8275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8279=((1.0)*sj5);
CheckValue<IkReal> x8280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8279))+(((-1.0)*cj5*r01)))),-1);
if(!x8280.valid){
continue;
}
CheckValue<IkReal> x8281 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x8279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8280.value)))+(x8281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8282=IKcos(j4);
IkReal x8283=IKsin(j4);
IkReal x8284=(cj5*r10);
IkReal x8285=((1.0)*x8282);
IkReal x8286=(cj5*x8283);
IkReal x8287=(cj5*x8282);
IkReal x8288=((1.0)*sj5*x8283);
evalcond[0]=(((x8282*x8284))+(((-1.0)*r11*sj5*x8285))+((r12*x8283)));
evalcond[1]=((((-1.0)*r21*x8288))+((r20*x8286))+(((-1.0)*r22*x8285)));
evalcond[2]=((((-1.0)*r02*x8285))+((r00*x8286))+(((-1.0)*r01*x8288)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8285))+(((-1.0)*r11*x8288))+((x8283*x8284)));
evalcond[4]=(((cj2*sj1))+((r00*x8287))+((cj1*sj2))+((r02*x8283))+(((-1.0)*r01*sj5*x8285)));
evalcond[5]=((((-1.0)*r21*sj5*x8285))+((r20*x8287))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8289=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8289.valid){
continue;
}
CheckValue<IkReal> x8290 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8289.value)))+(x8290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8291=IKcos(j4);
IkReal x8292=IKsin(j4);
IkReal x8293=(cj5*r10);
IkReal x8294=((1.0)*x8291);
IkReal x8295=(cj5*x8292);
IkReal x8296=(cj5*x8291);
IkReal x8297=((1.0)*sj5*x8292);
evalcond[0]=(((x8291*x8293))+((r12*x8292))+(((-1.0)*r11*sj5*x8294)));
evalcond[1]=((((-1.0)*r21*x8297))+((r20*x8295))+(((-1.0)*r22*x8294)));
evalcond[2]=(((r00*x8295))+(((-1.0)*r01*x8297))+(((-1.0)*r02*x8294)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x8297))+(((-1.0)*r12*x8294))+((x8292*x8293)));
evalcond[4]=(((cj2*sj1))+((r00*x8296))+((cj1*sj2))+((r02*x8292))+(((-1.0)*r01*sj5*x8294)));
evalcond[5]=((((-1.0)*r21*sj5*x8294))+((r20*x8296))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8298=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8298;
j4eval[1]=IKsign(x8298);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8299=((1.0)*sj5);
IkReal x8300=((((-1.0)*r20*x8299))+(((-1.0)*cj5*r21)));
j4eval[0]=x8300;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x8299))+((cj5*r00))))));
j4eval[2]=IKsign(x8300);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8301=(sj1*sj2);
IkReal x8302=(cj1*cj2);
IkReal x8303=(r11*sj5);
IkReal x8304=(cj5*r10);
IkReal x8305=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8305;
j4eval[1]=IKsign(x8305);
j4eval[2]=((IKabs((((r12*x8302))+(((-1.0)*r12*x8301)))))+(IKabs(((((-1.0)*x8302*x8304))+((x8302*x8303))+((x8301*x8304))+(((-1.0)*x8301*x8303))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8306=(sj1*sj2);
IkReal x8307=(cj1*cj2);
IkReal x8308=(cj5*r10);
IkReal x8309=(r11*sj5);
CheckValue<IkReal> x8310=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8310.valid){
continue;
}
CheckValue<IkReal> x8311 = IKatan2WithCheck(IkReal((((x8306*x8308))+((x8307*x8309))+(((-1.0)*x8306*x8309))+(((-1.0)*x8307*x8308)))),IkReal((((r12*x8307))+(((-1.0)*r12*x8306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8310.value)))+(x8311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8312=IKcos(j4);
IkReal x8313=IKsin(j4);
IkReal x8314=(cj5*r10);
IkReal x8315=((1.0)*cj1);
IkReal x8316=((1.0)*x8312);
IkReal x8317=(cj5*x8313);
IkReal x8318=(cj5*x8312);
IkReal x8319=((1.0)*sj5*x8313);
evalcond[0]=(((x8312*x8314))+(((-1.0)*r11*sj5*x8316))+((r12*x8313)));
evalcond[1]=((((-1.0)*r21*x8319))+((r20*x8317))+(((-1.0)*r22*x8316)));
evalcond[2]=(((r00*x8317))+(((-1.0)*r02*x8316))+(((-1.0)*r01*x8319)));
evalcond[3]=((1.0)+((x8313*x8314))+(((-1.0)*r11*x8319))+(((-1.0)*r12*x8316)));
evalcond[4]=((((-1.0)*r21*sj5*x8316))+((r20*x8318))+((sj1*sj2))+((r22*x8313))+(((-1.0)*cj2*x8315)));
evalcond[5]=(((r00*x8318))+(((-1.0)*cj2*sj1))+((r02*x8313))+(((-1.0)*r01*sj5*x8316))+(((-1.0)*sj2*x8315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8320=((1.0)*sj5);
CheckValue<IkReal> x8321 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x8320))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8321.valid){
continue;
}
CheckValue<IkReal> x8322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8320))+(((-1.0)*cj5*r21)))),-1);
if(!x8322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8321.value)+(((1.5707963267949)*(x8322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8323=IKcos(j4);
IkReal x8324=IKsin(j4);
IkReal x8325=(cj5*r10);
IkReal x8326=((1.0)*cj1);
IkReal x8327=((1.0)*x8323);
IkReal x8328=(cj5*x8324);
IkReal x8329=(cj5*x8323);
IkReal x8330=((1.0)*sj5*x8324);
evalcond[0]=(((x8323*x8325))+((r12*x8324))+(((-1.0)*r11*sj5*x8327)));
evalcond[1]=((((-1.0)*r21*x8330))+(((-1.0)*r22*x8327))+((r20*x8328)));
evalcond[2]=((((-1.0)*r01*x8330))+((r00*x8328))+(((-1.0)*r02*x8327)));
evalcond[3]=((1.0)+(((-1.0)*r11*x8330))+((x8324*x8325))+(((-1.0)*r12*x8327)));
evalcond[4]=(((r22*x8324))+((sj1*sj2))+(((-1.0)*cj2*x8326))+((r20*x8329))+(((-1.0)*r21*sj5*x8327)));
evalcond[5]=(((r02*x8324))+(((-1.0)*cj2*sj1))+((r00*x8329))+(((-1.0)*r01*sj5*x8327))+(((-1.0)*sj2*x8326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8331=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8331.valid){
continue;
}
CheckValue<IkReal> x8332 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8331.value)))+(x8332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8333=IKcos(j4);
IkReal x8334=IKsin(j4);
IkReal x8335=(cj5*r10);
IkReal x8336=((1.0)*cj1);
IkReal x8337=((1.0)*x8333);
IkReal x8338=(cj5*x8334);
IkReal x8339=(cj5*x8333);
IkReal x8340=((1.0)*sj5*x8334);
evalcond[0]=(((x8333*x8335))+((r12*x8334))+(((-1.0)*r11*sj5*x8337)));
evalcond[1]=((((-1.0)*r21*x8340))+(((-1.0)*r22*x8337))+((r20*x8338)));
evalcond[2]=(((r00*x8338))+(((-1.0)*r02*x8337))+(((-1.0)*r01*x8340)));
evalcond[3]=((1.0)+(((-1.0)*r11*x8340))+(((-1.0)*r12*x8337))+((x8334*x8335)));
evalcond[4]=(((r22*x8334))+((sj1*sj2))+(((-1.0)*r21*sj5*x8337))+((r20*x8339))+(((-1.0)*cj2*x8336)));
evalcond[5]=((((-1.0)*sj2*x8336))+(((-1.0)*cj2*sj1))+((r00*x8339))+(((-1.0)*r01*sj5*x8337))+((r02*x8334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8341=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8341);
rxp0_2=(py*r00);
rxp1_0=(r21*x8341);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8342=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8342);
rxp0_2=(py*r00);
rxp1_0=(r21*x8342);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8343=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8343);
rxp0_2=(py*r00);
rxp1_0=(r21*x8343);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8346=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x8346.valid){
continue;
}
IkReal x8344=x8346.value;
IkReal x8345=((1.0)*cj0*x8344);
cj4array[0]=((((-1.0)*cj1*sj2*x8345))+(((-1.0)*cj2*sj1*x8345)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8347=IKsin(j4);
IkReal x8348=IKcos(j4);
IkReal x8349=(cj5*r20);
IkReal x8350=((1.0)*sj5);
evalcond[0]=(r12*x8347);
evalcond[1]=((((-1.0)*r12*x8348))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x8347*x8350))+((x8347*x8349)));
evalcond[3]=(((cj5*r00*x8347))+(((-1.0)*r01*x8347*x8350)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x8348*x8350))+((x8348*x8349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8352=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8352.valid){
continue;
}
IkReal x8351=x8352.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8351))+((cj1*cj2*x8351)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8353=IKsin(j4);
IkReal x8354=IKcos(j4);
IkReal x8355=(cj5*r00);
IkReal x8356=((1.0)*r01*sj5);
evalcond[0]=(r12*x8353);
evalcond[1]=((((-1.0)*r12*x8354))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x8353))+((cj5*r20*x8353)));
evalcond[3]=(((x8353*x8355))+(((-1.0)*x8353*x8356)));
evalcond[4]=((((-1.0)*x8354*x8356))+((x8354*x8355))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8357=IKPowWithIntegerCheck(r12,-1);
if(!x8357.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8357.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8358=IKsin(j4);
IkReal x8359=IKcos(j4);
IkReal x8360=(cj5*x8359);
IkReal x8361=((1.0)*r21*sj5);
IkReal x8362=((1.0)*r01*sj5);
IkReal x8363=(cj5*x8358);
evalcond[0]=(r12*x8358);
evalcond[1]=(((r20*x8363))+(((-1.0)*x8358*x8361)));
evalcond[2]=(((r00*x8363))+(((-1.0)*x8358*x8362)));
evalcond[3]=((((-1.0)*x8359*x8361))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8360)));
evalcond[4]=((((-1.0)*x8359*x8362))+((r00*x8360))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8364=((1.0)*sj5);
CheckValue<IkReal> x8365=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8365.valid){
continue;
}
CheckValue<IkReal> x8366 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x8364))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x8364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8365.value)))+(x8366.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8367=IKsin(j4);
IkReal x8368=IKcos(j4);
IkReal x8369=(cj2*sj1);
IkReal x8370=(cj5*r10);
IkReal x8371=(cj1*sj2);
IkReal x8372=((1.0)*x8368);
IkReal x8373=(cj5*x8367);
IkReal x8374=(cj5*x8368);
IkReal x8375=((1.0)*sj5*x8367);
evalcond[0]=(((r20*x8373))+(((-1.0)*r22*x8372))+(((-1.0)*r21*x8375)));
evalcond[1]=(((r00*x8373))+sj0+(((-1.0)*r02*x8372))+(((-1.0)*r01*x8375)));
evalcond[2]=((((-1.0)*r12*x8372))+((x8367*x8370))+(((-1.0)*r11*x8375))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8367))+(((-1.0)*r21*sj5*x8372))+((r20*x8374))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r00*x8374))+((cj0*x8371))+(((-1.0)*r01*sj5*x8372))+((r02*x8367))+((cj0*x8369)));
evalcond[5]=(((sj0*x8371))+((r12*x8367))+((sj0*x8369))+((x8368*x8370))+(((-1.0)*r11*sj5*x8372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8376=((1.0)*sj5);
CheckValue<IkReal> x8377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8376))+(((-1.0)*cj5*r01)))),-1);
if(!x8377.valid){
continue;
}
CheckValue<IkReal> x8378 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x8376))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8377.value)))+(x8378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8379=IKsin(j4);
IkReal x8380=IKcos(j4);
IkReal x8381=(cj2*sj1);
IkReal x8382=(cj5*r10);
IkReal x8383=(cj1*sj2);
IkReal x8384=((1.0)*x8380);
IkReal x8385=(cj5*x8379);
IkReal x8386=(cj5*x8380);
IkReal x8387=((1.0)*sj5*x8379);
evalcond[0]=((((-1.0)*r22*x8384))+(((-1.0)*r21*x8387))+((r20*x8385)));
evalcond[1]=(sj0+(((-1.0)*r02*x8384))+((r00*x8385))+(((-1.0)*r01*x8387)));
evalcond[2]=((((-1.0)*r11*x8387))+(((-1.0)*r12*x8384))+((x8379*x8382))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x8384))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8379))+((r20*x8386)));
evalcond[4]=((((-1.0)*r01*sj5*x8384))+((r02*x8379))+((r00*x8386))+((cj0*x8381))+((cj0*x8383)));
evalcond[5]=(((sj0*x8381))+((sj0*x8383))+((x8380*x8382))+((r12*x8379))+(((-1.0)*r11*sj5*x8384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8388=((1.0)*sj5);
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x8388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
CheckValue<IkReal> x8390=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8388)))),-1);
if(!x8390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8389.value)+(((1.5707963267949)*(x8390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8391=IKsin(j4);
IkReal x8392=IKcos(j4);
IkReal x8393=(cj2*sj1);
IkReal x8394=(cj5*r10);
IkReal x8395=(cj1*sj2);
IkReal x8396=((1.0)*x8392);
IkReal x8397=(cj5*x8391);
IkReal x8398=(cj5*x8392);
IkReal x8399=((1.0)*sj5*x8391);
evalcond[0]=(((r20*x8397))+(((-1.0)*r22*x8396))+(((-1.0)*r21*x8399)));
evalcond[1]=(sj0+(((-1.0)*r02*x8396))+((r00*x8397))+(((-1.0)*r01*x8399)));
evalcond[2]=(((x8391*x8394))+(((-1.0)*r12*x8396))+(((-1.0)*r11*x8399))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x8398))+(((-1.0)*r21*sj5*x8396))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8391)));
evalcond[4]=((((-1.0)*r01*sj5*x8396))+((r02*x8391))+((r00*x8398))+((cj0*x8395))+((cj0*x8393)));
evalcond[5]=(((x8392*x8394))+((sj0*x8395))+((sj0*x8393))+(((-1.0)*r11*sj5*x8396))+((r12*x8391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8400=cj2*cj2;
IkReal x8401=cj1*cj1;
IkReal x8402=(sj1*sj2);
IkReal x8403=((712000.0)*px);
IkReal x8404=(cj5*r01);
IkReal x8405=((98256.0)*sj5);
IkReal x8406=(cj5*r11);
IkReal x8407=((24702.0)*sj5);
IkReal x8408=((850000.0)*cj1);
IkReal x8409=(cj1*cj2);
IkReal x8410=((712000.0)*py);
IkReal x8411=((117300.0)*cj1);
CheckValue<IkReal> x8412 = IKatan2WithCheck(IkReal((((py*x8408))+(((-1.0)*r10*x8405*x8409))+((r00*x8407))+(((24702.0)*x8404))+((r10*x8402*x8405))+(((98256.0)*x8402*x8406))+(((-179000.0)*px))+(((-1.0)*r10*sj5*x8411))+(((-1.0)*x8406*x8411))+((x8409*x8410))+(((-98256.0)*x8406*x8409))+(((-1.0)*x8402*x8410)))),IkReal(((((-1.0)*x8404*x8411))+((r00*x8402*x8405))+(((179000.0)*py))+(((98256.0)*x8402*x8404))+(((-24702.0)*x8406))+((px*x8408))+(((-1.0)*r00*x8405*x8409))+(((-1.0)*x8402*x8403))+(((-98256.0)*x8404*x8409))+((x8403*x8409))+(((-1.0)*r10*x8407))+(((-1.0)*r00*sj5*x8411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8412.valid){
continue;
}
CheckValue<IkReal> x8413=IKPowWithIntegerCheck(IKsign(((-538985.0)+(((1210400.0)*cj1*x8402))+(((-1210400.0)*cj2*x8401))+(((-215556.0)*x8401))+(((506944.0)*x8400))+(((1013888.0)*x8402*x8409))+(((-1013888.0)*x8400*x8401)))),-1);
if(!x8413.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8412.value)+(((1.5707963267949)*(x8413.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8414=IKcos(j0);
IkReal x8415=IKsin(j0);
IkReal x8416=((0.138)*sj5);
IkReal x8417=((0.138)*cj5);
IkReal x8418=((0.712)*cj2);
IkReal x8419=((0.712)*sj1*sj2);
IkReal x8420=(cj1*x8415);
IkReal x8421=(cj1*x8414);
evalcond[0]=(((r00*x8416))+(((-0.85)*x8421))+(((-1.0)*px))+(((0.179)*x8415))+((r01*x8417))+(((-1.0)*x8418*x8421))+((x8414*x8419)));
evalcond[1]=(((r11*x8417))+(((-0.85)*x8420))+(((-1.0)*py))+((r10*x8416))+(((-1.0)*x8418*x8420))+((x8415*x8419))+(((-0.179)*x8414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8422=((1.0)*sj5);
IkReal x8423=((((-1.0)*cj5*r11))+(((-1.0)*r10*x8422)));
j4eval[0]=x8423;
j4eval[1]=IKsign(x8423);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x8422))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8424=((1.0)*sj5);
IkReal x8425=((((-1.0)*r00*x8424))+(((-1.0)*cj5*r01)));
j4eval[0]=x8425;
j4eval[1]=IKsign(x8425);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x8424))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8426=((1.0)*sj5);
IkReal x8427=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8427;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x8426))+(((-1.0)*cj0*r01*x8426))))));
j4eval[2]=IKsign(x8427);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8429 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8429)==0){
continue;
}
IkReal x8428=pow(x8429,-0.5);
CheckValue<IkReal> x8430 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8430.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8430.value));
IkReal gconst1=((-1.0)*r21*x8428);
IkReal gconst2=(r20*x8428);
CheckValue<IkReal> x8431 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8431.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8431.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8434 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8434.valid){
continue;
}
IkReal x8432=((-1.0)*(x8434.value));
IkReal x8433=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8432;
IkReal gconst0=x8432;
IkReal gconst1=((-1.0)*r21*x8433);
IkReal gconst2=(r20*x8433);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8437 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8437.valid){
continue;
}
IkReal x8435=((-1.0)*(x8437.value));
IkReal x8436=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8435;
IkReal gconst0=x8435;
IkReal gconst1=((-1.0)*r21*x8436);
IkReal gconst2=(r20*x8436);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8440 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8440.valid){
continue;
}
IkReal x8438=((-1.0)*(x8440.value));
IkReal x8439=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8438;
IkReal gconst0=x8438;
IkReal gconst1=((-1.0)*r21*x8439);
IkReal gconst2=(r20*x8439);
IkReal x8441=r22*r22;
CheckValue<IkReal> x8445=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8441))),-1);
if(!x8445.valid){
continue;
}
IkReal x8442=x8445.value;
IkReal x8443=(cj3*x8442);
IkReal x8444=((((2.0)*x8443*(r20*r20)*(r21*r21)))+((cj3*x8441))+((x8443*(r21*r21*r21*r21)))+((x8443*(r20*r20*r20*r20))));
j4eval[0]=x8444;
j4eval[1]=IKsign(x8444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8448 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8448.valid){
continue;
}
IkReal x8446=((-1.0)*(x8448.value));
IkReal x8447=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8446;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8446;
IkReal gconst1=((-1.0)*r21*x8447);
IkReal gconst2=(r20*x8447);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8451 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8451.valid){
continue;
}
IkReal x8449=((-1.0)*(x8451.value));
IkReal x8450=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8449;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8449;
IkReal gconst1=((-1.0)*r21*x8450);
IkReal gconst2=(r20*x8450);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8454 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8454.valid){
continue;
}
IkReal x8452=((-1.0)*(x8454.value));
IkReal x8453=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8452;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8452;
IkReal gconst1=((-1.0)*r21*x8453);
IkReal gconst2=(r20*x8453);
IkReal x8455=r22*r22;
CheckValue<IkReal> x8458=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8455))),-1);
if(!x8458.valid){
continue;
}
IkReal x8456=x8458.value;
IkReal x8457=((((2.0)*x8456*(r20*r20)*(r21*r21)))+x8455+((x8456*(r21*r21*r21*r21)))+((x8456*(r20*r20*r20*r20))));
j4eval[0]=x8457;
j4eval[1]=IKsign(x8457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8461 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8461.valid){
continue;
}
IkReal x8459=((-1.0)*(x8461.value));
IkReal x8460=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8459;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8459;
IkReal gconst1=((-1.0)*r21*x8460);
IkReal gconst2=(r20*x8460);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8464 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8464.valid){
continue;
}
IkReal x8462=((-1.0)*(x8464.value));
IkReal x8463=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8462;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8462;
IkReal gconst1=((-1.0)*r21*x8463);
IkReal gconst2=(r20*x8463);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8467 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8467.valid){
continue;
}
IkReal x8465=((-1.0)*(x8467.value));
IkReal x8466=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8465;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8465;
IkReal gconst1=((-1.0)*r21*x8466);
IkReal gconst2=(r20*x8466);
IkReal x8468=r22*r22;
IkReal x8469=(cj1*r12*sj2);
IkReal x8470=(cj2*r12*sj1);
CheckValue<IkReal> x8474=IKPowWithIntegerCheck(((-1.0)+x8468),-1);
if(!x8474.valid){
continue;
}
IkReal x8471=x8474.value;
if((((1.0)+(((-1.0)*x8468)))) < -0.00001)
continue;
IkReal x8472=IKsqrt(((1.0)+(((-1.0)*x8468))));
IkReal x8473=(r22*x8471*x8472);
j4eval[0]=((IKabs((((x8469*x8473))+((x8470*x8473)))))+(IKabs((x8469+x8470))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8475=(cj2*sj1);
IkReal x8476=(gconst2*r10);
IkReal x8477=(cj1*sj2);
IkReal x8478=((1.0)*gconst1*r11);
CheckValue<IkReal> x8479 = IKatan2WithCheck(IkReal((((r12*x8475))+((r12*x8477)))),IkReal((((x8475*x8476))+((x8476*x8477))+(((-1.0)*x8477*x8478))+(((-1.0)*x8475*x8478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8479.valid){
continue;
}
CheckValue<IkReal> x8480=IKPowWithIntegerCheck(IKsign(((((gconst1*gconst1)*(r11*r11)))+(r12*r12)+(x8476*x8476)+(((-2.0)*gconst1*r11*x8476)))),-1);
if(!x8480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8479.value)+(((1.5707963267949)*(x8480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8481=IKsin(j4);
IkReal x8482=IKcos(j4);
IkReal x8483=(gconst1*r01);
IkReal x8484=(gconst1*r21);
IkReal x8485=(gconst1*r11);
IkReal x8486=((1.0)*x8482);
IkReal x8487=((1.0)*x8481);
IkReal x8488=(gconst2*x8481);
evalcond[0]=((((-1.0)*x8484*x8487))+(((-1.0)*r22*x8486))+((r20*x8488)));
evalcond[1]=(((r10*x8488))+(((-1.0)*x8485*x8487))+(((-1.0)*r12*x8486)));
evalcond[2]=((((-1.0)*r02*x8487))+(((-1.0)*gconst2*r00*x8486))+((x8482*x8483)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8486))+(((-1.0)*x8483*x8487))+((r00*x8488)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r10*x8486))+((x8482*x8485))+(((-1.0)*r12*x8487)));
evalcond[5]=((((-1.0)*gconst2*r20*x8486))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8482*x8484))+(((-1.0)*r22*x8487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8489=(gconst1*r01);
IkReal x8490=(gconst2*r00);
CheckValue<IkReal> x8491 = IKatan2WithCheck(IkReal((x8489+(((-1.0)*x8490)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8491.valid){
continue;
}
CheckValue<IkReal> x8492=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8489*x8490))+(x8489*x8489)+(r02*r02)+(x8490*x8490))),-1);
if(!x8492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8491.value)+(((1.5707963267949)*(x8492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8493=IKsin(j4);
IkReal x8494=IKcos(j4);
IkReal x8495=(gconst1*r01);
IkReal x8496=(gconst1*r21);
IkReal x8497=(gconst1*r11);
IkReal x8498=((1.0)*x8494);
IkReal x8499=((1.0)*x8493);
IkReal x8500=(gconst2*x8493);
evalcond[0]=((((-1.0)*r22*x8498))+(((-1.0)*x8496*x8499))+((r20*x8500)));
evalcond[1]=(((r10*x8500))+(((-1.0)*x8497*x8499))+(((-1.0)*r12*x8498)));
evalcond[2]=((((-1.0)*r02*x8499))+(((-1.0)*gconst2*r00*x8498))+((x8494*x8495)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8498))+(((-1.0)*x8495*x8499))+((r00*x8500)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r10*x8498))+((cj1*sj2))+((x8494*x8497))+(((-1.0)*r12*x8499)));
evalcond[5]=((((-1.0)*gconst2*r20*x8498))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8499))+((x8494*x8496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8501=((1.0)*gconst1);
CheckValue<IkReal> x8502=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8501)))),-1);
if(!x8502.valid){
continue;
}
CheckValue<IkReal> x8503 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8501))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8502.value)))+(x8503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8504=IKsin(j4);
IkReal x8505=IKcos(j4);
IkReal x8506=(gconst1*r01);
IkReal x8507=(gconst1*r21);
IkReal x8508=(gconst1*r11);
IkReal x8509=((1.0)*x8505);
IkReal x8510=((1.0)*x8504);
IkReal x8511=(gconst2*x8504);
evalcond[0]=((((-1.0)*r22*x8509))+(((-1.0)*x8507*x8510))+((r20*x8511)));
evalcond[1]=((((-1.0)*x8508*x8510))+(((-1.0)*r12*x8509))+((r10*x8511)));
evalcond[2]=((((-1.0)*gconst2*r00*x8509))+((x8505*x8506))+(((-1.0)*r02*x8510)));
evalcond[3]=((1.0)+(((-1.0)*x8506*x8510))+(((-1.0)*r02*x8509))+((r00*x8511)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8505*x8508))+(((-1.0)*r12*x8510))+(((-1.0)*gconst2*r10*x8509)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8509))+((x8505*x8507))+(((-1.0)*r22*x8510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8514 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8514.valid){
continue;
}
IkReal x8512=((-1.0)*(x8514.value));
IkReal x8513=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8512;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8512;
IkReal gconst1=((-1.0)*r21*x8513);
IkReal gconst2=(r20*x8513);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8517 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8517.valid){
continue;
}
IkReal x8515=((-1.0)*(x8517.value));
IkReal x8516=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8515;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8515;
IkReal gconst1=((-1.0)*r21*x8516);
IkReal gconst2=(r20*x8516);
IkReal x8518=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8522=IKPowWithIntegerCheck(x8518,-1);
if(!x8522.valid){
continue;
}
IkReal x8519=x8522.value;
IkReal x8520=((1.0)*x8519);
IkReal x8521=((((-1.0)*x8520*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8520*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8519)));
j4eval[0]=x8521;
j4eval[1]=IKsign(x8521);
j4eval[2]=r02;
j4eval[3]=x8518;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8525 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8525.valid){
continue;
}
IkReal x8523=((-1.0)*(x8525.value));
IkReal x8524=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8523;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8523;
IkReal gconst1=((-1.0)*r21*x8524);
IkReal gconst2=(r20*x8524);
IkReal x8526=r22*r22;
IkReal x8527=(r02*sj1*sj2);
IkReal x8528=(cj1*cj2*r02);
CheckValue<IkReal> x8532=IKPowWithIntegerCheck(((-1.0)+x8526),-1);
if(!x8532.valid){
continue;
}
IkReal x8529=x8532.value;
if((((1.0)+(((-1.0)*x8526)))) < -0.00001)
continue;
IkReal x8530=IKsqrt(((1.0)+(((-1.0)*x8526))));
IkReal x8531=(r22*x8529*x8530);
j4eval[0]=((IKabs((((x8528*x8531))+(((-1.0)*x8527*x8531)))))+(IKabs((x8527+(((-1.0)*x8528))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8533=(sj1*sj2);
IkReal x8534=(gconst2*r00);
IkReal x8535=(gconst1*r01);
IkReal x8536=(cj1*cj2);
CheckValue<IkReal> x8537 = IKatan2WithCheck(IkReal((((x8534*x8536))+(((-1.0)*x8533*x8534))+((x8533*x8535))+(((-1.0)*x8535*x8536)))),IkReal(((((-1.0)*r02*x8536))+((r02*x8533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8537.valid){
continue;
}
CheckValue<IkReal> x8538=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8537.value)+(((1.5707963267949)*(x8538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8539=IKsin(j4);
IkReal x8540=IKcos(j4);
IkReal x8541=(gconst1*r01);
IkReal x8542=(gconst1*r21);
IkReal x8543=((1.0)*cj2);
IkReal x8544=(gconst1*r11);
IkReal x8545=((1.0)*x8540);
IkReal x8546=((1.0)*x8539);
IkReal x8547=(gconst2*x8539);
evalcond[0]=((((-1.0)*x8542*x8546))+(((-1.0)*r22*x8545))+((r20*x8547)));
evalcond[1]=(((r10*x8547))+(((-1.0)*r12*x8545))+(((-1.0)*x8544*x8546)));
evalcond[2]=((((-1.0)*r02*x8546))+((x8540*x8541))+(((-1.0)*gconst2*r00*x8545)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8545))+((r00*x8547))+(((-1.0)*x8541*x8546)));
evalcond[4]=(((x8540*x8542))+(((-1.0)*gconst2*r20*x8545))+(((-1.0)*r22*x8546))+((sj1*sj2))+(((-1.0)*cj1*x8543)));
evalcond[5]=((((-1.0)*gconst2*r10*x8545))+((x8540*x8544))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x8546))+(((-1.0)*sj1*x8543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8548=(gconst1*r01);
IkReal x8549=(gconst2*r00);
CheckValue<IkReal> x8550 = IKatan2WithCheck(IkReal((x8548+(((-1.0)*x8549)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8550.valid){
continue;
}
CheckValue<IkReal> x8551=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8549*x8549)))+(((-1.0)*(r02*r02)))+(((2.0)*x8548*x8549))+(((-1.0)*(x8548*x8548))))),-1);
if(!x8551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8550.value)+(((1.5707963267949)*(x8551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8552=IKsin(j4);
IkReal x8553=IKcos(j4);
IkReal x8554=(gconst1*r01);
IkReal x8555=(gconst1*r21);
IkReal x8556=((1.0)*cj2);
IkReal x8557=(gconst1*r11);
IkReal x8558=((1.0)*x8553);
IkReal x8559=((1.0)*x8552);
IkReal x8560=(gconst2*x8552);
evalcond[0]=((((-1.0)*r22*x8558))+((r20*x8560))+(((-1.0)*x8555*x8559)));
evalcond[1]=((((-1.0)*r12*x8558))+((r10*x8560))+(((-1.0)*x8557*x8559)));
evalcond[2]=((((-1.0)*gconst2*r00*x8558))+((x8553*x8554))+(((-1.0)*r02*x8559)));
evalcond[3]=((-1.0)+((r00*x8560))+(((-1.0)*x8554*x8559))+(((-1.0)*r02*x8558)));
evalcond[4]=((((-1.0)*r22*x8559))+(((-1.0)*gconst2*r20*x8558))+((sj1*sj2))+(((-1.0)*cj1*x8556))+((x8553*x8555)));
evalcond[5]=((((-1.0)*r12*x8559))+(((-1.0)*gconst2*r10*x8558))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8556))+((x8553*x8557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8561 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8561.valid){
continue;
}
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8561.value)+(((1.5707963267949)*(x8562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8563=IKsin(j4);
IkReal x8564=IKcos(j4);
IkReal x8565=(gconst1*r01);
IkReal x8566=(gconst1*r21);
IkReal x8567=((1.0)*cj2);
IkReal x8568=(gconst1*r11);
IkReal x8569=((1.0)*x8564);
IkReal x8570=((1.0)*x8563);
IkReal x8571=(gconst2*x8563);
evalcond[0]=((((-1.0)*r22*x8569))+(((-1.0)*x8566*x8570))+((r20*x8571)));
evalcond[1]=((((-1.0)*r12*x8569))+(((-1.0)*x8568*x8570))+((r10*x8571)));
evalcond[2]=((((-1.0)*gconst2*r00*x8569))+(((-1.0)*r02*x8570))+((x8564*x8565)));
evalcond[3]=((-1.0)+((r00*x8571))+(((-1.0)*x8565*x8570))+(((-1.0)*r02*x8569)));
evalcond[4]=((((-1.0)*gconst2*r20*x8569))+((sj1*sj2))+((x8564*x8566))+(((-1.0)*cj1*x8567))+(((-1.0)*r22*x8570)));
evalcond[5]=((((-1.0)*gconst2*r10*x8569))+(((-1.0)*cj1*sj2))+((x8564*x8568))+(((-1.0)*r12*x8570))+(((-1.0)*sj1*x8567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8574 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8574.valid){
continue;
}
IkReal x8572=((-1.0)*(x8574.value));
IkReal x8573=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8572;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8572;
IkReal gconst1=((-1.0)*r21*x8573);
IkReal gconst2=(r20*x8573);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8577 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8577.valid){
continue;
}
IkReal x8575=((-1.0)*(x8577.value));
IkReal x8576=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8575;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8575;
IkReal gconst1=((-1.0)*r21*x8576);
IkReal gconst2=(r20*x8576);
IkReal x8578=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8582=IKPowWithIntegerCheck(x8578,-1);
if(!x8582.valid){
continue;
}
IkReal x8579=x8582.value;
IkReal x8580=((1.0)*x8579);
IkReal x8581=((((-1.0)*x8580*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8579))+(((-1.0)*(r12*r12)))+(((-1.0)*x8580*(r11*r11)*(r21*r21))));
j4eval[0]=x8581;
j4eval[1]=r12;
j4eval[2]=x8578;
j4eval[3]=IKsign(x8581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8585 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8585.valid){
continue;
}
IkReal x8583=((-1.0)*(x8585.value));
IkReal x8584=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8583;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8583;
IkReal gconst1=((-1.0)*r21*x8584);
IkReal gconst2=(r20*x8584);
IkReal x8586=r22*r22;
IkReal x8587=(cj1*r02*sj2);
IkReal x8588=(cj2*r02*sj1);
CheckValue<IkReal> x8592=IKPowWithIntegerCheck(((-1.0)+x8586),-1);
if(!x8592.valid){
continue;
}
IkReal x8589=x8592.value;
if((((1.0)+(((-1.0)*x8586)))) < -0.00001)
continue;
IkReal x8590=IKsqrt(((1.0)+(((-1.0)*x8586))));
IkReal x8591=(r22*x8589*x8590);
j4eval[0]=((IKabs((((x8587*x8591))+((x8588*x8591)))))+(IKabs((x8588+x8587))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8593=(gconst1*r01);
IkReal x8594=(cj2*sj1);
IkReal x8595=(gconst2*r00);
IkReal x8596=(cj1*sj2);
CheckValue<IkReal> x8597 = IKatan2WithCheck(IkReal((((r02*x8596))+((r02*x8594)))),IkReal((((x8595*x8596))+(((-1.0)*x8593*x8594))+(((-1.0)*x8593*x8596))+((x8594*x8595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8597.valid){
continue;
}
CheckValue<IkReal> x8598=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8593*x8595))+(x8595*x8595)+(x8593*x8593)+(r02*r02))),-1);
if(!x8598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8597.value)+(((1.5707963267949)*(x8598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8599=IKsin(j4);
IkReal x8600=IKcos(j4);
IkReal x8601=(gconst1*r01);
IkReal x8602=(gconst1*r21);
IkReal x8603=(gconst1*r11);
IkReal x8604=((1.0)*x8600);
IkReal x8605=((1.0)*x8599);
IkReal x8606=(gconst2*x8599);
evalcond[0]=(((r20*x8606))+(((-1.0)*x8602*x8605))+(((-1.0)*r22*x8604)));
evalcond[1]=((((-1.0)*x8601*x8605))+(((-1.0)*r02*x8604))+((r00*x8606)));
evalcond[2]=((((-1.0)*r12*x8605))+(((-1.0)*gconst2*r10*x8604))+((x8600*x8603)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8604))+((r10*x8606))+(((-1.0)*x8603*x8605)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x8605))+((cj1*sj2))+(((-1.0)*gconst2*r00*x8604))+((x8600*x8601)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8605))+(((-1.0)*gconst2*r20*x8604))+((x8600*x8602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8607=(gconst1*r11);
IkReal x8608=(gconst2*r10);
CheckValue<IkReal> x8609 = IKatan2WithCheck(IkReal((x8607+(((-1.0)*x8608)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8609.valid){
continue;
}
CheckValue<IkReal> x8610=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8607*x8607)))+(((2.0)*x8607*x8608))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8608*x8608))))),-1);
if(!x8610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8609.value)+(((1.5707963267949)*(x8610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8611=IKsin(j4);
IkReal x8612=IKcos(j4);
IkReal x8613=(gconst1*r01);
IkReal x8614=(gconst1*r21);
IkReal x8615=(gconst1*r11);
IkReal x8616=((1.0)*x8612);
IkReal x8617=((1.0)*x8611);
IkReal x8618=(gconst2*x8611);
evalcond[0]=((((-1.0)*x8614*x8617))+((r20*x8618))+(((-1.0)*r22*x8616)));
evalcond[1]=((((-1.0)*r02*x8616))+((r00*x8618))+(((-1.0)*x8613*x8617)));
evalcond[2]=((((-1.0)*gconst2*r10*x8616))+(((-1.0)*r12*x8617))+((x8612*x8615)));
evalcond[3]=((-1.0)+((r10*x8618))+(((-1.0)*r12*x8616))+(((-1.0)*x8615*x8617)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x8617))+((cj1*sj2))+(((-1.0)*gconst2*r00*x8616))+((x8612*x8613)));
evalcond[5]=((((-1.0)*r22*x8617))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8612*x8614))+(((-1.0)*gconst2*r20*x8616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8619=((1.0)*gconst1);
CheckValue<IkReal> x8620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8619))+(((-1.0)*gconst2*r01)))),-1);
if(!x8620.valid){
continue;
}
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8619))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8620.value)))+(x8621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8622=IKsin(j4);
IkReal x8623=IKcos(j4);
IkReal x8624=(gconst1*r01);
IkReal x8625=(gconst1*r21);
IkReal x8626=(gconst1*r11);
IkReal x8627=((1.0)*x8623);
IkReal x8628=((1.0)*x8622);
IkReal x8629=(gconst2*x8622);
evalcond[0]=((((-1.0)*x8625*x8628))+((r20*x8629))+(((-1.0)*r22*x8627)));
evalcond[1]=((((-1.0)*x8624*x8628))+((r00*x8629))+(((-1.0)*r02*x8627)));
evalcond[2]=((((-1.0)*r12*x8628))+((x8623*x8626))+(((-1.0)*gconst2*r10*x8627)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8627))+(((-1.0)*x8626*x8628))+((r10*x8629)));
evalcond[4]=(((cj2*sj1))+((x8623*x8624))+((cj1*sj2))+(((-1.0)*gconst2*r00*x8627))+(((-1.0)*r02*x8628)));
evalcond[5]=(((x8623*x8625))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8628))+(((-1.0)*gconst2*r20*x8627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8632 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8632.valid){
continue;
}
IkReal x8630=((-1.0)*(x8632.value));
IkReal x8631=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8630;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8630;
IkReal gconst1=((-1.0)*r21*x8631);
IkReal gconst2=(r20*x8631);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8635 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8635.valid){
continue;
}
IkReal x8633=((-1.0)*(x8635.value));
IkReal x8634=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8633;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8633;
IkReal gconst1=((-1.0)*r21*x8634);
IkReal gconst2=(r20*x8634);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
IkReal x8636=((-1.0)*(x8638.value));
IkReal x8637=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8636;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8636;
IkReal gconst1=((-1.0)*r21*x8637);
IkReal gconst2=(r20*x8637);
IkReal x8639=r22*r22;
IkReal x8640=(r12*sj1*sj2);
IkReal x8641=(cj1*cj2*r12);
CheckValue<IkReal> x8645=IKPowWithIntegerCheck(((-1.0)+x8639),-1);
if(!x8645.valid){
continue;
}
IkReal x8642=x8645.value;
if((((1.0)+(((-1.0)*x8639)))) < -0.00001)
continue;
IkReal x8643=IKsqrt(((1.0)+(((-1.0)*x8639))));
IkReal x8644=(r22*x8642*x8643);
j4eval[0]=((IKabs(((((-1.0)*x8640*x8644))+((x8641*x8644)))))+(IKabs((x8640+(((-1.0)*x8641))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8646=(sj1*sj2);
IkReal x8647=(gconst1*r11);
IkReal x8648=(gconst2*r10);
IkReal x8649=((1.0)*cj1*cj2);
CheckValue<IkReal> x8650 = IKatan2WithCheck(IkReal((((cj1*cj2*x8648))+((x8646*x8647))+(((-1.0)*x8646*x8648))+(((-1.0)*x8647*x8649)))),IkReal((((r12*x8646))+(((-1.0)*r12*x8649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8650.valid){
continue;
}
CheckValue<IkReal> x8651=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8650.value)+(((1.5707963267949)*(x8651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8652=IKsin(j4);
IkReal x8653=IKcos(j4);
IkReal x8654=(gconst1*r01);
IkReal x8655=(gconst1*r21);
IkReal x8656=((1.0)*cj2);
IkReal x8657=(gconst1*r11);
IkReal x8658=((1.0)*x8653);
IkReal x8659=((1.0)*x8652);
IkReal x8660=(gconst2*x8652);
evalcond[0]=(((r20*x8660))+(((-1.0)*x8655*x8659))+(((-1.0)*r22*x8658)));
evalcond[1]=((((-1.0)*x8654*x8659))+((r00*x8660))+(((-1.0)*r02*x8658)));
evalcond[2]=((((-1.0)*r12*x8659))+((x8653*x8657))+(((-1.0)*gconst2*r10*x8658)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8658))+(((-1.0)*x8657*x8659))+((r10*x8660)));
evalcond[4]=((((-1.0)*gconst2*r20*x8658))+(((-1.0)*cj1*x8656))+((sj1*sj2))+((x8653*x8655))+(((-1.0)*r22*x8659)));
evalcond[5]=((((-1.0)*sj1*x8656))+(((-1.0)*cj1*sj2))+((x8653*x8654))+(((-1.0)*gconst2*r00*x8658))+(((-1.0)*r02*x8659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8661=(gconst2*r10);
IkReal x8662=(gconst1*r11);
CheckValue<IkReal> x8663 = IKatan2WithCheck(IkReal((x8662+(((-1.0)*x8661)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8663.valid){
continue;
}
CheckValue<IkReal> x8664=IKPowWithIntegerCheck(IKsign(((x8661*x8661)+(r12*r12)+(((-2.0)*x8661*x8662))+(x8662*x8662))),-1);
if(!x8664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8663.value)+(((1.5707963267949)*(x8664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8665=IKsin(j4);
IkReal x8666=IKcos(j4);
IkReal x8667=(gconst1*r01);
IkReal x8668=(gconst1*r21);
IkReal x8669=((1.0)*cj2);
IkReal x8670=(gconst1*r11);
IkReal x8671=((1.0)*x8666);
IkReal x8672=((1.0)*x8665);
IkReal x8673=(gconst2*x8665);
evalcond[0]=(((r20*x8673))+(((-1.0)*r22*x8671))+(((-1.0)*x8668*x8672)));
evalcond[1]=((((-1.0)*r02*x8671))+((r00*x8673))+(((-1.0)*x8667*x8672)));
evalcond[2]=((((-1.0)*r12*x8672))+(((-1.0)*gconst2*r10*x8671))+((x8666*x8670)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8671))+((r10*x8673))+(((-1.0)*x8670*x8672)));
evalcond[4]=((((-1.0)*r22*x8672))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8671))+(((-1.0)*cj1*x8669))+((x8666*x8668)));
evalcond[5]=((((-1.0)*sj1*x8669))+(((-1.0)*r02*x8672))+(((-1.0)*gconst2*r00*x8671))+(((-1.0)*cj1*sj2))+((x8666*x8667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8674 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8674.valid){
continue;
}
CheckValue<IkReal> x8675=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8674.value)+(((1.5707963267949)*(x8675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8676=IKsin(j4);
IkReal x8677=IKcos(j4);
IkReal x8678=(gconst1*r01);
IkReal x8679=(gconst1*r21);
IkReal x8680=((1.0)*cj2);
IkReal x8681=(gconst1*r11);
IkReal x8682=((1.0)*x8677);
IkReal x8683=((1.0)*x8676);
IkReal x8684=(gconst2*x8676);
evalcond[0]=(((r20*x8684))+(((-1.0)*r22*x8682))+(((-1.0)*x8679*x8683)));
evalcond[1]=((((-1.0)*x8678*x8683))+(((-1.0)*r02*x8682))+((r00*x8684)));
evalcond[2]=(((x8677*x8681))+(((-1.0)*r12*x8683))+(((-1.0)*gconst2*r10*x8682)));
evalcond[3]=((1.0)+(((-1.0)*x8681*x8683))+(((-1.0)*r12*x8682))+((r10*x8684)));
evalcond[4]=(((sj1*sj2))+((x8677*x8679))+(((-1.0)*r22*x8683))+(((-1.0)*cj1*x8680))+(((-1.0)*gconst2*r20*x8682)));
evalcond[5]=((((-1.0)*r02*x8683))+(((-1.0)*sj1*x8680))+(((-1.0)*gconst2*r00*x8682))+(((-1.0)*cj1*sj2))+((x8677*x8678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8685=((-1.0)*py);
CheckValue<IkReal> x8687 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8687.valid){
continue;
}
IkReal x8686=((-1.0)*(x8687.value));
sj5=gconst1;
cj5=gconst2;
j5=x8686;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8685);
rxp0_2=(py*r00);
rxp1_0=(r21*x8685);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8686;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8688=((-1.0)*py);
CheckValue<IkReal> x8690 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8690.valid){
continue;
}
IkReal x8689=((-1.0)*(x8690.value));
sj5=gconst1;
cj5=gconst2;
j5=x8689;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8688);
rxp0_2=(py*r00);
rxp1_0=(r21*x8688);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8689;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8691=((-1.0)*py);
CheckValue<IkReal> x8693 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8693.valid){
continue;
}
IkReal x8692=((-1.0)*(x8693.value));
sj5=gconst1;
cj5=gconst2;
j5=x8692;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8691);
rxp0_2=(py*r00);
rxp1_0=(r21*x8691);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8692;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8696=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8696.valid){
continue;
}
IkReal x8694=x8696.value;
IkReal x8695=((1.0)*cj0*x8694);
cj4array[0]=((((-1.0)*cj1*sj2*x8695))+(((-1.0)*cj2*sj1*x8695)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8697=IKsin(j4);
IkReal x8698=IKcos(j4);
IkReal x8699=(gconst2*x8697);
IkReal x8700=((1.0)*x8698);
IkReal x8701=((1.0)*gconst1*x8697);
evalcond[0]=((-1.0)*r12*x8697);
evalcond[1]=((((-1.0)*r12*x8700))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x8699))+(((-1.0)*r21*x8701)));
evalcond[3]=(((r00*x8699))+(((-1.0)*r01*x8701)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst1*r21*x8698))+(((-1.0)*gconst2*r20*x8700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8703=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8703.valid){
continue;
}
IkReal x8702=x8703.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8702))+((cj1*cj2*x8702)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8704=IKsin(j4);
IkReal x8705=IKcos(j4);
IkReal x8706=(gconst2*r00);
IkReal x8707=((1.0)*x8705);
IkReal x8708=((1.0)*gconst1*x8704);
evalcond[0]=((-1.0)*r12*x8704);
evalcond[1]=((((-1.0)*r12*x8707))+(((-1.0)*cj0)));
evalcond[2]=(((gconst2*r20*x8704))+(((-1.0)*r21*x8708)));
evalcond[3]=(((x8704*x8706))+(((-1.0)*r01*x8708)));
evalcond[4]=((((-1.0)*x8706*x8707))+((gconst1*r01*x8705))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8709=IKPowWithIntegerCheck(r12,-1);
if(!x8709.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8709.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8710=IKsin(j4);
IkReal x8711=IKcos(j4);
IkReal x8712=(gconst2*r00);
IkReal x8713=(gconst2*r20);
IkReal x8714=(gconst1*x8711);
IkReal x8715=((1.0)*x8711);
IkReal x8716=((1.0)*gconst1*x8710);
evalcond[0]=((-1.0)*r12*x8710);
evalcond[1]=((((-1.0)*r21*x8716))+((x8710*x8713)));
evalcond[2]=((((-1.0)*r01*x8716))+((x8710*x8712)));
evalcond[3]=((((-1.0)*x8713*x8715))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8714)));
evalcond[4]=(((r01*x8714))+((cj0*cj2*sj1))+(((-1.0)*x8712*x8715))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8717=(sj1*sj2);
IkReal x8718=(gconst2*r20);
IkReal x8719=(cj1*cj2);
IkReal x8720=(gconst1*r21);
CheckValue<IkReal> x8721 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8719))+((r22*x8717)))),IkReal(((((-1.0)*x8717*x8720))+(((-1.0)*x8718*x8719))+((x8719*x8720))+((x8717*x8718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8721.valid){
continue;
}
CheckValue<IkReal> x8722=IKPowWithIntegerCheck(IKsign(((x8718*x8718)+(((-2.0)*x8718*x8720))+(r22*r22)+(x8720*x8720))),-1);
if(!x8722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8721.value)+(((1.5707963267949)*(x8722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8723=IKsin(j4);
IkReal x8724=IKcos(j4);
IkReal x8725=(cj2*sj1);
IkReal x8726=(cj1*sj2);
IkReal x8727=((1.0)*x8724);
IkReal x8728=(gconst1*x8724);
IkReal x8729=(gconst2*x8723);
IkReal x8730=((1.0)*x8723);
IkReal x8731=(gconst1*x8730);
evalcond[0]=((((-1.0)*r21*x8731))+((r20*x8729))+(((-1.0)*r22*x8727)));
evalcond[1]=(sj0+(((-1.0)*r02*x8727))+(((-1.0)*r01*x8731))+((r00*x8729)));
evalcond[2]=(((r10*x8729))+(((-1.0)*r11*x8731))+(((-1.0)*cj0))+(((-1.0)*r12*x8727)));
evalcond[3]=(((r21*x8728))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8730))+(((-1.0)*gconst2*r20*x8727)));
evalcond[4]=(((cj0*x8725))+((cj0*x8726))+(((-1.0)*gconst2*r00*x8727))+(((-1.0)*r02*x8730))+((r01*x8728)));
evalcond[5]=(((r11*x8728))+(((-1.0)*gconst2*r10*x8727))+(((-1.0)*r12*x8730))+((sj0*x8725))+((sj0*x8726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8732=((1.0)*gconst1);
CheckValue<IkReal> x8733 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x8732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8733.valid){
continue;
}
CheckValue<IkReal> x8734=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8732)))),-1);
if(!x8734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8733.value)+(((1.5707963267949)*(x8734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8735=IKsin(j4);
IkReal x8736=IKcos(j4);
IkReal x8737=(cj2*sj1);
IkReal x8738=(cj1*sj2);
IkReal x8739=((1.0)*x8736);
IkReal x8740=(gconst1*x8736);
IkReal x8741=(gconst2*x8735);
IkReal x8742=((1.0)*x8735);
IkReal x8743=(gconst1*x8742);
evalcond[0]=(((r20*x8741))+(((-1.0)*r22*x8739))+(((-1.0)*r21*x8743)));
evalcond[1]=(sj0+((r00*x8741))+(((-1.0)*r01*x8743))+(((-1.0)*r02*x8739)));
evalcond[2]=((((-1.0)*r11*x8743))+((r10*x8741))+(((-1.0)*r12*x8739))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8742))+((r21*x8740))+(((-1.0)*gconst2*r20*x8739)));
evalcond[4]=(((r01*x8740))+((cj0*x8737))+((cj0*x8738))+(((-1.0)*gconst2*r00*x8739))+(((-1.0)*r02*x8742)));
evalcond[5]=((((-1.0)*r12*x8742))+(((-1.0)*gconst2*r10*x8739))+((r11*x8740))+((sj0*x8737))+((sj0*x8738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8744=((1.0)*gconst1);
CheckValue<IkReal> x8745=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8744))+(((-1.0)*gconst2*r11)))),-1);
if(!x8745.valid){
continue;
}
CheckValue<IkReal> x8746 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r20*sj0))+(((-1.0)*r21*sj0*x8744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8745.value)))+(x8746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8747=IKsin(j4);
IkReal x8748=IKcos(j4);
IkReal x8749=(cj2*sj1);
IkReal x8750=(cj1*sj2);
IkReal x8751=((1.0)*x8748);
IkReal x8752=(gconst1*x8748);
IkReal x8753=(gconst2*x8747);
IkReal x8754=((1.0)*x8747);
IkReal x8755=(gconst1*x8754);
evalcond[0]=((((-1.0)*r22*x8751))+(((-1.0)*r21*x8755))+((r20*x8753)));
evalcond[1]=(sj0+(((-1.0)*r02*x8751))+((r00*x8753))+(((-1.0)*r01*x8755)));
evalcond[2]=(((r10*x8753))+(((-1.0)*r12*x8751))+(((-1.0)*r11*x8755))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x8754))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8751))+((r21*x8752)));
evalcond[4]=((((-1.0)*gconst2*r00*x8751))+((cj0*x8750))+(((-1.0)*r02*x8754))+((cj0*x8749))+((r01*x8752)));
evalcond[5]=((((-1.0)*gconst2*r10*x8751))+((sj0*x8750))+((r11*x8752))+((sj0*x8749))+(((-1.0)*r12*x8754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8758 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8758.valid){
continue;
}
IkReal x8756=((-1.0)*(x8758.value));
IkReal x8757=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8756;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8756;
IkReal gconst1=((-1.0)*r21*x8757);
IkReal gconst2=(r20*x8757);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8761 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8761.valid){
continue;
}
IkReal x8759=((-1.0)*(x8761.value));
IkReal x8760=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8759;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8759;
IkReal gconst1=((-1.0)*r21*x8760);
IkReal gconst2=(r20*x8760);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
IkReal x8762=((-1.0)*(x8764.value));
IkReal x8763=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8762;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8762;
IkReal gconst1=((-1.0)*r21*x8763);
IkReal gconst2=(r20*x8763);
IkReal x8765=((1.0)*(r22*r22));
CheckValue<IkReal> x8769=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8765))),-1);
if(!x8769.valid){
continue;
}
IkReal x8766=x8769.value;
IkReal x8767=((1.0)*x8766);
IkReal x8768=((((-1.0)*x8767*(r21*r21*r21*r21)))+(((-2.0)*x8766*(r20*r20)*(r21*r21)))+(((-1.0)*x8765))+(((-1.0)*x8767*(r20*r20*r20*r20))));
j4eval[0]=x8768;
j4eval[1]=IKsign(x8768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8772 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8772.valid){
continue;
}
IkReal x8770=((-1.0)*(x8772.value));
IkReal x8771=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8770;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8770;
IkReal gconst1=((-1.0)*r21*x8771);
IkReal gconst2=(r20*x8771);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8775 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8775.valid){
continue;
}
IkReal x8773=((-1.0)*(x8775.value));
IkReal x8774=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8773;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8773;
IkReal gconst1=((-1.0)*r21*x8774);
IkReal gconst2=(r20*x8774);
IkReal x8776=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8780=IKPowWithIntegerCheck(x8776,-1);
if(!x8780.valid){
continue;
}
IkReal x8777=x8780.value;
IkReal x8778=((1.0)*x8777);
IkReal x8779=((((-1.0)*(r02*r02)))+(((-1.0)*x8778*(r01*r01)*(r21*r21)))+(((-1.0)*x8778*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8777)));
j4eval[0]=x8779;
j4eval[1]=IKsign(x8779);
j4eval[2]=r02;
j4eval[3]=x8776;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8783 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8783.valid){
continue;
}
IkReal x8781=((-1.0)*(x8783.value));
IkReal x8782=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8781;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8781;
IkReal gconst1=((-1.0)*r21*x8782);
IkReal gconst2=(r20*x8782);
IkReal x8784=r22*r22;
IkReal x8785=(r02*sj1*sj2);
IkReal x8786=(cj1*cj2*r02);
CheckValue<IkReal> x8790=IKPowWithIntegerCheck(((-1.0)+x8784),-1);
if(!x8790.valid){
continue;
}
IkReal x8787=x8790.value;
if((((1.0)+(((-1.0)*x8784)))) < -0.00001)
continue;
IkReal x8788=IKsqrt(((1.0)+(((-1.0)*x8784))));
IkReal x8789=(r22*x8787*x8788);
j4eval[0]=((IKabs((x8786+(((-1.0)*x8785)))))+(IKabs(((((-1.0)*x8786*x8789))+((x8785*x8789))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8791=(gconst1*r01);
IkReal x8792=((1.0)*gconst2);
IkReal x8793=(cj1*cj2);
IkReal x8794=((1.0)*sj1*sj2);
CheckValue<IkReal> x8795 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8792*x8793))+((gconst2*r00*sj1*sj2))+((x8791*x8793))+(((-1.0)*x8791*x8794)))),IkReal((((r02*x8793))+(((-1.0)*r02*x8794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8795.valid){
continue;
}
CheckValue<IkReal> x8796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8792))+(((-1.0)*gconst1*r10)))),-1);
if(!x8796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8795.value)+(((1.5707963267949)*(x8796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8797=IKcos(j4);
IkReal x8798=IKsin(j4);
IkReal x8799=(gconst1*r01);
IkReal x8800=(gconst1*r21);
IkReal x8801=(gconst1*r11);
IkReal x8802=((1.0)*x8797);
IkReal x8803=(gconst2*x8797);
IkReal x8804=((1.0)*x8798);
IkReal x8805=(gconst2*x8798);
evalcond[0]=(((r02*x8798))+((r00*x8803))+(((-1.0)*x8799*x8802)));
evalcond[1]=((((-1.0)*r22*x8802))+(((-1.0)*x8800*x8804))+((r20*x8805)));
evalcond[2]=((((-1.0)*r12*x8802))+((r10*x8805))+(((-1.0)*x8801*x8804)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8802))+((r00*x8805))+(((-1.0)*x8799*x8804)));
evalcond[4]=(((cj2*sj1))+((r10*x8803))+((r12*x8798))+((cj1*sj2))+(((-1.0)*x8801*x8802)));
evalcond[5]=((((-1.0)*x8800*x8802))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8798))+((r20*x8803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8806=(gconst2*r00);
IkReal x8807=(gconst1*r01);
CheckValue<IkReal> x8808 = IKatan2WithCheck(IkReal(((((-1.0)*x8807))+x8806)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8808.valid){
continue;
}
CheckValue<IkReal> x8809=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x8806*x8807))+(((-1.0)*(x8806*x8806)))+(((-1.0)*(x8807*x8807))))),-1);
if(!x8809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8808.value)+(((1.5707963267949)*(x8809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8810=IKcos(j4);
IkReal x8811=IKsin(j4);
IkReal x8812=(gconst1*r01);
IkReal x8813=(gconst1*r21);
IkReal x8814=(gconst1*r11);
IkReal x8815=((1.0)*x8810);
IkReal x8816=(gconst2*x8810);
IkReal x8817=((1.0)*x8811);
IkReal x8818=(gconst2*x8811);
evalcond[0]=(((r02*x8811))+((r00*x8816))+(((-1.0)*x8812*x8815)));
evalcond[1]=((((-1.0)*r22*x8815))+((r20*x8818))+(((-1.0)*x8813*x8817)));
evalcond[2]=((((-1.0)*r12*x8815))+((r10*x8818))+(((-1.0)*x8814*x8817)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8815))+((r00*x8818))+(((-1.0)*x8812*x8817)));
evalcond[4]=(((cj2*sj1))+((r10*x8816))+((r12*x8811))+((cj1*sj2))+(((-1.0)*x8814*x8815)));
evalcond[5]=(((r22*x8811))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8816))+(((-1.0)*x8813*x8815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8819=((1.0)*gconst1);
CheckValue<IkReal> x8820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8819))+(((-1.0)*gconst2*r11)))),-1);
if(!x8820.valid){
continue;
}
CheckValue<IkReal> x8821 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8819))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8820.value)))+(x8821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8822=IKcos(j4);
IkReal x8823=IKsin(j4);
IkReal x8824=(gconst1*r01);
IkReal x8825=(gconst1*r21);
IkReal x8826=(gconst1*r11);
IkReal x8827=((1.0)*x8822);
IkReal x8828=(gconst2*x8822);
IkReal x8829=((1.0)*x8823);
IkReal x8830=(gconst2*x8823);
evalcond[0]=((((-1.0)*x8824*x8827))+((r02*x8823))+((r00*x8828)));
evalcond[1]=(((r20*x8830))+(((-1.0)*x8825*x8829))+(((-1.0)*r22*x8827)));
evalcond[2]=((((-1.0)*x8826*x8829))+(((-1.0)*r12*x8827))+((r10*x8830)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8827))+(((-1.0)*x8824*x8829))+((r00*x8830)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8826*x8827))+((r12*x8823))+((r10*x8828))+((cj1*sj2)));
evalcond[5]=(((r22*x8823))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8828))+(((-1.0)*x8825*x8827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8833 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8833.valid){
continue;
}
IkReal x8831=((-1.0)*(x8833.value));
IkReal x8832=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8831;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8831;
IkReal gconst1=((-1.0)*r21*x8832);
IkReal gconst2=(r20*x8832);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8836 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8836.valid){
continue;
}
IkReal x8834=((-1.0)*(x8836.value));
IkReal x8835=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8834;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8834;
IkReal gconst1=((-1.0)*r21*x8835);
IkReal gconst2=(r20*x8835);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8839 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8839.valid){
continue;
}
IkReal x8837=((-1.0)*(x8839.value));
IkReal x8838=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8837;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8837;
IkReal gconst1=((-1.0)*r21*x8838);
IkReal gconst2=(r20*x8838);
IkReal x8840=r22*r22;
IkReal x8841=(r02*sj1*sj2);
IkReal x8842=(cj1*cj2*r02);
CheckValue<IkReal> x8846=IKPowWithIntegerCheck(((-1.0)+x8840),-1);
if(!x8846.valid){
continue;
}
IkReal x8843=x8846.value;
if((((1.0)+(((-1.0)*x8840)))) < -0.00001)
continue;
IkReal x8844=IKsqrt(((1.0)+(((-1.0)*x8840))));
IkReal x8845=(r22*x8843*x8844);
j4eval[0]=((IKabs((x8842+(((-1.0)*x8841)))))+(IKabs(((((-1.0)*x8842*x8845))+((x8841*x8845))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8847=(gconst1*r01);
IkReal x8848=((1.0)*gconst2);
IkReal x8849=(cj1*cj2);
IkReal x8850=((1.0)*sj1*sj2);
CheckValue<IkReal> x8851=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8848)))),-1);
if(!x8851.valid){
continue;
}
CheckValue<IkReal> x8852 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8848*x8849))+(((-1.0)*x8847*x8850))+((gconst2*r00*sj1*sj2))+((x8847*x8849)))),IkReal((((r02*x8849))+(((-1.0)*r02*x8850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8851.value)))+(x8852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8853=IKcos(j4);
IkReal x8854=IKsin(j4);
IkReal x8855=(gconst1*r01);
IkReal x8856=((1.0)*cj2);
IkReal x8857=(gconst1*r21);
IkReal x8858=(gconst1*r11);
IkReal x8859=((1.0)*x8853);
IkReal x8860=(gconst2*x8853);
IkReal x8861=((1.0)*x8854);
IkReal x8862=(gconst2*x8854);
evalcond[0]=(((r00*x8860))+((r02*x8854))+(((-1.0)*x8855*x8859)));
evalcond[1]=((((-1.0)*x8857*x8861))+((r20*x8862))+(((-1.0)*r22*x8859)));
evalcond[2]=((((-1.0)*r12*x8859))+(((-1.0)*x8858*x8861))+((r10*x8862)));
evalcond[3]=((-1.0)+((r00*x8862))+(((-1.0)*x8855*x8861))+(((-1.0)*r02*x8859)));
evalcond[4]=((((-1.0)*cj1*x8856))+(((-1.0)*x8857*x8859))+((r20*x8860))+((sj1*sj2))+((r22*x8854)));
evalcond[5]=((((-1.0)*sj1*x8856))+(((-1.0)*x8858*x8859))+(((-1.0)*cj1*sj2))+((r12*x8854))+((r10*x8860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8863=(gconst1*r01);
IkReal x8864=(gconst2*r00);
CheckValue<IkReal> x8865=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8863*x8864))+(x8863*x8863)+(r02*r02)+(x8864*x8864))),-1);
if(!x8865.valid){
continue;
}
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal((x8864+(((-1.0)*x8863)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8865.value)))+(x8866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8867=IKcos(j4);
IkReal x8868=IKsin(j4);
IkReal x8869=(gconst1*r01);
IkReal x8870=((1.0)*cj2);
IkReal x8871=(gconst1*r21);
IkReal x8872=(gconst1*r11);
IkReal x8873=((1.0)*x8867);
IkReal x8874=(gconst2*x8867);
IkReal x8875=((1.0)*x8868);
IkReal x8876=(gconst2*x8868);
evalcond[0]=(((r02*x8868))+(((-1.0)*x8869*x8873))+((r00*x8874)));
evalcond[1]=((((-1.0)*x8871*x8875))+((r20*x8876))+(((-1.0)*r22*x8873)));
evalcond[2]=(((r10*x8876))+(((-1.0)*x8872*x8875))+(((-1.0)*r12*x8873)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8873))+(((-1.0)*x8869*x8875))+((r00*x8876)));
evalcond[4]=((((-1.0)*x8871*x8873))+((r20*x8874))+(((-1.0)*cj1*x8870))+((sj1*sj2))+((r22*x8868)));
evalcond[5]=(((r10*x8874))+(((-1.0)*x8872*x8873))+(((-1.0)*sj1*x8870))+(((-1.0)*cj1*sj2))+((r12*x8868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8877 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8877.valid){
continue;
}
CheckValue<IkReal> x8878=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8877.value)+(((1.5707963267949)*(x8878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8879=IKcos(j4);
IkReal x8880=IKsin(j4);
IkReal x8881=(gconst1*r01);
IkReal x8882=((1.0)*cj2);
IkReal x8883=(gconst1*r21);
IkReal x8884=(gconst1*r11);
IkReal x8885=((1.0)*x8879);
IkReal x8886=(gconst2*x8879);
IkReal x8887=((1.0)*x8880);
IkReal x8888=(gconst2*x8880);
evalcond[0]=((((-1.0)*x8881*x8885))+((r00*x8886))+((r02*x8880)));
evalcond[1]=((((-1.0)*r22*x8885))+(((-1.0)*x8883*x8887))+((r20*x8888)));
evalcond[2]=((((-1.0)*r12*x8885))+((r10*x8888))+(((-1.0)*x8884*x8887)));
evalcond[3]=((-1.0)+(((-1.0)*x8881*x8887))+((r00*x8888))+(((-1.0)*r02*x8885)));
evalcond[4]=((((-1.0)*x8883*x8885))+((r22*x8880))+((sj1*sj2))+(((-1.0)*cj1*x8882))+((r20*x8886)));
evalcond[5]=((((-1.0)*sj1*x8882))+(((-1.0)*cj1*sj2))+((r10*x8886))+(((-1.0)*x8884*x8885))+((r12*x8880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8891 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8891.valid){
continue;
}
IkReal x8889=((-1.0)*(x8891.value));
IkReal x8890=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8889;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8889;
IkReal gconst1=((-1.0)*r21*x8890);
IkReal gconst2=(r20*x8890);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8894 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8894.valid){
continue;
}
IkReal x8892=((-1.0)*(x8894.value));
IkReal x8893=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8892;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8892;
IkReal gconst1=((-1.0)*r21*x8893);
IkReal gconst2=(r20*x8893);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8897 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8897.valid){
continue;
}
IkReal x8895=((-1.0)*(x8897.value));
IkReal x8896=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8895;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8895;
IkReal gconst1=((-1.0)*r21*x8896);
IkReal gconst2=(r20*x8896);
IkReal x8898=r22*r22;
IkReal x8899=(cj1*cj2*r12);
IkReal x8900=(r12*sj1*sj2);
CheckValue<IkReal> x8904=IKPowWithIntegerCheck(((-1.0)+x8898),-1);
if(!x8904.valid){
continue;
}
IkReal x8901=x8904.value;
if((((1.0)+(((-1.0)*x8898)))) < -0.00001)
continue;
IkReal x8902=IKsqrt(((1.0)+(((-1.0)*x8898))));
IkReal x8903=(r22*x8901*x8902);
j4eval[0]=((IKabs((x8899+(((-1.0)*x8900)))))+(IKabs(((((-1.0)*x8899*x8903))+((x8900*x8903))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8905=(cj1*cj2);
IkReal x8906=(gconst2*r10);
IkReal x8907=(gconst1*r11);
IkReal x8908=((1.0)*sj1*sj2);
CheckValue<IkReal> x8909=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8909.valid){
continue;
}
CheckValue<IkReal> x8910 = IKatan2WithCheck(IkReal((((x8905*x8907))+((sj1*sj2*x8906))+(((-1.0)*x8907*x8908))+(((-1.0)*x8905*x8906)))),IkReal((((r12*x8905))+(((-1.0)*r12*x8908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8909.value)))+(x8910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8911=IKcos(j4);
IkReal x8912=IKsin(j4);
IkReal x8913=(gconst1*r01);
IkReal x8914=(gconst1*r21);
IkReal x8915=(gconst1*r11);
IkReal x8916=((1.0)*x8911);
IkReal x8917=(gconst2*x8911);
IkReal x8918=((1.0)*x8912);
IkReal x8919=(gconst2*x8912);
evalcond[0]=((((-1.0)*x8915*x8916))+((r12*x8912))+((r10*x8917)));
evalcond[1]=((((-1.0)*x8914*x8918))+(((-1.0)*r22*x8916))+((r20*x8919)));
evalcond[2]=(((r00*x8919))+(((-1.0)*r02*x8916))+(((-1.0)*x8913*x8918)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8916))+(((-1.0)*x8915*x8918))+((r10*x8919)));
evalcond[4]=(((r00*x8917))+((cj2*sj1))+((cj1*sj2))+((r02*x8912))+(((-1.0)*x8913*x8916)));
evalcond[5]=(((r22*x8912))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8914*x8916))+((r20*x8917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8920=(gconst1*r11);
IkReal x8921=(gconst2*r10);
CheckValue<IkReal> x8922=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8921*x8921)+(((-2.0)*x8920*x8921))+(x8920*x8920))),-1);
if(!x8922.valid){
continue;
}
CheckValue<IkReal> x8923 = IKatan2WithCheck(IkReal((x8921+(((-1.0)*x8920)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8922.value)))+(x8923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8924=IKcos(j4);
IkReal x8925=IKsin(j4);
IkReal x8926=(gconst1*r01);
IkReal x8927=(gconst1*r21);
IkReal x8928=(gconst1*r11);
IkReal x8929=((1.0)*x8924);
IkReal x8930=(gconst2*x8924);
IkReal x8931=((1.0)*x8925);
IkReal x8932=(gconst2*x8925);
evalcond[0]=(((r12*x8925))+((r10*x8930))+(((-1.0)*x8928*x8929)));
evalcond[1]=((((-1.0)*r22*x8929))+(((-1.0)*x8927*x8931))+((r20*x8932)));
evalcond[2]=((((-1.0)*r02*x8929))+(((-1.0)*x8926*x8931))+((r00*x8932)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8929))+(((-1.0)*x8928*x8931))+((r10*x8932)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8926*x8929))+((cj1*sj2))+((r02*x8925))+((r00*x8930)));
evalcond[5]=((((-1.0)*x8927*x8929))+((r22*x8925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8933=((1.0)*gconst1);
CheckValue<IkReal> x8934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8933))+(((-1.0)*gconst2*r01)))),-1);
if(!x8934.valid){
continue;
}
CheckValue<IkReal> x8935 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8934.value)))+(x8935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8936=IKcos(j4);
IkReal x8937=IKsin(j4);
IkReal x8938=(gconst1*r01);
IkReal x8939=(gconst1*r21);
IkReal x8940=(gconst1*r11);
IkReal x8941=((1.0)*x8936);
IkReal x8942=(gconst2*x8936);
IkReal x8943=((1.0)*x8937);
IkReal x8944=(gconst2*x8937);
evalcond[0]=(((r12*x8937))+(((-1.0)*x8940*x8941))+((r10*x8942)));
evalcond[1]=((((-1.0)*x8939*x8943))+(((-1.0)*r22*x8941))+((r20*x8944)));
evalcond[2]=((((-1.0)*x8938*x8943))+(((-1.0)*r02*x8941))+((r00*x8944)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8941))+(((-1.0)*x8940*x8943))+((r10*x8944)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8938*x8941))+((r00*x8942))+((r02*x8937)));
evalcond[5]=((((-1.0)*x8939*x8941))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8942))+((r22*x8937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8947 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8947.valid){
continue;
}
IkReal x8945=((-1.0)*(x8947.value));
IkReal x8946=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8945;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8945;
IkReal gconst1=((-1.0)*r21*x8946);
IkReal gconst2=(r20*x8946);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8950 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8950.valid){
continue;
}
IkReal x8948=((-1.0)*(x8950.value));
IkReal x8949=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8948;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8948;
IkReal gconst1=((-1.0)*r21*x8949);
IkReal gconst2=(r20*x8949);
IkReal x8951=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8955=IKPowWithIntegerCheck(x8951,-1);
if(!x8955.valid){
continue;
}
IkReal x8952=x8955.value;
IkReal x8953=((1.0)*x8952);
IkReal x8954=((((-1.0)*x8953*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8952))+(((-1.0)*x8953*(r10*r10)*(r20*r20))));
j4eval[0]=x8954;
j4eval[1]=IKsign(x8954);
j4eval[2]=r12;
j4eval[3]=x8951;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8958 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8958.valid){
continue;
}
IkReal x8956=((-1.0)*(x8958.value));
IkReal x8957=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x8956;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8956;
IkReal gconst1=((-1.0)*r21*x8957);
IkReal gconst2=(r20*x8957);
IkReal x8959=r22*r22;
IkReal x8960=(cj1*cj2*r12);
IkReal x8961=(r12*sj1*sj2);
CheckValue<IkReal> x8965=IKPowWithIntegerCheck(((-1.0)+x8959),-1);
if(!x8965.valid){
continue;
}
IkReal x8962=x8965.value;
if((((1.0)+(((-1.0)*x8959)))) < -0.00001)
continue;
IkReal x8963=IKsqrt(((1.0)+(((-1.0)*x8959))));
IkReal x8964=(r22*x8962*x8963);
j4eval[0]=((IKabs(((((-1.0)*x8960*x8964))+((x8961*x8964)))))+(IKabs((x8960+(((-1.0)*x8961))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8966=(cj1*cj2);
IkReal x8967=(gconst2*r10);
IkReal x8968=(gconst1*r11);
IkReal x8969=((1.0)*sj1*sj2);
CheckValue<IkReal> x8970 = IKatan2WithCheck(IkReal(((((-1.0)*x8968*x8969))+(((-1.0)*x8966*x8967))+((x8966*x8968))+((sj1*sj2*x8967)))),IkReal(((((-1.0)*r12*x8969))+((r12*x8966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8970.valid){
continue;
}
CheckValue<IkReal> x8971=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8970.value)+(((1.5707963267949)*(x8971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8972=IKcos(j4);
IkReal x8973=IKsin(j4);
IkReal x8974=(gconst1*r01);
IkReal x8975=((1.0)*cj2);
IkReal x8976=(gconst1*r21);
IkReal x8977=(gconst1*r11);
IkReal x8978=((1.0)*x8972);
IkReal x8979=(gconst2*x8972);
IkReal x8980=((1.0)*x8973);
IkReal x8981=(gconst2*x8973);
evalcond[0]=((((-1.0)*x8977*x8978))+((r10*x8979))+((r12*x8973)));
evalcond[1]=((((-1.0)*r22*x8978))+((r20*x8981))+(((-1.0)*x8976*x8980)));
evalcond[2]=(((r00*x8981))+(((-1.0)*x8974*x8980))+(((-1.0)*r02*x8978)));
evalcond[3]=((1.0)+(((-1.0)*x8977*x8980))+(((-1.0)*r12*x8978))+((r10*x8981)));
evalcond[4]=((((-1.0)*cj1*x8975))+((r20*x8979))+(((-1.0)*x8976*x8978))+((sj1*sj2))+((r22*x8973)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r00*x8979))+(((-1.0)*x8974*x8978))+(((-1.0)*sj1*x8975))+((r02*x8973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8982=(gconst1*r11);
IkReal x8983=(gconst2*r10);
CheckValue<IkReal> x8984 = IKatan2WithCheck(IkReal(((((-1.0)*x8982))+x8983)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8984.valid){
continue;
}
CheckValue<IkReal> x8985=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8982*x8982)))+(((-1.0)*(x8983*x8983)))+(((-1.0)*(r12*r12)))+(((2.0)*x8982*x8983)))),-1);
if(!x8985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8984.value)+(((1.5707963267949)*(x8985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8986=IKcos(j4);
IkReal x8987=IKsin(j4);
IkReal x8988=(gconst1*r01);
IkReal x8989=((1.0)*cj2);
IkReal x8990=(gconst1*r21);
IkReal x8991=(gconst1*r11);
IkReal x8992=((1.0)*x8986);
IkReal x8993=(gconst2*x8986);
IkReal x8994=((1.0)*x8987);
IkReal x8995=(gconst2*x8987);
evalcond[0]=((((-1.0)*x8991*x8992))+((r10*x8993))+((r12*x8987)));
evalcond[1]=((((-1.0)*x8990*x8994))+((r20*x8995))+(((-1.0)*r22*x8992)));
evalcond[2]=(((r00*x8995))+(((-1.0)*r02*x8992))+(((-1.0)*x8988*x8994)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8992))+(((-1.0)*x8991*x8994))+((r10*x8995)));
evalcond[4]=((((-1.0)*x8990*x8992))+((r22*x8987))+((r20*x8993))+((sj1*sj2))+(((-1.0)*cj1*x8989)));
evalcond[5]=(((r02*x8987))+(((-1.0)*sj1*x8989))+(((-1.0)*cj1*sj2))+((r00*x8993))+(((-1.0)*x8988*x8992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8996 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8996.valid){
continue;
}
CheckValue<IkReal> x8997=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8996.value)+(((1.5707963267949)*(x8997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8998=IKcos(j4);
IkReal x8999=IKsin(j4);
IkReal x9000=(gconst1*r01);
IkReal x9001=((1.0)*cj2);
IkReal x9002=(gconst1*r21);
IkReal x9003=(gconst1*r11);
IkReal x9004=((1.0)*x8998);
IkReal x9005=(gconst2*x8998);
IkReal x9006=((1.0)*x8999);
IkReal x9007=(gconst2*x8999);
evalcond[0]=(((r12*x8999))+(((-1.0)*x9003*x9004))+((r10*x9005)));
evalcond[1]=((((-1.0)*r22*x9004))+((r20*x9007))+(((-1.0)*x9002*x9006)));
evalcond[2]=((((-1.0)*r02*x9004))+(((-1.0)*x9000*x9006))+((r00*x9007)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9004))+(((-1.0)*x9003*x9006))+((r10*x9007)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x9001))+((r20*x9005))+(((-1.0)*x9002*x9004))+((r22*x8999)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x9000*x9004))+((r02*x8999))+(((-1.0)*sj1*x9001))+((r00*x9005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9008=((-1.0)*py);
CheckValue<IkReal> x9010 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9010.valid){
continue;
}
IkReal x9009=((-1.0)*(x9010.value));
sj5=gconst1;
cj5=gconst2;
j5=x9009;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9008);
rxp0_2=(py*r00);
rxp1_0=(r21*x9008);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9009;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9011=((-1.0)*py);
CheckValue<IkReal> x9013 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9013.valid){
continue;
}
IkReal x9012=((-1.0)*(x9013.value));
sj5=gconst1;
cj5=gconst2;
j5=x9012;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9011);
rxp0_2=(py*r00);
rxp1_0=(r21*x9011);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9012;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9014=((-1.0)*py);
CheckValue<IkReal> x9016 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9016.valid){
continue;
}
IkReal x9015=((-1.0)*(x9016.value));
sj5=gconst1;
cj5=gconst2;
j5=x9015;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9014);
rxp0_2=(py*r00);
rxp1_0=(r21*x9014);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9015;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9019=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9019.valid){
continue;
}
IkReal x9017=x9019.value;
IkReal x9018=((1.0)*cj0*x9017);
cj4array[0]=((((-1.0)*cj1*sj2*x9018))+(((-1.0)*cj2*sj1*x9018)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9020=IKsin(j4);
IkReal x9021=IKcos(j4);
IkReal x9022=(gconst2*x9020);
IkReal x9023=((1.0)*x9021);
IkReal x9024=((1.0)*gconst1*x9020);
evalcond[0]=(r12*x9020);
evalcond[1]=((((-1.0)*r12*x9023))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x9024))+((r20*x9022)));
evalcond[3]=(((r00*x9022))+(((-1.0)*r01*x9024)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9021))+(((-1.0)*gconst1*r21*x9023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9026=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9026.valid){
continue;
}
IkReal x9025=x9026.value;
cj4array[0]=(((cj1*cj2*x9025))+(((-1.0)*sj1*sj2*x9025)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9027=IKsin(j4);
IkReal x9028=IKcos(j4);
IkReal x9029=(gconst2*r00);
IkReal x9030=((1.0)*gconst1*r01);
evalcond[0]=(r12*x9027);
evalcond[1]=((((-1.0)*r12*x9028))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst1*r21*x9027))+((gconst2*r20*x9027)));
evalcond[3]=(((x9027*x9029))+(((-1.0)*x9027*x9030)));
evalcond[4]=(((x9028*x9029))+((cj0*cj2*sj1))+(((-1.0)*x9028*x9030))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9031=IKPowWithIntegerCheck(r12,-1);
if(!x9031.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9031.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9032=IKsin(j4);
IkReal x9033=IKcos(j4);
IkReal x9034=(gconst2*r00);
IkReal x9035=(gconst2*r20);
IkReal x9036=((1.0)*gconst1*x9032);
IkReal x9037=((1.0)*gconst1*x9033);
evalcond[0]=(r12*x9032);
evalcond[1]=((((-1.0)*r21*x9036))+((x9032*x9035)));
evalcond[2]=(((x9032*x9034))+(((-1.0)*r01*x9036)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x9037))+((x9033*x9035)));
evalcond[4]=(((cj0*cj2*sj1))+((x9033*x9034))+((cj0*cj1*sj2))+(((-1.0)*r01*x9037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9038=(sj1*sj2);
IkReal x9039=(gconst2*r20);
IkReal x9040=(cj1*cj2);
IkReal x9041=(gconst1*r21);
CheckValue<IkReal> x9042=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9039*x9039)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9041*x9041)))+(((2.0)*x9039*x9041)))),-1);
if(!x9042.valid){
continue;
}
CheckValue<IkReal> x9043 = IKatan2WithCheck(IkReal((((r22*x9038))+(((-1.0)*r22*x9040)))),IkReal((((x9040*x9041))+(((-1.0)*x9039*x9040))+(((-1.0)*x9038*x9041))+((x9038*x9039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9042.value)))+(x9043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9044=IKsin(j4);
IkReal x9045=IKcos(j4);
IkReal x9046=(gconst1*r01);
IkReal x9047=(cj2*sj1);
IkReal x9048=(gconst1*r21);
IkReal x9049=(gconst1*r11);
IkReal x9050=(cj1*sj2);
IkReal x9051=((1.0)*x9045);
IkReal x9052=(gconst2*x9045);
IkReal x9053=((1.0)*x9044);
IkReal x9054=(gconst2*x9044);
evalcond[0]=(((r20*x9054))+(((-1.0)*r22*x9051))+(((-1.0)*x9048*x9053)));
evalcond[1]=((((-1.0)*r02*x9051))+sj0+((r00*x9054))+(((-1.0)*x9046*x9053)));
evalcond[2]=((((-1.0)*x9049*x9053))+(((-1.0)*r12*x9051))+((r10*x9054))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x9052))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9048*x9051))+((r22*x9044)));
evalcond[4]=(((r00*x9052))+(((-1.0)*x9046*x9051))+((cj0*x9047))+((cj0*x9050))+((r02*x9044)));
evalcond[5]=((((-1.0)*x9049*x9051))+((sj0*x9047))+((r12*x9044))+((sj0*x9050))+((r10*x9052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9055=((1.0)*gconst1);
CheckValue<IkReal> x9056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x9055))+((cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9056.valid){
continue;
}
CheckValue<IkReal> x9057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9055))+(((-1.0)*gconst2*r01)))),-1);
if(!x9057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9056.value)+(((1.5707963267949)*(x9057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9058=IKsin(j4);
IkReal x9059=IKcos(j4);
IkReal x9060=(gconst1*r01);
IkReal x9061=(cj2*sj1);
IkReal x9062=(gconst1*r21);
IkReal x9063=(gconst1*r11);
IkReal x9064=(cj1*sj2);
IkReal x9065=((1.0)*x9059);
IkReal x9066=(gconst2*x9059);
IkReal x9067=((1.0)*x9058);
IkReal x9068=(gconst2*x9058);
evalcond[0]=((((-1.0)*x9062*x9067))+((r20*x9068))+(((-1.0)*r22*x9065)));
evalcond[1]=(((r00*x9068))+sj0+(((-1.0)*r02*x9065))+(((-1.0)*x9060*x9067)));
evalcond[2]=(((r10*x9068))+(((-1.0)*x9063*x9067))+(((-1.0)*r12*x9065))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x9062*x9065))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9058))+((r20*x9066)));
evalcond[4]=(((r00*x9066))+((cj0*x9061))+((cj0*x9064))+((r02*x9058))+(((-1.0)*x9060*x9065)));
evalcond[5]=(((sj0*x9061))+((sj0*x9064))+((r10*x9066))+((r12*x9058))+(((-1.0)*x9063*x9065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9069=((1.0)*gconst1);
CheckValue<IkReal> x9070 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r20*sj0))+(((-1.0)*r21*sj0*x9069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9070.valid){
continue;
}
CheckValue<IkReal> x9071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9069))+(((-1.0)*gconst2*r11)))),-1);
if(!x9071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9070.value)+(((1.5707963267949)*(x9071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9072=IKsin(j4);
IkReal x9073=IKcos(j4);
IkReal x9074=(gconst1*r01);
IkReal x9075=(cj2*sj1);
IkReal x9076=(gconst1*r21);
IkReal x9077=(gconst1*r11);
IkReal x9078=(cj1*sj2);
IkReal x9079=((1.0)*x9073);
IkReal x9080=(gconst2*x9073);
IkReal x9081=((1.0)*x9072);
IkReal x9082=(gconst2*x9072);
evalcond[0]=(((r20*x9082))+(((-1.0)*r22*x9079))+(((-1.0)*x9076*x9081)));
evalcond[1]=((((-1.0)*x9074*x9081))+sj0+(((-1.0)*r02*x9079))+((r00*x9082)));
evalcond[2]=(((r10*x9082))+(((-1.0)*r12*x9079))+(((-1.0)*x9077*x9081))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x9080))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9076*x9079))+((r22*x9072)));
evalcond[4]=((((-1.0)*x9074*x9079))+((r00*x9080))+((cj0*x9075))+((cj0*x9078))+((r02*x9072)));
evalcond[5]=(((r10*x9080))+(((-1.0)*x9077*x9079))+((sj0*x9075))+((sj0*x9078))+((r12*x9072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9085 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9085.valid){
continue;
}
IkReal x9083=((-1.0)*(x9085.value));
IkReal x9084=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9083;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9083;
IkReal gconst1=((-1.0)*r21*x9084);
IkReal gconst2=(r20*x9084);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9088 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9088.valid){
continue;
}
IkReal x9086=((-1.0)*(x9088.value));
IkReal x9087=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9086;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9086;
IkReal gconst1=((-1.0)*r21*x9087);
IkReal gconst2=(r20*x9087);
CheckValue<IkReal> x9096=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9096.valid){
continue;
}
IkReal x9089=x9096.value;
IkReal x9090=(cj3*x9089);
IkReal x9091=(r11*x9090);
IkReal x9092=(r01*x9090);
IkReal x9093=(r00*x9090);
IkReal x9094=(r10*x9090);
IkReal x9095=(r20*r21*x9090);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x9093*(r20*r20)))+((r01*x9091*(r21*r21)))+((r00*r20*r21*x9091))+((r10*r20*r21*x9092))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9099 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9099.valid){
continue;
}
IkReal x9097=((-1.0)*(x9099.value));
IkReal x9098=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9097;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9097;
IkReal gconst1=((-1.0)*r21*x9098);
IkReal gconst2=(r20*x9098);
CheckValue<IkReal> x9107=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9107.valid){
continue;
}
IkReal x9100=x9107.value;
IkReal x9101=(sj3*x9100);
IkReal x9102=(r11*x9101);
IkReal x9103=(r00*x9101);
IkReal x9104=(r01*x9101);
IkReal x9105=(r10*x9101);
IkReal x9106=(r20*r21*x9101);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9104))+((r10*x9103*(r20*r20)))+((r00*r20*r21*x9102))+((r01*x9102*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9110 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9110.valid){
continue;
}
IkReal x9108=((-1.0)*(x9110.value));
IkReal x9109=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9108;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9108;
IkReal gconst1=((-1.0)*r21*x9109);
IkReal gconst2=(r20*x9109);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9113 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9113.valid){
continue;
}
IkReal x9111=((-1.0)*(x9113.value));
IkReal x9112=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9111;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9111;
IkReal gconst1=((-1.0)*r21*x9112);
IkReal gconst2=(r20*x9112);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9116 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9116.valid){
continue;
}
IkReal x9114=((-1.0)*(x9116.value));
IkReal x9115=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9114;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9114;
IkReal gconst1=((-1.0)*r21*x9115);
IkReal gconst2=(r20*x9115);
IkReal x9117=r22*r22;
IkReal x9118=(r12*sj1*sj2);
CheckValue<IkReal> x9123=IKPowWithIntegerCheck(((-1.0)+x9117),-1);
if(!x9123.valid){
continue;
}
IkReal x9119=x9123.value;
IkReal x9120=((1.0)*cj1*cj2*r12);
if((((1.0)+(((-1.0)*x9117)))) < -0.00001)
continue;
IkReal x9121=IKsqrt(((1.0)+(((-1.0)*x9117))));
IkReal x9122=(r22*x9119*x9121);
j4eval[0]=((IKabs(((((-1.0)*x9120*x9122))+((x9118*x9122)))))+(IKabs((x9118+(((-1.0)*x9120))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9124=(gconst2*r10);
IkReal x9125=(sj1*sj2);
IkReal x9126=(gconst1*r11);
IkReal x9127=((1.0)*cj1*cj2);
CheckValue<IkReal> x9128 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x9127))+((r12*x9125)))),IkReal(((((-1.0)*x9124*x9127))+((x9124*x9125))+((cj1*cj2*x9126))+(((-1.0)*x9125*x9126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9128.valid){
continue;
}
CheckValue<IkReal> x9129=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9124*x9124)+(((-2.0)*x9124*x9126))+(x9126*x9126))),-1);
if(!x9129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9128.value)+(((1.5707963267949)*(x9129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9130=IKsin(j4);
IkReal x9131=IKcos(j4);
IkReal x9132=(gconst1*r01);
IkReal x9133=(gconst1*r21);
IkReal x9134=((1.0)*cj2);
IkReal x9135=(gconst1*r11);
IkReal x9136=((1.0)*x9131);
IkReal x9137=((1.0)*x9130);
IkReal x9138=(gconst2*x9130);
evalcond[0]=(((r20*x9138))+(((-1.0)*x9133*x9137))+(((-1.0)*r22*x9136)));
evalcond[1]=(((r10*x9138))+(((-1.0)*r12*x9136))+(((-1.0)*x9135*x9137)));
evalcond[2]=(((x9131*x9132))+(((-1.0)*r02*x9137))+(((-1.0)*gconst2*r00*x9136)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9136))+(((-1.0)*x9132*x9137))+((r00*x9138)));
evalcond[4]=(((x9131*x9135))+(((-1.0)*gconst2*r10*x9136))+((sj1*sj2))+(((-1.0)*r12*x9137))+(((-1.0)*cj1*x9134)));
evalcond[5]=((((-1.0)*sj1*x9134))+((x9131*x9133))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9137))+(((-1.0)*gconst2*r20*x9136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9139=(gconst1*r01);
IkReal x9140=(gconst2*r00);
CheckValue<IkReal> x9141=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9139*x9140))+(x9140*x9140)+(x9139*x9139)+(r02*r02))),-1);
if(!x9141.valid){
continue;
}
CheckValue<IkReal> x9142 = IKatan2WithCheck(IkReal(((((-1.0)*x9140))+x9139)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9141.value)))+(x9142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9143=IKsin(j4);
IkReal x9144=IKcos(j4);
IkReal x9145=(gconst1*r01);
IkReal x9146=(gconst1*r21);
IkReal x9147=((1.0)*cj2);
IkReal x9148=(gconst1*r11);
IkReal x9149=((1.0)*x9144);
IkReal x9150=((1.0)*x9143);
IkReal x9151=(gconst2*x9143);
evalcond[0]=((((-1.0)*x9146*x9150))+(((-1.0)*r22*x9149))+((r20*x9151)));
evalcond[1]=((((-1.0)*x9148*x9150))+(((-1.0)*r12*x9149))+((r10*x9151)));
evalcond[2]=((((-1.0)*r02*x9150))+(((-1.0)*gconst2*r00*x9149))+((x9144*x9145)));
evalcond[3]=((1.0)+(((-1.0)*x9145*x9150))+(((-1.0)*r02*x9149))+((r00*x9151)));
evalcond[4]=((((-1.0)*gconst2*r10*x9149))+(((-1.0)*r12*x9150))+((x9144*x9148))+((sj1*sj2))+(((-1.0)*cj1*x9147)));
evalcond[5]=((((-1.0)*gconst2*r20*x9149))+((x9144*x9146))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9150))+(((-1.0)*sj1*x9147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9152=((1.0)*gconst1);
CheckValue<IkReal> x9153 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9152))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9153.valid){
continue;
}
CheckValue<IkReal> x9154=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x9152)))),-1);
if(!x9154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9153.value)+(((1.5707963267949)*(x9154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9155=IKsin(j4);
IkReal x9156=IKcos(j4);
IkReal x9157=(gconst1*r01);
IkReal x9158=(gconst1*r21);
IkReal x9159=((1.0)*cj2);
IkReal x9160=(gconst1*r11);
IkReal x9161=((1.0)*x9156);
IkReal x9162=((1.0)*x9155);
IkReal x9163=(gconst2*x9155);
evalcond[0]=((((-1.0)*r22*x9161))+(((-1.0)*x9158*x9162))+((r20*x9163)));
evalcond[1]=((((-1.0)*r12*x9161))+((r10*x9163))+(((-1.0)*x9160*x9162)));
evalcond[2]=((((-1.0)*r02*x9162))+(((-1.0)*gconst2*r00*x9161))+((x9156*x9157)));
evalcond[3]=((1.0)+((r00*x9163))+(((-1.0)*x9157*x9162))+(((-1.0)*r02*x9161)));
evalcond[4]=((((-1.0)*r12*x9162))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9161))+(((-1.0)*cj1*x9159))+((x9156*x9160)));
evalcond[5]=((((-1.0)*r22*x9162))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9159))+(((-1.0)*gconst2*r20*x9161))+((x9156*x9158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9166 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9166.valid){
continue;
}
IkReal x9164=((-1.0)*(x9166.value));
IkReal x9165=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9164;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9164;
IkReal gconst1=((-1.0)*r21*x9165);
IkReal gconst2=(r20*x9165);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9169 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9169.valid){
continue;
}
IkReal x9167=((-1.0)*(x9169.value));
IkReal x9168=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9167;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9167;
IkReal gconst1=((-1.0)*r21*x9168);
IkReal gconst2=(r20*x9168);
IkReal x9170=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9174=IKPowWithIntegerCheck(x9170,-1);
if(!x9174.valid){
continue;
}
IkReal x9171=x9174.value;
IkReal x9172=((1.0)*x9171);
IkReal x9173=((((-2.0)*r00*r01*r20*r21*x9171))+(((-1.0)*(r02*r02)))+(((-1.0)*x9172*(r01*r01)*(r21*r21)))+(((-1.0)*x9172*(r00*r00)*(r20*r20))));
j4eval[0]=x9173;
j4eval[1]=IKsign(x9173);
j4eval[2]=r02;
j4eval[3]=x9170;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9177 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9177.valid){
continue;
}
IkReal x9175=((-1.0)*(x9177.value));
IkReal x9176=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9175;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9175;
IkReal gconst1=((-1.0)*r21*x9176);
IkReal gconst2=(r20*x9176);
IkReal x9178=r22*r22;
IkReal x9179=(cj1*r02*sj2);
IkReal x9180=(cj2*r02*sj1);
CheckValue<IkReal> x9184=IKPowWithIntegerCheck(((-1.0)+x9178),-1);
if(!x9184.valid){
continue;
}
IkReal x9181=x9184.value;
if((((1.0)+(((-1.0)*x9178)))) < -0.00001)
continue;
IkReal x9182=IKsqrt(((1.0)+(((-1.0)*x9178))));
IkReal x9183=((1.0)*r22*x9181*x9182);
j4eval[0]=((IKabs(((((-1.0)*x9179*x9183))+(((-1.0)*x9180*x9183)))))+(IKabs((x9180+x9179))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9185=(cj2*sj1);
IkReal x9186=(cj1*sj2);
IkReal x9187=((1.0)*gconst2);
IkReal x9188=(gconst1*r01);
CheckValue<IkReal> x9189=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9187)))),-1);
if(!x9189.valid){
continue;
}
CheckValue<IkReal> x9190 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9186*x9187))+((x9185*x9188))+((x9186*x9188))+(((-1.0)*r00*x9185*x9187)))),IkReal((((r02*x9185))+((r02*x9186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9189.value)))+(x9190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9191=IKcos(j4);
IkReal x9192=IKsin(j4);
IkReal x9193=(gconst1*r01);
IkReal x9194=((1.0)*cj2);
IkReal x9195=(gconst1*r21);
IkReal x9196=(gconst1*r11);
IkReal x9197=((1.0)*x9191);
IkReal x9198=(gconst2*x9191);
IkReal x9199=((1.0)*x9192);
IkReal x9200=(gconst2*x9192);
evalcond[0]=(((r00*x9198))+((r02*x9192))+(((-1.0)*x9193*x9197)));
evalcond[1]=(((r20*x9200))+(((-1.0)*r22*x9197))+(((-1.0)*x9195*x9199)));
evalcond[2]=(((r10*x9200))+(((-1.0)*r12*x9197))+(((-1.0)*x9196*x9199)));
evalcond[3]=((1.0)+((r00*x9200))+(((-1.0)*r02*x9197))+(((-1.0)*x9193*x9199)));
evalcond[4]=((((-1.0)*cj1*x9194))+((sj1*sj2))+((r10*x9198))+(((-1.0)*x9196*x9197))+((r12*x9192)));
evalcond[5]=(((r22*x9192))+(((-1.0)*cj1*sj2))+((r20*x9198))+(((-1.0)*sj1*x9194))+(((-1.0)*x9195*x9197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9201=(gconst2*r00);
IkReal x9202=(gconst1*r01);
CheckValue<IkReal> x9203=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9202*x9202)))+(((-1.0)*(r02*r02)))+(((2.0)*x9201*x9202))+(((-1.0)*(x9201*x9201))))),-1);
if(!x9203.valid){
continue;
}
CheckValue<IkReal> x9204 = IKatan2WithCheck(IkReal((x9201+(((-1.0)*x9202)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9203.value)))+(x9204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9205=IKcos(j4);
IkReal x9206=IKsin(j4);
IkReal x9207=(gconst1*r01);
IkReal x9208=((1.0)*cj2);
IkReal x9209=(gconst1*r21);
IkReal x9210=(gconst1*r11);
IkReal x9211=((1.0)*x9205);
IkReal x9212=(gconst2*x9205);
IkReal x9213=((1.0)*x9206);
IkReal x9214=(gconst2*x9206);
evalcond[0]=(((r00*x9212))+((r02*x9206))+(((-1.0)*x9207*x9211)));
evalcond[1]=(((r20*x9214))+(((-1.0)*x9209*x9213))+(((-1.0)*r22*x9211)));
evalcond[2]=(((r10*x9214))+(((-1.0)*x9210*x9213))+(((-1.0)*r12*x9211)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9211))+((r00*x9214))+(((-1.0)*x9207*x9213)));
evalcond[4]=(((r10*x9212))+(((-1.0)*x9210*x9211))+((sj1*sj2))+((r12*x9206))+(((-1.0)*cj1*x9208)));
evalcond[5]=(((r20*x9212))+((r22*x9206))+(((-1.0)*sj1*x9208))+(((-1.0)*cj1*sj2))+(((-1.0)*x9209*x9211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9215=((1.0)*gconst1);
CheckValue<IkReal> x9216 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9215))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9216.valid){
continue;
}
CheckValue<IkReal> x9217=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9215))+(((-1.0)*gconst2*r11)))),-1);
if(!x9217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9216.value)+(((1.5707963267949)*(x9217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9218=IKcos(j4);
IkReal x9219=IKsin(j4);
IkReal x9220=(gconst1*r01);
IkReal x9221=((1.0)*cj2);
IkReal x9222=(gconst1*r21);
IkReal x9223=(gconst1*r11);
IkReal x9224=((1.0)*x9218);
IkReal x9225=(gconst2*x9218);
IkReal x9226=((1.0)*x9219);
IkReal x9227=(gconst2*x9219);
evalcond[0]=(((r00*x9225))+(((-1.0)*x9220*x9224))+((r02*x9219)));
evalcond[1]=(((r20*x9227))+(((-1.0)*x9222*x9226))+(((-1.0)*r22*x9224)));
evalcond[2]=((((-1.0)*x9223*x9226))+(((-1.0)*r12*x9224))+((r10*x9227)));
evalcond[3]=((1.0)+((r00*x9227))+(((-1.0)*r02*x9224))+(((-1.0)*x9220*x9226)));
evalcond[4]=(((r12*x9219))+((sj1*sj2))+(((-1.0)*x9223*x9224))+(((-1.0)*cj1*x9221))+((r10*x9225)));
evalcond[5]=(((r20*x9225))+(((-1.0)*cj1*sj2))+((r22*x9219))+(((-1.0)*sj1*x9221))+(((-1.0)*x9222*x9224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9228=((-1.0)*py);
CheckValue<IkReal> x9230 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9230.valid){
continue;
}
IkReal x9229=((-1.0)*(x9230.value));
sj5=gconst1;
cj5=gconst2;
j5=x9229;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9228);
rxp0_2=(py*r00);
rxp1_0=(r21*x9228);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9229;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9231=((1.0)*sj3);
IkReal x9232=(r01*r21);
IkReal x9233=(r00*r20);
j4eval[0]=(x9232+x9233);
j4eval[1]=((((-1.0)*x9231*x9233))+(((-1.0)*x9231*x9232)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9234=((-1.0)*py);
CheckValue<IkReal> x9236 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9236.valid){
continue;
}
IkReal x9235=((-1.0)*(x9236.value));
sj5=gconst1;
cj5=gconst2;
j5=x9235;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9234);
rxp0_2=(py*r00);
rxp1_0=(r21*x9234);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9235;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9237=(r00*r20);
IkReal x9238=((1.0)*cj3);
IkReal x9239=(r01*r21);
j4eval[0]=(x9239+x9237);
j4eval[1]=((((-1.0)*x9237*x9238))+(((-1.0)*x9238*x9239)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9240=((-1.0)*py);
CheckValue<IkReal> x9242 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9242.valid){
continue;
}
IkReal x9241=((-1.0)*(x9242.value));
sj5=gconst1;
cj5=gconst2;
j5=x9241;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9240);
rxp0_2=(py*r00);
rxp1_0=(r21*x9240);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9241;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9243=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r21*x9243))+(((-1.0)*r00*r20*x9243)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9244=((1.0)*gconst2);
CheckValue<IkReal> x9245=IKPowWithIntegerCheck(r12,-1);
if(!x9245.valid){
continue;
}
CheckValue<IkReal> x9246=IKPowWithIntegerCheck(sj3,-1);
if(!x9246.valid){
continue;
}
CheckValue<IkReal> x9247=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9244))+((cj3*gconst1*r01))),-1);
if(!x9247.valid){
continue;
}
if( IKabs(((x9245.value)*(x9246.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9247.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9244)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9245.value)*(x9246.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9247.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9244))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9245.value)*(x9246.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9247.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9244))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9248=IKsin(j4);
IkReal x9249=IKcos(j4);
IkReal x9250=(sj1*sj2);
IkReal x9251=(gconst1*r01);
IkReal x9252=(r00*sj3);
IkReal x9253=(cj3*r20);
IkReal x9254=((1.0)*cj2);
IkReal x9255=(cj3*r00);
IkReal x9256=(gconst1*r21);
IkReal x9257=(cj1*sj2);
IkReal x9258=(r20*sj3);
IkReal x9259=((1.0)*gconst1);
IkReal x9260=(gconst2*r01);
IkReal x9261=((1.0)*cj3);
IkReal x9262=(gconst2*r21);
IkReal x9263=(cj1*x9254);
IkReal x9264=((1.0)*x9248);
IkReal x9265=(gconst2*x9248);
IkReal x9266=(cj3*x9249);
IkReal x9267=(sj3*x9249);
IkReal x9268=((1.0)*gconst2*x9249);
evalcond[0]=((-1.0)*r12*x9249);
evalcond[1]=((((-1.0)*x9256*x9264))+((r20*x9265)));
evalcond[2]=(((cj2*sj1))+x9257+(((-1.0)*r12*sj3*x9264)));
evalcond[3]=((1.0)+((r00*x9265))+(((-1.0)*x9251*x9264)));
evalcond[4]=((((-1.0)*r12*x9248*x9261))+(((-1.0)*x9263))+x9250);
evalcond[5]=((((-1.0)*x9255*x9268))+((x9251*x9266))+((gconst1*x9252))+((sj3*x9260)));
evalcond[6]=((((-1.0)*x9260*x9261))+(((-1.0)*x9255*x9259))+((x9251*x9267))+(((-1.0)*x9252*x9268)));
evalcond[7]=(((x9256*x9266))+(((-1.0)*sj1*x9254))+((gconst1*x9258))+((sj3*x9262))+(((-1.0)*x9257))+(((-1.0)*x9253*x9268)));
evalcond[8]=((((-1.0)*x9253*x9259))+(((-1.0)*x9263))+((x9256*x9267))+(((-1.0)*x9258*x9268))+x9250+(((-1.0)*x9261*x9262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9269=((1.0)*gconst2);
IkReal x9270=(gconst1*r01);
CheckValue<IkReal> x9271=IKPowWithIntegerCheck(((((-1.0)*x9270))+((gconst2*r00))),-1);
if(!x9271.valid){
continue;
}
CheckValue<IkReal> x9272=IKPowWithIntegerCheck((((cj3*x9270))+(((-1.0)*cj3*r00*x9269))),-1);
if(!x9272.valid){
continue;
}
if( IKabs(((-1.0)*(x9271.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9272.value)*(((((-1.0)*r01*sj3*x9269))+(((-1.0)*gconst1*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9271.value)))+IKsqr(((x9272.value)*(((((-1.0)*r01*sj3*x9269))+(((-1.0)*gconst1*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9271.value)), ((x9272.value)*(((((-1.0)*r01*sj3*x9269))+(((-1.0)*gconst1*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9273=IKsin(j4);
IkReal x9274=IKcos(j4);
IkReal x9275=(sj1*sj2);
IkReal x9276=(gconst1*r01);
IkReal x9277=(r00*sj3);
IkReal x9278=(cj3*r20);
IkReal x9279=((1.0)*cj2);
IkReal x9280=(cj3*r00);
IkReal x9281=(gconst1*r21);
IkReal x9282=(cj1*sj2);
IkReal x9283=(r20*sj3);
IkReal x9284=((1.0)*gconst1);
IkReal x9285=(gconst2*r01);
IkReal x9286=((1.0)*cj3);
IkReal x9287=(gconst2*r21);
IkReal x9288=(cj1*x9279);
IkReal x9289=((1.0)*x9273);
IkReal x9290=(gconst2*x9273);
IkReal x9291=(cj3*x9274);
IkReal x9292=(sj3*x9274);
IkReal x9293=((1.0)*gconst2*x9274);
evalcond[0]=((-1.0)*r12*x9274);
evalcond[1]=((((-1.0)*x9281*x9289))+((r20*x9290)));
evalcond[2]=(((cj2*sj1))+x9282+(((-1.0)*r12*sj3*x9289)));
evalcond[3]=((1.0)+(((-1.0)*x9276*x9289))+((r00*x9290)));
evalcond[4]=((((-1.0)*r12*x9273*x9286))+(((-1.0)*x9288))+x9275);
evalcond[5]=(((x9276*x9291))+(((-1.0)*x9280*x9293))+((gconst1*x9277))+((sj3*x9285)));
evalcond[6]=(((x9276*x9292))+(((-1.0)*x9277*x9293))+(((-1.0)*x9285*x9286))+(((-1.0)*x9280*x9284)));
evalcond[7]=((((-1.0)*x9278*x9293))+(((-1.0)*x9282))+((x9281*x9291))+((sj3*x9287))+(((-1.0)*sj1*x9279))+((gconst1*x9283)));
evalcond[8]=((((-1.0)*x9288))+x9275+(((-1.0)*x9278*x9284))+(((-1.0)*x9286*x9287))+((x9281*x9292))+(((-1.0)*x9283*x9293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9294=(gconst2*r00);
IkReal x9295=(gconst1*r01);
CheckValue<IkReal> x9296=IKPowWithIntegerCheck((x9294+(((-1.0)*x9295))),-1);
if(!x9296.valid){
continue;
}
CheckValue<IkReal> x9297=IKPowWithIntegerCheck(((((-1.0)*sj3*x9294))+((sj3*x9295))),-1);
if(!x9297.valid){
continue;
}
if( IKabs(((-1.0)*(x9296.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9297.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9296.value)))+IKsqr(((x9297.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9296.value)), ((x9297.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9298=IKsin(j4);
IkReal x9299=IKcos(j4);
IkReal x9300=(sj1*sj2);
IkReal x9301=(gconst1*r01);
IkReal x9302=(r00*sj3);
IkReal x9303=(cj3*r20);
IkReal x9304=((1.0)*cj2);
IkReal x9305=(cj3*r00);
IkReal x9306=(gconst1*r21);
IkReal x9307=(cj1*sj2);
IkReal x9308=(r20*sj3);
IkReal x9309=((1.0)*gconst1);
IkReal x9310=(gconst2*r01);
IkReal x9311=((1.0)*cj3);
IkReal x9312=(gconst2*r21);
IkReal x9313=(cj1*x9304);
IkReal x9314=((1.0)*x9298);
IkReal x9315=(gconst2*x9298);
IkReal x9316=(cj3*x9299);
IkReal x9317=(sj3*x9299);
IkReal x9318=((1.0)*gconst2*x9299);
evalcond[0]=((-1.0)*r12*x9299);
evalcond[1]=((((-1.0)*x9306*x9314))+((r20*x9315)));
evalcond[2]=(((cj2*sj1))+x9307+(((-1.0)*r12*sj3*x9314)));
evalcond[3]=((1.0)+(((-1.0)*x9301*x9314))+((r00*x9315)));
evalcond[4]=((((-1.0)*r12*x9298*x9311))+x9300+(((-1.0)*x9313)));
evalcond[5]=(((x9301*x9316))+(((-1.0)*x9305*x9318))+((gconst1*x9302))+((sj3*x9310)));
evalcond[6]=((((-1.0)*x9302*x9318))+((x9301*x9317))+(((-1.0)*x9310*x9311))+(((-1.0)*x9305*x9309)));
evalcond[7]=((((-1.0)*x9303*x9318))+(((-1.0)*sj1*x9304))+((x9306*x9316))+(((-1.0)*x9307))+((gconst1*x9308))+((sj3*x9312)));
evalcond[8]=(x9300+(((-1.0)*x9303*x9309))+(((-1.0)*x9311*x9312))+(((-1.0)*x9313))+((x9306*x9317))+(((-1.0)*x9308*x9318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9319=gconst2*gconst2;
IkReal x9320=gconst1*gconst1;
IkReal x9321=(r00*r11);
IkReal x9322=(gconst1*gconst2);
IkReal x9323=((1.0)*sj3);
IkReal x9324=(r01*r11);
IkReal x9325=((1.0)*cj3*r10);
IkReal x9326=((1.0)*cj3*r12);
CheckValue<IkReal> x9327 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*x9326))+(((-1.0)*gconst1*r00*x9326)))),IkReal(((((-1.0)*r00*x9322*x9325))+(((-1.0)*r01*x9319*x9325))+((cj3*x9320*x9321))+((cj3*x9322*x9324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9327.valid){
continue;
}
CheckValue<IkReal> x9328=IKPowWithIntegerCheck(IKsign((((r00*r10*sj3*x9319))+((r02*r12*sj3))+(((-1.0)*x9321*x9322*x9323))+(((-1.0)*r01*r10*x9322*x9323))+((sj3*x9320*x9324)))),-1);
if(!x9328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9327.value)+(((1.5707963267949)*(x9328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9329=IKsin(j4);
IkReal x9330=IKcos(j4);
IkReal x9331=(sj1*sj2);
IkReal x9332=(r00*sj3);
IkReal x9333=(gconst2*r20);
IkReal x9334=(cj3*gconst1);
IkReal x9335=(gconst1*r01);
IkReal x9336=((1.0)*cj2);
IkReal x9337=(cj3*gconst2);
IkReal x9338=(gconst1*r11);
IkReal x9339=(gconst1*r21);
IkReal x9340=(cj1*sj2);
IkReal x9341=(gconst1*sj3);
IkReal x9342=(gconst2*sj3);
IkReal x9343=(cj1*x9336);
IkReal x9344=((1.0)*x9330);
IkReal x9345=((1.0)*x9329);
IkReal x9346=((1.0)*x9337);
IkReal x9347=(gconst2*x9329);
IkReal x9348=(sj3*x9330);
evalcond[0]=(((x9329*x9333))+(((-1.0)*r22*x9344))+(((-1.0)*x9339*x9345)));
evalcond[1]=(((r10*x9347))+(((-1.0)*r12*x9344))+(((-1.0)*x9338*x9345)));
evalcond[2]=((1.0)+((r00*x9347))+(((-1.0)*r02*x9344))+(((-1.0)*x9335*x9345)));
evalcond[3]=(((gconst1*x9332))+(((-1.0)*cj3*r02*x9345))+((r01*x9342))+(((-1.0)*r00*x9337*x9344))+((r01*x9330*x9334)));
evalcond[4]=((((-1.0)*gconst2*x9332*x9344))+(((-1.0)*r02*sj3*x9345))+((x9335*x9348))+(((-1.0)*r01*x9346))+(((-1.0)*r00*x9334)));
evalcond[5]=(((r11*x9342))+x9331+(((-1.0)*x9343))+((r11*x9330*x9334))+((r10*x9341))+(((-1.0)*cj3*r12*x9345))+(((-1.0)*r10*x9337*x9344)));
evalcond[6]=((((-1.0)*sj1*x9336))+(((-1.0)*cj3*x9333*x9344))+((r21*x9330*x9334))+(((-1.0)*x9340))+((r20*x9341))+((r21*x9342))+(((-1.0)*cj3*r22*x9345)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r12*sj3*x9345))+(((-1.0)*r10*x9334))+x9340+(((-1.0)*r11*x9346))+((x9338*x9348))+(((-1.0)*r10*x9342*x9344)));
evalcond[8]=(((x9339*x9348))+x9331+(((-1.0)*r20*x9334))+(((-1.0)*x9343))+(((-1.0)*r22*sj3*x9345))+(((-1.0)*sj3*x9333*x9344))+(((-1.0)*r21*x9346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9349=gconst1*gconst1;
IkReal x9350=gconst2*gconst2;
IkReal x9351=(r00*sj3);
IkReal x9352=((1.0)*r11);
IkReal x9353=(r01*sj3);
IkReal x9354=(gconst1*gconst2);
IkReal x9355=(cj3*r01);
IkReal x9356=(cj3*r00);
IkReal x9357=(r10*x9350);
CheckValue<IkReal> x9358 = IKatan2WithCheck(IkReal((((gconst1*r12*x9351))+((gconst2*r12*x9353)))),IkReal((((x9353*x9357))+(((-1.0)*x9349*x9351*x9352))+((r10*x9351*x9354))+(((-1.0)*x9352*x9353*x9354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9358.valid){
continue;
}
CheckValue<IkReal> x9359=IKPowWithIntegerCheck(IKsign((((r11*x9349*x9355))+((cj3*r02*r12))+(((-1.0)*r10*x9354*x9355))+(((-1.0)*x9352*x9354*x9356))+((x9356*x9357)))),-1);
if(!x9359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9358.value)+(((1.5707963267949)*(x9359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9360=IKsin(j4);
IkReal x9361=IKcos(j4);
IkReal x9362=(sj1*sj2);
IkReal x9363=(r00*sj3);
IkReal x9364=(gconst2*r20);
IkReal x9365=(cj3*gconst1);
IkReal x9366=(gconst1*r01);
IkReal x9367=((1.0)*cj2);
IkReal x9368=(cj3*gconst2);
IkReal x9369=(gconst1*r11);
IkReal x9370=(gconst1*r21);
IkReal x9371=(cj1*sj2);
IkReal x9372=(gconst1*sj3);
IkReal x9373=(gconst2*sj3);
IkReal x9374=(cj1*x9367);
IkReal x9375=((1.0)*x9361);
IkReal x9376=((1.0)*x9360);
IkReal x9377=((1.0)*x9368);
IkReal x9378=(gconst2*x9360);
IkReal x9379=(sj3*x9361);
evalcond[0]=((((-1.0)*x9370*x9376))+(((-1.0)*r22*x9375))+((x9360*x9364)));
evalcond[1]=((((-1.0)*x9369*x9376))+(((-1.0)*r12*x9375))+((r10*x9378)));
evalcond[2]=((1.0)+(((-1.0)*x9366*x9376))+(((-1.0)*r02*x9375))+((r00*x9378)));
evalcond[3]=(((gconst1*x9363))+((r01*x9361*x9365))+(((-1.0)*r00*x9368*x9375))+((r01*x9373))+(((-1.0)*cj3*r02*x9376)));
evalcond[4]=((((-1.0)*gconst2*x9363*x9375))+((x9366*x9379))+(((-1.0)*r00*x9365))+(((-1.0)*r01*x9377))+(((-1.0)*r02*sj3*x9376)));
evalcond[5]=(x9362+((r11*x9373))+(((-1.0)*cj3*r12*x9376))+((r11*x9361*x9365))+(((-1.0)*x9374))+((r10*x9372))+(((-1.0)*r10*x9368*x9375)));
evalcond[6]=((((-1.0)*cj3*r22*x9376))+(((-1.0)*cj3*x9364*x9375))+((r21*x9361*x9365))+((r21*x9373))+(((-1.0)*sj1*x9367))+(((-1.0)*x9371))+((r20*x9372)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r10*x9365))+x9371+((x9369*x9379))+(((-1.0)*r10*x9373*x9375))+(((-1.0)*r12*sj3*x9376))+(((-1.0)*r11*x9377)));
evalcond[8]=(x9362+(((-1.0)*r22*sj3*x9376))+(((-1.0)*x9374))+(((-1.0)*r21*x9377))+(((-1.0)*r20*x9365))+(((-1.0)*sj3*x9364*x9375))+((x9370*x9379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9380=((1.0)*gconst1);
CheckValue<IkReal> x9381 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9380))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9381.valid){
continue;
}
CheckValue<IkReal> x9382=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9380))+(((-1.0)*gconst2*r11)))),-1);
if(!x9382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9381.value)+(((1.5707963267949)*(x9382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9383=IKsin(j4);
IkReal x9384=IKcos(j4);
IkReal x9385=(sj1*sj2);
IkReal x9386=(r00*sj3);
IkReal x9387=(gconst2*r20);
IkReal x9388=(cj3*gconst1);
IkReal x9389=(gconst1*r01);
IkReal x9390=((1.0)*cj2);
IkReal x9391=(cj3*gconst2);
IkReal x9392=(gconst1*r11);
IkReal x9393=(gconst1*r21);
IkReal x9394=(cj1*sj2);
IkReal x9395=(gconst1*sj3);
IkReal x9396=(gconst2*sj3);
IkReal x9397=(cj1*x9390);
IkReal x9398=((1.0)*x9384);
IkReal x9399=((1.0)*x9383);
IkReal x9400=((1.0)*x9391);
IkReal x9401=(gconst2*x9383);
IkReal x9402=(sj3*x9384);
evalcond[0]=(((x9383*x9387))+(((-1.0)*r22*x9398))+(((-1.0)*x9393*x9399)));
evalcond[1]=((((-1.0)*r12*x9398))+(((-1.0)*x9392*x9399))+((r10*x9401)));
evalcond[2]=((1.0)+(((-1.0)*x9389*x9399))+(((-1.0)*r02*x9398))+((r00*x9401)));
evalcond[3]=(((r01*x9396))+((r01*x9384*x9388))+(((-1.0)*cj3*r02*x9399))+(((-1.0)*r00*x9391*x9398))+((gconst1*x9386)));
evalcond[4]=((((-1.0)*gconst2*x9386*x9398))+(((-1.0)*r02*sj3*x9399))+(((-1.0)*r00*x9388))+(((-1.0)*r01*x9400))+((x9389*x9402)));
evalcond[5]=(((r10*x9395))+((r11*x9396))+x9385+((r11*x9384*x9388))+(((-1.0)*r10*x9391*x9398))+(((-1.0)*x9397))+(((-1.0)*cj3*r12*x9399)));
evalcond[6]=(((r21*x9384*x9388))+((r20*x9395))+(((-1.0)*cj3*x9387*x9398))+(((-1.0)*x9394))+(((-1.0)*sj1*x9390))+((r21*x9396))+(((-1.0)*cj3*r22*x9399)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r10*x9396*x9398))+x9394+(((-1.0)*r10*x9388))+((x9392*x9402))+(((-1.0)*r11*x9400))+(((-1.0)*r12*sj3*x9399)));
evalcond[8]=(x9385+(((-1.0)*r22*sj3*x9399))+((x9393*x9402))+(((-1.0)*r20*x9388))+(((-1.0)*r21*x9400))+(((-1.0)*sj3*x9387*x9398))+(((-1.0)*x9397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9405 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9405.valid){
continue;
}
IkReal x9403=((-1.0)*(x9405.value));
IkReal x9404=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9403;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9403;
IkReal gconst1=((-1.0)*r21*x9404);
IkReal gconst2=(r20*x9404);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9408 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9408.valid){
continue;
}
IkReal x9406=((-1.0)*(x9408.value));
IkReal x9407=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9406;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9406;
IkReal gconst1=((-1.0)*r21*x9407);
IkReal gconst2=(r20*x9407);
CheckValue<IkReal> x9416=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9416.valid){
continue;
}
IkReal x9409=x9416.value;
IkReal x9410=(cj3*x9409);
IkReal x9411=(r11*x9410);
IkReal x9412=(r01*x9410);
IkReal x9413=(r00*x9410);
IkReal x9414=(r10*x9410);
IkReal x9415=(r20*r21*x9410);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x9413*(r20*r20)))+((r00*r20*r21*x9411))+((r01*x9411*(r21*r21)))+((r10*r20*r21*x9412))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9419 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9419.valid){
continue;
}
IkReal x9417=((-1.0)*(x9419.value));
IkReal x9418=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9417;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9417;
IkReal gconst1=((-1.0)*r21*x9418);
IkReal gconst2=(r20*x9418);
CheckValue<IkReal> x9427=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9427.valid){
continue;
}
IkReal x9420=x9427.value;
IkReal x9421=(sj3*x9420);
IkReal x9422=(r11*x9421);
IkReal x9423=(r00*x9421);
IkReal x9424=(r01*x9421);
IkReal x9425=(r10*x9421);
IkReal x9426=(r20*r21*x9421);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9422*(r21*r21)))+((r10*x9423*(r20*r20)))+((r00*r20*r21*x9422))+((r10*r20*r21*x9424))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9430 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9430.valid){
continue;
}
IkReal x9428=((-1.0)*(x9430.value));
IkReal x9429=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9428;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9428;
IkReal gconst1=((-1.0)*r21*x9429);
IkReal gconst2=(r20*x9429);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9433 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9433.valid){
continue;
}
IkReal x9431=((-1.0)*(x9433.value));
IkReal x9432=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9431;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9431;
IkReal gconst1=((-1.0)*r21*x9432);
IkReal gconst2=(r20*x9432);
IkReal x9434=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9438=IKPowWithIntegerCheck(x9434,-1);
if(!x9438.valid){
continue;
}
IkReal x9435=x9438.value;
IkReal x9436=((1.0)*x9435);
IkReal x9437=((((-2.0)*r00*r01*r20*r21*x9435))+(((-1.0)*(r02*r02)))+(((-1.0)*x9436*(r00*r00)*(r20*r20)))+(((-1.0)*x9436*(r01*r01)*(r21*r21))));
j4eval[0]=x9437;
j4eval[1]=IKsign(x9437);
j4eval[2]=r02;
j4eval[3]=x9434;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9441 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9441.valid){
continue;
}
IkReal x9439=((-1.0)*(x9441.value));
IkReal x9440=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9439;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9439;
IkReal gconst1=((-1.0)*r21*x9440);
IkReal gconst2=(r20*x9440);
IkReal x9442=r22*r22;
IkReal x9443=(cj1*cj2*r12);
CheckValue<IkReal> x9448=IKPowWithIntegerCheck(((-1.0)+x9442),-1);
if(!x9448.valid){
continue;
}
IkReal x9444=x9448.value;
IkReal x9445=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x9442)))) < -0.00001)
continue;
IkReal x9446=IKsqrt(((1.0)+(((-1.0)*x9442))));
IkReal x9447=(r22*x9444*x9446);
j4eval[0]=((IKabs(((((-1.0)*x9445*x9447))+((x9443*x9447)))))+(IKabs(((((-1.0)*x9445))+x9443))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9449=(sj1*sj2);
IkReal x9450=(gconst1*r11);
IkReal x9451=(cj1*cj2);
IkReal x9452=(gconst2*r10);
CheckValue<IkReal> x9453 = IKatan2WithCheck(IkReal((((r12*x9451))+(((-1.0)*r12*x9449)))),IkReal((((x9451*x9452))+(((-1.0)*x9449*x9452))+((x9449*x9450))+(((-1.0)*x9450*x9451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9453.valid){
continue;
}
CheckValue<IkReal> x9454=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9450*x9452))+(x9452*x9452)+(x9450*x9450))),-1);
if(!x9454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9453.value)+(((1.5707963267949)*(x9454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9455=IKsin(j4);
IkReal x9456=IKcos(j4);
IkReal x9457=(gconst1*r01);
IkReal x9458=(gconst1*r21);
IkReal x9459=((1.0)*sj1);
IkReal x9460=(gconst1*r11);
IkReal x9461=((1.0)*x9456);
IkReal x9462=((1.0)*x9455);
IkReal x9463=(gconst2*x9455);
evalcond[0]=((((-1.0)*r22*x9461))+(((-1.0)*x9458*x9462))+((r20*x9463)));
evalcond[1]=(((r10*x9463))+(((-1.0)*r12*x9461))+(((-1.0)*x9460*x9462)));
evalcond[2]=((((-1.0)*gconst2*r00*x9461))+(((-1.0)*r02*x9462))+((x9456*x9457)));
evalcond[3]=((-1.0)+(((-1.0)*x9457*x9462))+((r00*x9463))+(((-1.0)*r02*x9461)));
evalcond[4]=(((x9456*x9460))+(((-1.0)*sj2*x9459))+(((-1.0)*r12*x9462))+((cj1*cj2))+(((-1.0)*gconst2*r10*x9461)));
evalcond[5]=((((-1.0)*cj2*x9459))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9461))+(((-1.0)*r22*x9462))+((x9456*x9458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9464=(gconst1*r01);
IkReal x9465=(gconst2*r00);
CheckValue<IkReal> x9466 = IKatan2WithCheck(IkReal((x9464+(((-1.0)*x9465)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9466.valid){
continue;
}
CheckValue<IkReal> x9467=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9465*x9465)))+(((2.0)*x9464*x9465))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9464*x9464))))),-1);
if(!x9467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9466.value)+(((1.5707963267949)*(x9467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9468=IKsin(j4);
IkReal x9469=IKcos(j4);
IkReal x9470=(gconst1*r01);
IkReal x9471=(gconst1*r21);
IkReal x9472=((1.0)*sj1);
IkReal x9473=(gconst1*r11);
IkReal x9474=((1.0)*x9469);
IkReal x9475=((1.0)*x9468);
IkReal x9476=(gconst2*x9468);
evalcond[0]=((((-1.0)*x9471*x9475))+(((-1.0)*r22*x9474))+((r20*x9476)));
evalcond[1]=(((r10*x9476))+(((-1.0)*x9473*x9475))+(((-1.0)*r12*x9474)));
evalcond[2]=(((x9469*x9470))+(((-1.0)*r02*x9475))+(((-1.0)*gconst2*r00*x9474)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9474))+(((-1.0)*x9470*x9475))+((r00*x9476)));
evalcond[4]=(((x9469*x9473))+(((-1.0)*sj2*x9472))+(((-1.0)*r12*x9475))+((cj1*cj2))+(((-1.0)*gconst2*r10*x9474)));
evalcond[5]=(((x9469*x9471))+(((-1.0)*cj2*x9472))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9474))+(((-1.0)*r22*x9475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9477 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9477.valid){
continue;
}
CheckValue<IkReal> x9478=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9477.value)+(((1.5707963267949)*(x9478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9479=IKsin(j4);
IkReal x9480=IKcos(j4);
IkReal x9481=(gconst1*r01);
IkReal x9482=(gconst1*r21);
IkReal x9483=((1.0)*sj1);
IkReal x9484=(gconst1*r11);
IkReal x9485=((1.0)*x9480);
IkReal x9486=((1.0)*x9479);
IkReal x9487=(gconst2*x9479);
evalcond[0]=(((r20*x9487))+(((-1.0)*x9482*x9486))+(((-1.0)*r22*x9485)));
evalcond[1]=((((-1.0)*x9484*x9486))+((r10*x9487))+(((-1.0)*r12*x9485)));
evalcond[2]=((((-1.0)*gconst2*r00*x9485))+(((-1.0)*r02*x9486))+((x9480*x9481)));
evalcond[3]=((-1.0)+((r00*x9487))+(((-1.0)*r02*x9485))+(((-1.0)*x9481*x9486)));
evalcond[4]=((((-1.0)*sj2*x9483))+((x9480*x9484))+(((-1.0)*gconst2*r10*x9485))+((cj1*cj2))+(((-1.0)*r12*x9486)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x9486))+(((-1.0)*gconst2*r20*x9485))+((x9480*x9482))+(((-1.0)*cj2*x9483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9490 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9490.valid){
continue;
}
IkReal x9488=((-1.0)*(x9490.value));
IkReal x9489=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9488;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9488;
IkReal gconst1=((-1.0)*r21*x9489);
IkReal gconst2=(r20*x9489);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9493 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9493.valid){
continue;
}
IkReal x9491=((-1.0)*(x9493.value));
IkReal x9492=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9491;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9491;
IkReal gconst1=((-1.0)*r21*x9492);
IkReal gconst2=(r20*x9492);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
IkReal x9494=((-1.0)*(x9496.value));
IkReal x9495=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9494;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9494;
IkReal gconst1=((-1.0)*r21*x9495);
IkReal gconst2=(r20*x9495);
IkReal x9497=r22*r22;
IkReal x9498=(cj1*r02*sj2);
IkReal x9499=(cj2*r02*sj1);
CheckValue<IkReal> x9503=IKPowWithIntegerCheck(((-1.0)+x9497),-1);
if(!x9503.valid){
continue;
}
IkReal x9500=x9503.value;
if((((1.0)+(((-1.0)*x9497)))) < -0.00001)
continue;
IkReal x9501=IKsqrt(((1.0)+(((-1.0)*x9497))));
IkReal x9502=((1.0)*r22*x9500*x9501);
j4eval[0]=((IKabs(((((-1.0)*x9498*x9502))+(((-1.0)*x9499*x9502)))))+(IKabs((x9498+x9499))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9504=(cj2*sj1);
IkReal x9505=(cj1*sj2);
IkReal x9506=((1.0)*gconst2);
IkReal x9507=(gconst1*r01);
CheckValue<IkReal> x9508=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9506))+(((-1.0)*gconst1*r10)))),-1);
if(!x9508.valid){
continue;
}
CheckValue<IkReal> x9509 = IKatan2WithCheck(IkReal((((x9505*x9507))+((x9504*x9507))+(((-1.0)*r00*x9505*x9506))+(((-1.0)*r00*x9504*x9506)))),IkReal((((r02*x9504))+((r02*x9505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9508.value)))+(x9509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9510=IKcos(j4);
IkReal x9511=IKsin(j4);
IkReal x9512=(gconst1*r01);
IkReal x9513=((1.0)*sj1);
IkReal x9514=(gconst1*r21);
IkReal x9515=(gconst1*r11);
IkReal x9516=((1.0)*x9510);
IkReal x9517=(gconst2*x9510);
IkReal x9518=((1.0)*x9511);
IkReal x9519=(gconst2*x9511);
evalcond[0]=(((r00*x9517))+(((-1.0)*x9512*x9516))+((r02*x9511)));
evalcond[1]=((((-1.0)*x9514*x9518))+(((-1.0)*r22*x9516))+((r20*x9519)));
evalcond[2]=((((-1.0)*x9515*x9518))+(((-1.0)*r12*x9516))+((r10*x9519)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9516))+((r00*x9519))+(((-1.0)*x9512*x9518)));
evalcond[4]=(((r12*x9511))+(((-1.0)*x9515*x9516))+(((-1.0)*sj2*x9513))+((cj1*cj2))+((r10*x9517)));
evalcond[5]=((((-1.0)*x9514*x9516))+(((-1.0)*cj2*x9513))+(((-1.0)*cj1*sj2))+((r22*x9511))+((r20*x9517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9520=(gconst1*r01);
IkReal x9521=(gconst2*r00);
CheckValue<IkReal> x9522=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9520*x9521))+(x9521*x9521)+(x9520*x9520)+(r02*r02))),-1);
if(!x9522.valid){
continue;
}
CheckValue<IkReal> x9523 = IKatan2WithCheck(IkReal(((((-1.0)*x9520))+x9521)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9522.value)))+(x9523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9524=IKcos(j4);
IkReal x9525=IKsin(j4);
IkReal x9526=(gconst1*r01);
IkReal x9527=((1.0)*sj1);
IkReal x9528=(gconst1*r21);
IkReal x9529=(gconst1*r11);
IkReal x9530=((1.0)*x9524);
IkReal x9531=(gconst2*x9524);
IkReal x9532=((1.0)*x9525);
IkReal x9533=(gconst2*x9525);
evalcond[0]=(((r02*x9525))+(((-1.0)*x9526*x9530))+((r00*x9531)));
evalcond[1]=(((r20*x9533))+(((-1.0)*r22*x9530))+(((-1.0)*x9528*x9532)));
evalcond[2]=(((r10*x9533))+(((-1.0)*x9529*x9532))+(((-1.0)*r12*x9530)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9530))+(((-1.0)*x9526*x9532))+((r00*x9533)));
evalcond[4]=((((-1.0)*sj2*x9527))+((r12*x9525))+((r10*x9531))+((cj1*cj2))+(((-1.0)*x9529*x9530)));
evalcond[5]=(((r20*x9531))+(((-1.0)*cj1*sj2))+((r22*x9525))+(((-1.0)*cj2*x9527))+(((-1.0)*x9528*x9530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9534 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9534.valid){
continue;
}
CheckValue<IkReal> x9535=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9534.value)+(((1.5707963267949)*(x9535.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9536=IKcos(j4);
IkReal x9537=IKsin(j4);
IkReal x9538=(gconst1*r01);
IkReal x9539=((1.0)*sj1);
IkReal x9540=(gconst1*r21);
IkReal x9541=(gconst1*r11);
IkReal x9542=((1.0)*x9536);
IkReal x9543=(gconst2*x9536);
IkReal x9544=((1.0)*x9537);
IkReal x9545=(gconst2*x9537);
evalcond[0]=(((r02*x9537))+(((-1.0)*x9538*x9542))+((r00*x9543)));
evalcond[1]=((((-1.0)*x9540*x9544))+(((-1.0)*r22*x9542))+((r20*x9545)));
evalcond[2]=((((-1.0)*r12*x9542))+(((-1.0)*x9541*x9544))+((r10*x9545)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9542))+(((-1.0)*x9538*x9544))+((r00*x9545)));
evalcond[4]=((((-1.0)*x9541*x9542))+((r12*x9537))+((r10*x9543))+((cj1*cj2))+(((-1.0)*sj2*x9539)));
evalcond[5]=((((-1.0)*x9540*x9542))+(((-1.0)*cj1*sj2))+((r20*x9543))+((r22*x9537))+(((-1.0)*cj2*x9539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9546=((-1.0)*py);
CheckValue<IkReal> x9548 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9548.valid){
continue;
}
IkReal x9547=((-1.0)*(x9548.value));
sj5=gconst1;
cj5=gconst2;
j5=x9547;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9546);
rxp0_2=(py*r00);
rxp1_0=(r21*x9546);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9547;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9549=((1.0)*sj3);
IkReal x9550=(r01*r21);
IkReal x9551=(r00*r20);
j4eval[0]=(x9551+x9550);
j4eval[1]=((((-1.0)*x9549*x9551))+(((-1.0)*x9549*x9550)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9552=((-1.0)*py);
CheckValue<IkReal> x9554 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9554.valid){
continue;
}
IkReal x9553=((-1.0)*(x9554.value));
sj5=gconst1;
cj5=gconst2;
j5=x9553;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9552);
rxp0_2=(py*r00);
rxp1_0=(r21*x9552);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9553;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9555=(r00*r20);
IkReal x9556=((1.0)*cj3);
IkReal x9557=(r01*r21);
j4eval[0]=(x9555+x9557);
j4eval[1]=((((-1.0)*x9556*x9557))+(((-1.0)*x9555*x9556)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9558=((-1.0)*py);
CheckValue<IkReal> x9560 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9560.valid){
continue;
}
IkReal x9559=((-1.0)*(x9560.value));
sj5=gconst1;
cj5=gconst2;
j5=x9559;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9558);
rxp0_2=(py*r00);
rxp1_0=(r21*x9558);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9559;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9561=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x9561))+(((-1.0)*r01*r21*x9561)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9562=((1.0)*gconst2);
CheckValue<IkReal> x9563=IKPowWithIntegerCheck(cj3,-1);
if(!x9563.valid){
continue;
}
CheckValue<IkReal> x9564=IKPowWithIntegerCheck(r12,-1);
if(!x9564.valid){
continue;
}
CheckValue<IkReal> x9565=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9562))+((cj3*gconst1*r01))),-1);
if(!x9565.valid){
continue;
}
if( IKabs(((x9563.value)*(x9564.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9565.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9562)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9563.value)*(x9564.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9565.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9562))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9563.value)*(x9564.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x9565.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9562))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9566=IKsin(j4);
IkReal x9567=IKcos(j4);
IkReal x9568=((1.0)*sj3);
IkReal x9569=(gconst1*sj3);
IkReal x9570=(sj1*sj2);
IkReal x9571=((1.0)*cj3);
IkReal x9572=((1.0)*cj2);
IkReal x9573=(gconst2*r01);
IkReal x9574=(gconst2*r21);
IkReal x9575=((1.0)*cj1*sj2);
IkReal x9576=(sj1*x9572);
IkReal x9577=(r12*x9566);
IkReal x9578=(gconst2*x9567);
IkReal x9579=(gconst2*x9566);
IkReal x9580=((1.0)*gconst1*x9566);
IkReal x9581=(cj3*gconst1*x9567);
IkReal x9582=(x9576+x9575);
evalcond[0]=((-1.0)*r12*x9567);
evalcond[1]=((((-1.0)*r21*x9580))+((r20*x9579)));
evalcond[2]=((-1.0)+((r00*x9579))+(((-1.0)*r01*x9580)));
evalcond[3]=((((-1.0)*x9570))+((cj1*cj2))+(((-1.0)*x9571*x9577)));
evalcond[4]=((((-1.0)*x9582))+(((-1.0)*x9568*x9577)));
evalcond[5]=(((sj3*x9573))+((r00*x9569))+((r01*x9581))+(((-1.0)*r00*x9571*x9578)));
evalcond[6]=(((r01*x9567*x9569))+(((-1.0)*r00*x9568*x9578))+(((-1.0)*gconst1*r00*x9571))+(((-1.0)*x9571*x9573)));
evalcond[7]=(((sj3*x9574))+(((-1.0)*x9582))+((r21*x9581))+(((-1.0)*r20*x9571*x9578))+((r20*x9569)));
evalcond[8]=((((-1.0)*gconst1*r20*x9571))+(((-1.0)*cj1*x9572))+x9570+(((-1.0)*r20*x9568*x9578))+((r21*x9567*x9569))+(((-1.0)*x9571*x9574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9583=((1.0)*gconst2);
IkReal x9584=(gconst1*r01);
CheckValue<IkReal> x9585=IKPowWithIntegerCheck(((((-1.0)*x9584))+((gconst2*r00))),-1);
if(!x9585.valid){
continue;
}
CheckValue<IkReal> x9586=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9583))+((cj3*x9584))),-1);
if(!x9586.valid){
continue;
}
if( IKabs(x9585.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9586.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9583)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9585.value)+IKsqr(((x9586.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9583))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9585.value, ((x9586.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9583))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9587=IKsin(j4);
IkReal x9588=IKcos(j4);
IkReal x9589=((1.0)*sj3);
IkReal x9590=(gconst1*sj3);
IkReal x9591=(sj1*sj2);
IkReal x9592=((1.0)*cj3);
IkReal x9593=((1.0)*cj2);
IkReal x9594=(gconst2*r01);
IkReal x9595=(gconst2*r21);
IkReal x9596=((1.0)*cj1*sj2);
IkReal x9597=(sj1*x9593);
IkReal x9598=(r12*x9587);
IkReal x9599=(gconst2*x9588);
IkReal x9600=(gconst2*x9587);
IkReal x9601=((1.0)*gconst1*x9587);
IkReal x9602=(cj3*gconst1*x9588);
IkReal x9603=(x9597+x9596);
evalcond[0]=((-1.0)*r12*x9588);
evalcond[1]=((((-1.0)*r21*x9601))+((r20*x9600)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x9601))+((r00*x9600)));
evalcond[3]=((((-1.0)*x9592*x9598))+(((-1.0)*x9591))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9603))+(((-1.0)*x9589*x9598)));
evalcond[5]=(((r00*x9590))+((r01*x9602))+(((-1.0)*r00*x9592*x9599))+((sj3*x9594)));
evalcond[6]=((((-1.0)*x9592*x9594))+(((-1.0)*r00*x9589*x9599))+(((-1.0)*gconst1*r00*x9592))+((r01*x9588*x9590)));
evalcond[7]=(((r20*x9590))+((r21*x9602))+(((-1.0)*x9603))+((sj3*x9595))+(((-1.0)*r20*x9592*x9599)));
evalcond[8]=((((-1.0)*x9592*x9595))+((r21*x9588*x9590))+(((-1.0)*r20*x9589*x9599))+x9591+(((-1.0)*gconst1*r20*x9592))+(((-1.0)*cj1*x9593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9604=(gconst2*r00);
IkReal x9605=(gconst1*r01);
CheckValue<IkReal> x9606=IKPowWithIntegerCheck(((((-1.0)*x9605))+x9604),-1);
if(!x9606.valid){
continue;
}
CheckValue<IkReal> x9607=IKPowWithIntegerCheck(((((-1.0)*sj3*x9604))+((sj3*x9605))),-1);
if(!x9607.valid){
continue;
}
if( IKabs(x9606.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9607.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9606.value)+IKsqr(((x9607.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9606.value, ((x9607.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9608=IKsin(j4);
IkReal x9609=IKcos(j4);
IkReal x9610=((1.0)*sj3);
IkReal x9611=(gconst1*sj3);
IkReal x9612=(sj1*sj2);
IkReal x9613=((1.0)*cj3);
IkReal x9614=((1.0)*cj2);
IkReal x9615=(gconst2*r01);
IkReal x9616=(gconst2*r21);
IkReal x9617=((1.0)*cj1*sj2);
IkReal x9618=(sj1*x9614);
IkReal x9619=(r12*x9608);
IkReal x9620=(gconst2*x9609);
IkReal x9621=(gconst2*x9608);
IkReal x9622=((1.0)*gconst1*x9608);
IkReal x9623=(cj3*gconst1*x9609);
IkReal x9624=(x9617+x9618);
evalcond[0]=((-1.0)*r12*x9609);
evalcond[1]=(((r20*x9621))+(((-1.0)*r21*x9622)));
evalcond[2]=((-1.0)+((r00*x9621))+(((-1.0)*r01*x9622)));
evalcond[3]=((((-1.0)*x9613*x9619))+(((-1.0)*x9612))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9610*x9619))+(((-1.0)*x9624)));
evalcond[5]=((((-1.0)*r00*x9613*x9620))+((r01*x9623))+((r00*x9611))+((sj3*x9615)));
evalcond[6]=((((-1.0)*x9613*x9615))+(((-1.0)*gconst1*r00*x9613))+(((-1.0)*r00*x9610*x9620))+((r01*x9609*x9611)));
evalcond[7]=(((r20*x9611))+((r21*x9623))+(((-1.0)*r20*x9613*x9620))+((sj3*x9616))+(((-1.0)*x9624)));
evalcond[8]=((((-1.0)*x9613*x9616))+((r21*x9609*x9611))+(((-1.0)*gconst1*r20*x9613))+x9612+(((-1.0)*r20*x9610*x9620))+(((-1.0)*cj1*x9614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9625=gconst2*gconst2;
IkReal x9626=gconst1*gconst1;
IkReal x9627=(r00*r11);
IkReal x9628=(gconst1*gconst2);
IkReal x9629=((1.0)*sj3);
IkReal x9630=(r01*r11);
IkReal x9631=((1.0)*cj3*r10);
IkReal x9632=((1.0)*cj3*r12);
CheckValue<IkReal> x9633=IKPowWithIntegerCheck(IKsign((((sj3*x9626*x9630))+((r02*r12*sj3))+(((-1.0)*r01*r10*x9628*x9629))+((r00*r10*sj3*x9625))+(((-1.0)*x9627*x9628*x9629)))),-1);
if(!x9633.valid){
continue;
}
CheckValue<IkReal> x9634 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*x9632))+(((-1.0)*gconst1*r00*x9632)))),IkReal((((cj3*x9628*x9630))+((cj3*x9626*x9627))+(((-1.0)*r00*x9628*x9631))+(((-1.0)*r01*x9625*x9631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9633.value)))+(x9634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9635=IKsin(j4);
IkReal x9636=IKcos(j4);
IkReal x9637=(r00*sj3);
IkReal x9638=(gconst2*r20);
IkReal x9639=((1.0)*cj3);
IkReal x9640=(gconst2*r01);
IkReal x9641=(gconst1*r10);
IkReal x9642=(gconst1*r01);
IkReal x9643=((1.0)*sj1);
IkReal x9644=((1.0)*cj1);
IkReal x9645=(cj3*gconst2);
IkReal x9646=(gconst1*r11);
IkReal x9647=(gconst1*r21);
IkReal x9648=(gconst1*r20);
IkReal x9649=(gconst2*r11);
IkReal x9650=(gconst2*r21);
IkReal x9651=(sj2*x9644);
IkReal x9652=(cj2*x9643);
IkReal x9653=((1.0)*x9636);
IkReal x9654=((1.0)*x9635);
IkReal x9655=(gconst2*x9635);
IkReal x9656=(sj3*x9636);
IkReal x9657=(cj3*x9636);
IkReal x9658=(x9652+x9651);
evalcond[0]=(((x9635*x9638))+(((-1.0)*x9647*x9654))+(((-1.0)*r22*x9653)));
evalcond[1]=((((-1.0)*x9646*x9654))+((r10*x9655))+(((-1.0)*r12*x9653)));
evalcond[2]=((-1.0)+(((-1.0)*x9642*x9654))+((r00*x9655))+(((-1.0)*r02*x9653)));
evalcond[3]=(((x9642*x9657))+(((-1.0)*r02*x9635*x9639))+((sj3*x9640))+((gconst1*x9637))+(((-1.0)*gconst2*r00*x9636*x9639)));
evalcond[4]=((((-1.0)*x9639*x9640))+(((-1.0)*gconst1*r00*x9639))+(((-1.0)*r02*sj3*x9654))+((x9642*x9656))+(((-1.0)*gconst2*x9637*x9653)));
evalcond[5]=((((-1.0)*sj2*x9643))+(((-1.0)*r12*x9635*x9639))+((sj3*x9641))+((sj3*x9649))+((x9646*x9657))+((cj1*cj2))+(((-1.0)*gconst2*r10*x9636*x9639)));
evalcond[6]=((((-1.0)*x9636*x9638*x9639))+(((-1.0)*r22*x9635*x9639))+((sj3*x9650))+((x9647*x9657))+((sj3*x9648))+(((-1.0)*x9658)));
evalcond[7]=((((-1.0)*x9639*x9648))+((x9647*x9656))+(((-1.0)*cj2*x9644))+((sj1*sj2))+(((-1.0)*r22*sj3*x9654))+(((-1.0)*x9639*x9650))+(((-1.0)*sj3*x9638*x9653)));
evalcond[8]=((((-1.0)*x9639*x9641))+(((-1.0)*x9639*x9649))+((x9646*x9656))+(((-1.0)*r12*sj3*x9654))+(((-1.0)*gconst2*r10*sj3*x9653))+(((-1.0)*x9658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9659=gconst1*gconst1;
IkReal x9660=gconst2*gconst2;
IkReal x9661=(r00*sj3);
IkReal x9662=((1.0)*r11);
IkReal x9663=(r01*sj3);
IkReal x9664=(gconst1*gconst2);
IkReal x9665=(cj3*r01);
IkReal x9666=(cj3*r00);
IkReal x9667=(r10*x9660);
CheckValue<IkReal> x9668 = IKatan2WithCheck(IkReal((((gconst1*r12*x9661))+((gconst2*r12*x9663)))),IkReal(((((-1.0)*x9659*x9661*x9662))+((x9663*x9667))+(((-1.0)*x9662*x9663*x9664))+((r10*x9661*x9664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9668.valid){
continue;
}
CheckValue<IkReal> x9669=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x9666*x9667))+(((-1.0)*x9662*x9664*x9666))+((r11*x9659*x9665))+(((-1.0)*r10*x9664*x9665)))),-1);
if(!x9669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9668.value)+(((1.5707963267949)*(x9669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9670=IKsin(j4);
IkReal x9671=IKcos(j4);
IkReal x9672=(r00*sj3);
IkReal x9673=(gconst2*r20);
IkReal x9674=((1.0)*cj3);
IkReal x9675=(gconst2*r01);
IkReal x9676=(gconst1*r10);
IkReal x9677=(gconst1*r01);
IkReal x9678=((1.0)*sj1);
IkReal x9679=((1.0)*cj1);
IkReal x9680=(cj3*gconst2);
IkReal x9681=(gconst1*r11);
IkReal x9682=(gconst1*r21);
IkReal x9683=(gconst1*r20);
IkReal x9684=(gconst2*r11);
IkReal x9685=(gconst2*r21);
IkReal x9686=(sj2*x9679);
IkReal x9687=(cj2*x9678);
IkReal x9688=((1.0)*x9671);
IkReal x9689=((1.0)*x9670);
IkReal x9690=(gconst2*x9670);
IkReal x9691=(sj3*x9671);
IkReal x9692=(cj3*x9671);
IkReal x9693=(x9687+x9686);
evalcond[0]=((((-1.0)*r22*x9688))+((x9670*x9673))+(((-1.0)*x9682*x9689)));
evalcond[1]=((((-1.0)*r12*x9688))+((r10*x9690))+(((-1.0)*x9681*x9689)));
evalcond[2]=((-1.0)+(((-1.0)*x9677*x9689))+(((-1.0)*r02*x9688))+((r00*x9690)));
evalcond[3]=(((x9677*x9692))+((sj3*x9675))+((gconst1*x9672))+(((-1.0)*gconst2*r00*x9671*x9674))+(((-1.0)*r02*x9670*x9674)));
evalcond[4]=(((x9677*x9691))+(((-1.0)*gconst2*x9672*x9688))+(((-1.0)*x9674*x9675))+(((-1.0)*r02*sj3*x9689))+(((-1.0)*gconst1*r00*x9674)));
evalcond[5]=((((-1.0)*sj2*x9678))+((sj3*x9676))+((x9681*x9692))+(((-1.0)*r12*x9670*x9674))+((cj1*cj2))+(((-1.0)*gconst2*r10*x9671*x9674))+((sj3*x9684)));
evalcond[6]=(((x9682*x9692))+(((-1.0)*x9671*x9673*x9674))+(((-1.0)*r22*x9670*x9674))+(((-1.0)*x9693))+((sj3*x9685))+((sj3*x9683)));
evalcond[7]=(((x9682*x9691))+(((-1.0)*r22*sj3*x9689))+(((-1.0)*cj2*x9679))+(((-1.0)*sj3*x9673*x9688))+((sj1*sj2))+(((-1.0)*x9674*x9683))+(((-1.0)*x9674*x9685)));
evalcond[8]=((((-1.0)*gconst2*r10*sj3*x9688))+((x9681*x9691))+(((-1.0)*x9674*x9676))+(((-1.0)*x9693))+(((-1.0)*x9674*x9684))+(((-1.0)*r12*sj3*x9689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9694 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9694.valid){
continue;
}
CheckValue<IkReal> x9695=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9694.value)+(((1.5707963267949)*(x9695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9696=IKsin(j4);
IkReal x9697=IKcos(j4);
IkReal x9698=(r00*sj3);
IkReal x9699=(gconst2*r20);
IkReal x9700=((1.0)*cj3);
IkReal x9701=(gconst2*r01);
IkReal x9702=(gconst1*r10);
IkReal x9703=(gconst1*r01);
IkReal x9704=((1.0)*sj1);
IkReal x9705=((1.0)*cj1);
IkReal x9706=(cj3*gconst2);
IkReal x9707=(gconst1*r11);
IkReal x9708=(gconst1*r21);
IkReal x9709=(gconst1*r20);
IkReal x9710=(gconst2*r11);
IkReal x9711=(gconst2*r21);
IkReal x9712=(sj2*x9705);
IkReal x9713=(cj2*x9704);
IkReal x9714=((1.0)*x9697);
IkReal x9715=((1.0)*x9696);
IkReal x9716=(gconst2*x9696);
IkReal x9717=(sj3*x9697);
IkReal x9718=(cj3*x9697);
IkReal x9719=(x9713+x9712);
evalcond[0]=(((x9696*x9699))+(((-1.0)*r22*x9714))+(((-1.0)*x9708*x9715)));
evalcond[1]=((((-1.0)*x9707*x9715))+(((-1.0)*r12*x9714))+((r10*x9716)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9714))+(((-1.0)*x9703*x9715))+((r00*x9716)));
evalcond[3]=(((sj3*x9701))+(((-1.0)*gconst2*r00*x9697*x9700))+((gconst1*x9698))+(((-1.0)*r02*x9696*x9700))+((x9703*x9718)));
evalcond[4]=((((-1.0)*r02*sj3*x9715))+(((-1.0)*x9700*x9701))+(((-1.0)*gconst2*x9698*x9714))+(((-1.0)*gconst1*r00*x9700))+((x9703*x9717)));
evalcond[5]=((((-1.0)*gconst2*r10*x9697*x9700))+(((-1.0)*sj2*x9704))+(((-1.0)*r12*x9696*x9700))+((sj3*x9702))+((x9707*x9718))+((sj3*x9710))+((cj1*cj2)));
evalcond[6]=(((sj3*x9709))+((sj3*x9711))+(((-1.0)*x9719))+(((-1.0)*r22*x9696*x9700))+(((-1.0)*x9697*x9699*x9700))+((x9708*x9718)));
evalcond[7]=((((-1.0)*cj2*x9705))+(((-1.0)*sj3*x9699*x9714))+((sj1*sj2))+(((-1.0)*r22*sj3*x9715))+(((-1.0)*x9700*x9709))+(((-1.0)*x9700*x9711))+((x9708*x9717)));
evalcond[8]=((((-1.0)*r12*sj3*x9715))+(((-1.0)*x9700*x9702))+((x9707*x9717))+(((-1.0)*x9719))+(((-1.0)*gconst2*r10*sj3*x9714))+(((-1.0)*x9700*x9710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9722 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9722.valid){
continue;
}
IkReal x9720=((-1.0)*(x9722.value));
IkReal x9721=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9720;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9720;
IkReal gconst1=((-1.0)*r21*x9721);
IkReal gconst2=(r20*x9721);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9725 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9725.valid){
continue;
}
IkReal x9723=((-1.0)*(x9725.value));
IkReal x9724=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9723;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9723;
IkReal gconst1=((-1.0)*r21*x9724);
IkReal gconst2=(r20*x9724);
CheckValue<IkReal> x9733=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9733.valid){
continue;
}
IkReal x9726=x9733.value;
IkReal x9727=(cj3*x9726);
IkReal x9728=(r11*x9727);
IkReal x9729=(r01*x9727);
IkReal x9730=(r00*x9727);
IkReal x9731=(r10*x9727);
IkReal x9732=(r20*r21*x9727);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x9729))+((r10*x9730*(r20*r20)))+((r01*x9728*(r21*r21)))+((r00*r20*r21*x9728))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9736 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9736.valid){
continue;
}
IkReal x9734=((-1.0)*(x9736.value));
IkReal x9735=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9734;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9734;
IkReal gconst1=((-1.0)*r21*x9735);
IkReal gconst2=(r20*x9735);
CheckValue<IkReal> x9744=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9744.valid){
continue;
}
IkReal x9737=x9744.value;
IkReal x9738=(sj3*x9737);
IkReal x9739=(r11*x9738);
IkReal x9740=(r00*x9738);
IkReal x9741=(r01*x9738);
IkReal x9742=(r10*x9738);
IkReal x9743=(r20*r21*x9738);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9740*(r20*r20)))+((r10*r20*r21*x9741))+((r01*x9739*(r21*r21)))+((r00*r20*r21*x9739))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9747 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9747.valid){
continue;
}
IkReal x9745=((-1.0)*(x9747.value));
IkReal x9746=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9745;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9745;
IkReal gconst1=((-1.0)*r21*x9746);
IkReal gconst2=(r20*x9746);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9750 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9750.valid){
continue;
}
IkReal x9748=((-1.0)*(x9750.value));
IkReal x9749=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9748;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9748;
IkReal gconst1=((-1.0)*r21*x9749);
IkReal gconst2=(r20*x9749);
IkReal x9751=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9755=IKPowWithIntegerCheck(x9751,-1);
if(!x9755.valid){
continue;
}
IkReal x9752=x9755.value;
IkReal x9753=((1.0)*x9752);
IkReal x9754=((((-1.0)*x9753*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9753*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9752)));
j4eval[0]=x9754;
j4eval[1]=r12;
j4eval[2]=x9751;
j4eval[3]=IKsign(x9754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
IkReal x9756=((-1.0)*(x9758.value));
IkReal x9757=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9756;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9756;
IkReal gconst1=((-1.0)*r21*x9757);
IkReal gconst2=(r20*x9757);
IkReal x9759=r22*r22;
IkReal x9760=(r02*sj1*sj2);
CheckValue<IkReal> x9765=IKPowWithIntegerCheck(((-1.0)+x9759),-1);
if(!x9765.valid){
continue;
}
IkReal x9761=x9765.value;
IkReal x9762=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x9759)))) < -0.00001)
continue;
IkReal x9763=IKsqrt(((1.0)+(((-1.0)*x9759))));
IkReal x9764=(r22*x9761*x9763);
j4eval[0]=((IKabs((((x9760*x9764))+(((-1.0)*x9762*x9764)))))+(IKabs((x9760+(((-1.0)*x9762))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9766=(sj1*sj2);
IkReal x9767=(gconst1*r01);
IkReal x9768=(gconst2*r00);
IkReal x9769=((1.0)*cj1*cj2);
CheckValue<IkReal> x9770=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9767*x9768))+(x9768*x9768)+(x9767*x9767)+(r02*r02))),-1);
if(!x9770.valid){
continue;
}
CheckValue<IkReal> x9771 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x9769))+((r02*x9766)))),IkReal(((((-1.0)*x9766*x9767))+((cj1*cj2*x9767))+(((-1.0)*x9768*x9769))+((x9766*x9768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9770.value)))+(x9771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9772=IKsin(j4);
IkReal x9773=IKcos(j4);
IkReal x9774=(gconst1*r01);
IkReal x9775=(gconst1*r21);
IkReal x9776=((1.0)*cj2);
IkReal x9777=(gconst1*r11);
IkReal x9778=((1.0)*x9773);
IkReal x9779=((1.0)*x9772);
IkReal x9780=(gconst2*x9772);
evalcond[0]=((((-1.0)*r22*x9778))+(((-1.0)*x9775*x9779))+((r20*x9780)));
evalcond[1]=(((r00*x9780))+(((-1.0)*x9774*x9779))+(((-1.0)*r02*x9778)));
evalcond[2]=(((x9773*x9777))+(((-1.0)*gconst2*r10*x9778))+(((-1.0)*r12*x9779)));
evalcond[3]=((-1.0)+((r10*x9780))+(((-1.0)*x9777*x9779))+(((-1.0)*r12*x9778)));
evalcond[4]=(((x9773*x9774))+(((-1.0)*gconst2*r00*x9778))+((sj1*sj2))+(((-1.0)*r02*x9779))+(((-1.0)*cj1*x9776)));
evalcond[5]=(((x9773*x9775))+(((-1.0)*r22*x9779))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9778))+(((-1.0)*sj1*x9776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9781=(gconst1*r11);
IkReal x9782=(gconst2*r10);
CheckValue<IkReal> x9783=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9781*x9781)))+(((2.0)*x9781*x9782))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9782*x9782))))),-1);
if(!x9783.valid){
continue;
}
CheckValue<IkReal> x9784 = IKatan2WithCheck(IkReal((x9781+(((-1.0)*x9782)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9783.value)))+(x9784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9785=IKsin(j4);
IkReal x9786=IKcos(j4);
IkReal x9787=(gconst1*r01);
IkReal x9788=(gconst1*r21);
IkReal x9789=((1.0)*cj2);
IkReal x9790=(gconst1*r11);
IkReal x9791=((1.0)*x9786);
IkReal x9792=((1.0)*x9785);
IkReal x9793=(gconst2*x9785);
evalcond[0]=((((-1.0)*x9788*x9792))+((r20*x9793))+(((-1.0)*r22*x9791)));
evalcond[1]=((((-1.0)*r02*x9791))+((r00*x9793))+(((-1.0)*x9787*x9792)));
evalcond[2]=(((x9786*x9790))+(((-1.0)*gconst2*r10*x9791))+(((-1.0)*r12*x9792)));
evalcond[3]=((-1.0)+(((-1.0)*x9790*x9792))+((r10*x9793))+(((-1.0)*r12*x9791)));
evalcond[4]=((((-1.0)*r02*x9792))+(((-1.0)*gconst2*r00*x9791))+((sj1*sj2))+(((-1.0)*cj1*x9789))+((x9786*x9787)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9789))+((x9786*x9788))+(((-1.0)*gconst2*r20*x9791))+(((-1.0)*r22*x9792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9794=((1.0)*gconst1);
CheckValue<IkReal> x9795=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9794)))),-1);
if(!x9795.valid){
continue;
}
CheckValue<IkReal> x9796 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9795.value)))+(x9796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9797=IKsin(j4);
IkReal x9798=IKcos(j4);
IkReal x9799=(gconst1*r01);
IkReal x9800=(gconst1*r21);
IkReal x9801=((1.0)*cj2);
IkReal x9802=(gconst1*r11);
IkReal x9803=((1.0)*x9798);
IkReal x9804=((1.0)*x9797);
IkReal x9805=(gconst2*x9797);
evalcond[0]=((((-1.0)*x9800*x9804))+(((-1.0)*r22*x9803))+((r20*x9805)));
evalcond[1]=(((r00*x9805))+(((-1.0)*r02*x9803))+(((-1.0)*x9799*x9804)));
evalcond[2]=((((-1.0)*gconst2*r10*x9803))+((x9798*x9802))+(((-1.0)*r12*x9804)));
evalcond[3]=((-1.0)+((r10*x9805))+(((-1.0)*x9802*x9804))+(((-1.0)*r12*x9803)));
evalcond[4]=((((-1.0)*gconst2*r00*x9803))+(((-1.0)*r02*x9804))+(((-1.0)*cj1*x9801))+((sj1*sj2))+((x9798*x9799)));
evalcond[5]=(((x9798*x9800))+(((-1.0)*r22*x9804))+(((-1.0)*gconst2*r20*x9803))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9808 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9808.valid){
continue;
}
IkReal x9806=((-1.0)*(x9808.value));
IkReal x9807=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9806;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9806;
IkReal gconst1=((-1.0)*r21*x9807);
IkReal gconst2=(r20*x9807);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9811 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9811.valid){
continue;
}
IkReal x9809=((-1.0)*(x9811.value));
IkReal x9810=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9809;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9809;
IkReal gconst1=((-1.0)*r21*x9810);
IkReal gconst2=(r20*x9810);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9814 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9814.valid){
continue;
}
IkReal x9812=((-1.0)*(x9814.value));
IkReal x9813=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x9812;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9812;
IkReal gconst1=((-1.0)*r21*x9813);
IkReal gconst2=(r20*x9813);
IkReal x9815=r22*r22;
IkReal x9816=(cj1*r12*sj2);
IkReal x9817=(cj2*r12*sj1);
CheckValue<IkReal> x9821=IKPowWithIntegerCheck(((-1.0)+x9815),-1);
if(!x9821.valid){
continue;
}
IkReal x9818=x9821.value;
if((((1.0)+(((-1.0)*x9815)))) < -0.00001)
continue;
IkReal x9819=IKsqrt(((1.0)+(((-1.0)*x9815))));
IkReal x9820=((1.0)*r22*x9818*x9819);
j4eval[0]=((IKabs((x9816+x9817)))+(IKabs(((((-1.0)*x9816*x9820))+(((-1.0)*x9817*x9820))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9822=(cj1*sj2);
IkReal x9823=(cj2*sj1);
IkReal x9824=(gconst1*r11);
IkReal x9825=((1.0)*gconst2*r10);
CheckValue<IkReal> x9826=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9826.valid){
continue;
}
CheckValue<IkReal> x9827 = IKatan2WithCheck(IkReal(((((-1.0)*x9823*x9825))+(((-1.0)*x9822*x9825))+((x9822*x9824))+((x9823*x9824)))),IkReal((((r12*x9823))+((r12*x9822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9826.value)))+(x9827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9828=IKcos(j4);
IkReal x9829=IKsin(j4);
IkReal x9830=(gconst1*r01);
IkReal x9831=((1.0)*cj2);
IkReal x9832=(gconst1*r21);
IkReal x9833=(gconst1*r11);
IkReal x9834=((1.0)*x9828);
IkReal x9835=(gconst2*x9828);
IkReal x9836=((1.0)*x9829);
IkReal x9837=(gconst2*x9829);
evalcond[0]=(((r10*x9835))+((r12*x9829))+(((-1.0)*x9833*x9834)));
evalcond[1]=((((-1.0)*x9832*x9836))+(((-1.0)*r22*x9834))+((r20*x9837)));
evalcond[2]=(((r00*x9837))+(((-1.0)*r02*x9834))+(((-1.0)*x9830*x9836)));
evalcond[3]=((-1.0)+((r10*x9837))+(((-1.0)*r12*x9834))+(((-1.0)*x9833*x9836)));
evalcond[4]=(((r00*x9835))+(((-1.0)*cj1*x9831))+(((-1.0)*x9830*x9834))+((sj1*sj2))+((r02*x9829)));
evalcond[5]=((((-1.0)*x9832*x9834))+(((-1.0)*cj1*sj2))+((r22*x9829))+(((-1.0)*sj1*x9831))+((r20*x9835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9838=(gconst1*r11);
IkReal x9839=(gconst2*r10);
CheckValue<IkReal> x9840=IKPowWithIntegerCheck(IKsign(((x9839*x9839)+(x9838*x9838)+(r12*r12)+(((-2.0)*x9838*x9839)))),-1);
if(!x9840.valid){
continue;
}
CheckValue<IkReal> x9841 = IKatan2WithCheck(IkReal(((((-1.0)*x9838))+x9839)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9840.value)))+(x9841.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9842=IKcos(j4);
IkReal x9843=IKsin(j4);
IkReal x9844=(gconst1*r01);
IkReal x9845=((1.0)*cj2);
IkReal x9846=(gconst1*r21);
IkReal x9847=(gconst1*r11);
IkReal x9848=((1.0)*x9842);
IkReal x9849=(gconst2*x9842);
IkReal x9850=((1.0)*x9843);
IkReal x9851=(gconst2*x9843);
evalcond[0]=(((r10*x9849))+(((-1.0)*x9847*x9848))+((r12*x9843)));
evalcond[1]=(((r20*x9851))+(((-1.0)*r22*x9848))+(((-1.0)*x9846*x9850)));
evalcond[2]=((((-1.0)*r02*x9848))+((r00*x9851))+(((-1.0)*x9844*x9850)));
evalcond[3]=((-1.0)+((r10*x9851))+(((-1.0)*r12*x9848))+(((-1.0)*x9847*x9850)));
evalcond[4]=((((-1.0)*x9844*x9848))+((r02*x9843))+(((-1.0)*cj1*x9845))+((sj1*sj2))+((r00*x9849)));
evalcond[5]=((((-1.0)*sj1*x9845))+((r20*x9849))+(((-1.0)*cj1*sj2))+(((-1.0)*x9846*x9848))+((r22*x9843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9852=((1.0)*gconst1);
CheckValue<IkReal> x9853 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9853.valid){
continue;
}
CheckValue<IkReal> x9854=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9852)))),-1);
if(!x9854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9853.value)+(((1.5707963267949)*(x9854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9855=IKcos(j4);
IkReal x9856=IKsin(j4);
IkReal x9857=(gconst1*r01);
IkReal x9858=((1.0)*cj2);
IkReal x9859=(gconst1*r21);
IkReal x9860=(gconst1*r11);
IkReal x9861=((1.0)*x9855);
IkReal x9862=(gconst2*x9855);
IkReal x9863=((1.0)*x9856);
IkReal x9864=(gconst2*x9856);
evalcond[0]=((((-1.0)*x9860*x9861))+((r10*x9862))+((r12*x9856)));
evalcond[1]=((((-1.0)*r22*x9861))+(((-1.0)*x9859*x9863))+((r20*x9864)));
evalcond[2]=((((-1.0)*x9857*x9863))+((r00*x9864))+(((-1.0)*r02*x9861)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9861))+(((-1.0)*x9860*x9863))+((r10*x9864)));
evalcond[4]=((((-1.0)*x9857*x9861))+((r02*x9856))+((r00*x9862))+(((-1.0)*cj1*x9858))+((sj1*sj2)));
evalcond[5]=((((-1.0)*x9859*x9861))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9858))+((r20*x9862))+((r22*x9856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9865=((-1.0)*px);
CheckValue<IkReal> x9867 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9867.valid){
continue;
}
IkReal x9866=((-1.0)*(x9867.value));
sj5=gconst1;
cj5=gconst2;
j5=x9866;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9865);
rxp1_1=(px*r21);
rxp1_2=(r11*x9865);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9866;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9868=((1.0)*sj3);
IkReal x9869=(r11*r21);
IkReal x9870=(r10*r20);
j4eval[0]=(x9869+x9870);
j4eval[1]=((((-1.0)*x9868*x9869))+(((-1.0)*x9868*x9870)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9871=((-1.0)*px);
CheckValue<IkReal> x9873 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9873.valid){
continue;
}
IkReal x9872=((-1.0)*(x9873.value));
sj5=gconst1;
cj5=gconst2;
j5=x9872;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9871);
rxp1_1=(px*r21);
rxp1_2=(r11*x9871);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9872;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9874=(r10*r20);
IkReal x9875=((1.0)*cj3);
IkReal x9876=(r11*r21);
j4eval[0]=(x9876+x9874);
j4eval[1]=((((-1.0)*x9875*x9876))+(((-1.0)*x9874*x9875)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9877=((-1.0)*px);
CheckValue<IkReal> x9879 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9879.valid){
continue;
}
IkReal x9878=((-1.0)*(x9879.value));
sj5=gconst1;
cj5=gconst2;
j5=x9878;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9877);
rxp1_1=(px*r21);
rxp1_2=(r11*x9877);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9878;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9880=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r10*r20*x9880))+(((-1.0)*r11*r21*x9880)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9881=((1.0)*gconst2);
CheckValue<IkReal> x9882=IKPowWithIntegerCheck(r02,-1);
if(!x9882.valid){
continue;
}
CheckValue<IkReal> x9883=IKPowWithIntegerCheck(sj3,-1);
if(!x9883.valid){
continue;
}
CheckValue<IkReal> x9884=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x9881))+((cj3*gconst1*r11))),-1);
if(!x9884.valid){
continue;
}
if( IKabs(((x9882.value)*(x9883.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9884.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9881)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9882.value)*(x9883.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9884.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9881))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9882.value)*(x9883.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9884.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9881))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9885=IKsin(j4);
IkReal x9886=IKcos(j4);
IkReal x9887=(sj1*sj2);
IkReal x9888=((1.0)*cj3);
IkReal x9889=(gconst1*r10);
IkReal x9890=(cj2*sj1);
IkReal x9891=((1.0)*cj1);
IkReal x9892=(gconst2*r21);
IkReal x9893=(gconst1*sj3);
IkReal x9894=(gconst2*r11);
IkReal x9895=(cj3*gconst1);
IkReal x9896=((1.0)*sj3);
IkReal x9897=(cj2*x9891);
IkReal x9898=(gconst2*x9885);
IkReal x9899=(gconst2*x9886);
IkReal x9900=(r11*x9886);
IkReal x9901=(r02*x9885);
IkReal x9902=(r21*x9886);
IkReal x9903=((1.0)*gconst1*x9885);
evalcond[0]=((-1.0)*r02*x9886);
evalcond[1]=((((-1.0)*r21*x9903))+((r20*x9898)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*x9896*x9901))+x9890);
evalcond[3]=((-1.0)+(((-1.0)*r11*x9903))+((r10*x9898)));
evalcond[4]=((((-1.0)*x9888*x9901))+x9887+(((-1.0)*x9897)));
evalcond[5]=(((x9895*x9900))+((sj3*x9894))+(((-1.0)*r10*x9888*x9899))+((sj3*x9889)));
evalcond[6]=((((-1.0)*r10*x9896*x9899))+((x9893*x9900))+(((-1.0)*x9888*x9894))+(((-1.0)*x9888*x9889)));
evalcond[7]=(((x9895*x9902))+((sj3*x9892))+(((-1.0)*x9890))+(((-1.0)*r20*x9888*x9899))+((r20*x9893))+(((-1.0)*sj2*x9891)));
evalcond[8]=(((x9893*x9902))+(((-1.0)*x9888*x9892))+(((-1.0)*r20*x9896*x9899))+(((-1.0)*gconst1*r20*x9888))+x9887+(((-1.0)*x9897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9904=((1.0)*r11);
IkReal x9905=(gconst2*r10);
CheckValue<IkReal> x9906=IKPowWithIntegerCheck((x9905+(((-1.0)*gconst1*x9904))),-1);
if(!x9906.valid){
continue;
}
CheckValue<IkReal> x9907=IKPowWithIntegerCheck(((((-1.0)*cj3*x9905))+((cj3*gconst1*r11))),-1);
if(!x9907.valid){
continue;
}
if( IKabs(x9906.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9907.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9904)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9906.value)+IKsqr(((x9907.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9904))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9906.value, ((x9907.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9904))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9908=IKsin(j4);
IkReal x9909=IKcos(j4);
IkReal x9910=(sj1*sj2);
IkReal x9911=((1.0)*cj3);
IkReal x9912=(gconst1*r10);
IkReal x9913=(cj2*sj1);
IkReal x9914=((1.0)*cj1);
IkReal x9915=(gconst2*r21);
IkReal x9916=(gconst1*sj3);
IkReal x9917=(gconst2*r11);
IkReal x9918=(cj3*gconst1);
IkReal x9919=((1.0)*sj3);
IkReal x9920=(cj2*x9914);
IkReal x9921=(gconst2*x9908);
IkReal x9922=(gconst2*x9909);
IkReal x9923=(r11*x9909);
IkReal x9924=(r02*x9908);
IkReal x9925=(r21*x9909);
IkReal x9926=((1.0)*gconst1*x9908);
evalcond[0]=((-1.0)*r02*x9909);
evalcond[1]=((((-1.0)*r21*x9926))+((r20*x9921)));
evalcond[2]=((((-1.0)*x9919*x9924))+((cj1*sj2))+x9913);
evalcond[3]=((-1.0)+((r10*x9921))+(((-1.0)*r11*x9926)));
evalcond[4]=((((-1.0)*x9920))+x9910+(((-1.0)*x9911*x9924)));
evalcond[5]=((((-1.0)*r10*x9911*x9922))+((sj3*x9912))+((sj3*x9917))+((x9918*x9923)));
evalcond[6]=((((-1.0)*r10*x9919*x9922))+((x9916*x9923))+(((-1.0)*x9911*x9912))+(((-1.0)*x9911*x9917)));
evalcond[7]=(((r20*x9916))+((sj3*x9915))+(((-1.0)*r20*x9911*x9922))+(((-1.0)*x9913))+((x9918*x9925))+(((-1.0)*sj2*x9914)));
evalcond[8]=((((-1.0)*x9920))+((x9916*x9925))+(((-1.0)*gconst1*r20*x9911))+x9910+(((-1.0)*r20*x9919*x9922))+(((-1.0)*x9911*x9915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9927=(gconst1*r11);
IkReal x9928=(gconst2*r10);
CheckValue<IkReal> x9929=IKPowWithIntegerCheck(((((-1.0)*x9927))+x9928),-1);
if(!x9929.valid){
continue;
}
CheckValue<IkReal> x9930=IKPowWithIntegerCheck((((sj3*x9927))+(((-1.0)*sj3*x9928))),-1);
if(!x9930.valid){
continue;
}
if( IKabs(x9929.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9930.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9929.value)+IKsqr(((x9930.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9929.value, ((x9930.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9931=IKsin(j4);
IkReal x9932=IKcos(j4);
IkReal x9933=(sj1*sj2);
IkReal x9934=((1.0)*cj3);
IkReal x9935=(gconst1*r10);
IkReal x9936=(cj2*sj1);
IkReal x9937=((1.0)*cj1);
IkReal x9938=(gconst2*r21);
IkReal x9939=(gconst1*sj3);
IkReal x9940=(gconst2*r11);
IkReal x9941=(cj3*gconst1);
IkReal x9942=((1.0)*sj3);
IkReal x9943=(cj2*x9937);
IkReal x9944=(gconst2*x9931);
IkReal x9945=(gconst2*x9932);
IkReal x9946=(r11*x9932);
IkReal x9947=(r02*x9931);
IkReal x9948=(r21*x9932);
IkReal x9949=((1.0)*gconst1*x9931);
evalcond[0]=((-1.0)*r02*x9932);
evalcond[1]=((((-1.0)*r21*x9949))+((r20*x9944)));
evalcond[2]=(((cj1*sj2))+x9936+(((-1.0)*x9942*x9947)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x9949))+((r10*x9944)));
evalcond[4]=((((-1.0)*x9934*x9947))+(((-1.0)*x9943))+x9933);
evalcond[5]=(((sj3*x9940))+((sj3*x9935))+((x9941*x9946))+(((-1.0)*r10*x9934*x9945)));
evalcond[6]=((((-1.0)*r10*x9942*x9945))+(((-1.0)*x9934*x9940))+(((-1.0)*x9934*x9935))+((x9939*x9946)));
evalcond[7]=((((-1.0)*r20*x9934*x9945))+(((-1.0)*x9936))+((sj3*x9938))+((x9941*x9948))+((r20*x9939))+(((-1.0)*sj2*x9937)));
evalcond[8]=((((-1.0)*r20*x9942*x9945))+(((-1.0)*gconst1*r20*x9934))+(((-1.0)*x9934*x9938))+(((-1.0)*x9943))+x9933+((x9939*x9948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9950=gconst2*gconst2;
IkReal x9951=gconst1*gconst1;
IkReal x9952=(r11*sj3);
IkReal x9953=(gconst1*gconst2);
IkReal x9954=((1.0)*r00);
IkReal x9955=(cj3*r11);
IkReal x9956=(cj3*r10);
IkReal x9957=((1.0)*r02);
IkReal x9958=(r10*sj3);
IkReal x9959=(r01*x9951);
CheckValue<IkReal> x9960=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9950*x9958))+((x9952*x9959))+(((-1.0)*r01*x9953*x9958))+(((-1.0)*x9952*x9953*x9954)))),-1);
if(!x9960.valid){
continue;
}
CheckValue<IkReal> x9961 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x9956*x9957))+(((-1.0)*gconst2*x9955*x9957)))),IkReal(((((-1.0)*x9953*x9954*x9956))+(((-1.0)*x9950*x9954*x9955))+((x9956*x9959))+((r01*x9953*x9955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9960.value)))+(x9961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9962=IKsin(j4);
IkReal x9963=IKcos(j4);
IkReal x9964=(sj1*sj2);
IkReal x9965=(gconst1*r01);
IkReal x9966=(gconst2*sj3);
IkReal x9967=(cj3*gconst1);
IkReal x9968=(cj3*gconst2);
IkReal x9969=((1.0)*cj2);
IkReal x9970=(gconst1*r11);
IkReal x9971=(gconst1*r21);
IkReal x9972=(cj1*sj2);
IkReal x9973=(gconst1*sj3);
IkReal x9974=(cj1*x9969);
IkReal x9975=((1.0)*x9963);
IkReal x9976=((1.0)*x9962);
IkReal x9977=(sj3*x9963);
IkReal x9978=(gconst2*x9962);
evalcond[0]=((((-1.0)*x9971*x9976))+((r20*x9978))+(((-1.0)*r22*x9975)));
evalcond[1]=((((-1.0)*r02*x9975))+((r00*x9978))+(((-1.0)*x9965*x9976)));
evalcond[2]=((-1.0)+(((-1.0)*x9970*x9976))+(((-1.0)*r12*x9975))+((r10*x9978)));
evalcond[3]=(((r11*x9963*x9967))+(((-1.0)*r10*x9968*x9975))+(((-1.0)*cj3*r12*x9976))+((r10*x9973))+((r11*x9966)));
evalcond[4]=((((-1.0)*r10*x9967))+(((-1.0)*r10*x9966*x9975))+(((-1.0)*r12*sj3*x9976))+(((-1.0)*r11*x9968))+((x9970*x9977)));
evalcond[5]=((((-1.0)*r00*x9968*x9975))+((r01*x9966))+((cj3*x9963*x9965))+(((-1.0)*cj3*r02*x9976))+((r00*x9973))+x9964+(((-1.0)*x9974)));
evalcond[6]=((((-1.0)*sj1*x9969))+((r21*x9963*x9967))+((r21*x9966))+(((-1.0)*x9972))+((r20*x9973))+(((-1.0)*r20*x9968*x9975))+(((-1.0)*cj3*r22*x9976)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r02*sj3*x9976))+((x9965*x9977))+x9972+(((-1.0)*r00*x9966*x9975))+(((-1.0)*r00*x9967))+(((-1.0)*r01*x9968)));
evalcond[8]=((((-1.0)*r20*x9967))+(((-1.0)*r20*x9966*x9975))+x9964+(((-1.0)*x9974))+(((-1.0)*r21*x9968))+((x9971*x9977))+(((-1.0)*r22*sj3*x9976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9979=gconst1*gconst1;
IkReal x9980=gconst2*gconst2;
IkReal x9981=(r01*r11);
IkReal x9982=(r00*r10);
IkReal x9983=(gconst2*r11);
IkReal x9984=(r02*sj3);
IkReal x9985=(r01*r10);
IkReal x9986=(gconst1*gconst2*sj3);
IkReal x9987=((1.0)*cj3*gconst1);
CheckValue<IkReal> x9988=IKPowWithIntegerCheck(IKsign((((cj3*x9980*x9982))+((cj3*r02*r12))+(((-1.0)*gconst2*x9985*x9987))+((cj3*x9979*x9981))+(((-1.0)*r00*x9983*x9987)))),-1);
if(!x9988.valid){
continue;
}
CheckValue<IkReal> x9989 = IKatan2WithCheck(IkReal((((x9983*x9984))+((gconst1*r10*x9984)))),IkReal((((x9982*x9986))+((r00*r11*sj3*x9980))+(((-1.0)*x9981*x9986))+(((-1.0)*sj3*x9979*x9985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9988.value)))+(x9989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9990=IKsin(j4);
IkReal x9991=IKcos(j4);
IkReal x9992=(sj1*sj2);
IkReal x9993=(gconst1*r01);
IkReal x9994=(gconst2*sj3);
IkReal x9995=(cj3*gconst1);
IkReal x9996=(cj3*gconst2);
IkReal x9997=((1.0)*cj2);
IkReal x9998=(gconst1*r11);
IkReal x9999=(gconst1*r21);
IkReal x10000=(cj1*sj2);
IkReal x10001=(gconst1*sj3);
IkReal x10002=(cj1*x9997);
IkReal x10003=((1.0)*x9991);
IkReal x10004=((1.0)*x9990);
IkReal x10005=(sj3*x9991);
IkReal x10006=(gconst2*x9990);
evalcond[0]=((((-1.0)*x10004*x9999))+(((-1.0)*r22*x10003))+((r20*x10006)));
evalcond[1]=((((-1.0)*x10004*x9993))+(((-1.0)*r02*x10003))+((r00*x10006)));
evalcond[2]=((-1.0)+(((-1.0)*x10004*x9998))+((r10*x10006))+(((-1.0)*r12*x10003)));
evalcond[3]=(((r11*x9994))+((r11*x9991*x9995))+(((-1.0)*cj3*r12*x10004))+((r10*x10001))+(((-1.0)*r10*x10003*x9996)));
evalcond[4]=(((x10005*x9998))+(((-1.0)*r12*sj3*x10004))+(((-1.0)*r10*x9995))+(((-1.0)*r10*x10003*x9994))+(((-1.0)*r11*x9996)));
evalcond[5]=((((-1.0)*r00*x10003*x9996))+(((-1.0)*cj3*r02*x10004))+((r01*x9994))+((r00*x10001))+((cj3*x9991*x9993))+x9992+(((-1.0)*x10002)));
evalcond[6]=(((r21*x9991*x9995))+(((-1.0)*r20*x10003*x9996))+((r21*x9994))+(((-1.0)*x10000))+((r20*x10001))+(((-1.0)*sj1*x9997))+(((-1.0)*cj3*r22*x10004)));
evalcond[7]=((((-1.0)*r00*x10003*x9994))+((cj2*sj1))+(((-1.0)*r02*sj3*x10004))+((x10005*x9993))+x10000+(((-1.0)*r01*x9996))+(((-1.0)*r00*x9995)));
evalcond[8]=((((-1.0)*r20*x10003*x9994))+(((-1.0)*r20*x9995))+((x10005*x9999))+(((-1.0)*r22*sj3*x10004))+(((-1.0)*r21*x9996))+x9992+(((-1.0)*x10002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10007=((1.0)*gconst1);
CheckValue<IkReal> x10008 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10007))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10008.valid){
continue;
}
CheckValue<IkReal> x10009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10007))+(((-1.0)*gconst2*r01)))),-1);
if(!x10009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10008.value)+(((1.5707963267949)*(x10009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10010=IKsin(j4);
IkReal x10011=IKcos(j4);
IkReal x10012=(sj1*sj2);
IkReal x10013=(gconst1*r01);
IkReal x10014=(gconst2*sj3);
IkReal x10015=(cj3*gconst1);
IkReal x10016=(cj3*gconst2);
IkReal x10017=((1.0)*cj2);
IkReal x10018=(gconst1*r11);
IkReal x10019=(gconst1*r21);
IkReal x10020=(cj1*sj2);
IkReal x10021=(gconst1*sj3);
IkReal x10022=(cj1*x10017);
IkReal x10023=((1.0)*x10011);
IkReal x10024=((1.0)*x10010);
IkReal x10025=(sj3*x10011);
IkReal x10026=(gconst2*x10010);
evalcond[0]=((((-1.0)*r22*x10023))+((r20*x10026))+(((-1.0)*x10019*x10024)));
evalcond[1]=((((-1.0)*r02*x10023))+(((-1.0)*x10013*x10024))+((r00*x10026)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10023))+(((-1.0)*x10018*x10024))+((r10*x10026)));
evalcond[3]=(((r11*x10011*x10015))+((r10*x10021))+((r11*x10014))+(((-1.0)*cj3*r12*x10024))+(((-1.0)*r10*x10016*x10023)));
evalcond[4]=((((-1.0)*r10*x10015))+((x10018*x10025))+(((-1.0)*r12*sj3*x10024))+(((-1.0)*r11*x10016))+(((-1.0)*r10*x10014*x10023)));
evalcond[5]=(((cj3*x10011*x10013))+x10012+(((-1.0)*x10022))+((r00*x10021))+((r01*x10014))+(((-1.0)*cj3*r02*x10024))+(((-1.0)*r00*x10016*x10023)));
evalcond[6]=(((r21*x10014))+(((-1.0)*sj1*x10017))+(((-1.0)*r20*x10016*x10023))+(((-1.0)*x10020))+((r21*x10011*x10015))+((r20*x10021))+(((-1.0)*cj3*r22*x10024)));
evalcond[7]=(((cj2*sj1))+((x10013*x10025))+(((-1.0)*r00*x10015))+(((-1.0)*r00*x10014*x10023))+(((-1.0)*r01*x10016))+(((-1.0)*r02*sj3*x10024))+x10020);
evalcond[8]=((((-1.0)*r20*x10015))+(((-1.0)*r22*sj3*x10024))+(((-1.0)*r20*x10014*x10023))+((x10019*x10025))+x10012+(((-1.0)*x10022))+(((-1.0)*r21*x10016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10029 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10029.valid){
continue;
}
IkReal x10027=((-1.0)*(x10029.value));
IkReal x10028=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x10027;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x10027;
IkReal gconst1=((-1.0)*r21*x10028);
IkReal gconst2=(r20*x10028);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10032 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10032.valid){
continue;
}
IkReal x10030=((-1.0)*(x10032.value));
IkReal x10031=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x10030;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x10030;
IkReal gconst1=((-1.0)*r21*x10031);
IkReal gconst2=(r20*x10031);
CheckValue<IkReal> x10040=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x10040.valid){
continue;
}
IkReal x10033=x10040.value;
IkReal x10034=(cj3*x10033);
IkReal x10035=(r11*x10034);
IkReal x10036=(r01*x10034);
IkReal x10037=(r00*x10034);
IkReal x10038=(r10*x10034);
IkReal x10039=(r20*r21*x10034);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x10036))+((r10*x10037*(r20*r20)))+((r00*r20*r21*x10035))+((r01*x10035*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10043 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10043.valid){
continue;
}
IkReal x10041=((-1.0)*(x10043.value));
IkReal x10042=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x10041;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x10041;
IkReal gconst1=((-1.0)*r21*x10042);
IkReal gconst2=(r20*x10042);
CheckValue<IkReal> x10051=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x10051.valid){
continue;
}
IkReal x10044=x10051.value;
IkReal x10045=(sj3*x10044);
IkReal x10046=(r11*x10045);
IkReal x10047=(r00*x10045);
IkReal x10048=(r01*x10045);
IkReal x10049=(r10*x10045);
IkReal x10050=(r20*r21*x10045);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x10046))+((r10*x10047*(r20*r20)))+((r10*r20*r21*x10048))+((r01*x10046*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10054 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10054.valid){
continue;
}
IkReal x10052=((-1.0)*(x10054.value));
IkReal x10053=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x10052;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10052;
IkReal gconst1=((-1.0)*r21*x10053);
IkReal gconst2=(r20*x10053);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10057 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10057.valid){
continue;
}
IkReal x10055=((-1.0)*(x10057.value));
IkReal x10056=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x10055;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10055;
IkReal gconst1=((-1.0)*r21*x10056);
IkReal gconst2=(r20*x10056);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10060 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10060.valid){
continue;
}
IkReal x10058=((-1.0)*(x10060.value));
IkReal x10059=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x10058;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10058;
IkReal gconst1=((-1.0)*r21*x10059);
IkReal gconst2=(r20*x10059);
IkReal x10061=r22*r22;
IkReal x10062=(cj1*cj2*r02);
CheckValue<IkReal> x10067=IKPowWithIntegerCheck(((-1.0)+x10061),-1);
if(!x10067.valid){
continue;
}
IkReal x10063=x10067.value;
IkReal x10064=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x10061)))) < -0.00001)
continue;
IkReal x10065=IKsqrt(((1.0)+(((-1.0)*x10061))));
IkReal x10066=(r22*x10063*x10065);
j4eval[0]=((IKabs(((((-1.0)*x10064))+x10062)))+(IKabs(((((-1.0)*x10064*x10066))+((x10062*x10066))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10068=(gconst2*r00);
IkReal x10069=(cj1*cj2);
IkReal x10070=(gconst1*r01);
IkReal x10071=((1.0)*sj1*sj2);
CheckValue<IkReal> x10072 = IKatan2WithCheck(IkReal((((r02*x10069))+(((-1.0)*r02*x10071)))),IkReal(((((-1.0)*x10068*x10071))+(((-1.0)*x10069*x10070))+((sj1*sj2*x10070))+((x10068*x10069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10072.valid){
continue;
}
CheckValue<IkReal> x10073=IKPowWithIntegerCheck(IKsign(((x10068*x10068)+(((-2.0)*x10068*x10070))+(r02*r02)+(x10070*x10070))),-1);
if(!x10073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10072.value)+(((1.5707963267949)*(x10073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10074=IKsin(j4);
IkReal x10075=IKcos(j4);
IkReal x10076=(gconst1*r01);
IkReal x10077=(gconst1*r21);
IkReal x10078=((1.0)*sj1);
IkReal x10079=(gconst1*r11);
IkReal x10080=((1.0)*x10075);
IkReal x10081=((1.0)*x10074);
IkReal x10082=(gconst2*x10074);
evalcond[0]=(((r20*x10082))+(((-1.0)*x10077*x10081))+(((-1.0)*r22*x10080)));
evalcond[1]=(((r00*x10082))+(((-1.0)*x10076*x10081))+(((-1.0)*r02*x10080)));
evalcond[2]=(((x10075*x10079))+(((-1.0)*gconst2*r10*x10080))+(((-1.0)*r12*x10081)));
evalcond[3]=((1.0)+(((-1.0)*x10079*x10081))+(((-1.0)*r12*x10080))+((r10*x10082)));
evalcond[4]=(((x10075*x10076))+(((-1.0)*sj2*x10078))+(((-1.0)*r02*x10081))+((cj1*cj2))+(((-1.0)*gconst2*r00*x10080)));
evalcond[5]=((((-1.0)*gconst2*r20*x10080))+((x10075*x10077))+(((-1.0)*cj2*x10078))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10083=(gconst2*r10);
IkReal x10084=(gconst1*r11);
CheckValue<IkReal> x10085 = IKatan2WithCheck(IkReal((x10084+(((-1.0)*x10083)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10085.valid){
continue;
}
CheckValue<IkReal> x10086=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10083*x10084))+(x10083*x10083)+(x10084*x10084))),-1);
if(!x10086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10085.value)+(((1.5707963267949)*(x10086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10087=IKsin(j4);
IkReal x10088=IKcos(j4);
IkReal x10089=(gconst1*r01);
IkReal x10090=(gconst1*r21);
IkReal x10091=((1.0)*sj1);
IkReal x10092=(gconst1*r11);
IkReal x10093=((1.0)*x10088);
IkReal x10094=((1.0)*x10087);
IkReal x10095=(gconst2*x10087);
evalcond[0]=((((-1.0)*x10090*x10094))+((r20*x10095))+(((-1.0)*r22*x10093)));
evalcond[1]=((((-1.0)*r02*x10093))+(((-1.0)*x10089*x10094))+((r00*x10095)));
evalcond[2]=((((-1.0)*r12*x10094))+(((-1.0)*gconst2*r10*x10093))+((x10088*x10092)));
evalcond[3]=((1.0)+(((-1.0)*x10092*x10094))+(((-1.0)*r12*x10093))+((r10*x10095)));
evalcond[4]=(((x10088*x10089))+(((-1.0)*gconst2*r00*x10093))+(((-1.0)*r02*x10094))+(((-1.0)*sj2*x10091))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x10091))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x10093))+((x10088*x10090))+(((-1.0)*r22*x10094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10096 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10096.valid){
continue;
}
CheckValue<IkReal> x10097=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10096.value)+(((1.5707963267949)*(x10097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10098=IKsin(j4);
IkReal x10099=IKcos(j4);
IkReal x10100=(gconst1*r01);
IkReal x10101=(gconst1*r21);
IkReal x10102=((1.0)*sj1);
IkReal x10103=(gconst1*r11);
IkReal x10104=((1.0)*x10099);
IkReal x10105=((1.0)*x10098);
IkReal x10106=(gconst2*x10098);
evalcond[0]=(((r20*x10106))+(((-1.0)*x10101*x10105))+(((-1.0)*r22*x10104)));
evalcond[1]=(((r00*x10106))+(((-1.0)*x10100*x10105))+(((-1.0)*r02*x10104)));
evalcond[2]=((((-1.0)*r12*x10105))+((x10099*x10103))+(((-1.0)*gconst2*r10*x10104)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10104))+(((-1.0)*x10103*x10105))+((r10*x10106)));
evalcond[4]=(((x10099*x10100))+(((-1.0)*r02*x10105))+(((-1.0)*gconst2*r00*x10104))+((cj1*cj2))+(((-1.0)*sj2*x10102)));
evalcond[5]=((((-1.0)*gconst2*r20*x10104))+(((-1.0)*cj1*sj2))+((x10099*x10101))+(((-1.0)*r22*x10105))+(((-1.0)*cj2*x10102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10109 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10109.valid){
continue;
}
IkReal x10107=((-1.0)*(x10109.value));
IkReal x10108=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x10107;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10107;
IkReal gconst1=((-1.0)*r21*x10108);
IkReal gconst2=(r20*x10108);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10112 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10112.valid){
continue;
}
IkReal x10110=((-1.0)*(x10112.value));
IkReal x10111=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x10110;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10110;
IkReal gconst1=((-1.0)*r21*x10111);
IkReal gconst2=(r20*x10111);
IkReal x10113=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10117=IKPowWithIntegerCheck(x10113,-1);
if(!x10117.valid){
continue;
}
IkReal x10114=x10117.value;
IkReal x10115=((1.0)*x10114);
IkReal x10116=((((-1.0)*x10115*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10114))+(((-1.0)*(r12*r12)))+(((-1.0)*x10115*(r11*r11)*(r21*r21))));
j4eval[0]=x10116;
j4eval[1]=IKsign(x10116);
j4eval[2]=r12;
j4eval[3]=x10113;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10120 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10120.valid){
continue;
}
IkReal x10118=((-1.0)*(x10120.value));
IkReal x10119=x8428;
sj5=gconst1;
cj5=gconst2;
j5=x10118;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10118;
IkReal gconst1=((-1.0)*r21*x10119);
IkReal gconst2=(r20*x10119);
IkReal x10121=r22*r22;
IkReal x10122=(cj1*r12*sj2);
IkReal x10123=(cj2*r12*sj1);
CheckValue<IkReal> x10127=IKPowWithIntegerCheck(((-1.0)+x10121),-1);
if(!x10127.valid){
continue;
}
IkReal x10124=x10127.value;
if((((1.0)+(((-1.0)*x10121)))) < -0.00001)
continue;
IkReal x10125=IKsqrt(((1.0)+(((-1.0)*x10121))));
IkReal x10126=((1.0)*r22*x10124*x10125);
j4eval[0]=((IKabs(((((-1.0)*x10123*x10126))+(((-1.0)*x10122*x10126)))))+(IKabs((x10123+x10122))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10128=(cj1*sj2);
IkReal x10129=(cj2*sj1);
IkReal x10130=(gconst1*r11);
IkReal x10131=((1.0)*gconst2*r10);
CheckValue<IkReal> x10132=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10132.valid){
continue;
}
CheckValue<IkReal> x10133 = IKatan2WithCheck(IkReal(((((-1.0)*x10129*x10131))+((x10128*x10130))+((x10129*x10130))+(((-1.0)*x10128*x10131)))),IkReal((((r12*x10129))+((r12*x10128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10132.value)))+(x10133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10134=IKcos(j4);
IkReal x10135=IKsin(j4);
IkReal x10136=(gconst1*r01);
IkReal x10137=((1.0)*sj1);
IkReal x10138=(gconst1*r21);
IkReal x10139=(gconst1*r11);
IkReal x10140=((1.0)*x10134);
IkReal x10141=(gconst2*x10134);
IkReal x10142=((1.0)*x10135);
IkReal x10143=(gconst2*x10135);
evalcond[0]=(((r10*x10141))+((r12*x10135))+(((-1.0)*x10139*x10140)));
evalcond[1]=((((-1.0)*x10138*x10142))+(((-1.0)*r22*x10140))+((r20*x10143)));
evalcond[2]=((((-1.0)*r02*x10140))+(((-1.0)*x10136*x10142))+((r00*x10143)));
evalcond[3]=((1.0)+((r10*x10143))+(((-1.0)*r12*x10140))+(((-1.0)*x10139*x10142)));
evalcond[4]=(((r02*x10135))+(((-1.0)*x10136*x10140))+(((-1.0)*sj2*x10137))+((cj1*cj2))+((r00*x10141)));
evalcond[5]=((((-1.0)*cj2*x10137))+(((-1.0)*cj1*sj2))+((r22*x10135))+(((-1.0)*x10138*x10140))+((r20*x10141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10144=(gconst1*r11);
IkReal x10145=(gconst2*r10);
CheckValue<IkReal> x10146 = IKatan2WithCheck(IkReal((x10145+(((-1.0)*x10144)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10146.valid){
continue;
}
CheckValue<IkReal> x10147=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10144*x10144)))+(((-1.0)*(x10145*x10145)))+(((-1.0)*(r12*r12)))+(((2.0)*x10144*x10145)))),-1);
if(!x10147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10146.value)+(((1.5707963267949)*(x10147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10148=IKcos(j4);
IkReal x10149=IKsin(j4);
IkReal x10150=(gconst1*r01);
IkReal x10151=((1.0)*sj1);
IkReal x10152=(gconst1*r21);
IkReal x10153=(gconst1*r11);
IkReal x10154=((1.0)*x10148);
IkReal x10155=(gconst2*x10148);
IkReal x10156=((1.0)*x10149);
IkReal x10157=(gconst2*x10149);
evalcond[0]=(((r12*x10149))+(((-1.0)*x10153*x10154))+((r10*x10155)));
evalcond[1]=((((-1.0)*r22*x10154))+((r20*x10157))+(((-1.0)*x10152*x10156)));
evalcond[2]=((((-1.0)*r02*x10154))+(((-1.0)*x10150*x10156))+((r00*x10157)));
evalcond[3]=((1.0)+(((-1.0)*x10153*x10156))+((r10*x10157))+(((-1.0)*r12*x10154)));
evalcond[4]=(((r02*x10149))+(((-1.0)*x10150*x10154))+(((-1.0)*sj2*x10151))+((cj1*cj2))+((r00*x10155)));
evalcond[5]=((((-1.0)*cj2*x10151))+(((-1.0)*cj1*sj2))+((r22*x10149))+((r20*x10155))+(((-1.0)*x10152*x10154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10158 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10158.valid){
continue;
}
CheckValue<IkReal> x10159=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10158.value)+(((1.5707963267949)*(x10159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10160=IKcos(j4);
IkReal x10161=IKsin(j4);
IkReal x10162=(gconst1*r01);
IkReal x10163=((1.0)*sj1);
IkReal x10164=(gconst1*r21);
IkReal x10165=(gconst1*r11);
IkReal x10166=((1.0)*x10160);
IkReal x10167=(gconst2*x10160);
IkReal x10168=((1.0)*x10161);
IkReal x10169=(gconst2*x10161);
evalcond[0]=(((r10*x10167))+((r12*x10161))+(((-1.0)*x10165*x10166)));
evalcond[1]=((((-1.0)*r22*x10166))+(((-1.0)*x10164*x10168))+((r20*x10169)));
evalcond[2]=((((-1.0)*x10162*x10168))+((r00*x10169))+(((-1.0)*r02*x10166)));
evalcond[3]=((1.0)+((r10*x10169))+(((-1.0)*r12*x10166))+(((-1.0)*x10165*x10168)));
evalcond[4]=((((-1.0)*sj2*x10163))+(((-1.0)*x10162*x10166))+((r00*x10167))+((r02*x10161))+((cj1*cj2)));
evalcond[5]=(((r22*x10161))+(((-1.0)*x10164*x10166))+(((-1.0)*cj1*sj2))+((r20*x10167))+(((-1.0)*cj2*x10163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10170=((-1.0)*px);
CheckValue<IkReal> x10172 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10172.valid){
continue;
}
IkReal x10171=((-1.0)*(x10172.value));
sj5=gconst1;
cj5=gconst2;
j5=x10171;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10170);
rxp1_1=(px*r21);
rxp1_2=(r11*x10170);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10171;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10173=((1.0)*sj3);
IkReal x10174=(r11*r21);
IkReal x10175=(r10*r20);
j4eval[0]=(x10174+x10175);
j4eval[1]=((((-1.0)*x10173*x10174))+(((-1.0)*x10173*x10175)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10176=((-1.0)*px);
CheckValue<IkReal> x10178 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10178.valid){
continue;
}
IkReal x10177=((-1.0)*(x10178.value));
sj5=gconst1;
cj5=gconst2;
j5=x10177;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10176);
rxp1_1=(px*r21);
rxp1_2=(r11*x10176);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10177;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10179=(r10*r20);
IkReal x10180=((1.0)*cj3);
IkReal x10181=(r11*r21);
j4eval[0]=(x10179+x10181);
j4eval[1]=((((-1.0)*x10179*x10180))+(((-1.0)*x10180*x10181)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10182=((-1.0)*px);
CheckValue<IkReal> x10184 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10184.valid){
continue;
}
IkReal x10183=((-1.0)*(x10184.value));
sj5=gconst1;
cj5=gconst2;
j5=x10183;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10182);
rxp1_1=(px*r21);
rxp1_2=(r11*x10182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10183;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10185=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10185))+(((-1.0)*r11*r21*x10185)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10186=((1.0)*gconst2);
CheckValue<IkReal> x10187=IKPowWithIntegerCheck(cj3,-1);
if(!x10187.valid){
continue;
}
CheckValue<IkReal> x10188=IKPowWithIntegerCheck(r02,-1);
if(!x10188.valid){
continue;
}
CheckValue<IkReal> x10189=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x10186))+((cj3*gconst1*r11))),-1);
if(!x10189.valid){
continue;
}
if( IKabs(((x10187.value)*(x10188.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10189.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x10186)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10187.value)*(x10188.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10189.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x10186))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10187.value)*(x10188.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10189.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x10186))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10190=IKsin(j4);
IkReal x10191=IKcos(j4);
IkReal x10192=(sj1*sj2);
IkReal x10193=((1.0)*cj3);
IkReal x10194=(gconst1*r10);
IkReal x10195=((1.0)*cj2);
IkReal x10196=(gconst2*r21);
IkReal x10197=(gconst1*sj3);
IkReal x10198=(gconst2*r11);
IkReal x10199=(cj3*gconst1);
IkReal x10200=((1.0)*sj3);
IkReal x10201=((1.0)*cj1*sj2);
IkReal x10202=(sj1*x10195);
IkReal x10203=(gconst2*x10190);
IkReal x10204=(gconst2*x10191);
IkReal x10205=(r11*x10191);
IkReal x10206=(r02*x10190);
IkReal x10207=(r21*x10191);
IkReal x10208=((1.0)*gconst1*x10190);
IkReal x10209=(x10201+x10202);
evalcond[0]=((-1.0)*r02*x10191);
evalcond[1]=((((-1.0)*r21*x10208))+((r20*x10203)));
evalcond[2]=((1.0)+(((-1.0)*r11*x10208))+((r10*x10203)));
evalcond[3]=((((-1.0)*x10192))+(((-1.0)*x10193*x10206))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x10200*x10206))+(((-1.0)*x10209)));
evalcond[5]=(((sj3*x10194))+((sj3*x10198))+((x10199*x10205))+(((-1.0)*r10*x10193*x10204)));
evalcond[6]=((((-1.0)*r10*x10200*x10204))+((x10197*x10205))+(((-1.0)*x10193*x10198))+(((-1.0)*x10193*x10194)));
evalcond[7]=(((sj3*x10196))+((x10199*x10207))+(((-1.0)*x10209))+(((-1.0)*r20*x10193*x10204))+((r20*x10197)));
evalcond[8]=((((-1.0)*cj1*x10195))+x10192+(((-1.0)*r20*x10200*x10204))+(((-1.0)*gconst1*r20*x10193))+((x10197*x10207))+(((-1.0)*x10193*x10196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10210=((1.0)*r11);
IkReal x10211=(gconst2*r10);
CheckValue<IkReal> x10212=IKPowWithIntegerCheck(((((-1.0)*gconst1*x10210))+x10211),-1);
if(!x10212.valid){
continue;
}
CheckValue<IkReal> x10213=IKPowWithIntegerCheck(((((-1.0)*cj3*x10211))+((cj3*gconst1*r11))),-1);
if(!x10213.valid){
continue;
}
if( IKabs(((-1.0)*(x10212.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10213.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x10210)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10212.value)))+IKsqr(((x10213.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x10210))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10212.value)), ((x10213.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x10210))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10214=IKsin(j4);
IkReal x10215=IKcos(j4);
IkReal x10216=(sj1*sj2);
IkReal x10217=((1.0)*cj3);
IkReal x10218=(gconst1*r10);
IkReal x10219=((1.0)*cj2);
IkReal x10220=(gconst2*r21);
IkReal x10221=(gconst1*sj3);
IkReal x10222=(gconst2*r11);
IkReal x10223=(cj3*gconst1);
IkReal x10224=((1.0)*sj3);
IkReal x10225=((1.0)*cj1*sj2);
IkReal x10226=(sj1*x10219);
IkReal x10227=(gconst2*x10214);
IkReal x10228=(gconst2*x10215);
IkReal x10229=(r11*x10215);
IkReal x10230=(r02*x10214);
IkReal x10231=(r21*x10215);
IkReal x10232=((1.0)*gconst1*x10214);
IkReal x10233=(x10226+x10225);
evalcond[0]=((-1.0)*r02*x10215);
evalcond[1]=(((r20*x10227))+(((-1.0)*r21*x10232)));
evalcond[2]=((1.0)+((r10*x10227))+(((-1.0)*r11*x10232)));
evalcond[3]=((((-1.0)*x10217*x10230))+((cj1*cj2))+(((-1.0)*x10216)));
evalcond[4]=((((-1.0)*x10224*x10230))+(((-1.0)*x10233)));
evalcond[5]=(((x10223*x10229))+((sj3*x10222))+(((-1.0)*r10*x10217*x10228))+((sj3*x10218)));
evalcond[6]=((((-1.0)*x10217*x10222))+((x10221*x10229))+(((-1.0)*x10217*x10218))+(((-1.0)*r10*x10224*x10228)));
evalcond[7]=(((x10223*x10231))+((sj3*x10220))+(((-1.0)*r20*x10217*x10228))+(((-1.0)*x10233))+((r20*x10221)));
evalcond[8]=((((-1.0)*x10217*x10220))+((x10221*x10231))+(((-1.0)*gconst1*r20*x10217))+(((-1.0)*r20*x10224*x10228))+x10216+(((-1.0)*cj1*x10219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10234=(gconst1*r11);
IkReal x10235=(gconst2*r10);
CheckValue<IkReal> x10236=IKPowWithIntegerCheck((x10235+(((-1.0)*x10234))),-1);
if(!x10236.valid){
continue;
}
CheckValue<IkReal> x10237=IKPowWithIntegerCheck(((((-1.0)*sj3*x10235))+((sj3*x10234))),-1);
if(!x10237.valid){
continue;
}
if( IKabs(((-1.0)*(x10236.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10237.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10236.value)))+IKsqr(((x10237.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10236.value)), ((x10237.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10238=IKsin(j4);
IkReal x10239=IKcos(j4);
IkReal x10240=(sj1*sj2);
IkReal x10241=((1.0)*cj3);
IkReal x10242=(gconst1*r10);
IkReal x10243=((1.0)*cj2);
IkReal x10244=(gconst2*r21);
IkReal x10245=(gconst1*sj3);
IkReal x10246=(gconst2*r11);
IkReal x10247=(cj3*gconst1);
IkReal x10248=((1.0)*sj3);
IkReal x10249=((1.0)*cj1*sj2);
IkReal x10250=(sj1*x10243);
IkReal x10251=(gconst2*x10238);
IkReal x10252=(gconst2*x10239);
IkReal x10253=(r11*x10239);
IkReal x10254=(r02*x10238);
IkReal x10255=(r21*x10239);
IkReal x10256=((1.0)*gconst1*x10238);
IkReal x10257=(x10250+x10249);
evalcond[0]=((-1.0)*r02*x10239);
evalcond[1]=((((-1.0)*r21*x10256))+((r20*x10251)));
evalcond[2]=((1.0)+((r10*x10251))+(((-1.0)*r11*x10256)));
evalcond[3]=((((-1.0)*x10241*x10254))+((cj1*cj2))+(((-1.0)*x10240)));
evalcond[4]=((((-1.0)*x10248*x10254))+(((-1.0)*x10257)));
evalcond[5]=(((x10247*x10253))+(((-1.0)*r10*x10241*x10252))+((sj3*x10242))+((sj3*x10246)));
evalcond[6]=((((-1.0)*x10241*x10246))+(((-1.0)*x10241*x10242))+(((-1.0)*r10*x10248*x10252))+((x10245*x10253)));
evalcond[7]=(((x10247*x10255))+((sj3*x10244))+(((-1.0)*r20*x10241*x10252))+(((-1.0)*x10257))+((r20*x10245)));
evalcond[8]=((((-1.0)*x10241*x10244))+(((-1.0)*cj1*x10243))+((x10245*x10255))+x10240+(((-1.0)*r20*x10248*x10252))+(((-1.0)*gconst1*r20*x10241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10258=gconst2*gconst2;
IkReal x10259=gconst1*gconst1;
IkReal x10260=(r11*sj3);
IkReal x10261=(gconst1*gconst2);
IkReal x10262=((1.0)*r00);
IkReal x10263=(cj3*r11);
IkReal x10264=(cj3*r10);
IkReal x10265=((1.0)*r02);
IkReal x10266=(r10*sj3);
IkReal x10267=(r01*x10259);
CheckValue<IkReal> x10268=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r01*x10261*x10266))+((r00*x10258*x10266))+((x10260*x10267))+(((-1.0)*x10260*x10261*x10262)))),-1);
if(!x10268.valid){
continue;
}
CheckValue<IkReal> x10269 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x10263*x10265))+(((-1.0)*gconst1*x10264*x10265)))),IkReal(((((-1.0)*x10258*x10262*x10263))+((r01*x10261*x10263))+((x10264*x10267))+(((-1.0)*x10261*x10262*x10264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10268.value)))+(x10269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10270=IKsin(j4);
IkReal x10271=IKcos(j4);
IkReal x10272=(gconst1*r01);
IkReal x10273=(gconst2*sj3);
IkReal x10274=(sj1*sj2);
IkReal x10275=(cj3*gconst1);
IkReal x10276=(cj3*gconst2);
IkReal x10277=((1.0)*cj2);
IkReal x10278=(gconst1*r11);
IkReal x10279=(gconst1*r21);
IkReal x10280=(gconst1*sj3);
IkReal x10281=((1.0)*cj1*sj2);
IkReal x10282=(sj1*x10277);
IkReal x10283=((1.0)*x10271);
IkReal x10284=((1.0)*x10270);
IkReal x10285=(sj3*x10271);
IkReal x10286=(gconst2*x10270);
IkReal x10287=(x10281+x10282);
evalcond[0]=(((r20*x10286))+(((-1.0)*x10279*x10284))+(((-1.0)*r22*x10283)));
evalcond[1]=((((-1.0)*x10272*x10284))+(((-1.0)*r02*x10283))+((r00*x10286)));
evalcond[2]=((1.0)+(((-1.0)*x10278*x10284))+(((-1.0)*r12*x10283))+((r10*x10286)));
evalcond[3]=((((-1.0)*r10*x10276*x10283))+((r11*x10273))+(((-1.0)*cj3*r12*x10284))+((r11*x10271*x10275))+((r10*x10280)));
evalcond[4]=((((-1.0)*r10*x10273*x10283))+(((-1.0)*r12*sj3*x10284))+(((-1.0)*r11*x10276))+((x10278*x10285))+(((-1.0)*r10*x10275)));
evalcond[5]=(((r01*x10273))+(((-1.0)*r00*x10276*x10283))+(((-1.0)*cj3*r02*x10284))+((cj1*cj2))+(((-1.0)*x10274))+((cj3*x10271*x10272))+((r00*x10280)));
evalcond[6]=(((r20*x10280))+(((-1.0)*r20*x10276*x10283))+(((-1.0)*cj3*r22*x10284))+((r21*x10271*x10275))+((r21*x10273))+(((-1.0)*x10287)));
evalcond[7]=(((x10279*x10285))+(((-1.0)*r22*sj3*x10284))+(((-1.0)*r21*x10276))+x10274+(((-1.0)*cj1*x10277))+(((-1.0)*r20*x10273*x10283))+(((-1.0)*r20*x10275)));
evalcond[8]=(((x10272*x10285))+(((-1.0)*r02*sj3*x10284))+(((-1.0)*r00*x10275))+(((-1.0)*r01*x10276))+(((-1.0)*r00*x10273*x10283))+(((-1.0)*x10287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10288=gconst1*gconst1;
IkReal x10289=gconst2*gconst2;
IkReal x10290=(r01*r11);
IkReal x10291=(r00*r10);
IkReal x10292=(gconst2*r11);
IkReal x10293=(r02*sj3);
IkReal x10294=(r01*r10);
IkReal x10295=(gconst1*gconst2*sj3);
IkReal x10296=((1.0)*cj3*gconst1);
CheckValue<IkReal> x10297 = IKatan2WithCheck(IkReal((((gconst1*r10*x10293))+((x10292*x10293)))),IkReal(((((-1.0)*x10290*x10295))+((x10291*x10295))+((r00*r11*sj3*x10289))+(((-1.0)*sj3*x10288*x10294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10297.valid){
continue;
}
CheckValue<IkReal> x10298=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*gconst2*x10294*x10296))+((cj3*x10289*x10291))+((cj3*x10288*x10290))+(((-1.0)*r00*x10292*x10296)))),-1);
if(!x10298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10297.value)+(((1.5707963267949)*(x10298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10299=IKsin(j4);
IkReal x10300=IKcos(j4);
IkReal x10301=(gconst1*r01);
IkReal x10302=(gconst2*sj3);
IkReal x10303=(sj1*sj2);
IkReal x10304=(cj3*gconst1);
IkReal x10305=(cj3*gconst2);
IkReal x10306=((1.0)*cj2);
IkReal x10307=(gconst1*r11);
IkReal x10308=(gconst1*r21);
IkReal x10309=(gconst1*sj3);
IkReal x10310=((1.0)*cj1*sj2);
IkReal x10311=(sj1*x10306);
IkReal x10312=((1.0)*x10300);
IkReal x10313=((1.0)*x10299);
IkReal x10314=(sj3*x10300);
IkReal x10315=(gconst2*x10299);
IkReal x10316=(x10310+x10311);
evalcond[0]=((((-1.0)*x10308*x10313))+(((-1.0)*r22*x10312))+((r20*x10315)));
evalcond[1]=((((-1.0)*r02*x10312))+(((-1.0)*x10301*x10313))+((r00*x10315)));
evalcond[2]=((1.0)+(((-1.0)*x10307*x10313))+(((-1.0)*r12*x10312))+((r10*x10315)));
evalcond[3]=(((r10*x10309))+(((-1.0)*r10*x10305*x10312))+((r11*x10302))+((r11*x10300*x10304))+(((-1.0)*cj3*r12*x10313)));
evalcond[4]=((((-1.0)*r10*x10302*x10312))+(((-1.0)*r10*x10304))+(((-1.0)*r11*x10305))+(((-1.0)*r12*sj3*x10313))+((x10307*x10314)));
evalcond[5]=((((-1.0)*r00*x10305*x10312))+(((-1.0)*x10303))+((r00*x10309))+((r01*x10302))+((cj1*cj2))+((cj3*x10300*x10301))+(((-1.0)*cj3*r02*x10313)));
evalcond[6]=(((r21*x10300*x10304))+(((-1.0)*x10316))+((r20*x10309))+(((-1.0)*r20*x10305*x10312))+(((-1.0)*cj3*r22*x10313))+((r21*x10302)));
evalcond[7]=((((-1.0)*r21*x10305))+(((-1.0)*r20*x10302*x10312))+(((-1.0)*r20*x10304))+(((-1.0)*cj1*x10306))+(((-1.0)*r22*sj3*x10313))+x10303+((x10308*x10314)));
evalcond[8]=((((-1.0)*x10316))+((x10301*x10314))+(((-1.0)*r01*x10305))+(((-1.0)*r00*x10302*x10312))+(((-1.0)*r00*x10304))+(((-1.0)*r02*sj3*x10313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10317 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10317.valid){
continue;
}
CheckValue<IkReal> x10318=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10317.value)+(((1.5707963267949)*(x10318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10319=IKsin(j4);
IkReal x10320=IKcos(j4);
IkReal x10321=(gconst1*r01);
IkReal x10322=(gconst2*sj3);
IkReal x10323=(sj1*sj2);
IkReal x10324=(cj3*gconst1);
IkReal x10325=(cj3*gconst2);
IkReal x10326=((1.0)*cj2);
IkReal x10327=(gconst1*r11);
IkReal x10328=(gconst1*r21);
IkReal x10329=(gconst1*sj3);
IkReal x10330=((1.0)*cj1*sj2);
IkReal x10331=(sj1*x10326);
IkReal x10332=((1.0)*x10320);
IkReal x10333=((1.0)*x10319);
IkReal x10334=(sj3*x10320);
IkReal x10335=(gconst2*x10319);
IkReal x10336=(x10330+x10331);
evalcond[0]=((((-1.0)*x10328*x10333))+(((-1.0)*r22*x10332))+((r20*x10335)));
evalcond[1]=((((-1.0)*x10321*x10333))+((r00*x10335))+(((-1.0)*r02*x10332)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10332))+(((-1.0)*x10327*x10333))+((r10*x10335)));
evalcond[3]=((((-1.0)*r10*x10325*x10332))+(((-1.0)*cj3*r12*x10333))+((r11*x10320*x10324))+((r11*x10322))+((r10*x10329)));
evalcond[4]=((((-1.0)*r10*x10324))+((x10327*x10334))+(((-1.0)*r10*x10322*x10332))+(((-1.0)*r11*x10325))+(((-1.0)*r12*sj3*x10333)));
evalcond[5]=((((-1.0)*x10323))+((cj3*x10320*x10321))+(((-1.0)*r00*x10325*x10332))+((r00*x10329))+((r01*x10322))+((cj1*cj2))+(((-1.0)*cj3*r02*x10333)));
evalcond[6]=((((-1.0)*r20*x10325*x10332))+(((-1.0)*cj3*r22*x10333))+((r20*x10329))+((r21*x10322))+(((-1.0)*x10336))+((r21*x10320*x10324)));
evalcond[7]=(((x10328*x10334))+(((-1.0)*cj1*x10326))+(((-1.0)*r21*x10325))+(((-1.0)*r20*x10322*x10332))+(((-1.0)*r20*x10324))+x10323+(((-1.0)*r22*sj3*x10333)));
evalcond[8]=(((x10321*x10334))+(((-1.0)*r02*sj3*x10333))+(((-1.0)*r00*x10324))+(((-1.0)*r00*x10322*x10332))+(((-1.0)*r01*x10325))+(((-1.0)*x10336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10337=((-1.0)*py);
CheckValue<IkReal> x10339 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10339.valid){
continue;
}
IkReal x10338=((-1.0)*(x10339.value));
sj5=gconst1;
cj5=gconst2;
j5=x10338;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10337);
rxp0_2=(py*r00);
rxp1_0=(r21*x10337);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10338;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10340=((-1.0)*py);
CheckValue<IkReal> x10342 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10342.valid){
continue;
}
IkReal x10341=((-1.0)*(x10342.value));
sj5=gconst1;
cj5=gconst2;
j5=x10341;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10340);
rxp0_2=(py*r00);
rxp1_0=(r21*x10340);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10341;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10343=((1.0)*cj3);
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=((((-1.0)*x10343*(r21*r21)))+(((-1.0)*x10343))+((cj3*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10344=((-1.0)*py);
CheckValue<IkReal> x10346 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10346.valid){
continue;
}
IkReal x10345=((-1.0)*(x10346.value));
sj5=gconst1;
cj5=gconst2;
j5=x10345;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10344);
rxp0_2=(py*r00);
rxp1_0=(r21*x10344);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10345;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10347=((-1.0)*py);
CheckValue<IkReal> x10349 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10349.valid){
continue;
}
IkReal x10348=((-1.0)*(x10349.value));
sj5=gconst1;
cj5=gconst2;
j5=x10348;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10347);
rxp0_2=(py*r00);
rxp1_0=(r21*x10347);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10348;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10350=((-1.0)*py);
CheckValue<IkReal> x10352 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10352.valid){
continue;
}
IkReal x10351=((-1.0)*(x10352.value));
sj5=gconst1;
cj5=gconst2;
j5=x10351;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10350);
rxp0_2=(py*r00);
rxp1_0=(r21*x10350);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10351;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10353=((-1.0)*py);
CheckValue<IkReal> x10355 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10355.valid){
continue;
}
IkReal x10354=((-1.0)*(x10355.value));
sj5=gconst1;
cj5=gconst2;
j5=x10354;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10353);
rxp0_2=(py*r00);
rxp1_0=(r21*x10353);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10354;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10358=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x10358.valid){
continue;
}
IkReal x10356=x10358.value;
IkReal x10357=(cj0*x10356);
cj4array[0]=((((-1.0)*sj1*sj2*x10357))+((cj1*cj2*x10357)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10359=IKsin(j4);
IkReal x10360=IKcos(j4);
IkReal x10361=(gconst2*x10359);
IkReal x10362=((1.0)*x10360);
IkReal x10363=((1.0)*gconst1*x10359);
evalcond[0]=((-1.0)*r12*x10359);
evalcond[1]=((((-1.0)*r12*x10362))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x10361))+(((-1.0)*r21*x10363)));
evalcond[3]=(((r00*x10361))+(((-1.0)*r01*x10363)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x10362))+((gconst1*r21*x10360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10365=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x10365.valid){
continue;
}
IkReal x10364=x10365.value;
cj4array[0]=(((cj1*sj2*x10364))+((cj2*sj1*x10364)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10366=IKsin(j4);
IkReal x10367=IKcos(j4);
IkReal x10368=(gconst2*r00);
IkReal x10369=((1.0)*cj0);
IkReal x10370=((1.0)*x10367);
IkReal x10371=((1.0)*gconst1*x10366);
evalcond[0]=((-1.0)*r12*x10366);
evalcond[1]=((((-1.0)*x10369))+(((-1.0)*r12*x10370)));
evalcond[2]=((((-1.0)*r21*x10371))+((gconst2*r20*x10366)));
evalcond[3]=((((-1.0)*r01*x10371))+((x10366*x10368)));
evalcond[4]=((((-1.0)*cj1*cj2*x10369))+(((-1.0)*x10368*x10370))+((gconst1*r01*x10367))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10372=IKPowWithIntegerCheck(r12,-1);
if(!x10372.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10372.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10373=IKsin(j4);
IkReal x10374=IKcos(j4);
IkReal x10375=(gconst1*r01);
IkReal x10376=(gconst1*r21);
IkReal x10377=(gconst2*r00);
IkReal x10378=((1.0)*cj2);
IkReal x10379=(gconst2*r20);
IkReal x10380=((1.0)*x10373);
IkReal x10381=((1.0)*x10374);
evalcond[0]=((-1.0)*r12*x10373);
evalcond[1]=((((-1.0)*x10376*x10380))+((x10373*x10379)));
evalcond[2]=((((-1.0)*x10375*x10380))+((x10373*x10377)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x10379*x10381))+(((-1.0)*sj1*x10378))+((x10374*x10376)));
evalcond[4]=((((-1.0)*x10377*x10381))+(((-1.0)*cj0*cj1*x10378))+((x10374*x10375))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10382=((-1.0)*py);
CheckValue<IkReal> x10384 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10384.valid){
continue;
}
IkReal x10383=((-1.0)*(x10384.value));
sj5=gconst1;
cj5=gconst2;
j5=x10383;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10382);
rxp0_2=(py*r00);
rxp1_0=(r21*x10382);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10383;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10385=((-1.0)*py);
CheckValue<IkReal> x10387 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10387.valid){
continue;
}
IkReal x10386=((-1.0)*(x10387.value));
sj5=gconst1;
cj5=gconst2;
j5=x10386;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10385);
rxp0_2=(py*r00);
rxp1_0=(r21*x10385);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10386;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10388=((-1.0)*py);
CheckValue<IkReal> x10390 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10390.valid){
continue;
}
IkReal x10389=((-1.0)*(x10390.value));
sj5=gconst1;
cj5=gconst2;
j5=x10389;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10388);
rxp0_2=(py*r00);
rxp1_0=(r21*x10388);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10389;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10393=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x10393.valid){
continue;
}
IkReal x10391=x10393.value;
IkReal x10392=(cj0*x10391);
cj4array[0]=(((cj1*cj2*x10392))+(((-1.0)*sj1*sj2*x10392)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10394=IKsin(j4);
IkReal x10395=IKcos(j4);
IkReal x10396=(gconst2*x10394);
IkReal x10397=((1.0)*x10395);
IkReal x10398=((1.0)*gconst1*x10394);
evalcond[0]=(r12*x10394);
evalcond[1]=((((-1.0)*r12*x10397))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x10398))+((r20*x10396)));
evalcond[3]=((((-1.0)*r01*x10398))+((r00*x10396)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst2*r20*x10395))+(((-1.0)*gconst1*r21*x10397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10400=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x10400.valid){
continue;
}
IkReal x10399=x10400.value;
cj4array[0]=(((cj1*sj2*x10399))+((cj2*sj1*x10399)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10401=IKsin(j4);
IkReal x10402=IKcos(j4);
IkReal x10403=(gconst2*r00);
IkReal x10404=((1.0)*cj0);
IkReal x10405=((1.0)*gconst1*r01);
evalcond[0]=(r12*x10401);
evalcond[1]=((((-1.0)*r12*x10402))+(((-1.0)*x10404)));
evalcond[2]=((((-1.0)*gconst1*r21*x10401))+((gconst2*r20*x10401)));
evalcond[3]=(((x10401*x10403))+(((-1.0)*x10401*x10405)));
evalcond[4]=((((-1.0)*x10402*x10405))+(((-1.0)*cj1*cj2*x10404))+((x10402*x10403))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10406=IKPowWithIntegerCheck(r12,-1);
if(!x10406.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10406.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10407=IKsin(j4);
IkReal x10408=IKcos(j4);
IkReal x10409=(gconst2*r00);
IkReal x10410=((1.0)*cj2);
IkReal x10411=(gconst2*r20);
IkReal x10412=((1.0)*gconst1*r01);
IkReal x10413=((1.0)*gconst1*r21);
evalcond[0]=(r12*x10407);
evalcond[1]=((((-1.0)*x10407*x10413))+((x10407*x10411)));
evalcond[2]=((((-1.0)*x10407*x10412))+((x10407*x10409)));
evalcond[3]=(((x10408*x10411))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10410))+(((-1.0)*x10408*x10413)));
evalcond[4]=(((x10408*x10409))+(((-1.0)*x10408*x10412))+((cj0*sj1*sj2))+(((-1.0)*cj0*cj1*x10410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10415=IKPowWithIntegerCheck(r12,-1);
if(!x10415.valid){
continue;
}
IkReal x10414=x10415.value;
CheckValue<IkReal> x10416=IKPowWithIntegerCheck(sj3,-1);
if(!x10416.valid){
continue;
}
if( IKabs((x10414*(x10416.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x10414)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10414*(x10416.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x10414))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10414*(x10416.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x10414));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10417=IKsin(j4);
IkReal x10418=IKcos(j4);
IkReal x10419=(gconst1*r01);
IkReal x10420=(cj2*sj1);
IkReal x10421=(sj1*sj2);
IkReal x10422=((1.0)*gconst2);
IkReal x10423=(gconst1*r21);
IkReal x10424=(cj1*sj2);
IkReal x10425=(gconst1*r20);
IkReal x10426=((1.0)*cj3);
IkReal x10427=(gconst1*r00);
IkReal x10428=(gconst2*sj3);
IkReal x10429=((1.0)*x10417);
IkReal x10430=(sj3*x10418);
IkReal x10431=((1.0)*cj1*cj2);
IkReal x10432=(cj3*x10418);
IkReal x10433=(gconst2*x10417);
evalcond[0]=((((-1.0)*r12*x10418))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x10423*x10429))+((r20*x10433)));
evalcond[2]=(sj0+(((-1.0)*x10419*x10429))+((r00*x10433)));
evalcond[3]=((((-1.0)*r12*sj3*x10429))+((sj0*x10420))+((sj0*x10424)));
evalcond[4]=(((sj0*x10421))+(((-1.0)*sj0*x10431))+(((-1.0)*r12*x10417*x10426)));
evalcond[5]=(((x10423*x10432))+(((-1.0)*r20*x10422*x10432))+((sj3*x10425))+(((-1.0)*x10424))+(((-1.0)*x10420))+((r21*x10428)));
evalcond[6]=(((x10423*x10430))+(((-1.0)*r20*x10422*x10430))+x10421+(((-1.0)*x10431))+(((-1.0)*cj3*r21*x10422))+(((-1.0)*x10425*x10426)));
evalcond[7]=(((r01*x10428))+((cj0*x10421))+(((-1.0)*r00*x10422*x10432))+((x10419*x10432))+((sj3*x10427))+(((-1.0)*cj0*x10431)));
evalcond[8]=((((-1.0)*cj3*r01*x10422))+((cj0*x10420))+((cj0*x10424))+(((-1.0)*x10426*x10427))+(((-1.0)*r00*x10422*x10430))+((x10419*x10430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10434=((1.0)*sj3);
CheckValue<IkReal> x10435=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x10435.valid){
continue;
}
CheckValue<IkReal> x10436=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*gconst2*r20))),-1);
if(!x10436.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x10435.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10436.value)*(((((-1.0)*gconst1*r20*x10434))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r21*x10434)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x10435.value)))+IKsqr(((x10436.value)*(((((-1.0)*gconst1*r20*x10434))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r21*x10434))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x10435.value)), ((x10436.value)*(((((-1.0)*gconst1*r20*x10434))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r21*x10434))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10437=IKsin(j4);
IkReal x10438=IKcos(j4);
IkReal x10439=(gconst1*r01);
IkReal x10440=(cj2*sj1);
IkReal x10441=(sj1*sj2);
IkReal x10442=((1.0)*gconst2);
IkReal x10443=(gconst1*r21);
IkReal x10444=(cj1*sj2);
IkReal x10445=(gconst1*r20);
IkReal x10446=((1.0)*cj3);
IkReal x10447=(gconst1*r00);
IkReal x10448=(gconst2*sj3);
IkReal x10449=((1.0)*x10437);
IkReal x10450=(sj3*x10438);
IkReal x10451=((1.0)*cj1*cj2);
IkReal x10452=(cj3*x10438);
IkReal x10453=(gconst2*x10437);
evalcond[0]=((((-1.0)*r12*x10438))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x10443*x10449))+((r20*x10453)));
evalcond[2]=(sj0+((r00*x10453))+(((-1.0)*x10439*x10449)));
evalcond[3]=(((sj0*x10440))+((sj0*x10444))+(((-1.0)*r12*sj3*x10449)));
evalcond[4]=((((-1.0)*r12*x10437*x10446))+((sj0*x10441))+(((-1.0)*sj0*x10451)));
evalcond[5]=((((-1.0)*x10440))+(((-1.0)*x10444))+((sj3*x10445))+((x10443*x10452))+(((-1.0)*r20*x10442*x10452))+((r21*x10448)));
evalcond[6]=(((x10443*x10450))+(((-1.0)*x10445*x10446))+(((-1.0)*r20*x10442*x10450))+(((-1.0)*cj3*r21*x10442))+x10441+(((-1.0)*x10451)));
evalcond[7]=(((sj3*x10447))+(((-1.0)*cj0*x10451))+((x10439*x10452))+((cj0*x10441))+((r01*x10448))+(((-1.0)*r00*x10442*x10452)));
evalcond[8]=(((x10439*x10450))+((cj0*x10444))+((cj0*x10440))+(((-1.0)*x10446*x10447))+(((-1.0)*r00*x10442*x10450))+(((-1.0)*cj3*r01*x10442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10454=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x10454.valid){
continue;
}
CheckValue<IkReal> x10455=IKPowWithIntegerCheck(r12,-1);
if(!x10455.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x10454.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10455.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x10454.value)))+IKsqr(((-1.0)*cj0*(x10455.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x10454.value)), ((-1.0)*cj0*(x10455.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10456=IKsin(j4);
IkReal x10457=IKcos(j4);
IkReal x10458=(gconst1*r01);
IkReal x10459=(cj2*sj1);
IkReal x10460=(sj1*sj2);
IkReal x10461=((1.0)*gconst2);
IkReal x10462=(gconst1*r21);
IkReal x10463=(cj1*sj2);
IkReal x10464=(gconst1*r20);
IkReal x10465=((1.0)*cj3);
IkReal x10466=(gconst1*r00);
IkReal x10467=(gconst2*sj3);
IkReal x10468=((1.0)*x10456);
IkReal x10469=(sj3*x10457);
IkReal x10470=((1.0)*cj1*cj2);
IkReal x10471=(cj3*x10457);
IkReal x10472=(gconst2*x10456);
evalcond[0]=((((-1.0)*r12*x10457))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x10472))+(((-1.0)*x10462*x10468)));
evalcond[2]=(sj0+((r00*x10472))+(((-1.0)*x10458*x10468)));
evalcond[3]=(((sj0*x10463))+((sj0*x10459))+(((-1.0)*r12*sj3*x10468)));
evalcond[4]=((((-1.0)*r12*x10456*x10465))+(((-1.0)*sj0*x10470))+((sj0*x10460)));
evalcond[5]=((((-1.0)*x10463))+(((-1.0)*x10459))+((r21*x10467))+(((-1.0)*r20*x10461*x10471))+((sj3*x10464))+((x10462*x10471)));
evalcond[6]=((((-1.0)*cj3*r21*x10461))+(((-1.0)*x10464*x10465))+(((-1.0)*r20*x10461*x10469))+x10460+((x10462*x10469))+(((-1.0)*x10470)));
evalcond[7]=(((r01*x10467))+((cj0*x10460))+(((-1.0)*r00*x10461*x10471))+((sj3*x10466))+(((-1.0)*cj0*x10470))+((x10458*x10471)));
evalcond[8]=((((-1.0)*x10465*x10466))+((cj0*x10463))+(((-1.0)*cj3*r01*x10461))+((cj0*x10459))+(((-1.0)*r00*x10461*x10469))+((x10458*x10469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10473=gconst1*gconst1;
IkReal x10474=r21*r21;
IkReal x10475=gconst2*gconst2;
IkReal x10476=r20*r20;
IkReal x10477=(gconst2*sj3);
IkReal x10478=(gconst2*r20);
IkReal x10479=(gconst1*r21);
IkReal x10480=((1.0)*cj1*sj2);
IkReal x10481=(r20*r21*sj3);
IkReal x10482=((1.0)*cj2*sj1);
CheckValue<IkReal> x10483 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10480))+(((-1.0)*r22*x10482))+((gconst1*r20*r22*sj3))+((r21*r22*x10477)))),IkReal((((x10475*x10481))+(((-1.0)*x10473*x10481))+(((-1.0)*x10478*x10480))+(((-1.0)*x10478*x10482))+(((-1.0)*gconst1*x10474*x10477))+((cj1*sj2*x10479))+((gconst1*x10476*x10477))+((cj2*sj1*x10479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10483.valid){
continue;
}
CheckValue<IkReal> x10484=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x10478*x10479))+((cj3*x10475*x10476))+((cj3*(r22*r22)))+((cj3*x10473*x10474)))),-1);
if(!x10484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10483.value)+(((1.5707963267949)*(x10484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10485=IKsin(j4);
IkReal x10486=IKcos(j4);
IkReal x10487=(gconst2*sj3);
IkReal x10488=(gconst1*r01);
IkReal x10489=(sj1*sj2);
IkReal x10490=(cj3*gconst1);
IkReal x10491=(cj3*gconst2);
IkReal x10492=(gconst1*r11);
IkReal x10493=(cj2*sj1);
IkReal x10494=(gconst1*r21);
IkReal x10495=(cj1*sj2);
IkReal x10496=(gconst1*sj3);
IkReal x10497=((1.0)*x10486);
IkReal x10498=((1.0)*x10485);
IkReal x10499=(sj3*x10486);
IkReal x10500=((1.0)*cj1*cj2);
IkReal x10501=(gconst2*x10485);
evalcond[0]=(((r20*x10501))+(((-1.0)*r22*x10497))+(((-1.0)*x10494*x10498)));
evalcond[1]=((((-1.0)*x10488*x10498))+sj0+((r00*x10501))+(((-1.0)*r02*x10497)));
evalcond[2]=(((r10*x10501))+(((-1.0)*x10492*x10498))+(((-1.0)*r12*x10497))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x10487))+(((-1.0)*x10493))+(((-1.0)*x10495))+((r21*x10486*x10490))+(((-1.0)*cj3*r22*x10498))+((r20*x10496))+(((-1.0)*r20*x10491*x10497)));
evalcond[4]=((((-1.0)*r20*x10490))+(((-1.0)*x10500))+(((-1.0)*r20*x10487*x10497))+((x10494*x10499))+(((-1.0)*r21*x10491))+(((-1.0)*r22*sj3*x10498))+x10489);
evalcond[5]=((((-1.0)*r00*x10491*x10497))+(((-1.0)*cj0*x10500))+((cj3*x10486*x10488))+((cj0*x10489))+(((-1.0)*cj3*r02*x10498))+((r00*x10496))+((r01*x10487)));
evalcond[6]=(((r10*x10496))+((r11*x10487))+(((-1.0)*sj0*x10500))+((r11*x10486*x10490))+((sj0*x10489))+(((-1.0)*cj3*r12*x10498))+(((-1.0)*r10*x10491*x10497)));
evalcond[7]=((((-1.0)*r00*x10490))+(((-1.0)*r01*x10491))+(((-1.0)*r00*x10487*x10497))+((cj0*x10495))+((cj0*x10493))+((x10488*x10499))+(((-1.0)*r02*sj3*x10498)));
evalcond[8]=((((-1.0)*r10*x10490))+(((-1.0)*r10*x10487*x10497))+(((-1.0)*r12*sj3*x10498))+((x10492*x10499))+(((-1.0)*r11*x10491))+((sj0*x10493))+((sj0*x10495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10502=((1.0)*gconst1);
CheckValue<IkReal> x10503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10502))+(((-1.0)*gconst2*r01)))),-1);
if(!x10503.valid){
continue;
}
CheckValue<IkReal> x10504 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x10502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10503.value)))+(x10504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10505=IKsin(j4);
IkReal x10506=IKcos(j4);
IkReal x10507=(gconst2*sj3);
IkReal x10508=(gconst1*r01);
IkReal x10509=(sj1*sj2);
IkReal x10510=(cj3*gconst1);
IkReal x10511=(cj3*gconst2);
IkReal x10512=(gconst1*r11);
IkReal x10513=(cj2*sj1);
IkReal x10514=(gconst1*r21);
IkReal x10515=(cj1*sj2);
IkReal x10516=(gconst1*sj3);
IkReal x10517=((1.0)*x10506);
IkReal x10518=((1.0)*x10505);
IkReal x10519=(sj3*x10506);
IkReal x10520=((1.0)*cj1*cj2);
IkReal x10521=(gconst2*x10505);
evalcond[0]=((((-1.0)*r22*x10517))+(((-1.0)*x10514*x10518))+((r20*x10521)));
evalcond[1]=(sj0+(((-1.0)*r02*x10517))+(((-1.0)*x10508*x10518))+((r00*x10521)));
evalcond[2]=(((r10*x10521))+(((-1.0)*x10512*x10518))+(((-1.0)*r12*x10517))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x10516))+(((-1.0)*x10513))+(((-1.0)*x10515))+((r21*x10507))+(((-1.0)*r20*x10511*x10517))+((r21*x10506*x10510))+(((-1.0)*cj3*r22*x10518)));
evalcond[4]=((((-1.0)*r21*x10511))+(((-1.0)*x10520))+(((-1.0)*r22*sj3*x10518))+(((-1.0)*r20*x10510))+x10509+((x10514*x10519))+(((-1.0)*r20*x10507*x10517)));
evalcond[5]=(((r01*x10507))+(((-1.0)*r00*x10511*x10517))+((cj0*x10509))+(((-1.0)*cj3*r02*x10518))+((r00*x10516))+(((-1.0)*cj0*x10520))+((cj3*x10506*x10508)));
evalcond[6]=(((r11*x10506*x10510))+((r10*x10516))+((sj0*x10509))+(((-1.0)*cj3*r12*x10518))+((r11*x10507))+(((-1.0)*r10*x10511*x10517))+(((-1.0)*sj0*x10520)));
evalcond[7]=((((-1.0)*r00*x10507*x10517))+(((-1.0)*r02*sj3*x10518))+((cj0*x10515))+((cj0*x10513))+(((-1.0)*r01*x10511))+(((-1.0)*r00*x10510))+((x10508*x10519)));
evalcond[8]=((((-1.0)*r11*x10511))+((x10512*x10519))+(((-1.0)*r10*x10507*x10517))+((sj0*x10515))+((sj0*x10513))+(((-1.0)*r12*sj3*x10518))+(((-1.0)*r10*x10510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10522=((1.0)*gconst1);
CheckValue<IkReal> x10523 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x10522))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10523.valid){
continue;
}
CheckValue<IkReal> x10524=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10522))+(((-1.0)*gconst2*r11)))),-1);
if(!x10524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10523.value)+(((1.5707963267949)*(x10524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10525=IKsin(j4);
IkReal x10526=IKcos(j4);
IkReal x10527=(gconst2*sj3);
IkReal x10528=(gconst1*r01);
IkReal x10529=(sj1*sj2);
IkReal x10530=(cj3*gconst1);
IkReal x10531=(cj3*gconst2);
IkReal x10532=(gconst1*r11);
IkReal x10533=(cj2*sj1);
IkReal x10534=(gconst1*r21);
IkReal x10535=(cj1*sj2);
IkReal x10536=(gconst1*sj3);
IkReal x10537=((1.0)*x10526);
IkReal x10538=((1.0)*x10525);
IkReal x10539=(sj3*x10526);
IkReal x10540=((1.0)*cj1*cj2);
IkReal x10541=(gconst2*x10525);
evalcond[0]=((((-1.0)*r22*x10537))+(((-1.0)*x10534*x10538))+((r20*x10541)));
evalcond[1]=(sj0+(((-1.0)*r02*x10537))+((r00*x10541))+(((-1.0)*x10528*x10538)));
evalcond[2]=((((-1.0)*r12*x10537))+((r10*x10541))+(((-1.0)*x10532*x10538))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x10527))+(((-1.0)*cj3*r22*x10538))+(((-1.0)*r20*x10531*x10537))+(((-1.0)*x10533))+(((-1.0)*x10535))+((r21*x10526*x10530))+((r20*x10536)));
evalcond[4]=((((-1.0)*r20*x10530))+(((-1.0)*r22*sj3*x10538))+(((-1.0)*r21*x10531))+(((-1.0)*x10540))+((x10534*x10539))+x10529+(((-1.0)*r20*x10527*x10537)));
evalcond[5]=((((-1.0)*r00*x10531*x10537))+((cj3*x10526*x10528))+((cj0*x10529))+(((-1.0)*cj0*x10540))+((r00*x10536))+((r01*x10527))+(((-1.0)*cj3*r02*x10538)));
evalcond[6]=(((r10*x10536))+((sj0*x10529))+((r11*x10526*x10530))+(((-1.0)*r10*x10531*x10537))+((r11*x10527))+(((-1.0)*cj3*r12*x10538))+(((-1.0)*sj0*x10540)));
evalcond[7]=(((x10528*x10539))+((cj0*x10535))+((cj0*x10533))+(((-1.0)*r00*x10527*x10537))+(((-1.0)*r00*x10530))+(((-1.0)*r02*sj3*x10538))+(((-1.0)*r01*x10531)));
evalcond[8]=((((-1.0)*r11*x10531))+((sj0*x10533))+((sj0*x10535))+(((-1.0)*r10*x10530))+(((-1.0)*r10*x10527*x10537))+((x10532*x10539))+(((-1.0)*r12*sj3*x10538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10543 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10543)==0){
continue;
}
IkReal x10542=pow(x10543,-0.5);
CheckValue<IkReal> x10544 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10544.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10544.value))));
IkReal gconst4=((1.0)*r21*x10542);
IkReal gconst5=((-1.0)*r20*x10542);
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10545.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10548 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10548.valid){
continue;
}
IkReal x10546=((1.0)*(x10548.value));
IkReal x10547=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10546)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10546)));
IkReal gconst4=((1.0)*r21*x10547);
IkReal gconst5=((-1.0)*r20*x10547);
IkReal x10549=r22*r22;
IkReal x10550=((1.0)*x10549);
CheckValue<IkReal> x10554=IKPowWithIntegerCheck(((-1.0)+x10549),-1);
if(!x10554.valid){
continue;
}
IkReal x10551=x10554.value;
if((((1.0)+(((-1.0)*x10550)))) < -0.00001)
continue;
IkReal x10552=IKsqrt(((1.0)+(((-1.0)*x10550))));
IkReal x10553=(sj0*x10551*x10552);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10550*x10553))+x10553))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10557 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10557.valid){
continue;
}
IkReal x10555=((1.0)*(x10557.value));
IkReal x10556=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10555)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10555)));
IkReal gconst4=((1.0)*r21*x10556);
IkReal gconst5=((-1.0)*r20*x10556);
IkReal x10558=r22*r22;
IkReal x10559=((1.0)*x10558);
CheckValue<IkReal> x10563=IKPowWithIntegerCheck(((-1.0)+x10558),-1);
if(!x10563.valid){
continue;
}
IkReal x10560=x10563.value;
if((((1.0)+(((-1.0)*x10559)))) < -0.00001)
continue;
IkReal x10561=IKsqrt(((1.0)+(((-1.0)*x10559))));
IkReal x10562=(cj0*x10560*x10561);
j4eval[0]=((IKabs(((((-1.0)*x10559*x10562))+x10562)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10566 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10566.valid){
continue;
}
IkReal x10564=((1.0)*(x10566.value));
IkReal x10565=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10564)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10564)));
IkReal gconst4=((1.0)*r21*x10565);
IkReal gconst5=((-1.0)*r20*x10565);
IkReal x10567=r22*r22;
IkReal x10568=(cj0*r02);
IkReal x10569=(r12*sj0);
CheckValue<IkReal> x10573=IKPowWithIntegerCheck(((-1.0)+x10567),-1);
if(!x10573.valid){
continue;
}
IkReal x10570=x10573.value;
if((((1.0)+(((-1.0)*x10567)))) < -0.00001)
continue;
IkReal x10571=IKsqrt(((1.0)+(((-1.0)*x10567))));
IkReal x10572=((1.0)*r22*x10570*x10571);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x10569*x10572))+(((-1.0)*x10568*x10572)))))+(IKabs((x10569+x10568))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10576 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10576.valid){
continue;
}
IkReal x10574=((1.0)*(x10576.value));
IkReal x10575=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10574)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10574)));
IkReal gconst4=((1.0)*r21*x10575);
IkReal gconst5=((-1.0)*r20*x10575);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10579 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10579.valid){
continue;
}
IkReal x10577=((1.0)*(x10579.value));
IkReal x10578=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10577)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10577)));
IkReal gconst4=((1.0)*r21*x10578);
IkReal gconst5=((-1.0)*r20*x10578);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10582 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10582.valid){
continue;
}
IkReal x10580=((1.0)*(x10582.value));
IkReal x10581=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10580)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10580)));
IkReal gconst4=((1.0)*r21*x10581);
IkReal gconst5=((-1.0)*r20*x10581);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10585 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10585.valid){
continue;
}
IkReal x10583=((1.0)*(x10585.value));
IkReal x10584=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10583)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10583)));
IkReal gconst4=((1.0)*r21*x10584);
IkReal gconst5=((-1.0)*r20*x10584);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10588 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10588.valid){
continue;
}
IkReal x10586=((1.0)*(x10588.value));
IkReal x10587=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10586)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10586)));
IkReal gconst4=((1.0)*r21*x10587);
IkReal gconst5=((-1.0)*r20*x10587);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10591 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10591.valid){
continue;
}
IkReal x10589=((1.0)*(x10591.value));
IkReal x10590=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10589)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10589)));
IkReal gconst4=((1.0)*r21*x10590);
IkReal gconst5=((-1.0)*r20*x10590);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10592=(gconst4*r01);
IkReal x10593=(gconst5*r00);
CheckValue<IkReal> x10594=IKPowWithIntegerCheck(IKsign(((x10592*x10592)+(x10593*x10593)+(((-2.0)*x10592*x10593))+(r02*r02))),-1);
if(!x10594.valid){
continue;
}
CheckValue<IkReal> x10595 = IKatan2WithCheck(IkReal(((((-1.0)*x10593))+x10592)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10594.value)))+(x10595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10596=IKsin(j4);
IkReal x10597=IKcos(j4);
IkReal x10598=(gconst4*r21);
IkReal x10599=(gconst5*r10);
IkReal x10600=(gconst4*r11);
IkReal x10601=(gconst4*r01);
IkReal x10602=((1.0)*x10597);
IkReal x10603=((1.0)*x10596);
IkReal x10604=(gconst5*x10596);
evalcond[0]=((((-1.0)*x10598*x10603))+(((-1.0)*r22*x10602))+((r20*x10604)));
evalcond[1]=((((-1.0)*x10600*x10603))+((x10596*x10599))+(((-1.0)*r12*x10602)));
evalcond[2]=((((-1.0)*r02*x10603))+((x10597*x10601))+(((-1.0)*gconst5*r00*x10602)));
evalcond[3]=((1.0)+((r00*x10604))+(((-1.0)*r02*x10602))+(((-1.0)*x10601*x10603)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x10603))+((cj1*sj2))+((x10597*x10600))+(((-1.0)*x10599*x10602)));
evalcond[5]=(((x10597*x10598))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10602))+(((-1.0)*r22*x10603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10605=((1.0)*gconst4);
CheckValue<IkReal> x10606=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r11))+(((-1.0)*r10*x10605)))),-1);
if(!x10606.valid){
continue;
}
CheckValue<IkReal> x10607 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10605))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10606.value)))+(x10607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10608=IKsin(j4);
IkReal x10609=IKcos(j4);
IkReal x10610=(gconst4*r21);
IkReal x10611=(gconst5*r10);
IkReal x10612=(gconst4*r11);
IkReal x10613=(gconst4*r01);
IkReal x10614=((1.0)*x10609);
IkReal x10615=((1.0)*x10608);
IkReal x10616=(gconst5*x10608);
evalcond[0]=((((-1.0)*x10610*x10615))+((r20*x10616))+(((-1.0)*r22*x10614)));
evalcond[1]=(((x10608*x10611))+(((-1.0)*r12*x10614))+(((-1.0)*x10612*x10615)));
evalcond[2]=(((x10609*x10613))+(((-1.0)*gconst5*r00*x10614))+(((-1.0)*r02*x10615)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10614))+((r00*x10616))+(((-1.0)*x10613*x10615)));
evalcond[4]=(((x10609*x10612))+((cj2*sj1))+(((-1.0)*x10611*x10614))+((cj1*sj2))+(((-1.0)*r12*x10615)));
evalcond[5]=(((x10609*x10610))+(((-1.0)*gconst5*r20*x10614))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10617 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10617.valid){
continue;
}
CheckValue<IkReal> x10618=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10617.value)+(((1.5707963267949)*(x10618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10619=IKsin(j4);
IkReal x10620=IKcos(j4);
IkReal x10621=(gconst4*r21);
IkReal x10622=(gconst5*r10);
IkReal x10623=(gconst4*r11);
IkReal x10624=(gconst4*r01);
IkReal x10625=((1.0)*x10620);
IkReal x10626=((1.0)*x10619);
IkReal x10627=(gconst5*x10619);
evalcond[0]=(((r20*x10627))+(((-1.0)*r22*x10625))+(((-1.0)*x10621*x10626)));
evalcond[1]=((((-1.0)*x10623*x10626))+(((-1.0)*r12*x10625))+((x10619*x10622)));
evalcond[2]=((((-1.0)*gconst5*r00*x10625))+(((-1.0)*r02*x10626))+((x10620*x10624)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10625))+(((-1.0)*x10624*x10626))+((r00*x10627)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x10626))+(((-1.0)*x10622*x10625))+((x10620*x10623)));
evalcond[5]=((((-1.0)*gconst5*r20*x10625))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10626))+((x10620*x10621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10630 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10630.valid){
continue;
}
IkReal x10628=((1.0)*(x10630.value));
IkReal x10629=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10628)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10628)));
IkReal gconst4=((1.0)*r21*x10629);
IkReal gconst5=((-1.0)*r20*x10629);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10633 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10633.valid){
continue;
}
IkReal x10631=((1.0)*(x10633.value));
IkReal x10632=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10631)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10631)));
IkReal gconst4=((1.0)*r21*x10632);
IkReal gconst5=((-1.0)*r20*x10632);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10636 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10636.valid){
continue;
}
IkReal x10634=((1.0)*(x10636.value));
IkReal x10635=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10634)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10634)));
IkReal gconst4=((1.0)*r21*x10635);
IkReal gconst5=((-1.0)*r20*x10635);
IkReal x10637=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10641=IKPowWithIntegerCheck(x10637,-1);
if(!x10641.valid){
continue;
}
IkReal x10638=x10641.value;
IkReal x10639=((1.0)*x10638);
IkReal x10640=((((-1.0)*x10639*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10639*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10638)));
j4eval[0]=x10640;
j4eval[1]=r02;
j4eval[2]=x10637;
j4eval[3]=IKsign(x10640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10642=(gconst5*r00);
IkReal x10643=(gconst4*r01);
CheckValue<IkReal> x10644=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10643*x10643)))+(((-1.0)*(x10642*x10642)))+(((2.0)*x10642*x10643)))),-1);
if(!x10644.valid){
continue;
}
CheckValue<IkReal> x10645 = IKatan2WithCheck(IkReal(((((-1.0)*x10643))+x10642)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10644.value)))+(x10645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10646=IKcos(j4);
IkReal x10647=IKsin(j4);
IkReal x10648=((1.0)*x10646);
IkReal x10649=(gconst5*x10646);
IkReal x10650=(gconst5*x10647);
IkReal x10651=((1.0)*gconst4*x10647);
evalcond[0]=(((r00*x10649))+(((-1.0)*gconst4*r01*x10648))+((r02*x10647)));
evalcond[1]=((((-1.0)*r22*x10648))+(((-1.0)*r21*x10651))+((r20*x10650)));
evalcond[2]=((((-1.0)*r12*x10648))+((r10*x10650))+(((-1.0)*r11*x10651)));
evalcond[3]=((1.0)+((r00*x10650))+(((-1.0)*r02*x10648))+(((-1.0)*r01*x10651)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r11*x10648))+((r10*x10649))+((r12*x10647)));
evalcond[5]=(((r20*x10649))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10647))+(((-1.0)*gconst4*r21*x10648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10652=((1.0)*gconst4);
CheckValue<IkReal> x10653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10652))+(((-1.0)*gconst5*r11)))),-1);
if(!x10653.valid){
continue;
}
CheckValue<IkReal> x10654 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10652))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10653.value)))+(x10654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10655=IKcos(j4);
IkReal x10656=IKsin(j4);
IkReal x10657=((1.0)*x10655);
IkReal x10658=(gconst5*x10655);
IkReal x10659=(gconst5*x10656);
IkReal x10660=((1.0)*gconst4*x10656);
evalcond[0]=(((r00*x10658))+((r02*x10656))+(((-1.0)*gconst4*r01*x10657)));
evalcond[1]=((((-1.0)*r22*x10657))+(((-1.0)*r21*x10660))+((r20*x10659)));
evalcond[2]=((((-1.0)*r12*x10657))+((r10*x10659))+(((-1.0)*r11*x10660)));
evalcond[3]=((1.0)+((r00*x10659))+(((-1.0)*r02*x10657))+(((-1.0)*r01*x10660)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r11*x10657))+((r12*x10656))+((r10*x10658)));
evalcond[5]=((((-1.0)*gconst4*r21*x10657))+(((-1.0)*cj1*cj2))+((r22*x10656))+((sj1*sj2))+((r20*x10658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10661 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10661.valid){
continue;
}
CheckValue<IkReal> x10662=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10661.value)+(((1.5707963267949)*(x10662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10663=IKcos(j4);
IkReal x10664=IKsin(j4);
IkReal x10665=((1.0)*x10663);
IkReal x10666=(gconst5*x10663);
IkReal x10667=(gconst5*x10664);
IkReal x10668=((1.0)*gconst4*x10664);
evalcond[0]=(((r02*x10664))+((r00*x10666))+(((-1.0)*gconst4*r01*x10665)));
evalcond[1]=((((-1.0)*r21*x10668))+((r20*x10667))+(((-1.0)*r22*x10665)));
evalcond[2]=(((r10*x10667))+(((-1.0)*r12*x10665))+(((-1.0)*r11*x10668)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10665))+((r00*x10667))+(((-1.0)*r01*x10668)));
evalcond[4]=(((cj2*sj1))+((r12*x10664))+(((-1.0)*gconst4*r11*x10665))+((cj1*sj2))+((r10*x10666)));
evalcond[5]=(((r22*x10664))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10665))+((r20*x10666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10671 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10671.valid){
continue;
}
IkReal x10669=((1.0)*(x10671.value));
IkReal x10670=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10669)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10669)));
IkReal gconst4=((1.0)*r21*x10670);
IkReal gconst5=((-1.0)*r20*x10670);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10674 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10674.valid){
continue;
}
IkReal x10672=((1.0)*(x10674.value));
IkReal x10673=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10672)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10672)));
IkReal gconst4=((1.0)*r21*x10673);
IkReal gconst5=((-1.0)*r20*x10673);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10677 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10677.valid){
continue;
}
IkReal x10675=((1.0)*(x10677.value));
IkReal x10676=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10675)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10675)));
IkReal gconst4=((1.0)*r21*x10676);
IkReal gconst5=((-1.0)*r20*x10676);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10678=(gconst4*r01);
IkReal x10679=(gconst5*r00);
CheckValue<IkReal> x10680=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10678*x10679))+(x10678*x10678)+(r02*r02)+(x10679*x10679))),-1);
if(!x10680.valid){
continue;
}
CheckValue<IkReal> x10681 = IKatan2WithCheck(IkReal(((((-1.0)*x10679))+x10678)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10680.value)))+(x10681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10682=IKsin(j4);
IkReal x10683=IKcos(j4);
IkReal x10684=(gconst4*r21);
IkReal x10685=(gconst5*r10);
IkReal x10686=((1.0)*cj2);
IkReal x10687=(gconst4*r11);
IkReal x10688=(gconst4*r01);
IkReal x10689=((1.0)*x10683);
IkReal x10690=((1.0)*x10682);
IkReal x10691=(gconst5*x10682);
evalcond[0]=((((-1.0)*r22*x10689))+(((-1.0)*x10684*x10690))+((r20*x10691)));
evalcond[1]=((((-1.0)*r12*x10689))+(((-1.0)*x10687*x10690))+((x10682*x10685)));
evalcond[2]=((((-1.0)*gconst5*r00*x10689))+(((-1.0)*r02*x10690))+((x10683*x10688)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10689))+(((-1.0)*x10688*x10690))+((r00*x10691)));
evalcond[4]=((((-1.0)*cj1*x10686))+(((-1.0)*r12*x10690))+((sj1*sj2))+((x10683*x10687))+(((-1.0)*x10685*x10689)));
evalcond[5]=((((-1.0)*gconst5*r20*x10689))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10686))+((x10683*x10684))+(((-1.0)*r22*x10690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10692=((1.0)*gconst4);
CheckValue<IkReal> x10693=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10692))+(((-1.0)*gconst5*r11)))),-1);
if(!x10693.valid){
continue;
}
CheckValue<IkReal> x10694 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10692))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10693.value)))+(x10694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10695=IKsin(j4);
IkReal x10696=IKcos(j4);
IkReal x10697=(gconst4*r21);
IkReal x10698=(gconst5*r10);
IkReal x10699=((1.0)*cj2);
IkReal x10700=(gconst4*r11);
IkReal x10701=(gconst4*r01);
IkReal x10702=((1.0)*x10696);
IkReal x10703=((1.0)*x10695);
IkReal x10704=(gconst5*x10695);
evalcond[0]=((((-1.0)*r22*x10702))+(((-1.0)*x10697*x10703))+((r20*x10704)));
evalcond[1]=((((-1.0)*r12*x10702))+((x10695*x10698))+(((-1.0)*x10700*x10703)));
evalcond[2]=(((x10696*x10701))+(((-1.0)*gconst5*r00*x10702))+(((-1.0)*r02*x10703)));
evalcond[3]=((1.0)+((r00*x10704))+(((-1.0)*r02*x10702))+(((-1.0)*x10701*x10703)));
evalcond[4]=((((-1.0)*r12*x10703))+((sj1*sj2))+((x10696*x10700))+(((-1.0)*cj1*x10699))+(((-1.0)*x10698*x10702)));
evalcond[5]=((((-1.0)*gconst5*r20*x10702))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10703))+(((-1.0)*sj1*x10699))+((x10696*x10697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10705 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10705.valid){
continue;
}
CheckValue<IkReal> x10706=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10705.value)+(((1.5707963267949)*(x10706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10707=IKsin(j4);
IkReal x10708=IKcos(j4);
IkReal x10709=(gconst4*r21);
IkReal x10710=(gconst5*r10);
IkReal x10711=((1.0)*cj2);
IkReal x10712=(gconst4*r11);
IkReal x10713=(gconst4*r01);
IkReal x10714=((1.0)*x10708);
IkReal x10715=((1.0)*x10707);
IkReal x10716=(gconst5*x10707);
evalcond[0]=((((-1.0)*x10709*x10715))+((r20*x10716))+(((-1.0)*r22*x10714)));
evalcond[1]=((((-1.0)*r12*x10714))+(((-1.0)*x10712*x10715))+((x10707*x10710)));
evalcond[2]=(((x10708*x10713))+(((-1.0)*gconst5*r00*x10714))+(((-1.0)*r02*x10715)));
evalcond[3]=((1.0)+(((-1.0)*x10713*x10715))+((r00*x10716))+(((-1.0)*r02*x10714)));
evalcond[4]=((((-1.0)*cj1*x10711))+(((-1.0)*x10710*x10714))+(((-1.0)*r12*x10715))+((sj1*sj2))+((x10708*x10712)));
evalcond[5]=((((-1.0)*gconst5*r20*x10714))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10711))+(((-1.0)*r22*x10715))+((x10708*x10709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10719 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10719.valid){
continue;
}
IkReal x10717=((1.0)*(x10719.value));
IkReal x10718=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10717)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10717)));
IkReal gconst4=((1.0)*r21*x10718);
IkReal gconst5=((-1.0)*r20*x10718);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10722 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10722.valid){
continue;
}
IkReal x10720=((1.0)*(x10722.value));
IkReal x10721=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10720)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10720)));
IkReal gconst4=((1.0)*r21*x10721);
IkReal gconst5=((-1.0)*r20*x10721);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10725 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10725.valid){
continue;
}
IkReal x10723=((1.0)*(x10725.value));
IkReal x10724=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10723)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10723)));
IkReal gconst4=((1.0)*r21*x10724);
IkReal gconst5=((-1.0)*r20*x10724);
IkReal x10726=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10730=IKPowWithIntegerCheck(x10726,-1);
if(!x10730.valid){
continue;
}
IkReal x10727=x10730.value;
IkReal x10728=((1.0)*x10727);
IkReal x10729=((((-1.0)*x10728*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10728*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10727)));
j4eval[0]=x10729;
j4eval[1]=r02;
j4eval[2]=x10726;
j4eval[3]=IKsign(x10729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10731=(gconst5*r00);
IkReal x10732=(gconst4*r01);
CheckValue<IkReal> x10733 = IKatan2WithCheck(IkReal(((((-1.0)*x10732))+x10731)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10733.valid){
continue;
}
CheckValue<IkReal> x10734=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10732*x10732)))+(((-1.0)*(r02*r02)))+(((2.0)*x10731*x10732))+(((-1.0)*(x10731*x10731))))),-1);
if(!x10734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10733.value)+(((1.5707963267949)*(x10734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10735=IKcos(j4);
IkReal x10736=IKsin(j4);
IkReal x10737=((1.0)*cj2);
IkReal x10738=((1.0)*x10735);
IkReal x10739=(gconst5*x10735);
IkReal x10740=(gconst5*x10736);
IkReal x10741=((1.0)*gconst4*x10736);
evalcond[0]=(((r02*x10736))+(((-1.0)*gconst4*r01*x10738))+((r00*x10739)));
evalcond[1]=((((-1.0)*r22*x10738))+(((-1.0)*r21*x10741))+((r20*x10740)));
evalcond[2]=(((r10*x10740))+(((-1.0)*r12*x10738))+(((-1.0)*r11*x10741)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10738))+(((-1.0)*r01*x10741))+((r00*x10740)));
evalcond[4]=(((r10*x10739))+((sj1*sj2))+(((-1.0)*cj1*x10737))+(((-1.0)*gconst4*r11*x10738))+((r12*x10736)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x10738))+((r20*x10739))+(((-1.0)*sj1*x10737))+((r22*x10736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10742=((1.0)*gconst4);
CheckValue<IkReal> x10743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10742))+(((-1.0)*gconst5*r11)))),-1);
if(!x10743.valid){
continue;
}
CheckValue<IkReal> x10744 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10742))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10743.value)))+(x10744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10745=IKcos(j4);
IkReal x10746=IKsin(j4);
IkReal x10747=((1.0)*cj2);
IkReal x10748=((1.0)*x10745);
IkReal x10749=(gconst5*x10745);
IkReal x10750=(gconst5*x10746);
IkReal x10751=((1.0)*gconst4*x10746);
evalcond[0]=(((r02*x10746))+(((-1.0)*gconst4*r01*x10748))+((r00*x10749)));
evalcond[1]=(((r20*x10750))+(((-1.0)*r21*x10751))+(((-1.0)*r22*x10748)));
evalcond[2]=(((r10*x10750))+(((-1.0)*r11*x10751))+(((-1.0)*r12*x10748)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10751))+(((-1.0)*r02*x10748))+((r00*x10750)));
evalcond[4]=(((r10*x10749))+((sj1*sj2))+(((-1.0)*gconst4*r11*x10748))+(((-1.0)*cj1*x10747))+((r12*x10746)));
evalcond[5]=(((r22*x10746))+(((-1.0)*cj1*sj2))+((r20*x10749))+(((-1.0)*gconst4*r21*x10748))+(((-1.0)*sj1*x10747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10752 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10752.valid){
continue;
}
CheckValue<IkReal> x10753=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10752.value)+(((1.5707963267949)*(x10753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10754=IKcos(j4);
IkReal x10755=IKsin(j4);
IkReal x10756=((1.0)*cj2);
IkReal x10757=((1.0)*x10754);
IkReal x10758=(gconst5*x10754);
IkReal x10759=(gconst5*x10755);
IkReal x10760=((1.0)*gconst4*x10755);
evalcond[0]=(((r02*x10755))+(((-1.0)*gconst4*r01*x10757))+((r00*x10758)));
evalcond[1]=((((-1.0)*r21*x10760))+((r20*x10759))+(((-1.0)*r22*x10757)));
evalcond[2]=(((r10*x10759))+(((-1.0)*r11*x10760))+(((-1.0)*r12*x10757)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10760))+(((-1.0)*r02*x10757))+((r00*x10759)));
evalcond[4]=(((r10*x10758))+((sj1*sj2))+(((-1.0)*gconst4*r11*x10757))+(((-1.0)*cj1*x10756))+((r12*x10755)));
evalcond[5]=(((r22*x10755))+(((-1.0)*cj1*sj2))+((r20*x10758))+(((-1.0)*gconst4*r21*x10757))+(((-1.0)*sj1*x10756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10761=gconst4*gconst4;
IkReal x10762=gconst5*gconst5;
IkReal x10763=(cj3*r20);
IkReal x10764=(r00*sj3);
IkReal x10765=(r01*sj3);
IkReal x10766=(gconst4*gconst5);
IkReal x10767=(r21*x10761);
IkReal x10768=((1.0)*r01*x10766);
CheckValue<IkReal> x10769 = IKatan2WithCheck(IkReal((((gconst5*r22*x10765))+((gconst4*r22*x10764)))),IkReal((((r20*x10762*x10765))+((r20*x10764*x10766))+(((-1.0)*x10764*x10767))+(((-1.0)*r21*x10765*x10766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10769.valid){
continue;
}
CheckValue<IkReal> x10770=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10763*x10768))+((r00*x10762*x10763))+(((-1.0)*cj3*r00*r21*x10766))+((cj3*r02*r22))+((cj3*r01*x10767)))),-1);
if(!x10770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10769.value)+(((1.5707963267949)*(x10770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10771=IKsin(j4);
IkReal x10772=IKcos(j4);
IkReal x10773=(sj1*sj2);
IkReal x10774=(gconst5*sj3);
IkReal x10775=((1.0)*r21);
IkReal x10776=(cj3*gconst5);
IkReal x10777=((1.0)*cj1);
IkReal x10778=(gconst4*r11);
IkReal x10779=(cj2*sj1);
IkReal x10780=(cj3*gconst4);
IkReal x10781=(gconst4*sj3);
IkReal x10782=(cj2*x10777);
IkReal x10783=((1.0)*x10772);
IkReal x10784=((1.0)*x10771);
IkReal x10785=(gconst5*x10771);
IkReal x10786=(x10772*x10781);
evalcond[0]=((((-1.0)*gconst4*x10771*x10775))+((r20*x10785))+(((-1.0)*r22*x10783)));
evalcond[1]=((((-1.0)*x10778*x10784))+(((-1.0)*r12*x10783))+((r10*x10785)));
evalcond[2]=((1.0)+(((-1.0)*gconst4*r01*x10784))+((r00*x10785))+(((-1.0)*r02*x10783)));
evalcond[3]=((((-1.0)*r00*x10776*x10783))+(((-1.0)*cj3*r02*x10784))+((r01*x10772*x10780))+((r01*x10774))+((r00*x10781)));
evalcond[4]=((((-1.0)*r01*x10776))+(((-1.0)*r00*x10780))+(((-1.0)*r02*sj3*x10784))+(((-1.0)*r00*x10774*x10783))+((r01*x10786)));
evalcond[5]=(((r11*x10774))+(((-1.0)*r10*x10776*x10783))+(((-1.0)*cj3*r12*x10784))+(((-1.0)*x10782))+((cj3*x10772*x10778))+x10773+((r10*x10781)));
evalcond[6]=((((-1.0)*sj2*x10777))+(((-1.0)*x10779))+((r21*x10772*x10780))+((r20*x10781))+(((-1.0)*cj3*r22*x10784))+((r21*x10774))+(((-1.0)*r20*x10776*x10783)));
evalcond[7]=(((sj3*x10772*x10778))+(((-1.0)*r10*x10774*x10783))+((cj1*sj2))+(((-1.0)*r12*sj3*x10784))+(((-1.0)*r11*x10776))+x10779+(((-1.0)*r10*x10780)));
evalcond[8]=(((r21*x10786))+(((-1.0)*r22*sj3*x10784))+(((-1.0)*r20*x10774*x10783))+(((-1.0)*x10775*x10776))+(((-1.0)*x10782))+x10773+(((-1.0)*r20*x10780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10787=((1.0)*gconst4);
CheckValue<IkReal> x10788 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10787))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10788.valid){
continue;
}
CheckValue<IkReal> x10789=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10787))+(((-1.0)*gconst5*r11)))),-1);
if(!x10789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10788.value)+(((1.5707963267949)*(x10789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10790=IKsin(j4);
IkReal x10791=IKcos(j4);
IkReal x10792=(sj1*sj2);
IkReal x10793=(gconst5*sj3);
IkReal x10794=((1.0)*r21);
IkReal x10795=(cj3*gconst5);
IkReal x10796=((1.0)*cj1);
IkReal x10797=(gconst4*r11);
IkReal x10798=(cj2*sj1);
IkReal x10799=(cj3*gconst4);
IkReal x10800=(gconst4*sj3);
IkReal x10801=(cj2*x10796);
IkReal x10802=((1.0)*x10791);
IkReal x10803=((1.0)*x10790);
IkReal x10804=(gconst5*x10790);
IkReal x10805=(x10791*x10800);
evalcond[0]=(((r20*x10804))+(((-1.0)*r22*x10802))+(((-1.0)*gconst4*x10790*x10794)));
evalcond[1]=(((r10*x10804))+(((-1.0)*x10797*x10803))+(((-1.0)*r12*x10802)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10802))+((r00*x10804))+(((-1.0)*gconst4*r01*x10803)));
evalcond[3]=((((-1.0)*cj3*r02*x10803))+((r01*x10791*x10799))+(((-1.0)*r00*x10795*x10802))+((r00*x10800))+((r01*x10793)));
evalcond[4]=((((-1.0)*r01*x10795))+(((-1.0)*r02*sj3*x10803))+(((-1.0)*r00*x10793*x10802))+(((-1.0)*r00*x10799))+((r01*x10805)));
evalcond[5]=(((r10*x10800))+(((-1.0)*cj3*r12*x10803))+(((-1.0)*x10801))+(((-1.0)*r10*x10795*x10802))+((cj3*x10791*x10797))+x10792+((r11*x10793)));
evalcond[6]=(((r20*x10800))+(((-1.0)*r20*x10795*x10802))+((r21*x10793))+((r21*x10791*x10799))+(((-1.0)*x10798))+(((-1.0)*sj2*x10796))+(((-1.0)*cj3*r22*x10803)));
evalcond[7]=((((-1.0)*r10*x10799))+((cj1*sj2))+((sj3*x10791*x10797))+(((-1.0)*r11*x10795))+(((-1.0)*r12*sj3*x10803))+(((-1.0)*r10*x10793*x10802))+x10798);
evalcond[8]=((((-1.0)*x10801))+((r21*x10805))+(((-1.0)*r20*x10793*x10802))+(((-1.0)*r20*x10799))+x10792+(((-1.0)*r22*sj3*x10803))+(((-1.0)*x10794*x10795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10806 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10806.valid){
continue;
}
CheckValue<IkReal> x10807=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10806.value)+(((1.5707963267949)*(x10807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10808=IKsin(j4);
IkReal x10809=IKcos(j4);
IkReal x10810=(sj1*sj2);
IkReal x10811=(gconst5*sj3);
IkReal x10812=((1.0)*r21);
IkReal x10813=(cj3*gconst5);
IkReal x10814=((1.0)*cj1);
IkReal x10815=(gconst4*r11);
IkReal x10816=(cj2*sj1);
IkReal x10817=(cj3*gconst4);
IkReal x10818=(gconst4*sj3);
IkReal x10819=(cj2*x10814);
IkReal x10820=((1.0)*x10809);
IkReal x10821=((1.0)*x10808);
IkReal x10822=(gconst5*x10808);
IkReal x10823=(x10809*x10818);
evalcond[0]=(((r20*x10822))+(((-1.0)*r22*x10820))+(((-1.0)*gconst4*x10808*x10812)));
evalcond[1]=((((-1.0)*x10815*x10821))+(((-1.0)*r12*x10820))+((r10*x10822)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10820))+(((-1.0)*gconst4*r01*x10821))+((r00*x10822)));
evalcond[3]=((((-1.0)*r00*x10813*x10820))+((r01*x10809*x10817))+(((-1.0)*cj3*r02*x10821))+((r01*x10811))+((r00*x10818)));
evalcond[4]=((((-1.0)*r00*x10811*x10820))+(((-1.0)*r01*x10813))+(((-1.0)*r00*x10817))+(((-1.0)*r02*sj3*x10821))+((r01*x10823)));
evalcond[5]=((((-1.0)*r10*x10813*x10820))+(((-1.0)*cj3*r12*x10821))+((r10*x10818))+(((-1.0)*x10819))+((cj3*x10809*x10815))+((r11*x10811))+x10810);
evalcond[6]=((((-1.0)*x10816))+((r21*x10809*x10817))+((r20*x10818))+(((-1.0)*cj3*r22*x10821))+(((-1.0)*sj2*x10814))+(((-1.0)*r20*x10813*x10820))+((r21*x10811)));
evalcond[7]=(((cj1*sj2))+(((-1.0)*r10*x10811*x10820))+(((-1.0)*r10*x10817))+(((-1.0)*r12*sj3*x10821))+(((-1.0)*r11*x10813))+((sj3*x10809*x10815))+x10816);
evalcond[8]=(((r21*x10823))+(((-1.0)*x10812*x10813))+(((-1.0)*r20*x10811*x10820))+(((-1.0)*r20*x10817))+(((-1.0)*r22*sj3*x10821))+(((-1.0)*x10819))+x10810);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
IkReal x10824=((1.0)*(x10826.value));
IkReal x10825=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10824)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10824)));
IkReal gconst4=((1.0)*r21*x10825);
IkReal gconst5=((-1.0)*r20*x10825);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10829 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10829.valid){
continue;
}
IkReal x10827=((1.0)*(x10829.value));
IkReal x10828=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10827)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10827)));
IkReal gconst4=((1.0)*r21*x10828);
IkReal gconst5=((-1.0)*r20*x10828);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10832 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10832.valid){
continue;
}
IkReal x10830=((1.0)*(x10832.value));
IkReal x10831=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10830)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10830)));
IkReal gconst4=((1.0)*r21*x10831);
IkReal gconst5=((-1.0)*r20*x10831);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10835 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10835.valid){
continue;
}
IkReal x10833=((1.0)*(x10835.value));
IkReal x10834=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10833)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10833)));
IkReal gconst4=((1.0)*r21*x10834);
IkReal gconst5=((-1.0)*r20*x10834);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10838 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10838.valid){
continue;
}
IkReal x10836=((1.0)*(x10838.value));
IkReal x10837=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10836)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10836)));
IkReal gconst4=((1.0)*r21*x10837);
IkReal gconst5=((-1.0)*r20*x10837);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10841 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10841.valid){
continue;
}
IkReal x10839=((1.0)*(x10841.value));
IkReal x10840=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10839)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10839)));
IkReal gconst4=((1.0)*r21*x10840);
IkReal gconst5=((-1.0)*r20*x10840);
IkReal x10842=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10846=IKPowWithIntegerCheck(x10842,-1);
if(!x10846.valid){
continue;
}
IkReal x10843=x10846.value;
IkReal x10844=((1.0)*x10843);
IkReal x10845=((((-1.0)*x10844*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10843))+(((-1.0)*x10844*(r00*r00)*(r20*r20))));
j4eval[0]=x10845;
j4eval[1]=r02;
j4eval[2]=x10842;
j4eval[3]=IKsign(x10845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10847=(gconst4*r01);
IkReal x10848=(gconst5*r00);
CheckValue<IkReal> x10849 = IKatan2WithCheck(IkReal(((((-1.0)*x10848))+x10847)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10849.valid){
continue;
}
CheckValue<IkReal> x10850=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10848*x10848)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10847*x10847)))+(((2.0)*x10847*x10848)))),-1);
if(!x10850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10849.value)+(((1.5707963267949)*(x10850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10851=IKsin(j4);
IkReal x10852=IKcos(j4);
IkReal x10853=(gconst4*r21);
IkReal x10854=(gconst5*r10);
IkReal x10855=((1.0)*cj2);
IkReal x10856=(gconst4*r11);
IkReal x10857=(gconst4*r01);
IkReal x10858=((1.0)*x10852);
IkReal x10859=((1.0)*x10851);
IkReal x10860=(gconst5*x10851);
evalcond[0]=(((r20*x10860))+(((-1.0)*x10853*x10859))+(((-1.0)*r22*x10858)));
evalcond[1]=((((-1.0)*r12*x10858))+(((-1.0)*x10856*x10859))+((x10851*x10854)));
evalcond[2]=((((-1.0)*gconst5*r00*x10858))+(((-1.0)*r02*x10859))+((x10852*x10857)));
evalcond[3]=((-1.0)+(((-1.0)*x10857*x10859))+((r00*x10860))+(((-1.0)*r02*x10858)));
evalcond[4]=((((-1.0)*gconst5*r20*x10858))+((sj1*sj2))+((x10852*x10853))+(((-1.0)*r22*x10859))+(((-1.0)*cj1*x10855)));
evalcond[5]=((((-1.0)*r12*x10859))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10855))+(((-1.0)*x10854*x10858))+((x10852*x10856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10861=((1.0)*gconst4);
CheckValue<IkReal> x10862 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10861))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10862.valid){
continue;
}
CheckValue<IkReal> x10863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10861))+(((-1.0)*gconst5*r21)))),-1);
if(!x10863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10862.value)+(((1.5707963267949)*(x10863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10864=IKsin(j4);
IkReal x10865=IKcos(j4);
IkReal x10866=(gconst4*r21);
IkReal x10867=(gconst5*r10);
IkReal x10868=((1.0)*cj2);
IkReal x10869=(gconst4*r11);
IkReal x10870=(gconst4*r01);
IkReal x10871=((1.0)*x10865);
IkReal x10872=((1.0)*x10864);
IkReal x10873=(gconst5*x10864);
evalcond[0]=((((-1.0)*r22*x10871))+(((-1.0)*x10866*x10872))+((r20*x10873)));
evalcond[1]=((((-1.0)*r12*x10871))+((x10864*x10867))+(((-1.0)*x10869*x10872)));
evalcond[2]=((((-1.0)*gconst5*r00*x10871))+(((-1.0)*r02*x10872))+((x10865*x10870)));
evalcond[3]=((-1.0)+(((-1.0)*x10870*x10872))+(((-1.0)*r02*x10871))+((r00*x10873)));
evalcond[4]=(((x10865*x10866))+(((-1.0)*r22*x10872))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10871))+(((-1.0)*cj1*x10868)));
evalcond[5]=(((x10865*x10869))+(((-1.0)*r12*x10872))+(((-1.0)*cj1*sj2))+(((-1.0)*x10867*x10871))+(((-1.0)*sj1*x10868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10874=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10874.valid){
continue;
}
CheckValue<IkReal> x10875 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10874.value)))+(x10875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10876=IKsin(j4);
IkReal x10877=IKcos(j4);
IkReal x10878=(gconst4*r21);
IkReal x10879=(gconst5*r10);
IkReal x10880=((1.0)*cj2);
IkReal x10881=(gconst4*r11);
IkReal x10882=(gconst4*r01);
IkReal x10883=((1.0)*x10877);
IkReal x10884=((1.0)*x10876);
IkReal x10885=(gconst5*x10876);
evalcond[0]=((((-1.0)*x10878*x10884))+(((-1.0)*r22*x10883))+((r20*x10885)));
evalcond[1]=(((x10876*x10879))+(((-1.0)*x10881*x10884))+(((-1.0)*r12*x10883)));
evalcond[2]=((((-1.0)*r02*x10884))+((x10877*x10882))+(((-1.0)*gconst5*r00*x10883)));
evalcond[3]=((-1.0)+((r00*x10885))+(((-1.0)*r02*x10883))+(((-1.0)*x10882*x10884)));
evalcond[4]=(((x10877*x10878))+(((-1.0)*gconst5*r20*x10883))+(((-1.0)*cj1*x10880))+((sj1*sj2))+(((-1.0)*r22*x10884)));
evalcond[5]=((((-1.0)*sj1*x10880))+(((-1.0)*cj1*sj2))+(((-1.0)*x10879*x10883))+((x10877*x10881))+(((-1.0)*r12*x10884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10888 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10888.valid){
continue;
}
IkReal x10886=((1.0)*(x10888.value));
IkReal x10887=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10886)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10886)));
IkReal gconst4=((1.0)*r21*x10887);
IkReal gconst5=((-1.0)*r20*x10887);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10891 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10891.valid){
continue;
}
IkReal x10889=((1.0)*(x10891.value));
IkReal x10890=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10889)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10889)));
IkReal gconst4=((1.0)*r21*x10890);
IkReal gconst5=((-1.0)*r20*x10890);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10894 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10894.valid){
continue;
}
IkReal x10892=((1.0)*(x10894.value));
IkReal x10893=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10892)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10892)));
IkReal gconst4=((1.0)*r21*x10893);
IkReal gconst5=((-1.0)*r20*x10893);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10895=(gconst5*r00);
IkReal x10896=(gconst4*r01);
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(IKsign(((x10896*x10896)+(((-2.0)*x10895*x10896))+(r02*r02)+(x10895*x10895))),-1);
if(!x10897.valid){
continue;
}
CheckValue<IkReal> x10898 = IKatan2WithCheck(IkReal(((((-1.0)*x10896))+x10895)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10897.value)))+(x10898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10899=IKcos(j4);
IkReal x10900=IKsin(j4);
IkReal x10901=((1.0)*cj2);
IkReal x10902=((1.0)*x10899);
IkReal x10903=(gconst5*x10899);
IkReal x10904=(gconst5*x10900);
IkReal x10905=((1.0)*gconst4*x10900);
evalcond[0]=(((r00*x10903))+(((-1.0)*gconst4*r01*x10902))+((r02*x10900)));
evalcond[1]=((((-1.0)*r21*x10905))+(((-1.0)*r22*x10902))+((r20*x10904)));
evalcond[2]=((((-1.0)*r11*x10905))+(((-1.0)*r12*x10902))+((r10*x10904)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10905))+((r00*x10904))+(((-1.0)*r02*x10902)));
evalcond[4]=(((r22*x10900))+(((-1.0)*cj1*x10901))+(((-1.0)*gconst4*r21*x10902))+((sj1*sj2))+((r20*x10903)));
evalcond[5]=(((r12*x10900))+(((-1.0)*gconst4*r11*x10902))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10901))+((r10*x10903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10906=((1.0)*gconst4);
CheckValue<IkReal> x10907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10906))+(((-1.0)*gconst5*r21)))),-1);
if(!x10907.valid){
continue;
}
CheckValue<IkReal> x10908 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10907.value)))+(x10908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10909=IKcos(j4);
IkReal x10910=IKsin(j4);
IkReal x10911=((1.0)*cj2);
IkReal x10912=((1.0)*x10909);
IkReal x10913=(gconst5*x10909);
IkReal x10914=(gconst5*x10910);
IkReal x10915=((1.0)*gconst4*x10910);
evalcond[0]=(((r02*x10910))+((r00*x10913))+(((-1.0)*gconst4*r01*x10912)));
evalcond[1]=((((-1.0)*r22*x10912))+(((-1.0)*r21*x10915))+((r20*x10914)));
evalcond[2]=((((-1.0)*r12*x10912))+(((-1.0)*r11*x10915))+((r10*x10914)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10912))+((r00*x10914))+(((-1.0)*r01*x10915)));
evalcond[4]=((((-1.0)*cj1*x10911))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10912))+((r22*x10910))+((r20*x10913)));
evalcond[5]=((((-1.0)*sj1*x10911))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r11*x10912))+((r12*x10910))+((r10*x10913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10916=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10916.valid){
continue;
}
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10916.value)))+(x10917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10918=IKcos(j4);
IkReal x10919=IKsin(j4);
IkReal x10920=((1.0)*cj2);
IkReal x10921=((1.0)*x10918);
IkReal x10922=(gconst5*x10918);
IkReal x10923=(gconst5*x10919);
IkReal x10924=((1.0)*gconst4*x10919);
evalcond[0]=((((-1.0)*gconst4*r01*x10921))+((r02*x10919))+((r00*x10922)));
evalcond[1]=((((-1.0)*r22*x10921))+(((-1.0)*r21*x10924))+((r20*x10923)));
evalcond[2]=(((r10*x10923))+(((-1.0)*r11*x10924))+(((-1.0)*r12*x10921)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10921))+((r00*x10923))+(((-1.0)*r01*x10924)));
evalcond[4]=((((-1.0)*cj1*x10920))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10921))+((r22*x10919))+((r20*x10922)));
evalcond[5]=(((r10*x10922))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r11*x10921))+((r12*x10919))+(((-1.0)*sj1*x10920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10927 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10927.valid){
continue;
}
IkReal x10925=((1.0)*(x10927.value));
IkReal x10926=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10925)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10925)));
IkReal gconst4=((1.0)*r21*x10926);
IkReal gconst5=((-1.0)*r20*x10926);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10930 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10930.valid){
continue;
}
IkReal x10928=((1.0)*(x10930.value));
IkReal x10929=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10928)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10928)));
IkReal gconst4=((1.0)*r21*x10929);
IkReal gconst5=((-1.0)*r20*x10929);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10933 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10933.valid){
continue;
}
IkReal x10931=((1.0)*(x10933.value));
IkReal x10932=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10931)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10931)));
IkReal gconst4=((1.0)*r21*x10932);
IkReal gconst5=((-1.0)*r20*x10932);
IkReal x10934=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10938=IKPowWithIntegerCheck(x10934,-1);
if(!x10938.valid){
continue;
}
IkReal x10935=x10938.value;
IkReal x10936=((1.0)*x10935);
IkReal x10937=((((-1.0)*x10936*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10936*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10935)));
j4eval[0]=x10937;
j4eval[1]=r02;
j4eval[2]=x10934;
j4eval[3]=IKsign(x10937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10939=(gconst4*r01);
IkReal x10940=(gconst5*r00);
CheckValue<IkReal> x10941=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10939*x10939)))+(((-1.0)*(r02*r02)))+(((2.0)*x10939*x10940))+(((-1.0)*(x10940*x10940))))),-1);
if(!x10941.valid){
continue;
}
CheckValue<IkReal> x10942 = IKatan2WithCheck(IkReal(((((-1.0)*x10940))+x10939)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10941.value)))+(x10942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10943=IKsin(j4);
IkReal x10944=IKcos(j4);
IkReal x10945=(gconst4*r21);
IkReal x10946=(gconst5*r10);
IkReal x10947=((1.0)*sj1);
IkReal x10948=(gconst4*r11);
IkReal x10949=(gconst4*r01);
IkReal x10950=((1.0)*x10944);
IkReal x10951=((1.0)*x10943);
IkReal x10952=(gconst5*x10943);
evalcond[0]=((((-1.0)*x10945*x10951))+(((-1.0)*r22*x10950))+((r20*x10952)));
evalcond[1]=((((-1.0)*x10948*x10951))+((x10943*x10946))+(((-1.0)*r12*x10950)));
evalcond[2]=((((-1.0)*gconst5*r00*x10950))+((x10944*x10949))+(((-1.0)*r02*x10951)));
evalcond[3]=((-1.0)+((r00*x10952))+(((-1.0)*x10949*x10951))+(((-1.0)*r02*x10950)));
evalcond[4]=((((-1.0)*x10946*x10950))+(((-1.0)*sj2*x10947))+((x10944*x10948))+((cj1*cj2))+(((-1.0)*r12*x10951)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x10951))+((x10944*x10945))+(((-1.0)*gconst5*r20*x10950))+(((-1.0)*cj2*x10947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10953=((1.0)*gconst4);
CheckValue<IkReal> x10954 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10954.valid){
continue;
}
CheckValue<IkReal> x10955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10953))+(((-1.0)*gconst5*r21)))),-1);
if(!x10955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10954.value)+(((1.5707963267949)*(x10955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10956=IKsin(j4);
IkReal x10957=IKcos(j4);
IkReal x10958=(gconst4*r21);
IkReal x10959=(gconst5*r10);
IkReal x10960=((1.0)*sj1);
IkReal x10961=(gconst4*r11);
IkReal x10962=(gconst4*r01);
IkReal x10963=((1.0)*x10957);
IkReal x10964=((1.0)*x10956);
IkReal x10965=(gconst5*x10956);
evalcond[0]=((((-1.0)*r22*x10963))+((r20*x10965))+(((-1.0)*x10958*x10964)));
evalcond[1]=((((-1.0)*x10961*x10964))+((x10956*x10959))+(((-1.0)*r12*x10963)));
evalcond[2]=(((x10957*x10962))+(((-1.0)*gconst5*r00*x10963))+(((-1.0)*r02*x10964)));
evalcond[3]=((-1.0)+((r00*x10965))+(((-1.0)*x10962*x10964))+(((-1.0)*r02*x10963)));
evalcond[4]=(((x10957*x10961))+(((-1.0)*x10959*x10963))+((cj1*cj2))+(((-1.0)*sj2*x10960))+(((-1.0)*r12*x10964)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x10964))+(((-1.0)*gconst5*r20*x10963))+((x10957*x10958))+(((-1.0)*cj2*x10960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10966=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10966.valid){
continue;
}
CheckValue<IkReal> x10967 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10966.value)))+(x10967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10968=IKsin(j4);
IkReal x10969=IKcos(j4);
IkReal x10970=(gconst4*r21);
IkReal x10971=(gconst5*r10);
IkReal x10972=((1.0)*sj1);
IkReal x10973=(gconst4*r11);
IkReal x10974=(gconst4*r01);
IkReal x10975=((1.0)*x10969);
IkReal x10976=((1.0)*x10968);
IkReal x10977=(gconst5*x10968);
evalcond[0]=((((-1.0)*x10970*x10976))+(((-1.0)*r22*x10975))+((r20*x10977)));
evalcond[1]=((((-1.0)*x10973*x10976))+((x10968*x10971))+(((-1.0)*r12*x10975)));
evalcond[2]=((((-1.0)*gconst5*r00*x10975))+((x10969*x10974))+(((-1.0)*r02*x10976)));
evalcond[3]=((-1.0)+((r00*x10977))+(((-1.0)*r02*x10975))+(((-1.0)*x10974*x10976)));
evalcond[4]=((((-1.0)*x10971*x10975))+((x10969*x10973))+((cj1*cj2))+(((-1.0)*sj2*x10972))+(((-1.0)*r12*x10976)));
evalcond[5]=((((-1.0)*cj2*x10972))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10976))+((x10969*x10970))+(((-1.0)*gconst5*r20*x10975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10980 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10980.valid){
continue;
}
IkReal x10978=((1.0)*(x10980.value));
IkReal x10979=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10978)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10978)));
IkReal gconst4=((1.0)*r21*x10979);
IkReal gconst5=((-1.0)*r20*x10979);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10983 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10983.valid){
continue;
}
IkReal x10981=((1.0)*(x10983.value));
IkReal x10982=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10981)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10981)));
IkReal gconst4=((1.0)*r21*x10982);
IkReal gconst5=((-1.0)*r20*x10982);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10986 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10986.valid){
continue;
}
IkReal x10984=((1.0)*(x10986.value));
IkReal x10985=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10984)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10984)));
IkReal gconst4=((1.0)*r21*x10985);
IkReal gconst5=((-1.0)*r20*x10985);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10987=(gconst5*r00);
IkReal x10988=(gconst4*r01);
CheckValue<IkReal> x10989=IKPowWithIntegerCheck(IKsign(((x10988*x10988)+(((-2.0)*x10987*x10988))+(r02*r02)+(x10987*x10987))),-1);
if(!x10989.valid){
continue;
}
CheckValue<IkReal> x10990 = IKatan2WithCheck(IkReal(((((-1.0)*x10988))+x10987)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10989.value)))+(x10990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10991=IKcos(j4);
IkReal x10992=IKsin(j4);
IkReal x10993=((1.0)*sj1);
IkReal x10994=((1.0)*x10991);
IkReal x10995=(gconst5*x10991);
IkReal x10996=(gconst5*x10992);
IkReal x10997=((1.0)*gconst4*x10992);
evalcond[0]=(((r00*x10995))+((r02*x10992))+(((-1.0)*gconst4*r01*x10994)));
evalcond[1]=((((-1.0)*r22*x10994))+(((-1.0)*r21*x10997))+((r20*x10996)));
evalcond[2]=((((-1.0)*r11*x10997))+(((-1.0)*r12*x10994))+((r10*x10996)));
evalcond[3]=((-1.0)+((r00*x10996))+(((-1.0)*r01*x10997))+(((-1.0)*r02*x10994)));
evalcond[4]=(((r12*x10992))+(((-1.0)*sj2*x10993))+(((-1.0)*gconst4*r11*x10994))+((r10*x10995))+((cj1*cj2)));
evalcond[5]=(((r22*x10992))+(((-1.0)*cj2*x10993))+(((-1.0)*gconst4*r21*x10994))+(((-1.0)*cj1*sj2))+((r20*x10995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10998=((1.0)*gconst4);
CheckValue<IkReal> x10999 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10999.valid){
continue;
}
CheckValue<IkReal> x11000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10998))+(((-1.0)*gconst5*r21)))),-1);
if(!x11000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10999.value)+(((1.5707963267949)*(x11000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11001=IKcos(j4);
IkReal x11002=IKsin(j4);
IkReal x11003=((1.0)*sj1);
IkReal x11004=((1.0)*x11001);
IkReal x11005=(gconst5*x11001);
IkReal x11006=(gconst5*x11002);
IkReal x11007=((1.0)*gconst4*x11002);
evalcond[0]=(((r02*x11002))+(((-1.0)*gconst4*r01*x11004))+((r00*x11005)));
evalcond[1]=((((-1.0)*r22*x11004))+((r20*x11006))+(((-1.0)*r21*x11007)));
evalcond[2]=(((r10*x11006))+(((-1.0)*r11*x11007))+(((-1.0)*r12*x11004)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11004))+((r00*x11006))+(((-1.0)*r01*x11007)));
evalcond[4]=((((-1.0)*gconst4*r11*x11004))+((r10*x11005))+((r12*x11002))+(((-1.0)*sj2*x11003))+((cj1*cj2)));
evalcond[5]=(((r20*x11005))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x11004))+((r22*x11002))+(((-1.0)*cj2*x11003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11008=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11008.valid){
continue;
}
CheckValue<IkReal> x11009 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11008.value)))+(x11009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11010=IKcos(j4);
IkReal x11011=IKsin(j4);
IkReal x11012=((1.0)*sj1);
IkReal x11013=((1.0)*x11010);
IkReal x11014=(gconst5*x11010);
IkReal x11015=(gconst5*x11011);
IkReal x11016=((1.0)*gconst4*x11011);
evalcond[0]=((((-1.0)*gconst4*r01*x11013))+((r00*x11014))+((r02*x11011)));
evalcond[1]=((((-1.0)*r22*x11013))+((r20*x11015))+(((-1.0)*r21*x11016)));
evalcond[2]=(((r10*x11015))+(((-1.0)*r12*x11013))+(((-1.0)*r11*x11016)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x11016))+(((-1.0)*r02*x11013))+((r00*x11015)));
evalcond[4]=((((-1.0)*gconst4*r11*x11013))+((r10*x11014))+(((-1.0)*sj2*x11012))+((cj1*cj2))+((r12*x11011)));
evalcond[5]=(((r20*x11014))+(((-1.0)*cj1*sj2))+((r22*x11011))+(((-1.0)*gconst4*r21*x11013))+(((-1.0)*cj2*x11012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11019 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11019.valid){
continue;
}
IkReal x11017=((1.0)*(x11019.value));
IkReal x11018=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11017)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11018);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11017)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11018;
IkReal x11020=((1.0)*r01*r21);
IkReal x11021=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11020))+(((-1.0)*x11021)));
j4eval[1]=(((sj3*x11020))+((sj3*x11021)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11024 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11024.valid){
continue;
}
IkReal x11022=((1.0)*(x11024.value));
IkReal x11023=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11022)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11023);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11022)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11023;
IkReal x11025=((1.0)*r01*r21);
IkReal x11026=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11025))+(((-1.0)*x11026)));
j4eval[1]=(((cj3*x11025))+((cj3*x11026)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11029 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11029.valid){
continue;
}
IkReal x11027=((1.0)*(x11029.value));
IkReal x11028=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11027)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11028);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11027)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11028;
IkReal x11030=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r01*r21*x11030))+((r00*r20*x11030)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11031=((1.0)*gconst5);
CheckValue<IkReal> x11032=IKPowWithIntegerCheck(cj3,-1);
if(!x11032.valid){
continue;
}
CheckValue<IkReal> x11033=IKPowWithIntegerCheck(r12,-1);
if(!x11033.valid){
continue;
}
CheckValue<IkReal> x11034=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x11031))),-1);
if(!x11034.valid){
continue;
}
if( IKabs(((x11032.value)*(x11033.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11034.value)*(((((-1.0)*r01*sj3*x11031))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11032.value)*(x11033.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x11034.value)*(((((-1.0)*r01*sj3*x11031))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11032.value)*(x11033.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x11034.value)*(((((-1.0)*r01*sj3*x11031))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11035=IKsin(j4);
IkReal x11036=IKcos(j4);
IkReal x11037=((1.0)*sj3);
IkReal x11038=((1.0)*r21);
IkReal x11039=(cj3*gconst5);
IkReal x11040=(gconst5*r20);
IkReal x11041=(sj1*sj2);
IkReal x11042=((1.0)*cj2);
IkReal x11043=(gconst5*r00);
IkReal x11044=(gconst5*sj3);
IkReal x11045=(gconst4*r00);
IkReal x11046=((1.0)*cj3);
IkReal x11047=((1.0)*r01);
IkReal x11048=(gconst4*r20);
IkReal x11049=((1.0)*cj1*sj2);
IkReal x11050=(sj1*x11042);
IkReal x11051=(r12*x11035);
IkReal x11052=(gconst4*x11035);
IkReal x11053=((1.0)*x11036);
IkReal x11054=(gconst4*sj3*x11036);
IkReal x11055=(cj3*gconst4*x11036);
IkReal x11056=(x11049+x11050);
evalcond[0]=((-1.0)*r12*x11036);
evalcond[1]=(((x11035*x11040))+(((-1.0)*x11038*x11052)));
evalcond[2]=((-1.0)+((x11035*x11043))+(((-1.0)*x11047*x11052)));
evalcond[3]=((((-1.0)*x11046*x11051))+(((-1.0)*x11041))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x11037*x11051))+(((-1.0)*x11056)));
evalcond[5]=((((-1.0)*r00*x11039*x11053))+((r01*x11044))+((r01*x11055))+((sj3*x11045)));
evalcond[6]=((((-1.0)*x11045*x11046))+((r01*x11054))+(((-1.0)*x11036*x11037*x11043))+(((-1.0)*x11039*x11047)));
evalcond[7]=((((-1.0)*r20*x11039*x11053))+((sj3*x11048))+((r21*x11044))+((r21*x11055))+(((-1.0)*x11056)));
evalcond[8]=((((-1.0)*x11046*x11048))+x11041+(((-1.0)*x11036*x11037*x11040))+(((-1.0)*cj1*x11042))+(((-1.0)*x11038*x11039))+((r21*x11054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11057=((1.0)*gconst5);
IkReal x11058=(gconst4*r01);
CheckValue<IkReal> x11059=IKPowWithIntegerCheck((((gconst5*r00))+(((-1.0)*x11058))),-1);
if(!x11059.valid){
continue;
}
CheckValue<IkReal> x11060=IKPowWithIntegerCheck((((cj3*x11058))+(((-1.0)*cj3*r00*x11057))),-1);
if(!x11060.valid){
continue;
}
if( IKabs(x11059.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11060.value)*(((((-1.0)*r01*sj3*x11057))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11059.value)+IKsqr(((x11060.value)*(((((-1.0)*r01*sj3*x11057))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11059.value, ((x11060.value)*(((((-1.0)*r01*sj3*x11057))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11061=IKsin(j4);
IkReal x11062=IKcos(j4);
IkReal x11063=((1.0)*sj3);
IkReal x11064=((1.0)*r21);
IkReal x11065=(cj3*gconst5);
IkReal x11066=(gconst5*r20);
IkReal x11067=(sj1*sj2);
IkReal x11068=((1.0)*cj2);
IkReal x11069=(gconst5*r00);
IkReal x11070=(gconst5*sj3);
IkReal x11071=(gconst4*r00);
IkReal x11072=((1.0)*cj3);
IkReal x11073=((1.0)*r01);
IkReal x11074=(gconst4*r20);
IkReal x11075=((1.0)*cj1*sj2);
IkReal x11076=(sj1*x11068);
IkReal x11077=(r12*x11061);
IkReal x11078=(gconst4*x11061);
IkReal x11079=((1.0)*x11062);
IkReal x11080=(gconst4*sj3*x11062);
IkReal x11081=(cj3*gconst4*x11062);
IkReal x11082=(x11075+x11076);
evalcond[0]=((-1.0)*r12*x11062);
evalcond[1]=((((-1.0)*x11064*x11078))+((x11061*x11066)));
evalcond[2]=((-1.0)+(((-1.0)*x11073*x11078))+((x11061*x11069)));
evalcond[3]=((((-1.0)*x11072*x11077))+((cj1*cj2))+(((-1.0)*x11067)));
evalcond[4]=((((-1.0)*x11063*x11077))+(((-1.0)*x11082)));
evalcond[5]=(((sj3*x11071))+((r01*x11081))+(((-1.0)*r00*x11065*x11079))+((r01*x11070)));
evalcond[6]=((((-1.0)*x11065*x11073))+((r01*x11080))+(((-1.0)*x11071*x11072))+(((-1.0)*x11062*x11063*x11069)));
evalcond[7]=(((sj3*x11074))+((r21*x11070))+((r21*x11081))+(((-1.0)*r20*x11065*x11079))+(((-1.0)*x11082)));
evalcond[8]=((((-1.0)*cj1*x11068))+(((-1.0)*x11072*x11074))+((r21*x11080))+x11067+(((-1.0)*x11062*x11063*x11066))+(((-1.0)*x11064*x11065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11083=(gconst5*r00);
IkReal x11084=(gconst4*r01);
CheckValue<IkReal> x11085=IKPowWithIntegerCheck(((((-1.0)*x11084))+x11083),-1);
if(!x11085.valid){
continue;
}
CheckValue<IkReal> x11086=IKPowWithIntegerCheck((((sj3*x11084))+(((-1.0)*sj3*x11083))),-1);
if(!x11086.valid){
continue;
}
if( IKabs(x11085.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11086.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11085.value)+IKsqr(((x11086.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11085.value, ((x11086.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11087=IKsin(j4);
IkReal x11088=IKcos(j4);
IkReal x11089=((1.0)*sj3);
IkReal x11090=((1.0)*r21);
IkReal x11091=(cj3*gconst5);
IkReal x11092=(gconst5*r20);
IkReal x11093=(sj1*sj2);
IkReal x11094=((1.0)*cj2);
IkReal x11095=(gconst5*r00);
IkReal x11096=(gconst5*sj3);
IkReal x11097=(gconst4*r00);
IkReal x11098=((1.0)*cj3);
IkReal x11099=((1.0)*r01);
IkReal x11100=(gconst4*r20);
IkReal x11101=((1.0)*cj1*sj2);
IkReal x11102=(sj1*x11094);
IkReal x11103=(r12*x11087);
IkReal x11104=(gconst4*x11087);
IkReal x11105=((1.0)*x11088);
IkReal x11106=(gconst4*sj3*x11088);
IkReal x11107=(cj3*gconst4*x11088);
IkReal x11108=(x11101+x11102);
evalcond[0]=((-1.0)*r12*x11088);
evalcond[1]=((((-1.0)*x11090*x11104))+((x11087*x11092)));
evalcond[2]=((-1.0)+(((-1.0)*x11099*x11104))+((x11087*x11095)));
evalcond[3]=((((-1.0)*x11098*x11103))+(((-1.0)*x11093))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x11089*x11103))+(((-1.0)*x11108)));
evalcond[5]=(((r01*x11096))+(((-1.0)*r00*x11091*x11105))+((sj3*x11097))+((r01*x11107)));
evalcond[6]=((((-1.0)*x11088*x11089*x11095))+(((-1.0)*x11091*x11099))+(((-1.0)*x11097*x11098))+((r01*x11106)));
evalcond[7]=((((-1.0)*r20*x11091*x11105))+((sj3*x11100))+((r21*x11107))+(((-1.0)*x11108))+((r21*x11096)));
evalcond[8]=((((-1.0)*x11088*x11089*x11092))+(((-1.0)*cj1*x11094))+(((-1.0)*x11098*x11100))+x11093+((r21*x11106))+(((-1.0)*x11090*x11091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11109=gconst4*gconst4;
IkReal x11110=gconst5*gconst5;
IkReal x11111=(cj3*r20);
IkReal x11112=(r00*sj3);
IkReal x11113=(r01*sj3);
IkReal x11114=(gconst4*gconst5);
IkReal x11115=(r21*x11109);
IkReal x11116=((1.0)*r01*x11114);
CheckValue<IkReal> x11117=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r00*r21*x11114))+(((-1.0)*x11111*x11116))+((r00*x11110*x11111))+((cj3*r02*r22))+((cj3*r01*x11115)))),-1);
if(!x11117.valid){
continue;
}
CheckValue<IkReal> x11118 = IKatan2WithCheck(IkReal((((gconst4*r22*x11112))+((gconst5*r22*x11113)))),IkReal(((((-1.0)*r21*x11113*x11114))+((r20*x11112*x11114))+((r20*x11110*x11113))+(((-1.0)*x11112*x11115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11117.value)))+(x11118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11119=IKsin(j4);
IkReal x11120=IKcos(j4);
IkReal x11121=(gconst5*sj3);
IkReal x11122=((1.0)*r21);
IkReal x11123=(cj3*gconst5);
IkReal x11124=((1.0)*sj2);
IkReal x11125=((1.0)*r11);
IkReal x11126=((1.0)*cj2);
IkReal x11127=((1.0)*cj3);
IkReal x11128=(gconst4*r10);
IkReal x11129=(gconst4*r00);
IkReal x11130=((1.0)*r01);
IkReal x11131=((1.0)*sj3);
IkReal x11132=(gconst4*r20);
IkReal x11133=(cj1*x11124);
IkReal x11134=(sj1*x11126);
IkReal x11135=((1.0)*x11120);
IkReal x11136=(gconst4*x11119);
IkReal x11137=(r22*x11119);
IkReal x11138=(gconst5*x11119);
IkReal x11139=(r02*x11119);
IkReal x11140=(r12*x11119);
IkReal x11141=(gconst4*sj3*x11120);
IkReal x11142=(cj3*gconst4*x11120);
IkReal x11143=(x11134+x11133);
evalcond[0]=((((-1.0)*r22*x11135))+((r20*x11138))+(((-1.0)*x11122*x11136)));
evalcond[1]=(((r10*x11138))+(((-1.0)*x11125*x11136))+(((-1.0)*r12*x11135)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11135))+((r00*x11138))+(((-1.0)*x11130*x11136)));
evalcond[3]=(((r01*x11142))+(((-1.0)*x11127*x11139))+(((-1.0)*r00*x11123*x11135))+((sj3*x11129))+((r01*x11121)));
evalcond[4]=(((r01*x11141))+(((-1.0)*x11131*x11139))+(((-1.0)*r00*x11121*x11135))+(((-1.0)*x11123*x11130))+(((-1.0)*x11127*x11129)));
evalcond[5]=((((-1.0)*sj1*x11124))+(((-1.0)*x11127*x11140))+((r11*x11142))+((r11*x11121))+((cj1*cj2))+((sj3*x11128))+(((-1.0)*r10*x11123*x11135)));
evalcond[6]=(((r21*x11121))+((r21*x11142))+(((-1.0)*r20*x11123*x11135))+(((-1.0)*x11127*x11137))+((sj3*x11132))+(((-1.0)*x11143)));
evalcond[7]=((((-1.0)*x11131*x11137))+(((-1.0)*cj1*x11126))+((r21*x11141))+(((-1.0)*r20*x11121*x11135))+((sj1*sj2))+(((-1.0)*x11127*x11132))+(((-1.0)*x11122*x11123)));
evalcond[8]=((((-1.0)*x11131*x11140))+((r11*x11141))+(((-1.0)*x11123*x11125))+(((-1.0)*r10*x11121*x11135))+(((-1.0)*x11143))+(((-1.0)*x11127*x11128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11144=((1.0)*gconst4);
CheckValue<IkReal> x11145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11144))+(((-1.0)*gconst5*r21)))),-1);
if(!x11145.valid){
continue;
}
CheckValue<IkReal> x11146 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x11144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11145.value)))+(x11146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11147=IKsin(j4);
IkReal x11148=IKcos(j4);
IkReal x11149=(gconst5*sj3);
IkReal x11150=((1.0)*r21);
IkReal x11151=(cj3*gconst5);
IkReal x11152=((1.0)*sj2);
IkReal x11153=((1.0)*r11);
IkReal x11154=((1.0)*cj2);
IkReal x11155=((1.0)*cj3);
IkReal x11156=(gconst4*r10);
IkReal x11157=(gconst4*r00);
IkReal x11158=((1.0)*r01);
IkReal x11159=((1.0)*sj3);
IkReal x11160=(gconst4*r20);
IkReal x11161=(cj1*x11152);
IkReal x11162=(sj1*x11154);
IkReal x11163=((1.0)*x11148);
IkReal x11164=(gconst4*x11147);
IkReal x11165=(r22*x11147);
IkReal x11166=(gconst5*x11147);
IkReal x11167=(r02*x11147);
IkReal x11168=(r12*x11147);
IkReal x11169=(gconst4*sj3*x11148);
IkReal x11170=(cj3*gconst4*x11148);
IkReal x11171=(x11162+x11161);
evalcond[0]=(((r20*x11166))+(((-1.0)*x11150*x11164))+(((-1.0)*r22*x11163)));
evalcond[1]=((((-1.0)*r12*x11163))+((r10*x11166))+(((-1.0)*x11153*x11164)));
evalcond[2]=((-1.0)+((r00*x11166))+(((-1.0)*x11158*x11164))+(((-1.0)*r02*x11163)));
evalcond[3]=(((r01*x11149))+(((-1.0)*x11155*x11167))+((r01*x11170))+((sj3*x11157))+(((-1.0)*r00*x11151*x11163)));
evalcond[4]=(((r01*x11169))+(((-1.0)*x11155*x11157))+(((-1.0)*x11151*x11158))+(((-1.0)*x11159*x11167))+(((-1.0)*r00*x11149*x11163)));
evalcond[5]=((((-1.0)*x11155*x11168))+((r11*x11170))+(((-1.0)*r10*x11151*x11163))+((r11*x11149))+((sj3*x11156))+((cj1*cj2))+(((-1.0)*sj1*x11152)));
evalcond[6]=((((-1.0)*x11155*x11165))+((sj3*x11160))+((r21*x11149))+(((-1.0)*x11171))+(((-1.0)*r20*x11151*x11163))+((r21*x11170)));
evalcond[7]=((((-1.0)*x11155*x11160))+(((-1.0)*cj1*x11154))+((sj1*sj2))+(((-1.0)*x11150*x11151))+(((-1.0)*x11159*x11165))+((r21*x11169))+(((-1.0)*r20*x11149*x11163)));
evalcond[8]=((((-1.0)*r10*x11149*x11163))+((r11*x11169))+(((-1.0)*x11171))+(((-1.0)*x11155*x11156))+(((-1.0)*x11151*x11153))+(((-1.0)*x11159*x11168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11172=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11172.valid){
continue;
}
CheckValue<IkReal> x11173 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11172.value)))+(x11173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11174=IKsin(j4);
IkReal x11175=IKcos(j4);
IkReal x11176=(gconst5*sj3);
IkReal x11177=((1.0)*r21);
IkReal x11178=(cj3*gconst5);
IkReal x11179=((1.0)*sj2);
IkReal x11180=((1.0)*r11);
IkReal x11181=((1.0)*cj2);
IkReal x11182=((1.0)*cj3);
IkReal x11183=(gconst4*r10);
IkReal x11184=(gconst4*r00);
IkReal x11185=((1.0)*r01);
IkReal x11186=((1.0)*sj3);
IkReal x11187=(gconst4*r20);
IkReal x11188=(cj1*x11179);
IkReal x11189=(sj1*x11181);
IkReal x11190=((1.0)*x11175);
IkReal x11191=(gconst4*x11174);
IkReal x11192=(r22*x11174);
IkReal x11193=(gconst5*x11174);
IkReal x11194=(r02*x11174);
IkReal x11195=(r12*x11174);
IkReal x11196=(gconst4*sj3*x11175);
IkReal x11197=(cj3*gconst4*x11175);
IkReal x11198=(x11188+x11189);
evalcond[0]=(((r20*x11193))+(((-1.0)*r22*x11190))+(((-1.0)*x11177*x11191)));
evalcond[1]=((((-1.0)*r12*x11190))+(((-1.0)*x11180*x11191))+((r10*x11193)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11190))+(((-1.0)*x11185*x11191))+((r00*x11193)));
evalcond[3]=(((sj3*x11184))+(((-1.0)*r00*x11178*x11190))+((r01*x11176))+(((-1.0)*x11182*x11194))+((r01*x11197)));
evalcond[4]=((((-1.0)*x11186*x11194))+(((-1.0)*r00*x11176*x11190))+(((-1.0)*x11182*x11184))+((r01*x11196))+(((-1.0)*x11178*x11185)));
evalcond[5]=(((sj3*x11183))+((r11*x11197))+((r11*x11176))+(((-1.0)*x11182*x11195))+(((-1.0)*sj1*x11179))+(((-1.0)*r10*x11178*x11190))+((cj1*cj2)));
evalcond[6]=(((r21*x11197))+((sj3*x11187))+(((-1.0)*x11198))+(((-1.0)*x11182*x11192))+(((-1.0)*r20*x11178*x11190))+((r21*x11176)));
evalcond[7]=(((r21*x11196))+(((-1.0)*x11186*x11192))+(((-1.0)*x11177*x11178))+(((-1.0)*x11182*x11187))+(((-1.0)*r20*x11176*x11190))+((sj1*sj2))+(((-1.0)*cj1*x11181)));
evalcond[8]=((((-1.0)*x11186*x11195))+((r11*x11196))+(((-1.0)*x11182*x11183))+(((-1.0)*x11198))+(((-1.0)*r10*x11176*x11190))+(((-1.0)*x11178*x11180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
IkReal x11199=((1.0)*(x11201.value));
IkReal x11200=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11199)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11199)));
IkReal gconst4=((1.0)*r21*x11200);
IkReal gconst5=((-1.0)*r20*x11200);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
IkReal x11202=((1.0)*(x11204.value));
IkReal x11203=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11202)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11202)));
IkReal gconst4=((1.0)*r21*x11203);
IkReal gconst5=((-1.0)*r20*x11203);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11207 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11207.valid){
continue;
}
IkReal x11205=((1.0)*(x11207.value));
IkReal x11206=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11205)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11205)));
IkReal gconst4=((1.0)*r21*x11206);
IkReal gconst5=((-1.0)*r20*x11206);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11210 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11210.valid){
continue;
}
IkReal x11208=((1.0)*(x11210.value));
IkReal x11209=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11208)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11208)));
IkReal gconst4=((1.0)*r21*x11209);
IkReal gconst5=((-1.0)*r20*x11209);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11213 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11213.valid){
continue;
}
IkReal x11211=((1.0)*(x11213.value));
IkReal x11212=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11211)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11211)));
IkReal gconst4=((1.0)*r21*x11212);
IkReal gconst5=((-1.0)*r20*x11212);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11216 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11216.valid){
continue;
}
IkReal x11214=((1.0)*(x11216.value));
IkReal x11215=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11214)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11214)));
IkReal gconst4=((1.0)*r21*x11215);
IkReal gconst5=((-1.0)*r20*x11215);
IkReal x11217=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11221=IKPowWithIntegerCheck(x11217,-1);
if(!x11221.valid){
continue;
}
IkReal x11218=x11221.value;
IkReal x11219=((1.0)*x11218);
IkReal x11220=((((-1.0)*x11219*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x11218))+(((-1.0)*x11219*(r11*r11)*(r21*r21))));
j4eval[0]=x11220;
j4eval[1]=r12;
j4eval[2]=x11217;
j4eval[3]=IKsign(x11220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11222=(gconst5*r10);
IkReal x11223=(gconst4*r11);
CheckValue<IkReal> x11224 = IKatan2WithCheck(IkReal((x11223+(((-1.0)*x11222)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11224.valid){
continue;
}
CheckValue<IkReal> x11225=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11222*x11222)))+(((2.0)*x11222*x11223))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11223*x11223))))),-1);
if(!x11225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11224.value)+(((1.5707963267949)*(x11225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11226=IKsin(j4);
IkReal x11227=IKcos(j4);
IkReal x11228=(gconst4*r21);
IkReal x11229=(gconst5*r10);
IkReal x11230=(gconst4*r11);
IkReal x11231=(gconst4*r01);
IkReal x11232=((1.0)*x11227);
IkReal x11233=((1.0)*x11226);
IkReal x11234=(gconst5*x11226);
evalcond[0]=((((-1.0)*x11228*x11233))+((r20*x11234))+(((-1.0)*r22*x11232)));
evalcond[1]=((((-1.0)*r02*x11232))+(((-1.0)*x11231*x11233))+((r00*x11234)));
evalcond[2]=(((x11227*x11230))+(((-1.0)*x11229*x11232))+(((-1.0)*r12*x11233)));
evalcond[3]=((-1.0)+(((-1.0)*x11230*x11233))+((x11226*x11229))+(((-1.0)*r12*x11232)));
evalcond[4]=((((-1.0)*gconst5*r00*x11232))+((cj2*sj1))+(((-1.0)*r02*x11233))+((x11227*x11231))+((cj1*sj2)));
evalcond[5]=(((x11227*x11228))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11232))+(((-1.0)*r22*x11233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11235=((1.0)*gconst4);
CheckValue<IkReal> x11236 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11235))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11236.valid){
continue;
}
CheckValue<IkReal> x11237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11235))+(((-1.0)*gconst5*r01)))),-1);
if(!x11237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11236.value)+(((1.5707963267949)*(x11237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11238=IKsin(j4);
IkReal x11239=IKcos(j4);
IkReal x11240=(gconst4*r21);
IkReal x11241=(gconst5*r10);
IkReal x11242=(gconst4*r11);
IkReal x11243=(gconst4*r01);
IkReal x11244=((1.0)*x11239);
IkReal x11245=((1.0)*x11238);
IkReal x11246=(gconst5*x11238);
evalcond[0]=(((r20*x11246))+(((-1.0)*r22*x11244))+(((-1.0)*x11240*x11245)));
evalcond[1]=((((-1.0)*r02*x11244))+(((-1.0)*x11243*x11245))+((r00*x11246)));
evalcond[2]=(((x11239*x11242))+(((-1.0)*x11241*x11244))+(((-1.0)*r12*x11245)));
evalcond[3]=((-1.0)+((x11238*x11241))+(((-1.0)*x11242*x11245))+(((-1.0)*r12*x11244)));
evalcond[4]=(((x11239*x11243))+(((-1.0)*r02*x11245))+((cj2*sj1))+(((-1.0)*gconst5*r00*x11244))+((cj1*sj2)));
evalcond[5]=(((x11239*x11240))+(((-1.0)*gconst5*r20*x11244))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11247 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11247.valid){
continue;
}
CheckValue<IkReal> x11248=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11247.value)+(((1.5707963267949)*(x11248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11249=IKsin(j4);
IkReal x11250=IKcos(j4);
IkReal x11251=(gconst4*r21);
IkReal x11252=(gconst5*r10);
IkReal x11253=(gconst4*r11);
IkReal x11254=(gconst4*r01);
IkReal x11255=((1.0)*x11250);
IkReal x11256=((1.0)*x11249);
IkReal x11257=(gconst5*x11249);
evalcond[0]=(((r20*x11257))+(((-1.0)*x11251*x11256))+(((-1.0)*r22*x11255)));
evalcond[1]=((((-1.0)*r02*x11255))+((r00*x11257))+(((-1.0)*x11254*x11256)));
evalcond[2]=(((x11250*x11253))+(((-1.0)*x11252*x11255))+(((-1.0)*r12*x11256)));
evalcond[3]=((-1.0)+((x11249*x11252))+(((-1.0)*x11253*x11256))+(((-1.0)*r12*x11255)));
evalcond[4]=((((-1.0)*r02*x11256))+((cj2*sj1))+(((-1.0)*gconst5*r00*x11255))+((cj1*sj2))+((x11250*x11254)));
evalcond[5]=((((-1.0)*gconst5*r20*x11255))+((x11250*x11251))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11260 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11260.valid){
continue;
}
IkReal x11258=((1.0)*(x11260.value));
IkReal x11259=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11258)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11258)));
IkReal gconst4=((1.0)*r21*x11259);
IkReal gconst5=((-1.0)*r20*x11259);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11263 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11263.valid){
continue;
}
IkReal x11261=((1.0)*(x11263.value));
IkReal x11262=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11261)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11261)));
IkReal gconst4=((1.0)*r21*x11262);
IkReal gconst5=((-1.0)*r20*x11262);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11266 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11266.valid){
continue;
}
IkReal x11264=((1.0)*(x11266.value));
IkReal x11265=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11264)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11264)));
IkReal gconst4=((1.0)*r21*x11265);
IkReal gconst5=((-1.0)*r20*x11265);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11267=(gconst5*r10);
IkReal x11268=(gconst4*r11);
CheckValue<IkReal> x11269=IKPowWithIntegerCheck(IKsign(((x11268*x11268)+(r12*r12)+(((-2.0)*x11267*x11268))+(x11267*x11267))),-1);
if(!x11269.valid){
continue;
}
CheckValue<IkReal> x11270 = IKatan2WithCheck(IkReal(((((-1.0)*x11268))+x11267)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11269.value)))+(x11270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11271=IKcos(j4);
IkReal x11272=IKsin(j4);
IkReal x11273=((1.0)*x11271);
IkReal x11274=(gconst5*x11272);
IkReal x11275=(gconst5*x11271);
IkReal x11276=((1.0)*gconst4*x11272);
evalcond[0]=(((r10*x11275))+((r12*x11272))+(((-1.0)*gconst4*r11*x11273)));
evalcond[1]=((((-1.0)*r21*x11276))+(((-1.0)*r22*x11273))+((r20*x11274)));
evalcond[2]=(((r00*x11274))+(((-1.0)*r01*x11276))+(((-1.0)*r02*x11273)));
evalcond[3]=((-1.0)+((r10*x11274))+(((-1.0)*r12*x11273))+(((-1.0)*r11*x11276)));
evalcond[4]=(((cj2*sj1))+((r00*x11275))+((cj1*sj2))+(((-1.0)*gconst4*r01*x11273))+((r02*x11272)));
evalcond[5]=((((-1.0)*gconst4*r21*x11273))+((r22*x11272))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11277=((1.0)*gconst4);
CheckValue<IkReal> x11278=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11277))+(((-1.0)*gconst5*r01)))),-1);
if(!x11278.valid){
continue;
}
CheckValue<IkReal> x11279 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11277))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11278.value)))+(x11279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11280=IKcos(j4);
IkReal x11281=IKsin(j4);
IkReal x11282=((1.0)*x11280);
IkReal x11283=(gconst5*x11281);
IkReal x11284=(gconst5*x11280);
IkReal x11285=((1.0)*gconst4*x11281);
evalcond[0]=((((-1.0)*gconst4*r11*x11282))+((r10*x11284))+((r12*x11281)));
evalcond[1]=((((-1.0)*r22*x11282))+(((-1.0)*r21*x11285))+((r20*x11283)));
evalcond[2]=((((-1.0)*r02*x11282))+(((-1.0)*r01*x11285))+((r00*x11283)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11282))+(((-1.0)*r11*x11285))+((r10*x11283)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x11281))+(((-1.0)*gconst4*r01*x11282))+((r00*x11284)));
evalcond[5]=(((r22*x11281))+(((-1.0)*gconst4*r21*x11282))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11286 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11286.valid){
continue;
}
CheckValue<IkReal> x11287=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11286.value)+(((1.5707963267949)*(x11287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11288=IKcos(j4);
IkReal x11289=IKsin(j4);
IkReal x11290=((1.0)*x11288);
IkReal x11291=(gconst5*x11289);
IkReal x11292=(gconst5*x11288);
IkReal x11293=((1.0)*gconst4*x11289);
evalcond[0]=((((-1.0)*gconst4*r11*x11290))+((r10*x11292))+((r12*x11289)));
evalcond[1]=((((-1.0)*r22*x11290))+((r20*x11291))+(((-1.0)*r21*x11293)));
evalcond[2]=((((-1.0)*r02*x11290))+(((-1.0)*r01*x11293))+((r00*x11291)));
evalcond[3]=((-1.0)+((r10*x11291))+(((-1.0)*r12*x11290))+(((-1.0)*r11*x11293)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x11289))+(((-1.0)*gconst4*r01*x11290))+((r00*x11292)));
evalcond[5]=(((r22*x11289))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11290))+((r20*x11292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11296 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11296.valid){
continue;
}
IkReal x11294=((1.0)*(x11296.value));
IkReal x11295=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11294)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11294)));
IkReal gconst4=((1.0)*r21*x11295);
IkReal gconst5=((-1.0)*r20*x11295);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11299 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11299.valid){
continue;
}
IkReal x11297=((1.0)*(x11299.value));
IkReal x11298=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11297)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11297)));
IkReal gconst4=((1.0)*r21*x11298);
IkReal gconst5=((-1.0)*r20*x11298);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11302 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11302.valid){
continue;
}
IkReal x11300=((1.0)*(x11302.value));
IkReal x11301=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11300)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11300)));
IkReal gconst4=((1.0)*r21*x11301);
IkReal gconst5=((-1.0)*r20*x11301);
IkReal x11303=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11307=IKPowWithIntegerCheck(x11303,-1);
if(!x11307.valid){
continue;
}
IkReal x11304=x11307.value;
IkReal x11305=((1.0)*x11304);
IkReal x11306=((((-1.0)*x11305*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x11304))+(((-1.0)*x11305*(r10*r10)*(r20*r20))));
j4eval[0]=x11306;
j4eval[1]=r12;
j4eval[2]=x11303;
j4eval[3]=IKsign(x11306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11308=(gconst5*r10);
IkReal x11309=(gconst4*r11);
CheckValue<IkReal> x11310=IKPowWithIntegerCheck(IKsign(((((2.0)*x11308*x11309))+(((-1.0)*(x11308*x11308)))+(((-1.0)*(x11309*x11309)))+(((-1.0)*(r12*r12))))),-1);
if(!x11310.valid){
continue;
}
CheckValue<IkReal> x11311 = IKatan2WithCheck(IkReal((x11309+(((-1.0)*x11308)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11310.value)))+(x11311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11312=IKsin(j4);
IkReal x11313=IKcos(j4);
IkReal x11314=(gconst4*r21);
IkReal x11315=(gconst5*r10);
IkReal x11316=((1.0)*cj2);
IkReal x11317=(gconst4*r11);
IkReal x11318=(gconst4*r01);
IkReal x11319=((1.0)*x11313);
IkReal x11320=((1.0)*x11312);
IkReal x11321=(gconst5*x11312);
evalcond[0]=((((-1.0)*r22*x11319))+(((-1.0)*x11314*x11320))+((r20*x11321)));
evalcond[1]=((((-1.0)*r02*x11319))+(((-1.0)*x11318*x11320))+((r00*x11321)));
evalcond[2]=((((-1.0)*r12*x11320))+(((-1.0)*x11315*x11319))+((x11313*x11317)));
evalcond[3]=((-1.0)+(((-1.0)*x11317*x11320))+(((-1.0)*r12*x11319))+((x11312*x11315)));
evalcond[4]=((((-1.0)*gconst5*r00*x11319))+(((-1.0)*r02*x11320))+((sj1*sj2))+(((-1.0)*cj1*x11316))+((x11313*x11318)));
evalcond[5]=((((-1.0)*r22*x11320))+(((-1.0)*cj1*sj2))+((x11313*x11314))+(((-1.0)*sj1*x11316))+(((-1.0)*gconst5*r20*x11319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11322=((1.0)*gconst4);
CheckValue<IkReal> x11323 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11322))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11323.valid){
continue;
}
CheckValue<IkReal> x11324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11322))+(((-1.0)*gconst5*r01)))),-1);
if(!x11324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11323.value)+(((1.5707963267949)*(x11324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11325=IKsin(j4);
IkReal x11326=IKcos(j4);
IkReal x11327=(gconst4*r21);
IkReal x11328=(gconst5*r10);
IkReal x11329=((1.0)*cj2);
IkReal x11330=(gconst4*r11);
IkReal x11331=(gconst4*r01);
IkReal x11332=((1.0)*x11326);
IkReal x11333=((1.0)*x11325);
IkReal x11334=(gconst5*x11325);
evalcond[0]=((((-1.0)*r22*x11332))+((r20*x11334))+(((-1.0)*x11327*x11333)));
evalcond[1]=((((-1.0)*x11331*x11333))+((r00*x11334))+(((-1.0)*r02*x11332)));
evalcond[2]=((((-1.0)*r12*x11333))+((x11326*x11330))+(((-1.0)*x11328*x11332)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11332))+((x11325*x11328))+(((-1.0)*x11330*x11333)));
evalcond[4]=(((x11326*x11331))+((sj1*sj2))+(((-1.0)*gconst5*r00*x11332))+(((-1.0)*cj1*x11329))+(((-1.0)*r02*x11333)));
evalcond[5]=((((-1.0)*r22*x11333))+(((-1.0)*cj1*sj2))+((x11326*x11327))+(((-1.0)*sj1*x11329))+(((-1.0)*gconst5*r20*x11332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11335 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11335.valid){
continue;
}
CheckValue<IkReal> x11336=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11335.value)+(((1.5707963267949)*(x11336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11337=IKsin(j4);
IkReal x11338=IKcos(j4);
IkReal x11339=(gconst4*r21);
IkReal x11340=(gconst5*r10);
IkReal x11341=((1.0)*cj2);
IkReal x11342=(gconst4*r11);
IkReal x11343=(gconst4*r01);
IkReal x11344=((1.0)*x11338);
IkReal x11345=((1.0)*x11337);
IkReal x11346=(gconst5*x11337);
evalcond[0]=(((r20*x11346))+(((-1.0)*r22*x11344))+(((-1.0)*x11339*x11345)));
evalcond[1]=((((-1.0)*x11343*x11345))+((r00*x11346))+(((-1.0)*r02*x11344)));
evalcond[2]=(((x11338*x11342))+(((-1.0)*x11340*x11344))+(((-1.0)*r12*x11345)));
evalcond[3]=((-1.0)+(((-1.0)*x11342*x11345))+((x11337*x11340))+(((-1.0)*r12*x11344)));
evalcond[4]=(((x11338*x11343))+((sj1*sj2))+(((-1.0)*cj1*x11341))+(((-1.0)*gconst5*r00*x11344))+(((-1.0)*r02*x11345)));
evalcond[5]=(((x11338*x11339))+(((-1.0)*gconst5*r20*x11344))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x11345))+(((-1.0)*sj1*x11341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11349 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11349.valid){
continue;
}
IkReal x11347=((1.0)*(x11349.value));
IkReal x11348=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11347)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11347)));
IkReal gconst4=((1.0)*r21*x11348);
IkReal gconst5=((-1.0)*r20*x11348);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11352 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11352.valid){
continue;
}
IkReal x11350=((1.0)*(x11352.value));
IkReal x11351=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11350)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11350)));
IkReal gconst4=((1.0)*r21*x11351);
IkReal gconst5=((-1.0)*r20*x11351);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11355 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11355.valid){
continue;
}
IkReal x11353=((1.0)*(x11355.value));
IkReal x11354=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11353)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11353)));
IkReal gconst4=((1.0)*r21*x11354);
IkReal gconst5=((-1.0)*r20*x11354);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11356=(gconst5*r10);
IkReal x11357=(gconst4*r11);
CheckValue<IkReal> x11358=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11357*x11357)+(((-2.0)*x11356*x11357))+(x11356*x11356))),-1);
if(!x11358.valid){
continue;
}
CheckValue<IkReal> x11359 = IKatan2WithCheck(IkReal((x11356+(((-1.0)*x11357)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11358.value)))+(x11359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11360=IKcos(j4);
IkReal x11361=IKsin(j4);
IkReal x11362=((1.0)*cj2);
IkReal x11363=((1.0)*x11360);
IkReal x11364=(gconst5*x11361);
IkReal x11365=(gconst5*x11360);
IkReal x11366=((1.0)*gconst4*x11361);
evalcond[0]=((((-1.0)*gconst4*r11*x11363))+((r12*x11361))+((r10*x11365)));
evalcond[1]=((((-1.0)*r22*x11363))+(((-1.0)*r21*x11366))+((r20*x11364)));
evalcond[2]=(((r00*x11364))+(((-1.0)*r02*x11363))+(((-1.0)*r01*x11366)));
evalcond[3]=((-1.0)+((r10*x11364))+(((-1.0)*r11*x11366))+(((-1.0)*r12*x11363)));
evalcond[4]=(((r00*x11365))+(((-1.0)*gconst4*r01*x11363))+((sj1*sj2))+((r02*x11361))+(((-1.0)*cj1*x11362)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x11361))+(((-1.0)*gconst4*r21*x11363))+((r20*x11365))+(((-1.0)*sj1*x11362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11367=((1.0)*gconst4);
CheckValue<IkReal> x11368 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11367))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11368.valid){
continue;
}
CheckValue<IkReal> x11369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11367))+(((-1.0)*gconst5*r01)))),-1);
if(!x11369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11368.value)+(((1.5707963267949)*(x11369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11370=IKcos(j4);
IkReal x11371=IKsin(j4);
IkReal x11372=((1.0)*cj2);
IkReal x11373=((1.0)*x11370);
IkReal x11374=(gconst5*x11371);
IkReal x11375=(gconst5*x11370);
IkReal x11376=((1.0)*gconst4*x11371);
evalcond[0]=(((r10*x11375))+((r12*x11371))+(((-1.0)*gconst4*r11*x11373)));
evalcond[1]=(((r20*x11374))+(((-1.0)*r22*x11373))+(((-1.0)*r21*x11376)));
evalcond[2]=(((r00*x11374))+(((-1.0)*r02*x11373))+(((-1.0)*r01*x11376)));
evalcond[3]=((-1.0)+((r10*x11374))+(((-1.0)*r12*x11373))+(((-1.0)*r11*x11376)));
evalcond[4]=(((r00*x11375))+(((-1.0)*gconst4*r01*x11373))+((sj1*sj2))+(((-1.0)*cj1*x11372))+((r02*x11371)));
evalcond[5]=(((r20*x11375))+(((-1.0)*sj1*x11372))+(((-1.0)*cj1*sj2))+((r22*x11371))+(((-1.0)*gconst4*r21*x11373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11377 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11377.valid){
continue;
}
CheckValue<IkReal> x11378=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11377.value)+(((1.5707963267949)*(x11378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11379=IKcos(j4);
IkReal x11380=IKsin(j4);
IkReal x11381=((1.0)*cj2);
IkReal x11382=((1.0)*x11379);
IkReal x11383=(gconst5*x11380);
IkReal x11384=(gconst5*x11379);
IkReal x11385=((1.0)*gconst4*x11380);
evalcond[0]=(((r10*x11384))+((r12*x11380))+(((-1.0)*gconst4*r11*x11382)));
evalcond[1]=(((r20*x11383))+(((-1.0)*r21*x11385))+(((-1.0)*r22*x11382)));
evalcond[2]=(((r00*x11383))+(((-1.0)*r02*x11382))+(((-1.0)*r01*x11385)));
evalcond[3]=((-1.0)+((r10*x11383))+(((-1.0)*r11*x11385))+(((-1.0)*r12*x11382)));
evalcond[4]=(((r02*x11380))+((sj1*sj2))+((r00*x11384))+(((-1.0)*gconst4*r01*x11382))+(((-1.0)*cj1*x11381)));
evalcond[5]=((((-1.0)*gconst4*r21*x11382))+((r20*x11384))+(((-1.0)*sj1*x11381))+(((-1.0)*cj1*sj2))+((r22*x11380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)+r12);
op[1]=((((-2.0)*gconst4*r11))+(((2.0)*gconst5*r10)));
op[2]=((-1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11386=gconst5*gconst5;
IkReal x11387=gconst4*gconst4;
IkReal x11388=(cj3*r10);
IkReal x11389=(r11*sj3);
IkReal x11390=(r10*sj3);
IkReal x11391=(cj3*r11);
IkReal x11392=(r21*x11387);
IkReal x11393=(gconst4*gconst5*r20);
IkReal x11394=(r20*x11386);
IkReal x11395=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x11396 = IKatan2WithCheck(IkReal((((gconst5*r22*x11389))+((gconst4*r22*x11390)))),IkReal(((((-1.0)*x11390*x11392))+((x11389*x11394))+((x11390*x11393))+(((-1.0)*x11389*x11395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11396.valid){
continue;
}
CheckValue<IkReal> x11397=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11391*x11393))+((x11391*x11392))+((x11388*x11394))+(((-1.0)*x11388*x11395)))),-1);
if(!x11397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11396.value)+(((1.5707963267949)*(x11397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11398=IKsin(j4);
IkReal x11399=IKcos(j4);
IkReal x11400=(sj1*sj2);
IkReal x11401=(cj3*gconst5);
IkReal x11402=((1.0)*cj1);
IkReal x11403=(gconst5*sj3);
IkReal x11404=(gconst4*r21);
IkReal x11405=(gconst4*r11);
IkReal x11406=(gconst4*r01);
IkReal x11407=(cj2*sj1);
IkReal x11408=(gconst4*r10);
IkReal x11409=((1.0)*cj3);
IkReal x11410=(gconst4*r00);
IkReal x11411=(gconst4*r20);
IkReal x11412=(cj2*x11402);
IkReal x11413=((1.0)*x11399);
IkReal x11414=((1.0)*x11398);
IkReal x11415=(sj3*x11399);
IkReal x11416=(gconst5*x11398);
IkReal x11417=(cj3*x11399);
evalcond[0]=((((-1.0)*x11404*x11414))+((r20*x11416))+(((-1.0)*r22*x11413)));
evalcond[1]=(((r00*x11416))+(((-1.0)*x11406*x11414))+(((-1.0)*r02*x11413)));
evalcond[2]=((-1.0)+((r10*x11416))+(((-1.0)*r12*x11413))+(((-1.0)*x11405*x11414)));
evalcond[3]=((((-1.0)*r12*x11398*x11409))+((sj3*x11408))+((r11*x11403))+((x11405*x11417))+(((-1.0)*r10*x11401*x11413)));
evalcond[4]=((((-1.0)*x11408*x11409))+(((-1.0)*r12*sj3*x11414))+((x11405*x11415))+(((-1.0)*r10*x11403*x11413))+(((-1.0)*r11*x11401)));
evalcond[5]=((((-1.0)*r02*x11398*x11409))+x11400+(((-1.0)*x11412))+(((-1.0)*r00*x11401*x11413))+((sj3*x11410))+((r01*x11403))+((x11406*x11417)));
evalcond[6]=(((r21*x11403))+((x11404*x11417))+(((-1.0)*r20*x11401*x11413))+(((-1.0)*sj2*x11402))+(((-1.0)*r22*x11398*x11409))+(((-1.0)*x11407))+((sj3*x11411)));
evalcond[7]=((((-1.0)*r02*sj3*x11414))+(((-1.0)*r01*x11401))+x11407+((cj1*sj2))+(((-1.0)*r00*x11403*x11413))+(((-1.0)*x11409*x11410))+((x11406*x11415)));
evalcond[8]=((((-1.0)*r22*sj3*x11414))+x11400+((x11404*x11415))+(((-1.0)*r21*x11401))+(((-1.0)*x11412))+(((-1.0)*r20*x11403*x11413))+(((-1.0)*x11409*x11411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11418=((1.0)*gconst4);
CheckValue<IkReal> x11419 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11418))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11419.valid){
continue;
}
CheckValue<IkReal> x11420=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11418))+(((-1.0)*gconst5*r01)))),-1);
if(!x11420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11419.value)+(((1.5707963267949)*(x11420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11421=IKsin(j4);
IkReal x11422=IKcos(j4);
IkReal x11423=(sj1*sj2);
IkReal x11424=(cj3*gconst5);
IkReal x11425=((1.0)*cj1);
IkReal x11426=(gconst5*sj3);
IkReal x11427=(gconst4*r21);
IkReal x11428=(gconst4*r11);
IkReal x11429=(gconst4*r01);
IkReal x11430=(cj2*sj1);
IkReal x11431=(gconst4*r10);
IkReal x11432=((1.0)*cj3);
IkReal x11433=(gconst4*r00);
IkReal x11434=(gconst4*r20);
IkReal x11435=(cj2*x11425);
IkReal x11436=((1.0)*x11422);
IkReal x11437=((1.0)*x11421);
IkReal x11438=(sj3*x11422);
IkReal x11439=(gconst5*x11421);
IkReal x11440=(cj3*x11422);
evalcond[0]=(((r20*x11439))+(((-1.0)*r22*x11436))+(((-1.0)*x11427*x11437)));
evalcond[1]=((((-1.0)*r02*x11436))+(((-1.0)*x11429*x11437))+((r00*x11439)));
evalcond[2]=((-1.0)+((r10*x11439))+(((-1.0)*x11428*x11437))+(((-1.0)*r12*x11436)));
evalcond[3]=((((-1.0)*r12*x11421*x11432))+((r11*x11426))+(((-1.0)*r10*x11424*x11436))+((x11428*x11440))+((sj3*x11431)));
evalcond[4]=((((-1.0)*r11*x11424))+((x11428*x11438))+(((-1.0)*r12*sj3*x11437))+(((-1.0)*r10*x11426*x11436))+(((-1.0)*x11431*x11432)));
evalcond[5]=(x11423+((r01*x11426))+(((-1.0)*r00*x11424*x11436))+((x11429*x11440))+(((-1.0)*x11435))+((sj3*x11433))+(((-1.0)*r02*x11421*x11432)));
evalcond[6]=((((-1.0)*r20*x11424*x11436))+((r21*x11426))+(((-1.0)*x11430))+(((-1.0)*r22*x11421*x11432))+((x11427*x11440))+((sj3*x11434))+(((-1.0)*sj2*x11425)));
evalcond[7]=(x11430+((x11429*x11438))+((cj1*sj2))+(((-1.0)*r01*x11424))+(((-1.0)*x11432*x11433))+(((-1.0)*r00*x11426*x11436))+(((-1.0)*r02*sj3*x11437)));
evalcond[8]=(x11423+((x11427*x11438))+(((-1.0)*x11432*x11434))+(((-1.0)*x11435))+(((-1.0)*r21*x11424))+(((-1.0)*r20*x11426*x11436))+(((-1.0)*r22*sj3*x11437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11441 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11441.valid){
continue;
}
CheckValue<IkReal> x11442=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11441.value)+(((1.5707963267949)*(x11442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11443=IKsin(j4);
IkReal x11444=IKcos(j4);
IkReal x11445=(sj1*sj2);
IkReal x11446=(cj3*gconst5);
IkReal x11447=((1.0)*cj1);
IkReal x11448=(gconst5*sj3);
IkReal x11449=(gconst4*r21);
IkReal x11450=(gconst4*r11);
IkReal x11451=(gconst4*r01);
IkReal x11452=(cj2*sj1);
IkReal x11453=(gconst4*r10);
IkReal x11454=((1.0)*cj3);
IkReal x11455=(gconst4*r00);
IkReal x11456=(gconst4*r20);
IkReal x11457=(cj2*x11447);
IkReal x11458=((1.0)*x11444);
IkReal x11459=((1.0)*x11443);
IkReal x11460=(sj3*x11444);
IkReal x11461=(gconst5*x11443);
IkReal x11462=(cj3*x11444);
evalcond[0]=((((-1.0)*x11449*x11459))+((r20*x11461))+(((-1.0)*r22*x11458)));
evalcond[1]=((((-1.0)*r02*x11458))+(((-1.0)*x11451*x11459))+((r00*x11461)));
evalcond[2]=((-1.0)+((r10*x11461))+(((-1.0)*r12*x11458))+(((-1.0)*x11450*x11459)));
evalcond[3]=(((sj3*x11453))+((r11*x11448))+(((-1.0)*r10*x11446*x11458))+(((-1.0)*r12*x11443*x11454))+((x11450*x11462)));
evalcond[4]=((((-1.0)*r12*sj3*x11459))+(((-1.0)*x11453*x11454))+(((-1.0)*r11*x11446))+(((-1.0)*r10*x11448*x11458))+((x11450*x11460)));
evalcond[5]=(((sj3*x11455))+x11445+((x11451*x11462))+(((-1.0)*r02*x11443*x11454))+((r01*x11448))+(((-1.0)*x11457))+(((-1.0)*r00*x11446*x11458)));
evalcond[6]=(((sj3*x11456))+((x11449*x11462))+(((-1.0)*sj2*x11447))+(((-1.0)*x11452))+(((-1.0)*r22*x11443*x11454))+((r21*x11448))+(((-1.0)*r20*x11446*x11458)));
evalcond[7]=(x11452+(((-1.0)*r01*x11446))+(((-1.0)*r00*x11448*x11458))+((cj1*sj2))+(((-1.0)*x11454*x11455))+((x11451*x11460))+(((-1.0)*r02*sj3*x11459)));
evalcond[8]=(x11445+((x11449*x11460))+(((-1.0)*r20*x11448*x11458))+(((-1.0)*x11454*x11456))+(((-1.0)*r21*x11446))+(((-1.0)*r22*sj3*x11459))+(((-1.0)*x11457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11465 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11465.valid){
continue;
}
IkReal x11463=((1.0)*(x11465.value));
IkReal x11464=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11463)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11463)));
IkReal gconst4=((1.0)*r21*x11464);
IkReal gconst5=((-1.0)*r20*x11464);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11468 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11468.valid){
continue;
}
IkReal x11466=((1.0)*(x11468.value));
IkReal x11467=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11466)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11466)));
IkReal gconst4=((1.0)*r21*x11467);
IkReal gconst5=((-1.0)*r20*x11467);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11471 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11471.valid){
continue;
}
IkReal x11469=((1.0)*(x11471.value));
IkReal x11470=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11469)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11469)));
IkReal gconst4=((1.0)*r21*x11470);
IkReal gconst5=((-1.0)*r20*x11470);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11474 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11474.valid){
continue;
}
IkReal x11472=((1.0)*(x11474.value));
IkReal x11473=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11472)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11472)));
IkReal gconst4=((1.0)*r21*x11473);
IkReal gconst5=((-1.0)*r20*x11473);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11477.valid){
continue;
}
IkReal x11475=((1.0)*(x11477.value));
IkReal x11476=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11475)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11475)));
IkReal gconst4=((1.0)*r21*x11476);
IkReal gconst5=((-1.0)*r20*x11476);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11480.valid){
continue;
}
IkReal x11478=((1.0)*(x11480.value));
IkReal x11479=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11478)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11478)));
IkReal gconst4=((1.0)*r21*x11479);
IkReal gconst5=((-1.0)*r20*x11479);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11481=(gconst5*r10);
IkReal x11482=(gconst4*r11);
CheckValue<IkReal> x11483=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11481*x11481)+(x11482*x11482)+(((-2.0)*x11481*x11482)))),-1);
if(!x11483.valid){
continue;
}
CheckValue<IkReal> x11484 = IKatan2WithCheck(IkReal((x11482+(((-1.0)*x11481)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11483.value)))+(x11484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11485=IKsin(j4);
IkReal x11486=IKcos(j4);
IkReal x11487=(gconst4*r21);
IkReal x11488=(gconst5*r10);
IkReal x11489=((1.0)*cj2);
IkReal x11490=(gconst4*r11);
IkReal x11491=(gconst4*r01);
IkReal x11492=((1.0)*x11486);
IkReal x11493=((1.0)*x11485);
IkReal x11494=(gconst5*x11485);
evalcond[0]=(((r20*x11494))+(((-1.0)*r22*x11492))+(((-1.0)*x11487*x11493)));
evalcond[1]=(((r00*x11494))+(((-1.0)*x11491*x11493))+(((-1.0)*r02*x11492)));
evalcond[2]=((((-1.0)*x11488*x11492))+(((-1.0)*r12*x11493))+((x11486*x11490)));
evalcond[3]=((1.0)+(((-1.0)*x11490*x11493))+((x11485*x11488))+(((-1.0)*r12*x11492)));
evalcond[4]=(((x11486*x11487))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11492))+(((-1.0)*r22*x11493))+(((-1.0)*cj1*x11489)));
evalcond[5]=((((-1.0)*sj1*x11489))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x11493))+(((-1.0)*gconst5*r00*x11492))+((x11486*x11491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11495=((1.0)*gconst4);
CheckValue<IkReal> x11496 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x11495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11496.valid){
continue;
}
CheckValue<IkReal> x11497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11495))+(((-1.0)*gconst5*r21)))),-1);
if(!x11497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11496.value)+(((1.5707963267949)*(x11497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11498=IKsin(j4);
IkReal x11499=IKcos(j4);
IkReal x11500=(gconst4*r21);
IkReal x11501=(gconst5*r10);
IkReal x11502=((1.0)*cj2);
IkReal x11503=(gconst4*r11);
IkReal x11504=(gconst4*r01);
IkReal x11505=((1.0)*x11499);
IkReal x11506=((1.0)*x11498);
IkReal x11507=(gconst5*x11498);
evalcond[0]=((((-1.0)*x11500*x11506))+(((-1.0)*r22*x11505))+((r20*x11507)));
evalcond[1]=((((-1.0)*r02*x11505))+(((-1.0)*x11504*x11506))+((r00*x11507)));
evalcond[2]=((((-1.0)*x11501*x11505))+(((-1.0)*r12*x11506))+((x11499*x11503)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11505))+((x11498*x11501))+(((-1.0)*x11503*x11506)));
evalcond[4]=((((-1.0)*gconst5*r20*x11505))+((sj1*sj2))+(((-1.0)*r22*x11506))+((x11499*x11500))+(((-1.0)*cj1*x11502)));
evalcond[5]=((((-1.0)*sj1*x11502))+(((-1.0)*r02*x11506))+(((-1.0)*gconst5*r00*x11505))+(((-1.0)*cj1*sj2))+((x11499*x11504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11508 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11508.valid){
continue;
}
CheckValue<IkReal> x11509=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11508.value)+(((1.5707963267949)*(x11509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11510=IKsin(j4);
IkReal x11511=IKcos(j4);
IkReal x11512=(gconst4*r21);
IkReal x11513=(gconst5*r10);
IkReal x11514=((1.0)*cj2);
IkReal x11515=(gconst4*r11);
IkReal x11516=(gconst4*r01);
IkReal x11517=((1.0)*x11511);
IkReal x11518=((1.0)*x11510);
IkReal x11519=(gconst5*x11510);
evalcond[0]=(((r20*x11519))+(((-1.0)*r22*x11517))+(((-1.0)*x11512*x11518)));
evalcond[1]=((((-1.0)*r02*x11517))+(((-1.0)*x11516*x11518))+((r00*x11519)));
evalcond[2]=((((-1.0)*x11513*x11517))+(((-1.0)*r12*x11518))+((x11511*x11515)));
evalcond[3]=((1.0)+((x11510*x11513))+(((-1.0)*r12*x11517))+(((-1.0)*x11515*x11518)));
evalcond[4]=((((-1.0)*r22*x11518))+((sj1*sj2))+(((-1.0)*cj1*x11514))+(((-1.0)*gconst5*r20*x11517))+((x11511*x11512)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11514))+(((-1.0)*r02*x11518))+(((-1.0)*gconst5*r00*x11517))+((x11511*x11516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11522 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11522.valid){
continue;
}
IkReal x11520=((1.0)*(x11522.value));
IkReal x11521=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11520)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11520)));
IkReal gconst4=((1.0)*r21*x11521);
IkReal gconst5=((-1.0)*r20*x11521);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11525 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11525.valid){
continue;
}
IkReal x11523=((1.0)*(x11525.value));
IkReal x11524=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11523)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11523)));
IkReal gconst4=((1.0)*r21*x11524);
IkReal gconst5=((-1.0)*r20*x11524);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11528 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11528.valid){
continue;
}
IkReal x11526=((1.0)*(x11528.value));
IkReal x11527=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11526)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11526)));
IkReal gconst4=((1.0)*r21*x11527);
IkReal gconst5=((-1.0)*r20*x11527);
IkReal x11529=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11533=IKPowWithIntegerCheck(x11529,-1);
if(!x11533.valid){
continue;
}
IkReal x11530=x11533.value;
IkReal x11531=((1.0)*x11530);
IkReal x11532=((((-1.0)*x11531*(r10*r10)*(r20*r20)))+(((-1.0)*x11531*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x11530)));
j4eval[0]=x11532;
j4eval[1]=r12;
j4eval[2]=x11529;
j4eval[3]=IKsign(x11532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11534=(gconst5*r10);
IkReal x11535=(gconst4*r11);
CheckValue<IkReal> x11536=IKPowWithIntegerCheck(IKsign(((((2.0)*x11534*x11535))+(((-1.0)*(x11534*x11534)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11535*x11535))))),-1);
if(!x11536.valid){
continue;
}
CheckValue<IkReal> x11537 = IKatan2WithCheck(IkReal((x11534+(((-1.0)*x11535)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11536.value)))+(x11537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11538=IKcos(j4);
IkReal x11539=IKsin(j4);
IkReal x11540=((1.0)*cj2);
IkReal x11541=((1.0)*x11538);
IkReal x11542=(gconst5*x11539);
IkReal x11543=(gconst5*x11538);
IkReal x11544=((1.0)*gconst4*x11539);
evalcond[0]=(((r10*x11543))+((r12*x11539))+(((-1.0)*gconst4*r11*x11541)));
evalcond[1]=(((r20*x11542))+(((-1.0)*r21*x11544))+(((-1.0)*r22*x11541)));
evalcond[2]=((((-1.0)*r01*x11544))+((r00*x11542))+(((-1.0)*r02*x11541)));
evalcond[3]=((1.0)+((r10*x11542))+(((-1.0)*r12*x11541))+(((-1.0)*r11*x11544)));
evalcond[4]=((((-1.0)*gconst4*r21*x11541))+((r22*x11539))+((sj1*sj2))+((r20*x11543))+(((-1.0)*cj1*x11540)));
evalcond[5]=(((r00*x11543))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11540))+(((-1.0)*gconst4*r01*x11541))+((r02*x11539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11545=((1.0)*gconst4);
CheckValue<IkReal> x11546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11545))+(((-1.0)*gconst5*r21)))),-1);
if(!x11546.valid){
continue;
}
CheckValue<IkReal> x11547 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11545))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11546.value)))+(x11547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11548=IKcos(j4);
IkReal x11549=IKsin(j4);
IkReal x11550=((1.0)*cj2);
IkReal x11551=((1.0)*x11548);
IkReal x11552=(gconst5*x11549);
IkReal x11553=(gconst5*x11548);
IkReal x11554=((1.0)*gconst4*x11549);
evalcond[0]=((((-1.0)*gconst4*r11*x11551))+((r12*x11549))+((r10*x11553)));
evalcond[1]=((((-1.0)*r21*x11554))+(((-1.0)*r22*x11551))+((r20*x11552)));
evalcond[2]=((((-1.0)*r02*x11551))+((r00*x11552))+(((-1.0)*r01*x11554)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11551))+(((-1.0)*r11*x11554))+((r10*x11552)));
evalcond[4]=((((-1.0)*cj1*x11550))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11551))+((r22*x11549))+((r20*x11553)));
evalcond[5]=((((-1.0)*sj1*x11550))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r01*x11551))+((r00*x11553))+((r02*x11549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11555 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11555.valid){
continue;
}
CheckValue<IkReal> x11556=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11555.value)+(((1.5707963267949)*(x11556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11557=IKcos(j4);
IkReal x11558=IKsin(j4);
IkReal x11559=((1.0)*cj2);
IkReal x11560=((1.0)*x11557);
IkReal x11561=(gconst5*x11558);
IkReal x11562=(gconst5*x11557);
IkReal x11563=((1.0)*gconst4*x11558);
evalcond[0]=(((r12*x11558))+((r10*x11562))+(((-1.0)*gconst4*r11*x11560)));
evalcond[1]=(((r20*x11561))+(((-1.0)*r21*x11563))+(((-1.0)*r22*x11560)));
evalcond[2]=((((-1.0)*r01*x11563))+((r00*x11561))+(((-1.0)*r02*x11560)));
evalcond[3]=((1.0)+((r10*x11561))+(((-1.0)*r12*x11560))+(((-1.0)*r11*x11563)));
evalcond[4]=((((-1.0)*cj1*x11559))+(((-1.0)*gconst4*r21*x11560))+((r22*x11558))+((r20*x11562))+((sj1*sj2)));
evalcond[5]=((((-1.0)*gconst4*r01*x11560))+(((-1.0)*sj1*x11559))+((r02*x11558))+((r00*x11562))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11566 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11566.valid){
continue;
}
IkReal x11564=((1.0)*(x11566.value));
IkReal x11565=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11564)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11564)));
IkReal gconst4=((1.0)*r21*x11565);
IkReal gconst5=((-1.0)*r20*x11565);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11569 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11569.valid){
continue;
}
IkReal x11567=((1.0)*(x11569.value));
IkReal x11568=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11567)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11567)));
IkReal gconst4=((1.0)*r21*x11568);
IkReal gconst5=((-1.0)*r20*x11568);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
IkReal x11570=((1.0)*(x11572.value));
IkReal x11571=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11570)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11570)));
IkReal gconst4=((1.0)*r21*x11571);
IkReal gconst5=((-1.0)*r20*x11571);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11573=(gconst5*r10);
IkReal x11574=(gconst4*r11);
CheckValue<IkReal> x11575 = IKatan2WithCheck(IkReal((x11574+(((-1.0)*x11573)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11575.valid){
continue;
}
CheckValue<IkReal> x11576=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11573*x11573)+(((-2.0)*x11573*x11574))+(x11574*x11574))),-1);
if(!x11576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11575.value)+(((1.5707963267949)*(x11576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11577=IKsin(j4);
IkReal x11578=IKcos(j4);
IkReal x11579=(gconst4*r21);
IkReal x11580=(gconst5*r10);
IkReal x11581=((1.0)*sj1);
IkReal x11582=(gconst4*r11);
IkReal x11583=(gconst4*r01);
IkReal x11584=((1.0)*x11578);
IkReal x11585=((1.0)*x11577);
IkReal x11586=(gconst5*x11577);
evalcond[0]=((((-1.0)*x11579*x11585))+((r20*x11586))+(((-1.0)*r22*x11584)));
evalcond[1]=((((-1.0)*x11583*x11585))+(((-1.0)*r02*x11584))+((r00*x11586)));
evalcond[2]=(((x11578*x11582))+(((-1.0)*x11580*x11584))+(((-1.0)*r12*x11585)));
evalcond[3]=((1.0)+((x11577*x11580))+(((-1.0)*r12*x11584))+(((-1.0)*x11582*x11585)));
evalcond[4]=(((x11578*x11583))+(((-1.0)*r02*x11585))+(((-1.0)*gconst5*r00*x11584))+((cj1*cj2))+(((-1.0)*sj2*x11581)));
evalcond[5]=((((-1.0)*gconst5*r20*x11584))+(((-1.0)*cj1*sj2))+((x11578*x11579))+(((-1.0)*r22*x11585))+(((-1.0)*cj2*x11581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11587=((1.0)*gconst4);
CheckValue<IkReal> x11588=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11587)))),-1);
if(!x11588.valid){
continue;
}
CheckValue<IkReal> x11589 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11587))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11588.value)))+(x11589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11590=IKsin(j4);
IkReal x11591=IKcos(j4);
IkReal x11592=(gconst4*r21);
IkReal x11593=(gconst5*r10);
IkReal x11594=((1.0)*sj1);
IkReal x11595=(gconst4*r11);
IkReal x11596=(gconst4*r01);
IkReal x11597=((1.0)*x11591);
IkReal x11598=((1.0)*x11590);
IkReal x11599=(gconst5*x11590);
evalcond[0]=(((r20*x11599))+(((-1.0)*x11592*x11598))+(((-1.0)*r22*x11597)));
evalcond[1]=(((r00*x11599))+(((-1.0)*x11596*x11598))+(((-1.0)*r02*x11597)));
evalcond[2]=((((-1.0)*x11593*x11597))+((x11591*x11595))+(((-1.0)*r12*x11598)));
evalcond[3]=((1.0)+((x11590*x11593))+(((-1.0)*x11595*x11598))+(((-1.0)*r12*x11597)));
evalcond[4]=(((x11591*x11596))+(((-1.0)*sj2*x11594))+((cj1*cj2))+(((-1.0)*r02*x11598))+(((-1.0)*gconst5*r00*x11597)));
evalcond[5]=((((-1.0)*gconst5*r20*x11597))+(((-1.0)*cj2*x11594))+(((-1.0)*cj1*sj2))+((x11591*x11592))+(((-1.0)*r22*x11598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11600 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11600.valid){
continue;
}
CheckValue<IkReal> x11601=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11600.value)+(((1.5707963267949)*(x11601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11602=IKsin(j4);
IkReal x11603=IKcos(j4);
IkReal x11604=(gconst4*r21);
IkReal x11605=(gconst5*r10);
IkReal x11606=((1.0)*sj1);
IkReal x11607=(gconst4*r11);
IkReal x11608=(gconst4*r01);
IkReal x11609=((1.0)*x11603);
IkReal x11610=((1.0)*x11602);
IkReal x11611=(gconst5*x11602);
evalcond[0]=((((-1.0)*r22*x11609))+(((-1.0)*x11604*x11610))+((r20*x11611)));
evalcond[1]=((((-1.0)*r02*x11609))+(((-1.0)*x11608*x11610))+((r00*x11611)));
evalcond[2]=((((-1.0)*r12*x11610))+((x11603*x11607))+(((-1.0)*x11605*x11609)));
evalcond[3]=((1.0)+((x11602*x11605))+(((-1.0)*r12*x11609))+(((-1.0)*x11607*x11610)));
evalcond[4]=((((-1.0)*gconst5*r00*x11609))+(((-1.0)*sj2*x11606))+((x11603*x11608))+((cj1*cj2))+(((-1.0)*r02*x11610)));
evalcond[5]=(((x11603*x11604))+(((-1.0)*gconst5*r20*x11609))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x11610))+(((-1.0)*cj2*x11606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11614 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11614.valid){
continue;
}
IkReal x11612=((1.0)*(x11614.value));
IkReal x11613=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11612)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11612)));
IkReal gconst4=((1.0)*r21*x11613);
IkReal gconst5=((-1.0)*r20*x11613);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11617 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11617.valid){
continue;
}
IkReal x11615=((1.0)*(x11617.value));
IkReal x11616=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11615)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11615)));
IkReal gconst4=((1.0)*r21*x11616);
IkReal gconst5=((-1.0)*r20*x11616);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11620 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11620.valid){
continue;
}
IkReal x11618=((1.0)*(x11620.value));
IkReal x11619=x10542;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11618)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11618)));
IkReal gconst4=((1.0)*r21*x11619);
IkReal gconst5=((-1.0)*r20*x11619);
IkReal x11621=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11625=IKPowWithIntegerCheck(x11621,-1);
if(!x11625.valid){
continue;
}
IkReal x11622=x11625.value;
IkReal x11623=((1.0)*x11622);
IkReal x11624=((((-2.0)*r10*r11*r20*r21*x11622))+(((-1.0)*(r12*r12)))+(((-1.0)*x11623*(r11*r11)*(r21*r21)))+(((-1.0)*x11623*(r10*r10)*(r20*r20))));
j4eval[0]=x11624;
j4eval[1]=r12;
j4eval[2]=x11621;
j4eval[3]=IKsign(x11624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11626=(gconst5*r10);
IkReal x11627=(gconst4*r11);
CheckValue<IkReal> x11628 = IKatan2WithCheck(IkReal((x11626+(((-1.0)*x11627)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11628.valid){
continue;
}
CheckValue<IkReal> x11629=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11627*x11627)))+(((2.0)*x11626*x11627))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11626*x11626))))),-1);
if(!x11629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11628.value)+(((1.5707963267949)*(x11629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11630=IKcos(j4);
IkReal x11631=IKsin(j4);
IkReal x11632=((1.0)*sj1);
IkReal x11633=((1.0)*x11630);
IkReal x11634=(gconst5*x11631);
IkReal x11635=(gconst5*x11630);
IkReal x11636=((1.0)*gconst4*x11631);
evalcond[0]=(((r10*x11635))+((r12*x11631))+(((-1.0)*gconst4*r11*x11633)));
evalcond[1]=((((-1.0)*r22*x11633))+((r20*x11634))+(((-1.0)*r21*x11636)));
evalcond[2]=((((-1.0)*r02*x11633))+((r00*x11634))+(((-1.0)*r01*x11636)));
evalcond[3]=((1.0)+((r10*x11634))+(((-1.0)*r11*x11636))+(((-1.0)*r12*x11633)));
evalcond[4]=(((r02*x11631))+(((-1.0)*gconst4*r01*x11633))+((cj1*cj2))+((r00*x11635))+(((-1.0)*sj2*x11632)));
evalcond[5]=((((-1.0)*gconst4*r21*x11633))+((r22*x11631))+(((-1.0)*cj1*sj2))+((r20*x11635))+(((-1.0)*cj2*x11632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11637=((1.0)*gconst4);
CheckValue<IkReal> x11638=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11637))+(((-1.0)*gconst5*r21)))),-1);
if(!x11638.valid){
continue;
}
CheckValue<IkReal> x11639 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x11637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11638.value)))+(x11639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11640=IKcos(j4);
IkReal x11641=IKsin(j4);
IkReal x11642=((1.0)*sj1);
IkReal x11643=((1.0)*x11640);
IkReal x11644=(gconst5*x11641);
IkReal x11645=(gconst5*x11640);
IkReal x11646=((1.0)*gconst4*x11641);
evalcond[0]=(((r10*x11645))+((r12*x11641))+(((-1.0)*gconst4*r11*x11643)));
evalcond[1]=((((-1.0)*r22*x11643))+((r20*x11644))+(((-1.0)*r21*x11646)));
evalcond[2]=((((-1.0)*r01*x11646))+((r00*x11644))+(((-1.0)*r02*x11643)));
evalcond[3]=((1.0)+(((-1.0)*r11*x11646))+(((-1.0)*r12*x11643))+((r10*x11644)));
evalcond[4]=(((r02*x11641))+(((-1.0)*gconst4*r01*x11643))+((cj1*cj2))+((r00*x11645))+(((-1.0)*sj2*x11642)));
evalcond[5]=((((-1.0)*gconst4*r21*x11643))+((r22*x11641))+(((-1.0)*cj1*sj2))+((r20*x11645))+(((-1.0)*cj2*x11642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11647 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11647.valid){
continue;
}
CheckValue<IkReal> x11648=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11647.value)+(((1.5707963267949)*(x11648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11649=IKcos(j4);
IkReal x11650=IKsin(j4);
IkReal x11651=((1.0)*sj1);
IkReal x11652=((1.0)*x11649);
IkReal x11653=(gconst5*x11650);
IkReal x11654=(gconst5*x11649);
IkReal x11655=((1.0)*gconst4*x11650);
evalcond[0]=(((r12*x11650))+((r10*x11654))+(((-1.0)*gconst4*r11*x11652)));
evalcond[1]=((((-1.0)*r22*x11652))+((r20*x11653))+(((-1.0)*r21*x11655)));
evalcond[2]=((((-1.0)*r02*x11652))+(((-1.0)*r01*x11655))+((r00*x11653)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11652))+((r10*x11653))+(((-1.0)*r11*x11655)));
evalcond[4]=(((r02*x11650))+((cj1*cj2))+(((-1.0)*gconst4*r01*x11652))+(((-1.0)*sj2*x11651))+((r00*x11654)));
evalcond[5]=(((r22*x11650))+(((-1.0)*gconst4*r21*x11652))+(((-1.0)*cj1*sj2))+((r20*x11654))+(((-1.0)*cj2*x11651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11658 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11658.valid){
continue;
}
IkReal x11656=((1.0)*(x11658.value));
IkReal x11657=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11656)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11657);
rxp1_1=(px*r21);
rxp1_2=(r11*x11657);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11656)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11659=((1.0)*r11*r21);
IkReal x11660=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x11659))+(((-1.0)*x11660)));
j4eval[1]=(((sj3*x11660))+((sj3*x11659)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11663 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11663.valid){
continue;
}
IkReal x11661=((1.0)*(x11663.value));
IkReal x11662=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11661)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11662);
rxp1_1=(px*r21);
rxp1_2=(r11*x11662);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11661)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11664=((1.0)*cj3);
IkReal x11665=(r10*r20);
IkReal x11666=(r11*r21);
j4eval[0]=((((-1.0)*x11666))+(((-1.0)*x11665)));
j4eval[1]=(((x11664*x11665))+((x11664*x11666)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11669 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11669.valid){
continue;
}
IkReal x11667=((1.0)*(x11669.value));
IkReal x11668=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11667)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11668);
rxp1_1=(px*r21);
rxp1_2=(r11*x11668);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11667)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11670=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r11*r21*x11670))+((r10*r20*x11670)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11671=((1.0)*r10);
CheckValue<IkReal> x11672=IKPowWithIntegerCheck(cj3,-1);
if(!x11672.valid){
continue;
}
CheckValue<IkReal> x11673=IKPowWithIntegerCheck(r02,-1);
if(!x11673.valid){
continue;
}
CheckValue<IkReal> x11674=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x11671))),-1);
if(!x11674.valid){
continue;
}
if( IKabs(((x11672.value)*(x11673.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11674.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x11671)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11672.value)*(x11673.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x11674.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x11671))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11672.value)*(x11673.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x11674.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x11671))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11675=IKsin(j4);
IkReal x11676=IKcos(j4);
IkReal x11677=(gconst5*sj3);
IkReal x11678=((1.0)*r21);
IkReal x11679=(cj3*gconst5);
IkReal x11680=(sj1*sj2);
IkReal x11681=((1.0)*r11);
IkReal x11682=((1.0)*cj2);
IkReal x11683=(cj3*gconst4);
IkReal x11684=(gconst4*sj3);
IkReal x11685=((1.0)*cj1*sj2);
IkReal x11686=(sj1*x11682);
IkReal x11687=((1.0)*x11676);
IkReal x11688=(gconst4*x11675);
IkReal x11689=(gconst5*x11675);
IkReal x11690=(x11676*x11684);
IkReal x11691=((1.0)*r02*x11675);
IkReal x11692=(x11686+x11685);
evalcond[0]=((-1.0)*r02*x11676);
evalcond[1]=((((-1.0)*x11678*x11688))+((r20*x11689)));
evalcond[2]=((1.0)+(((-1.0)*x11681*x11688))+((r10*x11689)));
evalcond[3]=((((-1.0)*x11680))+(((-1.0)*cj3*x11691))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj3*x11691))+(((-1.0)*x11692)));
evalcond[5]=(((r11*x11676*x11683))+(((-1.0)*r10*x11679*x11687))+((r10*x11684))+((r11*x11677)));
evalcond[6]=((((-1.0)*r10*x11677*x11687))+((r11*x11690))+(((-1.0)*r10*x11683))+(((-1.0)*x11679*x11681)));
evalcond[7]=(((r21*x11676*x11683))+((r21*x11677))+(((-1.0)*x11692))+((r20*x11684))+(((-1.0)*r20*x11679*x11687)));
evalcond[8]=((((-1.0)*x11678*x11679))+x11680+(((-1.0)*cj1*x11682))+(((-1.0)*r20*x11683))+(((-1.0)*r20*x11677*x11687))+((r21*x11690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11693=(gconst5*r10);
IkReal x11694=((1.0)*sj3);
IkReal x11695=(gconst4*r11);
CheckValue<IkReal> x11696=IKPowWithIntegerCheck((x11693+(((-1.0)*x11695))),-1);
if(!x11696.valid){
continue;
}
CheckValue<IkReal> x11697=IKPowWithIntegerCheck(((((-1.0)*cj3*x11693))+((cj3*x11695))),-1);
if(!x11697.valid){
continue;
}
if( IKabs(((-1.0)*(x11696.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11697.value)*(((((-1.0)*gconst5*r11*x11694))+(((-1.0)*gconst4*r10*x11694)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11696.value)))+IKsqr(((x11697.value)*(((((-1.0)*gconst5*r11*x11694))+(((-1.0)*gconst4*r10*x11694))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11696.value)), ((x11697.value)*(((((-1.0)*gconst5*r11*x11694))+(((-1.0)*gconst4*r10*x11694))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11698=IKsin(j4);
IkReal x11699=IKcos(j4);
IkReal x11700=(gconst5*sj3);
IkReal x11701=((1.0)*r21);
IkReal x11702=(cj3*gconst5);
IkReal x11703=(sj1*sj2);
IkReal x11704=((1.0)*r11);
IkReal x11705=((1.0)*cj2);
IkReal x11706=(cj3*gconst4);
IkReal x11707=(gconst4*sj3);
IkReal x11708=((1.0)*cj1*sj2);
IkReal x11709=(sj1*x11705);
IkReal x11710=((1.0)*x11699);
IkReal x11711=(gconst4*x11698);
IkReal x11712=(gconst5*x11698);
IkReal x11713=(x11699*x11707);
IkReal x11714=((1.0)*r02*x11698);
IkReal x11715=(x11708+x11709);
evalcond[0]=((-1.0)*r02*x11699);
evalcond[1]=(((r20*x11712))+(((-1.0)*x11701*x11711)));
evalcond[2]=((1.0)+(((-1.0)*x11704*x11711))+((r10*x11712)));
evalcond[3]=((((-1.0)*cj3*x11714))+(((-1.0)*x11703))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x11715))+(((-1.0)*sj3*x11714)));
evalcond[5]=(((r11*x11699*x11706))+((r10*x11707))+((r11*x11700))+(((-1.0)*r10*x11702*x11710)));
evalcond[6]=((((-1.0)*x11702*x11704))+(((-1.0)*r10*x11706))+(((-1.0)*r10*x11700*x11710))+((r11*x11713)));
evalcond[7]=((((-1.0)*x11715))+(((-1.0)*r20*x11702*x11710))+((r21*x11700))+((r21*x11699*x11706))+((r20*x11707)));
evalcond[8]=(x11703+(((-1.0)*r20*x11706))+(((-1.0)*x11701*x11702))+(((-1.0)*r20*x11700*x11710))+((r21*x11713))+(((-1.0)*cj1*x11705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11716=(gconst5*r10);
IkReal x11717=(gconst4*r11);
CheckValue<IkReal> x11718=IKPowWithIntegerCheck((x11716+(((-1.0)*x11717))),-1);
if(!x11718.valid){
continue;
}
CheckValue<IkReal> x11719=IKPowWithIntegerCheck((((sj3*x11717))+(((-1.0)*sj3*x11716))),-1);
if(!x11719.valid){
continue;
}
if( IKabs(((-1.0)*(x11718.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11719.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11718.value)))+IKsqr(((x11719.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11718.value)), ((x11719.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11720=IKsin(j4);
IkReal x11721=IKcos(j4);
IkReal x11722=(gconst5*sj3);
IkReal x11723=((1.0)*r21);
IkReal x11724=(cj3*gconst5);
IkReal x11725=(sj1*sj2);
IkReal x11726=((1.0)*r11);
IkReal x11727=((1.0)*cj2);
IkReal x11728=(cj3*gconst4);
IkReal x11729=(gconst4*sj3);
IkReal x11730=((1.0)*cj1*sj2);
IkReal x11731=(sj1*x11727);
IkReal x11732=((1.0)*x11721);
IkReal x11733=(gconst4*x11720);
IkReal x11734=(gconst5*x11720);
IkReal x11735=(x11721*x11729);
IkReal x11736=((1.0)*r02*x11720);
IkReal x11737=(x11731+x11730);
evalcond[0]=((-1.0)*r02*x11721);
evalcond[1]=(((r20*x11734))+(((-1.0)*x11723*x11733)));
evalcond[2]=((1.0)+(((-1.0)*x11726*x11733))+((r10*x11734)));
evalcond[3]=((((-1.0)*cj3*x11736))+(((-1.0)*x11725))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x11737))+(((-1.0)*sj3*x11736)));
evalcond[5]=(((r10*x11729))+((r11*x11722))+(((-1.0)*r10*x11724*x11732))+((r11*x11721*x11728)));
evalcond[6]=(((r11*x11735))+(((-1.0)*x11724*x11726))+(((-1.0)*r10*x11728))+(((-1.0)*r10*x11722*x11732)));
evalcond[7]=((((-1.0)*r20*x11724*x11732))+((r21*x11721*x11728))+(((-1.0)*x11737))+((r20*x11729))+((r21*x11722)));
evalcond[8]=(x11725+(((-1.0)*r20*x11728))+(((-1.0)*x11723*x11724))+(((-1.0)*cj1*x11727))+((r21*x11735))+(((-1.0)*r20*x11722*x11732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11738=gconst5*gconst5;
IkReal x11739=gconst4*gconst4;
IkReal x11740=(cj3*r10);
IkReal x11741=(r11*sj3);
IkReal x11742=(r10*sj3);
IkReal x11743=(cj3*r11);
IkReal x11744=(r21*x11739);
IkReal x11745=(gconst4*gconst5*r20);
IkReal x11746=(r20*x11738);
IkReal x11747=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x11748=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11743*x11745))+(((-1.0)*x11740*x11747))+((x11743*x11744))+((x11740*x11746)))),-1);
if(!x11748.valid){
continue;
}
CheckValue<IkReal> x11749 = IKatan2WithCheck(IkReal((((gconst5*r22*x11741))+((gconst4*r22*x11742)))),IkReal((((x11741*x11746))+(((-1.0)*x11741*x11747))+((x11742*x11745))+(((-1.0)*x11742*x11744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11748.value)))+(x11749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11750=IKsin(j4);
IkReal x11751=IKcos(j4);
IkReal x11752=((1.0)*sj2);
IkReal x11753=(gconst5*sj3);
IkReal x11754=(gconst4*r21);
IkReal x11755=(cj3*r10);
IkReal x11756=(gconst4*r11);
IkReal x11757=((1.0)*cj2);
IkReal x11758=((1.0)*gconst4);
IkReal x11759=(cj3*r00);
IkReal x11760=(gconst4*r01);
IkReal x11761=(gconst4*sj3);
IkReal x11762=(cj3*r20);
IkReal x11763=(cj1*x11752);
IkReal x11764=(sj1*x11757);
IkReal x11765=((1.0)*x11751);
IkReal x11766=((1.0)*x11750);
IkReal x11767=(sj3*x11751);
IkReal x11768=(gconst5*x11750);
IkReal x11769=(cj3*x11751);
IkReal x11770=((1.0)*cj3*gconst5);
IkReal x11771=(x11763+x11764);
evalcond[0]=(((r20*x11768))+(((-1.0)*x11754*x11766))+(((-1.0)*r22*x11765)));
evalcond[1]=((((-1.0)*r01*x11750*x11758))+(((-1.0)*r02*x11765))+((r00*x11768)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11765))+((r10*x11768))+(((-1.0)*x11756*x11766)));
evalcond[3]=(((r11*x11753))+((r10*x11761))+(((-1.0)*cj3*r12*x11766))+(((-1.0)*gconst5*x11755*x11765))+((x11756*x11769)));
evalcond[4]=((((-1.0)*x11755*x11758))+(((-1.0)*r11*x11770))+(((-1.0)*r10*x11753*x11765))+(((-1.0)*r12*sj3*x11766))+((x11756*x11767)));
evalcond[5]=((((-1.0)*gconst5*x11759*x11765))+(((-1.0)*cj3*r02*x11766))+(((-1.0)*sj1*x11752))+((cj1*cj2))+((r00*x11761))+((r01*x11753))+((x11760*x11769)));
evalcond[6]=(((r20*x11761))+(((-1.0)*gconst5*x11762*x11765))+((x11754*x11769))+(((-1.0)*cj3*r22*x11766))+(((-1.0)*x11771))+((r21*x11753)));
evalcond[7]=((((-1.0)*r22*sj3*x11766))+(((-1.0)*cj1*x11757))+((sj1*sj2))+(((-1.0)*r20*x11753*x11765))+(((-1.0)*x11758*x11762))+((x11754*x11767))+(((-1.0)*r21*x11770)));
evalcond[8]=((((-1.0)*r00*x11753*x11765))+(((-1.0)*r02*sj3*x11766))+(((-1.0)*r01*x11770))+(((-1.0)*x11758*x11759))+(((-1.0)*x11771))+((x11760*x11767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11772=((1.0)*gconst4);
CheckValue<IkReal> x11773 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x11772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11773.valid){
continue;
}
CheckValue<IkReal> x11774=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11772)))),-1);
if(!x11774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11773.value)+(((1.5707963267949)*(x11774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11775=IKsin(j4);
IkReal x11776=IKcos(j4);
IkReal x11777=((1.0)*sj2);
IkReal x11778=(gconst5*sj3);
IkReal x11779=(gconst4*r21);
IkReal x11780=(cj3*r10);
IkReal x11781=(gconst4*r11);
IkReal x11782=((1.0)*cj2);
IkReal x11783=((1.0)*gconst4);
IkReal x11784=(cj3*r00);
IkReal x11785=(gconst4*r01);
IkReal x11786=(gconst4*sj3);
IkReal x11787=(cj3*r20);
IkReal x11788=(cj1*x11777);
IkReal x11789=(sj1*x11782);
IkReal x11790=((1.0)*x11776);
IkReal x11791=((1.0)*x11775);
IkReal x11792=(sj3*x11776);
IkReal x11793=(gconst5*x11775);
IkReal x11794=(cj3*x11776);
IkReal x11795=((1.0)*cj3*gconst5);
IkReal x11796=(x11788+x11789);
evalcond[0]=(((r20*x11793))+(((-1.0)*x11779*x11791))+(((-1.0)*r22*x11790)));
evalcond[1]=((((-1.0)*r02*x11790))+((r00*x11793))+(((-1.0)*r01*x11775*x11783)));
evalcond[2]=((1.0)+((r10*x11793))+(((-1.0)*x11781*x11791))+(((-1.0)*r12*x11790)));
evalcond[3]=((((-1.0)*gconst5*x11780*x11790))+((r10*x11786))+((r11*x11778))+(((-1.0)*cj3*r12*x11791))+((x11781*x11794)));
evalcond[4]=((((-1.0)*r11*x11795))+(((-1.0)*x11780*x11783))+(((-1.0)*r12*sj3*x11791))+(((-1.0)*r10*x11778*x11790))+((x11781*x11792)));
evalcond[5]=(((x11785*x11794))+(((-1.0)*cj3*r02*x11791))+(((-1.0)*sj1*x11777))+(((-1.0)*gconst5*x11784*x11790))+((r01*x11778))+((cj1*cj2))+((r00*x11786)));
evalcond[6]=(((x11779*x11794))+((r20*x11786))+(((-1.0)*cj3*r22*x11791))+(((-1.0)*gconst5*x11787*x11790))+((r21*x11778))+(((-1.0)*x11796)));
evalcond[7]=(((x11779*x11792))+(((-1.0)*r20*x11778*x11790))+(((-1.0)*cj1*x11782))+((sj1*sj2))+(((-1.0)*r22*sj3*x11791))+(((-1.0)*x11783*x11787))+(((-1.0)*r21*x11795)));
evalcond[8]=(((x11785*x11792))+(((-1.0)*r00*x11778*x11790))+(((-1.0)*r02*sj3*x11791))+(((-1.0)*r01*x11795))+(((-1.0)*x11783*x11784))+(((-1.0)*x11796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11797 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11797.valid){
continue;
}
CheckValue<IkReal> x11798=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11797.value)+(((1.5707963267949)*(x11798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11799=IKsin(j4);
IkReal x11800=IKcos(j4);
IkReal x11801=((1.0)*sj2);
IkReal x11802=(gconst5*sj3);
IkReal x11803=(gconst4*r21);
IkReal x11804=(cj3*r10);
IkReal x11805=(gconst4*r11);
IkReal x11806=((1.0)*cj2);
IkReal x11807=((1.0)*gconst4);
IkReal x11808=(cj3*r00);
IkReal x11809=(gconst4*r01);
IkReal x11810=(gconst4*sj3);
IkReal x11811=(cj3*r20);
IkReal x11812=(cj1*x11801);
IkReal x11813=(sj1*x11806);
IkReal x11814=((1.0)*x11800);
IkReal x11815=((1.0)*x11799);
IkReal x11816=(sj3*x11800);
IkReal x11817=(gconst5*x11799);
IkReal x11818=(cj3*x11800);
IkReal x11819=((1.0)*cj3*gconst5);
IkReal x11820=(x11812+x11813);
evalcond[0]=((((-1.0)*r22*x11814))+((r20*x11817))+(((-1.0)*x11803*x11815)));
evalcond[1]=((((-1.0)*r01*x11799*x11807))+((r00*x11817))+(((-1.0)*r02*x11814)));
evalcond[2]=((1.0)+(((-1.0)*x11805*x11815))+(((-1.0)*r12*x11814))+((r10*x11817)));
evalcond[3]=(((x11805*x11818))+(((-1.0)*cj3*r12*x11815))+((r11*x11802))+((r10*x11810))+(((-1.0)*gconst5*x11804*x11814)));
evalcond[4]=((((-1.0)*r10*x11802*x11814))+(((-1.0)*r11*x11819))+((x11805*x11816))+(((-1.0)*r12*sj3*x11815))+(((-1.0)*x11804*x11807)));
evalcond[5]=((((-1.0)*gconst5*x11808*x11814))+((r00*x11810))+(((-1.0)*sj1*x11801))+((x11809*x11818))+((cj1*cj2))+(((-1.0)*cj3*r02*x11815))+((r01*x11802)));
evalcond[6]=(((r21*x11802))+(((-1.0)*gconst5*x11811*x11814))+(((-1.0)*x11820))+((x11803*x11818))+((r20*x11810))+(((-1.0)*cj3*r22*x11815)));
evalcond[7]=((((-1.0)*r21*x11819))+(((-1.0)*r22*sj3*x11815))+(((-1.0)*cj1*x11806))+(((-1.0)*r20*x11802*x11814))+((sj1*sj2))+((x11803*x11816))+(((-1.0)*x11807*x11811)));
evalcond[8]=((((-1.0)*r01*x11819))+(((-1.0)*x11807*x11808))+((x11809*x11816))+(((-1.0)*r00*x11802*x11814))+(((-1.0)*x11820))+(((-1.0)*r02*sj3*x11815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11823 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11823.valid){
continue;
}
IkReal x11821=((1.0)*(x11823.value));
IkReal x11822=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11821)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11822);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11821)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11822;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11826 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11826.valid){
continue;
}
IkReal x11824=((1.0)*(x11826.value));
IkReal x11825=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11824)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11825);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11824)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11825;
IkReal x11827=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=(((x11827*(r21*r21)))+(((-1.0)*x11827*(r00*r00)))+x11827);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11830 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11830.valid){
continue;
}
IkReal x11828=((1.0)*(x11830.value));
IkReal x11829=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11828)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11829);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11828)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11829;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
IkReal x11831=((1.0)*(x11833.value));
IkReal x11832=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11831)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11832);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11831)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11832;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11836 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11836.valid){
continue;
}
IkReal x11834=((1.0)*(x11836.value));
IkReal x11835=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11834)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11835);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11834)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11835;
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11839 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11839.valid){
continue;
}
IkReal x11837=((1.0)*(x11839.value));
IkReal x11838=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11837)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11838);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11837)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11838;
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11842=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11842.valid){
continue;
}
IkReal x11840=x11842.value;
IkReal x11841=(cj0*x11840);
cj4array[0]=(((cj1*cj2*x11841))+(((-1.0)*sj1*sj2*x11841)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11843=IKsin(j4);
IkReal x11844=IKcos(j4);
IkReal x11845=(gconst4*r21);
IkReal x11846=(gconst5*x11843);
IkReal x11847=((1.0)*x11843);
IkReal x11848=((1.0)*x11844);
evalcond[0]=((-1.0)*r12*x11843);
evalcond[1]=((((-1.0)*r12*x11848))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11845*x11847))+((r20*x11846)));
evalcond[3]=(((r00*x11846))+(((-1.0)*gconst4*r01*x11847)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x11844*x11845))+(((-1.0)*gconst5*r20*x11848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11850=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11850.valid){
continue;
}
IkReal x11849=x11850.value;
cj4array[0]=(((cj2*sj1*x11849))+((cj1*sj2*x11849)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11851=IKsin(j4);
IkReal x11852=IKcos(j4);
IkReal x11853=((1.0)*cj0);
IkReal x11854=(gconst5*x11851);
IkReal x11855=((1.0)*x11852);
IkReal x11856=((1.0)*gconst4*x11851);
evalcond[0]=((-1.0)*r12*x11851);
evalcond[1]=((((-1.0)*x11853))+(((-1.0)*r12*x11855)));
evalcond[2]=(((r20*x11854))+(((-1.0)*r21*x11856)));
evalcond[3]=(((r00*x11854))+(((-1.0)*r01*x11856)));
evalcond[4]=((((-1.0)*cj1*cj2*x11853))+(((-1.0)*gconst5*r00*x11855))+((cj0*sj1*sj2))+((gconst4*r01*x11852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11857=IKPowWithIntegerCheck(r12,-1);
if(!x11857.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11857.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11858=IKsin(j4);
IkReal x11859=IKcos(j4);
IkReal x11860=((1.0)*cj1);
IkReal x11861=(gconst4*r21);
IkReal x11862=(gconst4*r01);
IkReal x11863=(gconst5*x11858);
IkReal x11864=((1.0)*x11858);
IkReal x11865=((1.0)*gconst5*x11859);
evalcond[0]=((-1.0)*r12*x11858);
evalcond[1]=((((-1.0)*x11861*x11864))+((r20*x11863)));
evalcond[2]=((((-1.0)*x11862*x11864))+((r00*x11863)));
evalcond[3]=((((-1.0)*r20*x11865))+(((-1.0)*sj2*x11860))+(((-1.0)*cj2*sj1))+((x11859*x11861)));
evalcond[4]=((((-1.0)*cj0*cj2*x11860))+((x11859*x11862))+(((-1.0)*r00*x11865))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11868 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11868.valid){
continue;
}
IkReal x11866=((1.0)*(x11868.value));
IkReal x11867=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11866)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11867);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11866)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11867;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11871 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11871.valid){
continue;
}
IkReal x11869=((1.0)*(x11871.value));
IkReal x11870=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11869)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11870);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11869)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11870;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11874 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11874.valid){
continue;
}
IkReal x11872=((1.0)*(x11874.value));
IkReal x11873=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11872)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11873);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11872)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11873;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11877=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11877.valid){
continue;
}
IkReal x11875=x11877.value;
IkReal x11876=(cj0*x11875);
cj4array[0]=(((cj1*cj2*x11876))+(((-1.0)*sj1*sj2*x11876)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11878=IKsin(j4);
IkReal x11879=IKcos(j4);
IkReal x11880=(gconst5*r20);
IkReal x11881=((1.0)*gconst4*r21);
evalcond[0]=(r12*x11878);
evalcond[1]=((((-1.0)*r12*x11879))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11878*x11881))+((x11878*x11880)));
evalcond[3]=((((-1.0)*gconst4*r01*x11878))+((gconst5*r00*x11878)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x11879*x11881))+((x11879*x11880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11883=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11883.valid){
continue;
}
IkReal x11882=x11883.value;
cj4array[0]=(((cj2*sj1*x11882))+((cj1*sj2*x11882)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11884=IKsin(j4);
IkReal x11885=IKcos(j4);
IkReal x11886=((1.0)*cj0);
IkReal x11887=((1.0)*gconst4);
IkReal x11888=(gconst5*x11884);
evalcond[0]=(r12*x11884);
evalcond[1]=((((-1.0)*x11886))+(((-1.0)*r12*x11885)));
evalcond[2]=((((-1.0)*r21*x11884*x11887))+((r20*x11888)));
evalcond[3]=((((-1.0)*r01*x11884*x11887))+((r00*x11888)));
evalcond[4]=(((gconst5*r00*x11885))+(((-1.0)*cj1*cj2*x11886))+(((-1.0)*r01*x11885*x11887))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11889=IKPowWithIntegerCheck(r12,-1);
if(!x11889.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11889.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11890=IKsin(j4);
IkReal x11891=IKcos(j4);
IkReal x11892=(gconst5*r20);
IkReal x11893=((1.0)*cj1);
IkReal x11894=((1.0)*gconst4);
IkReal x11895=(gconst5*r00);
evalcond[0]=(r12*x11890);
evalcond[1]=((((-1.0)*r21*x11890*x11894))+((x11890*x11892)));
evalcond[2]=(((x11890*x11895))+(((-1.0)*r01*x11890*x11894)));
evalcond[3]=((((-1.0)*r21*x11891*x11894))+(((-1.0)*cj2*sj1))+((x11891*x11892))+(((-1.0)*sj2*x11893)));
evalcond[4]=((((-1.0)*r01*x11891*x11894))+((x11891*x11895))+((cj0*sj1*sj2))+(((-1.0)*cj0*cj2*x11893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11898 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11898.valid){
continue;
}
IkReal x11896=((1.0)*(x11898.value));
IkReal x11897=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11896)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11897);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11896)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11897;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11901 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11901.valid){
continue;
}
IkReal x11899=((1.0)*(x11901.value));
IkReal x11900=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11899)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11900);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11899)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11900;
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11904 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11904.valid){
continue;
}
IkReal x11902=((1.0)*(x11904.value));
IkReal x11903=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11902)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11903);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11902)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11903;
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11907=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11907.valid){
continue;
}
IkReal x11905=x11907.value;
IkReal x11906=((1.0)*cj0*x11905);
cj4array[0]=((((-1.0)*cj2*sj1*x11906))+(((-1.0)*cj1*sj2*x11906)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11908=IKsin(j4);
IkReal x11909=IKcos(j4);
IkReal x11910=(gconst4*r21);
IkReal x11911=(gconst5*x11908);
IkReal x11912=((1.0)*x11908);
IkReal x11913=((1.0)*x11909);
evalcond[0]=((-1.0)*r12*x11908);
evalcond[1]=((((-1.0)*r12*x11913))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11910*x11912))+((r20*x11911)));
evalcond[3]=(((r00*x11911))+(((-1.0)*gconst4*r01*x11912)));
evalcond[4]=(((x11909*x11910))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11915=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11915.valid){
continue;
}
IkReal x11914=x11915.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11914))+((cj1*cj2*x11914)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11916=IKsin(j4);
IkReal x11917=IKcos(j4);
IkReal x11918=(gconst5*x11916);
IkReal x11919=((1.0)*x11917);
IkReal x11920=((1.0)*gconst4*x11916);
evalcond[0]=((-1.0)*r12*x11916);
evalcond[1]=((((-1.0)*r12*x11919))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x11918))+(((-1.0)*r21*x11920)));
evalcond[3]=(((r00*x11918))+(((-1.0)*r01*x11920)));
evalcond[4]=((((-1.0)*gconst5*r00*x11919))+((cj0*cj2*sj1))+((gconst4*r01*x11917))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11921=IKPowWithIntegerCheck(r12,-1);
if(!x11921.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11921.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11922=IKsin(j4);
IkReal x11923=IKcos(j4);
IkReal x11924=(gconst4*r21);
IkReal x11925=(gconst4*r01);
IkReal x11926=(gconst5*x11922);
IkReal x11927=((1.0)*x11922);
IkReal x11928=((1.0)*gconst5*x11923);
evalcond[0]=((-1.0)*r12*x11922);
evalcond[1]=(((r20*x11926))+(((-1.0)*x11924*x11927)));
evalcond[2]=((((-1.0)*x11925*x11927))+((r00*x11926)));
evalcond[3]=((((-1.0)*r20*x11928))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11923*x11924)));
evalcond[4]=((((-1.0)*r00*x11928))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x11923*x11925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11931 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11931.valid){
continue;
}
IkReal x11929=((1.0)*(x11931.value));
IkReal x11930=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11929)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11930);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11929)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11930;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11934 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11934.valid){
continue;
}
IkReal x11932=((1.0)*(x11934.value));
IkReal x11933=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11932)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11933);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11932)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11933;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11937 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11937.valid){
continue;
}
IkReal x11935=((1.0)*(x11937.value));
IkReal x11936=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11935)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11936);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11935)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11936;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11940=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11940.valid){
continue;
}
IkReal x11938=x11940.value;
IkReal x11939=((1.0)*cj0*x11938);
cj4array[0]=((((-1.0)*cj2*sj1*x11939))+(((-1.0)*cj1*sj2*x11939)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11941=IKsin(j4);
IkReal x11942=IKcos(j4);
IkReal x11943=(gconst5*r20);
IkReal x11944=((1.0)*gconst4*r21);
evalcond[0]=(r12*x11941);
evalcond[1]=((((-1.0)*r12*x11942))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11941*x11944))+((x11941*x11943)));
evalcond[3]=((((-1.0)*gconst4*r01*x11941))+((gconst5*r00*x11941)));
evalcond[4]=((((-1.0)*x11942*x11944))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11942*x11943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11946=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11946.valid){
continue;
}
IkReal x11945=x11946.value;
cj4array[0]=(((cj1*cj2*x11945))+(((-1.0)*sj1*sj2*x11945)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11947=IKsin(j4);
IkReal x11948=IKcos(j4);
IkReal x11949=((1.0)*gconst4);
IkReal x11950=(gconst5*x11947);
evalcond[0]=(r12*x11947);
evalcond[1]=((((-1.0)*r12*x11948))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x11947*x11949))+((r20*x11950)));
evalcond[3]=((((-1.0)*r01*x11947*x11949))+((r00*x11950)));
evalcond[4]=(((cj0*cj2*sj1))+((gconst5*r00*x11948))+((cj0*cj1*sj2))+(((-1.0)*r01*x11948*x11949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11951=IKPowWithIntegerCheck(r12,-1);
if(!x11951.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11951.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11952=IKsin(j4);
IkReal x11953=IKcos(j4);
IkReal x11954=(gconst5*r20);
IkReal x11955=((1.0)*gconst4);
IkReal x11956=(gconst5*r00);
evalcond[0]=(r12*x11952);
evalcond[1]=((((-1.0)*r21*x11952*x11955))+((x11952*x11954)));
evalcond[2]=((((-1.0)*r01*x11952*x11955))+((x11952*x11956)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11953*x11954))+(((-1.0)*r21*x11953*x11955)));
evalcond[4]=(((x11953*x11956))+((cj0*cj2*sj1))+(((-1.0)*r01*x11953*x11955))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11958=IKPowWithIntegerCheck(r12,-1);
if(!x11958.valid){
continue;
}
IkReal x11957=x11958.value;
CheckValue<IkReal> x11959=IKPowWithIntegerCheck(sj3,-1);
if(!x11959.valid){
continue;
}
if( IKabs((x11957*(x11959.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11957)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11957*(x11959.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11957))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11957*(x11959.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11957));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11960=IKsin(j4);
IkReal x11961=IKcos(j4);
IkReal x11962=((1.0)*sj3);
IkReal x11963=((1.0)*r21);
IkReal x11964=(cj3*gconst5);
IkReal x11965=(cj0*sj2);
IkReal x11966=(gconst5*r20);
IkReal x11967=(cj2*sj0);
IkReal x11968=(sj1*sj2);
IkReal x11969=((1.0)*cj1);
IkReal x11970=(cj3*gconst4);
IkReal x11971=((1.0)*r20);
IkReal x11972=((1.0)*r01);
IkReal x11973=(cj0*cj2);
IkReal x11974=(gconst5*r00);
IkReal x11975=(gconst5*sj3);
IkReal x11976=(gconst4*sj3);
IkReal x11977=(r12*x11960);
IkReal x11978=(gconst4*x11960);
IkReal x11979=((1.0)*x11961);
IkReal x11980=(x11961*x11976);
evalcond[0]=((((-1.0)*r12*x11979))+(((-1.0)*cj0)));
evalcond[1]=(((x11960*x11966))+(((-1.0)*x11963*x11978)));
evalcond[2]=(sj0+((x11960*x11974))+(((-1.0)*x11972*x11978)));
evalcond[3]=(((cj1*sj0*sj2))+((sj1*x11967))+(((-1.0)*x11962*x11977)));
evalcond[4]=((((-1.0)*x11967*x11969))+(((-1.0)*cj3*x11977))+((sj0*x11968)));
evalcond[5]=((((-1.0)*x11961*x11964*x11971))+(((-1.0)*sj2*x11969))+(((-1.0)*cj2*sj1))+((r20*x11976))+((r21*x11961*x11970))+((r21*x11975)));
evalcond[6]=(x11968+((r21*x11980))+(((-1.0)*x11970*x11971))+(((-1.0)*cj2*x11969))+(((-1.0)*x11961*x11962*x11966))+(((-1.0)*x11963*x11964)));
evalcond[7]=(((r00*x11976))+((r01*x11975))+((r01*x11961*x11970))+(((-1.0)*x11969*x11973))+(((-1.0)*r00*x11964*x11979))+((sj1*x11965)));
evalcond[8]=((((-1.0)*r00*x11970))+(((-1.0)*x11964*x11972))+((sj1*x11973))+((cj1*x11965))+((r01*x11980))+(((-1.0)*x11961*x11962*x11974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11981=((1.0)*gconst5);
IkReal x11982=((1.0)*gconst4);
CheckValue<IkReal> x11983=IKPowWithIntegerCheck((((gconst5*r00))+(((-1.0)*r01*x11982))),-1);
if(!x11983.valid){
continue;
}
CheckValue<IkReal> x11984=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11981))+((cj3*gconst4*r21))),-1);
if(!x11984.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11983.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11984.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x11981))+((cj1*sj2))+(((-1.0)*r20*sj3*x11982)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11983.value)))+IKsqr(((x11984.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x11981))+((cj1*sj2))+(((-1.0)*r20*sj3*x11982))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11983.value)), ((x11984.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x11981))+((cj1*sj2))+(((-1.0)*r20*sj3*x11982))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11985=IKsin(j4);
IkReal x11986=IKcos(j4);
IkReal x11987=((1.0)*sj3);
IkReal x11988=((1.0)*r21);
IkReal x11989=(cj3*gconst5);
IkReal x11990=(cj0*sj2);
IkReal x11991=(gconst5*r20);
IkReal x11992=(cj2*sj0);
IkReal x11993=(sj1*sj2);
IkReal x11994=((1.0)*cj1);
IkReal x11995=(cj3*gconst4);
IkReal x11996=((1.0)*r20);
IkReal x11997=((1.0)*r01);
IkReal x11998=(cj0*cj2);
IkReal x11999=(gconst5*r00);
IkReal x12000=(gconst5*sj3);
IkReal x12001=(gconst4*sj3);
IkReal x12002=(r12*x11985);
IkReal x12003=(gconst4*x11985);
IkReal x12004=((1.0)*x11986);
IkReal x12005=(x11986*x12001);
evalcond[0]=((((-1.0)*r12*x12004))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x11988*x12003))+((x11985*x11991)));
evalcond[2]=(sj0+((x11985*x11999))+(((-1.0)*x11997*x12003)));
evalcond[3]=(((sj1*x11992))+(((-1.0)*x11987*x12002))+((cj1*sj0*sj2)));
evalcond[4]=(((sj0*x11993))+(((-1.0)*cj3*x12002))+(((-1.0)*x11992*x11994)));
evalcond[5]=((((-1.0)*x11986*x11989*x11996))+((r20*x12001))+(((-1.0)*cj2*sj1))+((r21*x11986*x11995))+(((-1.0)*sj2*x11994))+((r21*x12000)));
evalcond[6]=(x11993+(((-1.0)*cj2*x11994))+(((-1.0)*x11988*x11989))+(((-1.0)*x11995*x11996))+(((-1.0)*x11986*x11987*x11991))+((r21*x12005)));
evalcond[7]=(((sj1*x11990))+((r00*x12001))+(((-1.0)*x11994*x11998))+((r01*x12000))+((r01*x11986*x11995))+(((-1.0)*r00*x11989*x12004)));
evalcond[8]=(((sj1*x11998))+((cj1*x11990))+(((-1.0)*x11989*x11997))+((r01*x12005))+(((-1.0)*x11986*x11987*x11999))+(((-1.0)*r00*x11995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12006=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x12006.valid){
continue;
}
CheckValue<IkReal> x12007=IKPowWithIntegerCheck(r12,-1);
if(!x12007.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x12006.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x12007.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x12006.value)))+IKsqr(((-1.0)*cj0*(x12007.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x12006.value)), ((-1.0)*cj0*(x12007.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12008=IKsin(j4);
IkReal x12009=IKcos(j4);
IkReal x12010=((1.0)*sj3);
IkReal x12011=((1.0)*r21);
IkReal x12012=(cj3*gconst5);
IkReal x12013=(cj0*sj2);
IkReal x12014=(gconst5*r20);
IkReal x12015=(cj2*sj0);
IkReal x12016=(sj1*sj2);
IkReal x12017=((1.0)*cj1);
IkReal x12018=(cj3*gconst4);
IkReal x12019=((1.0)*r20);
IkReal x12020=((1.0)*r01);
IkReal x12021=(cj0*cj2);
IkReal x12022=(gconst5*r00);
IkReal x12023=(gconst5*sj3);
IkReal x12024=(gconst4*sj3);
IkReal x12025=(r12*x12008);
IkReal x12026=(gconst4*x12008);
IkReal x12027=((1.0)*x12009);
IkReal x12028=(x12009*x12024);
evalcond[0]=((((-1.0)*r12*x12027))+(((-1.0)*cj0)));
evalcond[1]=(((x12008*x12014))+(((-1.0)*x12011*x12026)));
evalcond[2]=(sj0+(((-1.0)*x12020*x12026))+((x12008*x12022)));
evalcond[3]=(((cj1*sj0*sj2))+(((-1.0)*x12010*x12025))+((sj1*x12015)));
evalcond[4]=(((sj0*x12016))+(((-1.0)*cj3*x12025))+(((-1.0)*x12015*x12017)));
evalcond[5]=(((r21*x12009*x12018))+((r20*x12024))+(((-1.0)*cj2*sj1))+(((-1.0)*x12009*x12012*x12019))+((r21*x12023))+(((-1.0)*sj2*x12017)));
evalcond[6]=((((-1.0)*x12011*x12012))+(((-1.0)*x12018*x12019))+x12016+((r21*x12028))+(((-1.0)*x12009*x12010*x12014))+(((-1.0)*cj2*x12017)));
evalcond[7]=(((r01*x12023))+(((-1.0)*r00*x12012*x12027))+((r00*x12024))+((r01*x12009*x12018))+(((-1.0)*x12017*x12021))+((sj1*x12013)));
evalcond[8]=((((-1.0)*x12012*x12020))+((r01*x12028))+(((-1.0)*x12009*x12010*x12022))+(((-1.0)*r00*x12018))+((sj1*x12021))+((cj1*x12013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12029=((1.0)*gconst4);
CheckValue<IkReal> x12030=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x12030.valid){
continue;
}
CheckValue<IkReal> x12031 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*cj0*r01*x12029))+(((-1.0)*r11*sj0*x12029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12030.value)))+(x12031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12032=IKsin(j4);
IkReal x12033=IKcos(j4);
IkReal x12034=(gconst5*sj3);
IkReal x12035=((1.0)*r21);
IkReal x12036=(cj3*gconst5);
IkReal x12037=(cj0*sj2);
IkReal x12038=(cj2*sj0);
IkReal x12039=(sj1*sj2);
IkReal x12040=((1.0)*cj1);
IkReal x12041=((1.0)*r11);
IkReal x12042=((1.0)*cj3);
IkReal x12043=(gconst4*r20);
IkReal x12044=(cj0*cj2);
IkReal x12045=(gconst4*sj3);
IkReal x12046=((1.0)*r01);
IkReal x12047=((1.0)*sj3);
IkReal x12048=((1.0)*x12033);
IkReal x12049=(gconst4*x12032);
IkReal x12050=(r22*x12032);
IkReal x12051=(gconst5*x12032);
IkReal x12052=(r02*x12032);
IkReal x12053=(r12*x12032);
IkReal x12054=(x12033*x12045);
IkReal x12055=(cj3*gconst4*x12033);
evalcond[0]=(((r20*x12051))+(((-1.0)*x12035*x12049))+(((-1.0)*r22*x12048)));
evalcond[1]=(sj0+(((-1.0)*x12046*x12049))+((r00*x12051))+(((-1.0)*r02*x12048)));
evalcond[2]=(((r10*x12051))+(((-1.0)*r12*x12048))+(((-1.0)*x12041*x12049))+(((-1.0)*cj0)));
evalcond[3]=(((sj3*x12043))+(((-1.0)*r20*x12036*x12048))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12040))+((r21*x12034))+(((-1.0)*x12042*x12050))+((r21*x12055)));
evalcond[4]=((((-1.0)*r20*x12034*x12048))+(((-1.0)*cj2*x12040))+x12039+(((-1.0)*x12035*x12036))+(((-1.0)*x12042*x12043))+(((-1.0)*x12047*x12050))+((r21*x12054)));
evalcond[5]=((((-1.0)*x12040*x12044))+(((-1.0)*r00*x12036*x12048))+((r01*x12034))+((r01*x12055))+((r00*x12045))+((sj1*x12037))+(((-1.0)*x12042*x12052)));
evalcond[6]=(((r10*x12045))+((sj0*x12039))+((r11*x12055))+(((-1.0)*r10*x12036*x12048))+(((-1.0)*x12042*x12053))+((r11*x12034))+(((-1.0)*x12038*x12040)));
evalcond[7]=(((sj1*x12044))+(((-1.0)*gconst4*r00*x12042))+((cj1*x12037))+((r01*x12054))+(((-1.0)*r00*x12034*x12048))+(((-1.0)*x12047*x12052))+(((-1.0)*x12036*x12046)));
evalcond[8]=((((-1.0)*r10*x12034*x12048))+(((-1.0)*gconst4*r10*x12042))+((cj1*sj0*sj2))+((sj1*x12038))+((r11*x12054))+(((-1.0)*x12047*x12053))+(((-1.0)*x12036*x12041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12056=((1.0)*gconst4);
CheckValue<IkReal> x12057 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x12056))+((cj0*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12057.valid){
continue;
}
CheckValue<IkReal> x12058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12056))+(((-1.0)*gconst5*r01)))),-1);
if(!x12058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12057.value)+(((1.5707963267949)*(x12058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12059=IKsin(j4);
IkReal x12060=IKcos(j4);
IkReal x12061=(gconst5*sj3);
IkReal x12062=((1.0)*r21);
IkReal x12063=(cj3*gconst5);
IkReal x12064=(cj0*sj2);
IkReal x12065=(cj2*sj0);
IkReal x12066=(sj1*sj2);
IkReal x12067=((1.0)*cj1);
IkReal x12068=((1.0)*r11);
IkReal x12069=((1.0)*cj3);
IkReal x12070=(gconst4*r20);
IkReal x12071=(cj0*cj2);
IkReal x12072=(gconst4*sj3);
IkReal x12073=((1.0)*r01);
IkReal x12074=((1.0)*sj3);
IkReal x12075=((1.0)*x12060);
IkReal x12076=(gconst4*x12059);
IkReal x12077=(r22*x12059);
IkReal x12078=(gconst5*x12059);
IkReal x12079=(r02*x12059);
IkReal x12080=(r12*x12059);
IkReal x12081=(x12060*x12072);
IkReal x12082=(cj3*gconst4*x12060);
evalcond[0]=((((-1.0)*x12062*x12076))+((r20*x12078))+(((-1.0)*r22*x12075)));
evalcond[1]=(sj0+(((-1.0)*x12073*x12076))+(((-1.0)*r02*x12075))+((r00*x12078)));
evalcond[2]=(((r10*x12078))+(((-1.0)*r12*x12075))+(((-1.0)*x12068*x12076))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x12061))+(((-1.0)*x12069*x12077))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12067))+((sj3*x12070))+((r21*x12082))+(((-1.0)*r20*x12063*x12075)));
evalcond[4]=((((-1.0)*x12062*x12063))+(((-1.0)*x12069*x12070))+(((-1.0)*r20*x12061*x12075))+x12066+(((-1.0)*cj2*x12067))+((r21*x12081))+(((-1.0)*x12074*x12077)));
evalcond[5]=(((r01*x12061))+(((-1.0)*x12069*x12079))+((r01*x12082))+(((-1.0)*r00*x12063*x12075))+(((-1.0)*x12067*x12071))+((sj1*x12064))+((r00*x12072)));
evalcond[6]=((((-1.0)*r10*x12063*x12075))+(((-1.0)*x12069*x12080))+((r10*x12072))+((r11*x12082))+((sj0*x12066))+(((-1.0)*x12065*x12067))+((r11*x12061)));
evalcond[7]=(((r01*x12081))+((cj1*x12064))+(((-1.0)*r00*x12061*x12075))+(((-1.0)*gconst4*r00*x12069))+(((-1.0)*x12063*x12073))+((sj1*x12071))+(((-1.0)*x12074*x12079)));
evalcond[8]=((((-1.0)*x12074*x12080))+(((-1.0)*r10*x12061*x12075))+((cj1*sj0*sj2))+(((-1.0)*gconst4*r10*x12069))+((sj1*x12065))+(((-1.0)*x12063*x12068))+((r11*x12081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12083=((1.0)*gconst4);
CheckValue<IkReal> x12084 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x12083))+((gconst5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12084.valid){
continue;
}
CheckValue<IkReal> x12085=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r11))+(((-1.0)*r10*x12083)))),-1);
if(!x12085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12084.value)+(((1.5707963267949)*(x12085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12086=IKsin(j4);
IkReal x12087=IKcos(j4);
IkReal x12088=(gconst5*sj3);
IkReal x12089=((1.0)*r21);
IkReal x12090=(cj3*gconst5);
IkReal x12091=(cj0*sj2);
IkReal x12092=(cj2*sj0);
IkReal x12093=(sj1*sj2);
IkReal x12094=((1.0)*cj1);
IkReal x12095=((1.0)*r11);
IkReal x12096=((1.0)*cj3);
IkReal x12097=(gconst4*r20);
IkReal x12098=(cj0*cj2);
IkReal x12099=(gconst4*sj3);
IkReal x12100=((1.0)*r01);
IkReal x12101=((1.0)*sj3);
IkReal x12102=((1.0)*x12087);
IkReal x12103=(gconst4*x12086);
IkReal x12104=(r22*x12086);
IkReal x12105=(gconst5*x12086);
IkReal x12106=(r02*x12086);
IkReal x12107=(r12*x12086);
IkReal x12108=(x12087*x12099);
IkReal x12109=(cj3*gconst4*x12087);
evalcond[0]=((((-1.0)*x12089*x12103))+(((-1.0)*r22*x12102))+((r20*x12105)));
evalcond[1]=(sj0+(((-1.0)*x12100*x12103))+((r00*x12105))+(((-1.0)*r02*x12102)));
evalcond[2]=(((r10*x12105))+(((-1.0)*r12*x12102))+(((-1.0)*x12095*x12103))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r20*x12090*x12102))+((sj3*x12097))+(((-1.0)*sj2*x12094))+(((-1.0)*x12096*x12104))+((r21*x12088))+((r21*x12109)));
evalcond[4]=((((-1.0)*x12096*x12097))+(((-1.0)*x12101*x12104))+(((-1.0)*x12089*x12090))+x12093+(((-1.0)*cj2*x12094))+(((-1.0)*r20*x12088*x12102))+((r21*x12108)));
evalcond[5]=(((r00*x12099))+((r01*x12088))+((r01*x12109))+(((-1.0)*x12096*x12106))+(((-1.0)*r00*x12090*x12102))+(((-1.0)*x12094*x12098))+((sj1*x12091)));
evalcond[6]=((((-1.0)*x12092*x12094))+(((-1.0)*r10*x12090*x12102))+((r10*x12099))+(((-1.0)*x12096*x12107))+((sj0*x12093))+((r11*x12109))+((r11*x12088)));
evalcond[7]=((((-1.0)*x12101*x12106))+(((-1.0)*r00*x12088*x12102))+((cj1*x12091))+(((-1.0)*gconst4*r00*x12096))+((r01*x12108))+(((-1.0)*x12090*x12100))+((sj1*x12098)));
evalcond[8]=((((-1.0)*r10*x12088*x12102))+(((-1.0)*x12101*x12107))+(((-1.0)*x12090*x12095))+((cj1*sj0*sj2))+(((-1.0)*gconst4*r10*x12096))+((r11*x12108))+((sj1*x12092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12110=((-1.0)*r00);
IkReal x12112 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12112)==0){
continue;
}
IkReal x12111=pow(x12112,-0.5);
CheckValue<IkReal> x12113 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12110),IKFAST_ATAN2_MAGTHRESH);
if(!x12113.valid){
continue;
}
IkReal gconst6=((-1.0)*(x12113.value));
IkReal gconst7=(r01*x12111);
IkReal gconst8=(x12110*x12111);
CheckValue<IkReal> x12114 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12114.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12114.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12115=((-1.0)*r00);
IkReal x12116=x12111;
CheckValue<IkReal> x12118 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12115),IKFAST_ATAN2_MAGTHRESH);
if(!x12118.valid){
continue;
}
IkReal x12117=((-1.0)*(x12118.value));
sj5=gconst7;
cj5=gconst8;
j5=x12117;
IkReal gconst6=x12117;
IkReal gconst7=(r01*x12116);
IkReal gconst8=(x12115*x12116);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12119=((1.0)*gconst7);
CheckValue<IkReal> x12120 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*r11*sj0*x12119))+(((-1.0)*cj0*r01*x12119))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12120.valid){
continue;
}
CheckValue<IkReal> x12121=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x12121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12120.value)+(((1.5707963267949)*(x12121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12122=IKsin(j4);
IkReal x12123=IKcos(j4);
IkReal x12124=(gconst7*sj3);
IkReal x12125=(cj0*cj1);
IkReal x12126=((1.0)*cj2);
IkReal x12127=(cj3*gconst7);
IkReal x12128=(cj2*sj1);
IkReal x12129=(sj1*sj2);
IkReal x12130=(gconst8*sj3);
IkReal x12131=(cj3*gconst8);
IkReal x12132=(cj1*sj2);
IkReal x12133=((1.0)*x12123);
IkReal x12134=(gconst8*x12122);
IkReal x12135=(r01*x12123);
IkReal x12136=(r11*x12123);
IkReal x12137=((1.0)*x12122);
IkReal x12138=(r21*x12123);
evalcond[0]=((((-1.0)*r22*x12133))+(((-1.0)*gconst7*r21*x12137))+((r20*x12134)));
evalcond[1]=(sj0+((r00*x12134))+(((-1.0)*gconst7*r01*x12137))+(((-1.0)*r02*x12133)));
evalcond[2]=((((-1.0)*gconst7*r11*x12137))+(((-1.0)*r12*x12133))+(((-1.0)*cj0))+((r10*x12134)));
evalcond[3]=((((-1.0)*sj1*x12126))+(((-1.0)*r20*x12131*x12133))+((r21*x12130))+((x12127*x12138))+(((-1.0)*x12132))+(((-1.0)*cj3*r22*x12137))+((r20*x12124)));
evalcond[4]=((((-1.0)*r22*sj3*x12137))+(((-1.0)*cj1*x12126))+(((-1.0)*r21*x12131))+((x12124*x12138))+x12129+(((-1.0)*r20*x12127))+(((-1.0)*r20*x12130*x12133)));
evalcond[5]=(((cj0*x12129))+((r00*x12124))+((r01*x12130))+(((-1.0)*cj3*r02*x12137))+(((-1.0)*x12125*x12126))+((x12127*x12135))+(((-1.0)*r00*x12131*x12133)));
evalcond[6]=((((-1.0)*r10*x12131*x12133))+((sj0*x12129))+(((-1.0)*cj3*r12*x12137))+((x12127*x12136))+(((-1.0)*cj1*sj0*x12126))+((r10*x12124))+((r11*x12130)));
evalcond[7]=((((-1.0)*r00*x12127))+((cj0*x12128))+((sj2*x12125))+(((-1.0)*r02*sj3*x12137))+((x12124*x12135))+(((-1.0)*r00*x12130*x12133))+(((-1.0)*r01*x12131)));
evalcond[8]=((((-1.0)*r10*x12130*x12133))+((x12124*x12136))+(((-1.0)*r10*x12127))+((sj0*x12128))+((sj0*x12132))+(((-1.0)*r12*sj3*x12137))+(((-1.0)*r11*x12131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12139=((1.0)*gconst7);
CheckValue<IkReal> x12140=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r11))+(((-1.0)*r10*x12139)))),-1);
if(!x12140.valid){
continue;
}
CheckValue<IkReal> x12141 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst8*r20*sj0))+(((-1.0)*r21*sj0*x12139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12140.value)))+(x12141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12142=IKsin(j4);
IkReal x12143=IKcos(j4);
IkReal x12144=(gconst7*sj3);
IkReal x12145=(cj0*cj1);
IkReal x12146=((1.0)*cj2);
IkReal x12147=(cj3*gconst7);
IkReal x12148=(cj2*sj1);
IkReal x12149=(sj1*sj2);
IkReal x12150=(gconst8*sj3);
IkReal x12151=(cj3*gconst8);
IkReal x12152=(cj1*sj2);
IkReal x12153=((1.0)*x12143);
IkReal x12154=(gconst8*x12142);
IkReal x12155=(r01*x12143);
IkReal x12156=(r11*x12143);
IkReal x12157=((1.0)*x12142);
IkReal x12158=(r21*x12143);
evalcond[0]=((((-1.0)*r22*x12153))+(((-1.0)*gconst7*r21*x12157))+((r20*x12154)));
evalcond[1]=((((-1.0)*r02*x12153))+sj0+((r00*x12154))+(((-1.0)*gconst7*r01*x12157)));
evalcond[2]=((((-1.0)*gconst7*r11*x12157))+((r10*x12154))+(((-1.0)*r12*x12153))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x12152))+((x12147*x12158))+((r20*x12144))+(((-1.0)*sj1*x12146))+((r21*x12150))+(((-1.0)*r20*x12151*x12153))+(((-1.0)*cj3*r22*x12157)));
evalcond[4]=((((-1.0)*r21*x12151))+x12149+(((-1.0)*r20*x12147))+(((-1.0)*r22*sj3*x12157))+(((-1.0)*cj1*x12146))+(((-1.0)*r20*x12150*x12153))+((x12144*x12158)));
evalcond[5]=((((-1.0)*x12145*x12146))+(((-1.0)*cj3*r02*x12157))+(((-1.0)*r00*x12151*x12153))+((cj0*x12149))+((x12147*x12155))+((r01*x12150))+((r00*x12144)));
evalcond[6]=((((-1.0)*cj3*r12*x12157))+((sj0*x12149))+((r10*x12144))+(((-1.0)*r10*x12151*x12153))+((x12147*x12156))+((r11*x12150))+(((-1.0)*cj1*sj0*x12146)));
evalcond[7]=((((-1.0)*r00*x12147))+(((-1.0)*r00*x12150*x12153))+((cj0*x12148))+(((-1.0)*r01*x12151))+(((-1.0)*r02*sj3*x12157))+((x12144*x12155))+((sj2*x12145)));
evalcond[8]=(((sj0*x12152))+(((-1.0)*r10*x12147))+(((-1.0)*r12*sj3*x12157))+((sj0*x12148))+(((-1.0)*r10*x12150*x12153))+(((-1.0)*r11*x12151))+((x12144*x12156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12159=((-1.0)*r01);
IkReal x12161 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12161)==0){
continue;
}
IkReal x12160=pow(x12161,-0.5);
CheckValue<IkReal> x12162 = IKatan2WithCheck(IkReal(x12159),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12162.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x12162.value))));
IkReal gconst10=(x12159*x12160);
IkReal gconst11=((1.0)*r00*x12160);
CheckValue<IkReal> x12163 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12163.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12163.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12164=((-1.0)*r01);
CheckValue<IkReal> x12167 = IKatan2WithCheck(IkReal(x12164),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12167.valid){
continue;
}
IkReal x12165=((1.0)*(x12167.value));
IkReal x12166=x12160;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12165)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12165)));
IkReal gconst10=(x12164*x12166);
IkReal gconst11=((1.0)*r00*x12166);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x12168=((-1.0)*r01);
CheckValue<IkReal> x12171 = IKatan2WithCheck(IkReal(x12168),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12171.valid){
continue;
}
IkReal x12169=((1.0)*(x12171.value));
IkReal x12170=x12160;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12169)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12169)));
IkReal gconst10=(x12168*x12170);
IkReal gconst11=((1.0)*r00*x12170);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12172=((-1.0)*r01);
CheckValue<IkReal> x12175 = IKatan2WithCheck(IkReal(x12172),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12175.valid){
continue;
}
IkReal x12173=((1.0)*(x12175.value));
IkReal x12174=x12160;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12173)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12173)));
IkReal gconst10=(x12172*x12174);
IkReal gconst11=((1.0)*r00*x12174);
IkReal x12176=r02*r02;
IkReal x12177=(r12*sj0);
IkReal x12178=x12160;
IkReal x12179=(cj0*x12178);
j4eval[0]=((IKabs((x12177+((cj0*r02)))))+(IKabs(((((-1.0)*x12179))+((x12176*x12179))+((r02*x12177*x12178))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12180=((-1.0)*r01);
CheckValue<IkReal> x12183 = IKatan2WithCheck(IkReal(x12180),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12183.valid){
continue;
}
IkReal x12181=((1.0)*(x12183.value));
IkReal x12182=x12160;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12181)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12181)));
IkReal gconst10=(x12180*x12182);
IkReal gconst11=((1.0)*r00*x12182);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12184=((-1.0)*r01);
CheckValue<IkReal> x12187 = IKatan2WithCheck(IkReal(x12184),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12187.valid){
continue;
}
IkReal x12185=((1.0)*(x12187.value));
IkReal x12186=x12160;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12185)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12185)));
IkReal gconst10=(x12184*x12186);
IkReal gconst11=((1.0)*r00*x12186);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12188=gconst11*gconst11;
IkReal x12189=gconst10*gconst10;
IkReal x12190=(cj3*r10);
IkReal x12191=(cj3*r11);
IkReal x12192=(r10*sj3);
IkReal x12193=(gconst11*r11*sj3);
IkReal x12194=((1.0)*gconst10*r21);
IkReal x12195=(r21*x12189);
IkReal x12196=(r20*x12188);
IkReal x12197=(gconst10*gconst11*r20);
CheckValue<IkReal> x12198=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x12191*x12195))+(((-1.0)*x12191*x12197))+(((-1.0)*gconst11*x12190*x12194))+((x12190*x12196)))),-1);
if(!x12198.valid){
continue;
}
CheckValue<IkReal> x12199 = IKatan2WithCheck(IkReal((((r22*x12193))+((gconst10*r22*x12192)))),IkReal(((((-1.0)*x12192*x12195))+((x12192*x12197))+(((-1.0)*x12193*x12194))+((r11*sj3*x12196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12198.value)))+(x12199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12200=IKsin(j4);
IkReal x12201=IKcos(j4);
IkReal x12202=(sj1*sj2);
IkReal x12203=(cj3*r10);
IkReal x12204=(r21*sj3);
IkReal x12205=((1.0)*gconst10);
IkReal x12206=(cj3*gconst11);
IkReal x12207=(r01*sj3);
IkReal x12208=((1.0)*cj1);
IkReal x12209=(gconst11*sj3);
IkReal x12210=(gconst10*sj3);
IkReal x12211=(cj2*sj1);
IkReal x12212=(cj2*x12208);
IkReal x12213=((1.0)*x12201);
IkReal x12214=((1.0)*x12200);
IkReal x12215=(gconst10*x12201);
IkReal x12216=(gconst11*x12200);
evalcond[0]=((((-1.0)*r22*x12213))+(((-1.0)*r21*x12200*x12205))+((r20*x12216)));
evalcond[1]=((((-1.0)*r02*x12213))+(((-1.0)*r01*x12200*x12205))+((r00*x12216)));
evalcond[2]=((-1.0)+(((-1.0)*r11*x12200*x12205))+(((-1.0)*r12*x12213))+((r10*x12216)));
evalcond[3]=((((-1.0)*cj3*r12*x12214))+((cj3*r11*x12215))+(((-1.0)*gconst11*x12203*x12213))+((r10*x12210))+((r11*x12209)));
evalcond[4]=((((-1.0)*r11*x12206))+(((-1.0)*r10*x12209*x12213))+(((-1.0)*r12*sj3*x12214))+(((-1.0)*x12203*x12205))+((r11*x12201*x12210)));
evalcond[5]=(((gconst11*x12207))+(((-1.0)*x12212))+x12202+(((-1.0)*cj3*r02*x12214))+(((-1.0)*r00*x12206*x12213))+((r00*x12210))+((cj3*r01*x12215)));
evalcond[6]=(((gconst11*x12204))+(((-1.0)*sj2*x12208))+(((-1.0)*r20*x12206*x12213))+(((-1.0)*cj3*r22*x12214))+((cj3*r21*x12215))+((r20*x12210))+(((-1.0)*x12211)));
evalcond[7]=(((cj1*sj2))+(((-1.0)*cj3*r00*x12205))+x12211+((x12207*x12215))+(((-1.0)*r00*x12209*x12213))+(((-1.0)*r01*x12206))+(((-1.0)*r02*sj3*x12214)));
evalcond[8]=((((-1.0)*x12212))+(((-1.0)*cj3*r20*x12205))+(((-1.0)*r20*x12209*x12213))+x12202+(((-1.0)*r21*x12206))+(((-1.0)*r22*sj3*x12214))+((x12204*x12215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12217=((1.0)*gconst10);
CheckValue<IkReal> x12218=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r01))+(((-1.0)*r00*x12217)))),-1);
if(!x12218.valid){
continue;
}
CheckValue<IkReal> x12219 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r20))+(((-1.0)*r21*x12217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12218.value)))+(x12219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12220=IKsin(j4);
IkReal x12221=IKcos(j4);
IkReal x12222=(sj1*sj2);
IkReal x12223=(cj3*r10);
IkReal x12224=(r21*sj3);
IkReal x12225=((1.0)*gconst10);
IkReal x12226=(cj3*gconst11);
IkReal x12227=(r01*sj3);
IkReal x12228=((1.0)*cj1);
IkReal x12229=(gconst11*sj3);
IkReal x12230=(gconst10*sj3);
IkReal x12231=(cj2*sj1);
IkReal x12232=(cj2*x12228);
IkReal x12233=((1.0)*x12221);
IkReal x12234=((1.0)*x12220);
IkReal x12235=(gconst10*x12221);
IkReal x12236=(gconst11*x12220);
evalcond[0]=((((-1.0)*r22*x12233))+((r20*x12236))+(((-1.0)*r21*x12220*x12225)));
evalcond[1]=(((r00*x12236))+(((-1.0)*r02*x12233))+(((-1.0)*r01*x12220*x12225)));
evalcond[2]=((-1.0)+((r10*x12236))+(((-1.0)*r12*x12233))+(((-1.0)*r11*x12220*x12225)));
evalcond[3]=(((r10*x12230))+(((-1.0)*gconst11*x12223*x12233))+((r11*x12229))+(((-1.0)*cj3*r12*x12234))+((cj3*r11*x12235)));
evalcond[4]=((((-1.0)*r10*x12229*x12233))+(((-1.0)*r11*x12226))+(((-1.0)*x12223*x12225))+(((-1.0)*r12*sj3*x12234))+((r11*x12221*x12230)));
evalcond[5]=(((r00*x12230))+(((-1.0)*r00*x12226*x12233))+(((-1.0)*cj3*r02*x12234))+((cj3*r01*x12235))+x12222+(((-1.0)*x12232))+((gconst11*x12227)));
evalcond[6]=((((-1.0)*sj2*x12228))+(((-1.0)*cj3*r22*x12234))+((r20*x12230))+(((-1.0)*x12231))+(((-1.0)*r20*x12226*x12233))+((cj3*r21*x12235))+((gconst11*x12224)));
evalcond[7]=((((-1.0)*r02*sj3*x12234))+(((-1.0)*cj3*r00*x12225))+((cj1*sj2))+x12231+((x12227*x12235))+(((-1.0)*r00*x12229*x12233))+(((-1.0)*r01*x12226)));
evalcond[8]=((((-1.0)*r20*x12229*x12233))+(((-1.0)*cj3*r20*x12225))+((x12224*x12235))+x12222+(((-1.0)*x12232))+(((-1.0)*r21*x12226))+(((-1.0)*r22*sj3*x12234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12237 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst10*r01))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12237.valid){
continue;
}
CheckValue<IkReal> x12238=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12237.value)+(((1.5707963267949)*(x12238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12239=IKsin(j4);
IkReal x12240=IKcos(j4);
IkReal x12241=(sj1*sj2);
IkReal x12242=(cj3*r10);
IkReal x12243=(r21*sj3);
IkReal x12244=((1.0)*gconst10);
IkReal x12245=(cj3*gconst11);
IkReal x12246=(r01*sj3);
IkReal x12247=((1.0)*cj1);
IkReal x12248=(gconst11*sj3);
IkReal x12249=(gconst10*sj3);
IkReal x12250=(cj2*sj1);
IkReal x12251=(cj2*x12247);
IkReal x12252=((1.0)*x12240);
IkReal x12253=((1.0)*x12239);
IkReal x12254=(gconst10*x12240);
IkReal x12255=(gconst11*x12239);
evalcond[0]=((((-1.0)*r21*x12239*x12244))+((r20*x12255))+(((-1.0)*r22*x12252)));
evalcond[1]=((((-1.0)*r01*x12239*x12244))+((r00*x12255))+(((-1.0)*r02*x12252)));
evalcond[2]=((-1.0)+(((-1.0)*r11*x12239*x12244))+(((-1.0)*r12*x12252))+((r10*x12255)));
evalcond[3]=(((cj3*r11*x12254))+((r11*x12248))+((r10*x12249))+(((-1.0)*cj3*r12*x12253))+(((-1.0)*gconst11*x12242*x12252)));
evalcond[4]=(((r11*x12240*x12249))+(((-1.0)*x12242*x12244))+(((-1.0)*r11*x12245))+(((-1.0)*r10*x12248*x12252))+(((-1.0)*r12*sj3*x12253)));
evalcond[5]=(((cj3*r01*x12254))+x12241+(((-1.0)*cj3*r02*x12253))+(((-1.0)*r00*x12245*x12252))+((r00*x12249))+((gconst11*x12246))+(((-1.0)*x12251)));
evalcond[6]=((((-1.0)*r20*x12245*x12252))+((r20*x12249))+(((-1.0)*x12250))+((gconst11*x12243))+(((-1.0)*sj2*x12247))+((cj3*r21*x12254))+(((-1.0)*cj3*r22*x12253)));
evalcond[7]=(((x12246*x12254))+((cj1*sj2))+(((-1.0)*r01*x12245))+x12250+(((-1.0)*cj3*r00*x12244))+(((-1.0)*r00*x12248*x12252))+(((-1.0)*r02*sj3*x12253)));
evalcond[8]=((((-1.0)*r21*x12245))+(((-1.0)*r20*x12248*x12252))+(((-1.0)*cj3*r20*x12244))+x12241+(((-1.0)*x12251))+((x12243*x12254))+(((-1.0)*r22*sj3*x12253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x12256=((-1.0)*r01);
CheckValue<IkReal> x12259 = IKatan2WithCheck(IkReal(x12256),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12259.valid){
continue;
}
IkReal x12257=((1.0)*(x12259.value));
IkReal x12258=x12160;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12257)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12257)));
IkReal gconst10=(x12256*x12258);
IkReal gconst11=((1.0)*r00*x12258);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12260=((-1.0)*r01);
CheckValue<IkReal> x12263 = IKatan2WithCheck(IkReal(x12260),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12263.valid){
continue;
}
IkReal x12261=((1.0)*(x12263.value));
IkReal x12262=x12160;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12261)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12261)));
IkReal gconst10=(x12260*x12262);
IkReal gconst11=((1.0)*r00*x12262);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12264=gconst11*gconst11;
IkReal x12265=gconst10*gconst10;
IkReal x12266=(cj3*r10);
IkReal x12267=(cj3*r11);
IkReal x12268=(r10*sj3);
IkReal x12269=(gconst11*r11*sj3);
IkReal x12270=((1.0)*gconst10*r21);
IkReal x12271=(r21*x12265);
IkReal x12272=(r20*x12264);
IkReal x12273=(gconst10*gconst11*r20);
CheckValue<IkReal> x12274=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst11*x12266*x12270))+((x12267*x12271))+((x12266*x12272))+(((-1.0)*x12267*x12273)))),-1);
if(!x12274.valid){
continue;
}
CheckValue<IkReal> x12275 = IKatan2WithCheck(IkReal((((r22*x12269))+((gconst10*r22*x12268)))),IkReal(((((-1.0)*x12269*x12270))+((x12268*x12273))+(((-1.0)*x12268*x12271))+((r11*sj3*x12272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12274.value)))+(x12275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12276=IKsin(j4);
IkReal x12277=IKcos(j4);
IkReal x12278=(cj3*r10);
IkReal x12279=(r21*sj3);
IkReal x12280=((1.0)*gconst10);
IkReal x12281=(cj3*gconst11);
IkReal x12282=(r01*sj3);
IkReal x12283=((1.0)*sj2);
IkReal x12284=(r20*sj3);
IkReal x12285=(r11*sj3);
IkReal x12286=((1.0)*cj2);
IkReal x12287=(gconst10*sj3);
IkReal x12288=(gconst11*sj3);
IkReal x12289=(cj1*x12283);
IkReal x12290=(sj1*x12286);
IkReal x12291=((1.0)*x12277);
IkReal x12292=((1.0)*x12276);
IkReal x12293=(gconst10*x12277);
IkReal x12294=(gconst11*x12276);
IkReal x12295=(x12290+x12289);
evalcond[0]=(((r20*x12294))+(((-1.0)*r22*x12291))+(((-1.0)*r21*x12276*x12280)));
evalcond[1]=((((-1.0)*r01*x12276*x12280))+((r00*x12294))+(((-1.0)*r02*x12291)));
evalcond[2]=((1.0)+((r10*x12294))+(((-1.0)*r11*x12276*x12280))+(((-1.0)*r12*x12291)));
evalcond[3]=((((-1.0)*gconst11*x12278*x12291))+((cj3*r11*x12293))+((gconst11*x12285))+(((-1.0)*cj3*r12*x12292))+((r10*x12287)));
evalcond[4]=((((-1.0)*x12278*x12280))+(((-1.0)*r10*x12288*x12291))+((x12285*x12293))+(((-1.0)*r11*x12281))+(((-1.0)*r12*sj3*x12292)));
evalcond[5]=(((gconst11*x12282))+(((-1.0)*cj3*r02*x12292))+(((-1.0)*sj1*x12283))+((cj3*r01*x12293))+((r00*x12287))+((cj1*cj2))+(((-1.0)*r00*x12281*x12291)));
evalcond[6]=(((gconst11*x12279))+(((-1.0)*cj3*r22*x12292))+(((-1.0)*r20*x12281*x12291))+(((-1.0)*x12295))+((gconst10*x12284))+((cj3*r21*x12293)));
evalcond[7]=((((-1.0)*r22*sj3*x12292))+(((-1.0)*cj1*x12286))+((sj1*sj2))+(((-1.0)*gconst11*x12284*x12291))+(((-1.0)*cj3*r20*x12280))+((x12279*x12293))+(((-1.0)*r21*x12281)));
evalcond[8]=((((-1.0)*r02*sj3*x12292))+(((-1.0)*r00*x12288*x12291))+(((-1.0)*x12295))+((x12282*x12293))+(((-1.0)*cj3*r00*x12280))+(((-1.0)*r01*x12281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12296=((1.0)*gconst10);
CheckValue<IkReal> x12297 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x12296))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12297.valid){
continue;
}
CheckValue<IkReal> x12298=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12296))+(((-1.0)*gconst11*r21)))),-1);
if(!x12298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12297.value)+(((1.5707963267949)*(x12298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12299=IKsin(j4);
IkReal x12300=IKcos(j4);
IkReal x12301=(cj3*r10);
IkReal x12302=(r21*sj3);
IkReal x12303=((1.0)*gconst10);
IkReal x12304=(cj3*gconst11);
IkReal x12305=(r01*sj3);
IkReal x12306=((1.0)*sj2);
IkReal x12307=(r20*sj3);
IkReal x12308=(r11*sj3);
IkReal x12309=((1.0)*cj2);
IkReal x12310=(gconst10*sj3);
IkReal x12311=(gconst11*sj3);
IkReal x12312=(cj1*x12306);
IkReal x12313=(sj1*x12309);
IkReal x12314=((1.0)*x12300);
IkReal x12315=((1.0)*x12299);
IkReal x12316=(gconst10*x12300);
IkReal x12317=(gconst11*x12299);
IkReal x12318=(x12312+x12313);
evalcond[0]=((((-1.0)*r21*x12299*x12303))+(((-1.0)*r22*x12314))+((r20*x12317)));
evalcond[1]=((((-1.0)*r02*x12314))+((r00*x12317))+(((-1.0)*r01*x12299*x12303)));
evalcond[2]=((1.0)+((r10*x12317))+(((-1.0)*r11*x12299*x12303))+(((-1.0)*r12*x12314)));
evalcond[3]=(((cj3*r11*x12316))+((r10*x12310))+(((-1.0)*cj3*r12*x12315))+(((-1.0)*gconst11*x12301*x12314))+((gconst11*x12308)));
evalcond[4]=((((-1.0)*x12301*x12303))+((x12308*x12316))+(((-1.0)*r11*x12304))+(((-1.0)*r10*x12311*x12314))+(((-1.0)*r12*sj3*x12315)));
evalcond[5]=(((cj3*r01*x12316))+(((-1.0)*cj3*r02*x12315))+((r00*x12310))+((cj1*cj2))+(((-1.0)*sj1*x12306))+((gconst11*x12305))+(((-1.0)*r00*x12304*x12314)));
evalcond[6]=((((-1.0)*r20*x12304*x12314))+((cj3*r21*x12316))+((gconst10*x12307))+((gconst11*x12302))+(((-1.0)*cj3*r22*x12315))+(((-1.0)*x12318)));
evalcond[7]=(((x12302*x12316))+(((-1.0)*cj1*x12309))+(((-1.0)*r22*sj3*x12315))+(((-1.0)*cj3*r20*x12303))+((sj1*sj2))+(((-1.0)*r21*x12304))+(((-1.0)*gconst11*x12307*x12314)));
evalcond[8]=((((-1.0)*r02*sj3*x12315))+(((-1.0)*r01*x12304))+((x12305*x12316))+(((-1.0)*cj3*r00*x12303))+(((-1.0)*r00*x12311*x12314))+(((-1.0)*x12318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12319=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x12319.valid){
continue;
}
CheckValue<IkReal> x12320 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r20))+(((-1.0)*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12319.value)))+(x12320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12321=IKsin(j4);
IkReal x12322=IKcos(j4);
IkReal x12323=(cj3*r10);
IkReal x12324=(r21*sj3);
IkReal x12325=((1.0)*gconst10);
IkReal x12326=(cj3*gconst11);
IkReal x12327=(r01*sj3);
IkReal x12328=((1.0)*sj2);
IkReal x12329=(r20*sj3);
IkReal x12330=(r11*sj3);
IkReal x12331=((1.0)*cj2);
IkReal x12332=(gconst10*sj3);
IkReal x12333=(gconst11*sj3);
IkReal x12334=(cj1*x12328);
IkReal x12335=(sj1*x12331);
IkReal x12336=((1.0)*x12322);
IkReal x12337=((1.0)*x12321);
IkReal x12338=(gconst10*x12322);
IkReal x12339=(gconst11*x12321);
IkReal x12340=(x12334+x12335);
evalcond[0]=((((-1.0)*r22*x12336))+((r20*x12339))+(((-1.0)*r21*x12321*x12325)));
evalcond[1]=(((r00*x12339))+(((-1.0)*r02*x12336))+(((-1.0)*r01*x12321*x12325)));
evalcond[2]=((1.0)+(((-1.0)*r11*x12321*x12325))+((r10*x12339))+(((-1.0)*r12*x12336)));
evalcond[3]=((((-1.0)*cj3*r12*x12337))+((gconst11*x12330))+((cj3*r11*x12338))+(((-1.0)*gconst11*x12323*x12336))+((r10*x12332)));
evalcond[4]=((((-1.0)*r10*x12333*x12336))+((x12330*x12338))+(((-1.0)*r11*x12326))+(((-1.0)*r12*sj3*x12337))+(((-1.0)*x12323*x12325)));
evalcond[5]=(((cj3*r01*x12338))+(((-1.0)*cj3*r02*x12337))+((r00*x12332))+((gconst11*x12327))+(((-1.0)*sj1*x12328))+((cj1*cj2))+(((-1.0)*r00*x12326*x12336)));
evalcond[6]=(((gconst10*x12329))+(((-1.0)*cj3*r22*x12337))+(((-1.0)*x12340))+((gconst11*x12324))+(((-1.0)*r20*x12326*x12336))+((cj3*r21*x12338)));
evalcond[7]=((((-1.0)*gconst11*x12329*x12336))+((sj1*sj2))+((x12324*x12338))+(((-1.0)*r22*sj3*x12337))+(((-1.0)*r21*x12326))+(((-1.0)*cj1*x12331))+(((-1.0)*cj3*r20*x12325)));
evalcond[8]=((((-1.0)*r01*x12326))+(((-1.0)*cj3*r00*x12325))+(((-1.0)*x12340))+((x12327*x12338))+(((-1.0)*r00*x12333*x12336))+(((-1.0)*r02*sj3*x12337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12341=((-1.0)*r01);
IkReal x12342=((-1.0)*py);
CheckValue<IkReal> x12344 = IKatan2WithCheck(IkReal(x12341),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12344.valid){
continue;
}
IkReal x12343=((1.0)*(x12344.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12343)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12342);
rxp0_2=(py*r00);
rxp1_0=(r21*x12342);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12343)));
IkReal gconst10=x12341;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12345=((-1.0)*r01);
IkReal x12346=((-1.0)*py);
CheckValue<IkReal> x12348 = IKatan2WithCheck(IkReal(x12345),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12348.valid){
continue;
}
IkReal x12347=((1.0)*(x12348.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12347)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12346);
rxp0_2=(py*r00);
rxp1_0=(r21*x12346);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12347)));
IkReal gconst10=x12345;
IkReal gconst11=((1.0)*r00);
IkReal x12349=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r00*r20*x12349))+(((-1.0)*r01*r21*x12349)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12350=((-1.0)*r01);
IkReal x12351=((-1.0)*py);
CheckValue<IkReal> x12353 = IKatan2WithCheck(IkReal(x12350),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12353.valid){
continue;
}
IkReal x12352=((1.0)*(x12353.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12352)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12351);
rxp0_2=(py*r00);
rxp1_0=(r21*x12351);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12352)));
IkReal gconst10=x12350;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12354=((-1.0)*r01);
IkReal x12355=((-1.0)*py);
CheckValue<IkReal> x12357 = IKatan2WithCheck(IkReal(x12354),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12357.valid){
continue;
}
IkReal x12356=((1.0)*(x12357.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12356)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12355);
rxp0_2=(py*r00);
rxp1_0=(r21*x12355);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12356)));
IkReal gconst10=x12354;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12358=((-1.0)*r01);
IkReal x12359=((-1.0)*py);
CheckValue<IkReal> x12361 = IKatan2WithCheck(IkReal(x12358),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12361.valid){
continue;
}
IkReal x12360=((1.0)*(x12361.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12360)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12359);
rxp0_2=(py*r00);
rxp1_0=(r21*x12359);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12360)));
IkReal gconst10=x12358;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12362=((-1.0)*r01);
IkReal x12363=((-1.0)*py);
CheckValue<IkReal> x12365 = IKatan2WithCheck(IkReal(x12362),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12365.valid){
continue;
}
IkReal x12364=((1.0)*(x12365.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12364)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12363);
rxp0_2=(py*r00);
rxp1_0=(r21*x12363);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12364)));
IkReal gconst10=x12362;
IkReal gconst11=((1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12368=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x12368.valid){
continue;
}
IkReal x12366=x12368.value;
IkReal x12367=(cj0*x12366);
cj4array[0]=((((-1.0)*sj1*sj2*x12367))+((cj1*cj2*x12367)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12369=IKsin(j4);
IkReal x12370=IKcos(j4);
IkReal x12371=(gconst10*r21);
IkReal x12372=(gconst11*r20);
IkReal x12373=((1.0)*x12370);
IkReal x12374=((1.0)*x12369);
evalcond[0]=((-1.0)*r12*x12369);
evalcond[1]=((((-1.0)*r12*x12373))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x12371*x12374))+((x12369*x12372)));
evalcond[3]=((((-1.0)*gconst10*r01*x12374))+((gconst11*r00*x12369)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x12370*x12371))+(((-1.0)*x12372*x12373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12376=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12376.valid){
continue;
}
IkReal x12375=x12376.value;
cj4array[0]=(((cj2*sj1*x12375))+((cj1*sj2*x12375)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12377=IKsin(j4);
IkReal x12378=IKcos(j4);
IkReal x12379=(gconst10*r01);
IkReal x12380=((1.0)*cj0);
IkReal x12381=(gconst11*x12377);
IkReal x12382=((1.0)*x12378);
IkReal x12383=((1.0)*x12377);
evalcond[0]=((-1.0)*r12*x12377);
evalcond[1]=((((-1.0)*x12380))+(((-1.0)*r12*x12382)));
evalcond[2]=(((r20*x12381))+(((-1.0)*gconst10*r21*x12383)));
evalcond[3]=(((r00*x12381))+(((-1.0)*x12379*x12383)));
evalcond[4]=((((-1.0)*gconst11*r00*x12382))+((x12378*x12379))+((cj0*sj1*sj2))+(((-1.0)*cj1*cj2*x12380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12384=IKPowWithIntegerCheck(r12,-1);
if(!x12384.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12384.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12385=IKsin(j4);
IkReal x12386=IKcos(j4);
IkReal x12387=((1.0)*cj2);
IkReal x12388=(gconst11*r20);
IkReal x12389=(gconst11*r00);
IkReal x12390=(gconst10*x12386);
IkReal x12391=((1.0)*x12386);
IkReal x12392=((1.0)*gconst10*x12385);
evalcond[0]=((-1.0)*r12*x12385);
evalcond[1]=((((-1.0)*r21*x12392))+((x12385*x12388)));
evalcond[2]=(((x12385*x12389))+(((-1.0)*r01*x12392)));
evalcond[3]=((((-1.0)*sj1*x12387))+(((-1.0)*cj1*sj2))+((r21*x12390))+(((-1.0)*x12388*x12391)));
evalcond[4]=((((-1.0)*x12389*x12391))+((r01*x12390))+(((-1.0)*cj0*cj1*x12387))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12393=((-1.0)*r01);
IkReal x12394=((-1.0)*py);
CheckValue<IkReal> x12396 = IKatan2WithCheck(IkReal(x12393),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12396.valid){
continue;
}
IkReal x12395=((1.0)*(x12396.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12395)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12394);
rxp0_2=(py*r00);
rxp1_0=(r21*x12394);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12395)));
IkReal gconst10=x12393;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12397=((-1.0)*r01);
IkReal x12398=((-1.0)*py);
CheckValue<IkReal> x12400 = IKatan2WithCheck(IkReal(x12397),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12400.valid){
continue;
}
IkReal x12399=((1.0)*(x12400.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12399)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12398);
rxp0_2=(py*r00);
rxp1_0=(r21*x12398);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12399)));
IkReal gconst10=x12397;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12401=((-1.0)*r01);
IkReal x12402=((-1.0)*py);
CheckValue<IkReal> x12404 = IKatan2WithCheck(IkReal(x12401),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12404.valid){
continue;
}
IkReal x12403=((1.0)*(x12404.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12403)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12402);
rxp0_2=(py*r00);
rxp1_0=(r21*x12402);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12403)));
IkReal gconst10=x12401;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12407=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12407.valid){
continue;
}
IkReal x12405=x12407.value;
IkReal x12406=(cj0*x12405);
cj4array[0]=((((-1.0)*sj1*sj2*x12406))+((cj1*cj2*x12406)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12408=IKsin(j4);
IkReal x12409=IKcos(j4);
IkReal x12410=(gconst11*r20);
IkReal x12411=((1.0)*x12409);
IkReal x12412=((1.0)*gconst10*x12408);
evalcond[0]=(r12*x12408);
evalcond[1]=((((-1.0)*r12*x12411))+(((-1.0)*cj0)));
evalcond[2]=(((x12408*x12410))+(((-1.0)*r21*x12412)));
evalcond[3]=((((-1.0)*r01*x12412))+((gconst11*r00*x12408)));
evalcond[4]=((((-1.0)*gconst10*r21*x12411))+((x12409*x12410))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12414=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12414.valid){
continue;
}
IkReal x12413=x12414.value;
cj4array[0]=(((cj2*sj1*x12413))+((cj1*sj2*x12413)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12415=IKsin(j4);
IkReal x12416=IKcos(j4);
IkReal x12417=((1.0)*cj0);
IkReal x12418=((1.0)*gconst10*r01);
IkReal x12419=(gconst11*x12415);
evalcond[0]=(r12*x12415);
evalcond[1]=((((-1.0)*x12417))+(((-1.0)*r12*x12416)));
evalcond[2]=(((r20*x12419))+(((-1.0)*gconst10*r21*x12415)));
evalcond[3]=((((-1.0)*x12415*x12418))+((r00*x12419)));
evalcond[4]=((((-1.0)*x12416*x12418))+(((-1.0)*cj1*cj2*x12417))+((gconst11*r00*x12416))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12420=IKPowWithIntegerCheck(r12,-1);
if(!x12420.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12420.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12421=IKsin(j4);
IkReal x12422=IKcos(j4);
IkReal x12423=((1.0)*cj2);
IkReal x12424=(gconst11*r20);
IkReal x12425=(gconst11*r00);
IkReal x12426=((1.0)*gconst10*r01);
IkReal x12427=((1.0)*gconst10*r21);
evalcond[0]=(r12*x12421);
evalcond[1]=(((x12421*x12424))+(((-1.0)*x12421*x12427)));
evalcond[2]=(((x12421*x12425))+(((-1.0)*x12421*x12426)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x12422*x12427))+((x12422*x12424))+(((-1.0)*sj1*x12423)));
evalcond[4]=((((-1.0)*cj0*cj1*x12423))+(((-1.0)*x12422*x12426))+((x12422*x12425))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12428=((-1.0)*r01);
IkReal x12429=((-1.0)*py);
CheckValue<IkReal> x12431 = IKatan2WithCheck(IkReal(x12428),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12431.valid){
continue;
}
IkReal x12430=((1.0)*(x12431.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12430)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12429);
rxp0_2=(py*r00);
rxp1_0=(r21*x12429);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12430)));
IkReal gconst10=x12428;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12432=((-1.0)*r01);
IkReal x12433=((-1.0)*py);
CheckValue<IkReal> x12435 = IKatan2WithCheck(IkReal(x12432),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12435.valid){
continue;
}
IkReal x12434=((1.0)*(x12435.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12434)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12433);
rxp0_2=(py*r00);
rxp1_0=(r21*x12433);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12434)));
IkReal gconst10=x12432;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12436=((-1.0)*r01);
IkReal x12437=((-1.0)*py);
CheckValue<IkReal> x12439 = IKatan2WithCheck(IkReal(x12436),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12439.valid){
continue;
}
IkReal x12438=((1.0)*(x12439.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12438)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12437);
rxp0_2=(py*r00);
rxp1_0=(r21*x12437);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12438)));
IkReal gconst10=x12436;
IkReal gconst11=((1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12442=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x12442.valid){
continue;
}
IkReal x12440=x12442.value;
IkReal x12441=((1.0)*cj0*x12440);
cj4array[0]=((((-1.0)*cj1*sj2*x12441))+(((-1.0)*cj2*sj1*x12441)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12443=IKsin(j4);
IkReal x12444=IKcos(j4);
IkReal x12445=(gconst10*r21);
IkReal x12446=(gconst11*r20);
IkReal x12447=((1.0)*x12444);
IkReal x12448=((1.0)*x12443);
evalcond[0]=((-1.0)*r12*x12443);
evalcond[1]=((((-1.0)*r12*x12447))+(((-1.0)*cj0)));
evalcond[2]=(((x12443*x12446))+(((-1.0)*x12445*x12448)));
evalcond[3]=(((gconst11*r00*x12443))+(((-1.0)*gconst10*r01*x12448)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12446*x12447))+((x12444*x12445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12450=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12450.valid){
continue;
}
IkReal x12449=x12450.value;
cj4array[0]=(((cj1*cj2*x12449))+(((-1.0)*sj1*sj2*x12449)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12451=IKsin(j4);
IkReal x12452=IKcos(j4);
IkReal x12453=(gconst10*r01);
IkReal x12454=(gconst11*x12451);
IkReal x12455=((1.0)*x12452);
IkReal x12456=((1.0)*x12451);
evalcond[0]=((-1.0)*r12*x12451);
evalcond[1]=((((-1.0)*r12*x12455))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x12454))+(((-1.0)*gconst10*r21*x12456)));
evalcond[3]=((((-1.0)*x12453*x12456))+((r00*x12454)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*gconst11*r00*x12455))+((x12452*x12453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12457=IKPowWithIntegerCheck(r12,-1);
if(!x12457.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12457.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12458=IKsin(j4);
IkReal x12459=IKcos(j4);
IkReal x12460=(gconst11*r20);
IkReal x12461=(gconst11*r00);
IkReal x12462=(gconst10*x12459);
IkReal x12463=((1.0)*x12459);
IkReal x12464=((1.0)*gconst10*x12458);
evalcond[0]=((-1.0)*r12*x12458);
evalcond[1]=((((-1.0)*r21*x12464))+((x12458*x12460)));
evalcond[2]=(((x12458*x12461))+(((-1.0)*r01*x12464)));
evalcond[3]=((((-1.0)*x12460*x12463))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12462)));
evalcond[4]=(((r01*x12462))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x12461*x12463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12465=((-1.0)*r01);
IkReal x12466=((-1.0)*py);
CheckValue<IkReal> x12468 = IKatan2WithCheck(IkReal(x12465),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12468.valid){
continue;
}
IkReal x12467=((1.0)*(x12468.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12467)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12466);
rxp0_2=(py*r00);
rxp1_0=(r21*x12466);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12467)));
IkReal gconst10=x12465;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12469=((-1.0)*r01);
IkReal x12470=((-1.0)*py);
CheckValue<IkReal> x12472 = IKatan2WithCheck(IkReal(x12469),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12472.valid){
continue;
}
IkReal x12471=((1.0)*(x12472.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12471)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12470);
rxp0_2=(py*r00);
rxp1_0=(r21*x12470);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12471)));
IkReal gconst10=x12469;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12473=((-1.0)*r01);
IkReal x12474=((-1.0)*py);
CheckValue<IkReal> x12476 = IKatan2WithCheck(IkReal(x12473),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12476.valid){
continue;
}
IkReal x12475=((1.0)*(x12476.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12475)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12474);
rxp0_2=(py*r00);
rxp1_0=(r21*x12474);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12475)));
IkReal gconst10=x12473;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12479=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12479.valid){
continue;
}
IkReal x12477=x12479.value;
IkReal x12478=((1.0)*cj0*x12477);
cj4array[0]=((((-1.0)*cj1*sj2*x12478))+(((-1.0)*cj2*sj1*x12478)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12480=IKsin(j4);
IkReal x12481=IKcos(j4);
IkReal x12482=(gconst11*r20);
IkReal x12483=((1.0)*x12481);
IkReal x12484=((1.0)*gconst10*x12480);
evalcond[0]=(r12*x12480);
evalcond[1]=((((-1.0)*r12*x12483))+(((-1.0)*cj0)));
evalcond[2]=(((x12480*x12482))+(((-1.0)*r21*x12484)));
evalcond[3]=((((-1.0)*r01*x12484))+((gconst11*r00*x12480)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12481*x12482))+(((-1.0)*gconst10*r21*x12483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12486=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12486.valid){
continue;
}
IkReal x12485=x12486.value;
cj4array[0]=(((cj1*cj2*x12485))+(((-1.0)*sj1*sj2*x12485)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12487=IKsin(j4);
IkReal x12488=IKcos(j4);
IkReal x12489=((1.0)*gconst10*r01);
IkReal x12490=(gconst11*x12487);
evalcond[0]=(r12*x12487);
evalcond[1]=((((-1.0)*r12*x12488))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x12490))+(((-1.0)*gconst10*r21*x12487)));
evalcond[3]=((((-1.0)*x12487*x12489))+((r00*x12490)));
evalcond[4]=((((-1.0)*x12488*x12489))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((gconst11*r00*x12488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12491=IKPowWithIntegerCheck(r12,-1);
if(!x12491.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12491.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12492=IKsin(j4);
IkReal x12493=IKcos(j4);
IkReal x12494=(gconst11*r20);
IkReal x12495=(gconst11*r00);
IkReal x12496=((1.0)*gconst10*r01);
IkReal x12497=((1.0)*gconst10*r21);
evalcond[0]=(r12*x12492);
evalcond[1]=(((x12492*x12494))+(((-1.0)*x12492*x12497)));
evalcond[2]=(((x12492*x12495))+(((-1.0)*x12492*x12496)));
evalcond[3]=(((x12493*x12494))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12493*x12497)));
evalcond[4]=(((x12493*x12495))+((cj0*cj2*sj1))+(((-1.0)*x12493*x12496))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12499=IKPowWithIntegerCheck(r12,-1);
if(!x12499.valid){
continue;
}
IkReal x12498=x12499.value;
CheckValue<IkReal> x12500=IKPowWithIntegerCheck(sj3,-1);
if(!x12500.valid){
continue;
}
if( IKabs((x12498*(x12500.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x12498)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12498*(x12500.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x12498))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12498*(x12500.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x12498));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12501=IKsin(j4);
IkReal x12502=IKcos(j4);
IkReal x12503=((1.0)*sj3);
IkReal x12504=(cj0*cj1);
IkReal x12505=((1.0)*cj2);
IkReal x12506=(cj2*sj1);
IkReal x12507=(sj1*sj2);
IkReal x12508=(gconst11*sj3);
IkReal x12509=(cj3*r01);
IkReal x12510=((1.0)*gconst11);
IkReal x12511=(gconst10*sj3);
IkReal x12512=(cj1*sj2);
IkReal x12513=(cj3*r21);
IkReal x12514=((1.0)*cj3);
IkReal x12515=(r12*x12501);
IkReal x12516=(gconst11*x12502);
IkReal x12517=(gconst10*x12502);
IkReal x12518=(gconst11*x12501);
IkReal x12519=(x12502*x12511);
IkReal x12520=((1.0)*gconst10*x12501);
evalcond[0]=((((-1.0)*r12*x12502))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*x12520))+((r20*x12518)));
evalcond[2]=(sj0+((r00*x12518))+(((-1.0)*r01*x12520)));
evalcond[3]=(((sj0*x12506))+((sj0*x12512))+(((-1.0)*x12503*x12515)));
evalcond[4]=((((-1.0)*x12514*x12515))+((sj0*x12507))+(((-1.0)*cj1*sj0*x12505)));
evalcond[5]=(((r20*x12511))+(((-1.0)*x12512))+((r21*x12508))+(((-1.0)*cj3*r20*x12502*x12510))+(((-1.0)*sj1*x12505))+((x12513*x12517)));
evalcond[6]=((((-1.0)*gconst10*r20*x12514))+(((-1.0)*r20*x12503*x12516))+((r21*x12519))+(((-1.0)*cj1*x12505))+x12507+(((-1.0)*x12510*x12513)));
evalcond[7]=(((x12509*x12517))+((r01*x12508))+((r00*x12511))+(((-1.0)*cj3*r00*x12502*x12510))+(((-1.0)*x12504*x12505))+((cj0*x12507)));
evalcond[8]=((((-1.0)*r00*x12503*x12516))+((sj2*x12504))+(((-1.0)*gconst10*r00*x12514))+((r01*x12519))+(((-1.0)*x12509*x12510))+((cj0*x12506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12521=((1.0)*r20);
CheckValue<IkReal> x12522=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12522.valid){
continue;
}
CheckValue<IkReal> x12523=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12521))+((cj3*gconst10*r21))),-1);
if(!x12523.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x12522.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12523.value)*(((((-1.0)*gconst10*sj3*x12521))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst11*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x12522.value)))+IKsqr(((x12523.value)*(((((-1.0)*gconst10*sj3*x12521))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst11*r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x12522.value)), ((x12523.value)*(((((-1.0)*gconst10*sj3*x12521))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst11*r21*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12524=IKsin(j4);
IkReal x12525=IKcos(j4);
IkReal x12526=((1.0)*sj3);
IkReal x12527=(cj0*cj1);
IkReal x12528=((1.0)*cj2);
IkReal x12529=(cj2*sj1);
IkReal x12530=(sj1*sj2);
IkReal x12531=(gconst11*sj3);
IkReal x12532=(cj3*r01);
IkReal x12533=((1.0)*gconst11);
IkReal x12534=(gconst10*sj3);
IkReal x12535=(cj1*sj2);
IkReal x12536=(cj3*r21);
IkReal x12537=((1.0)*cj3);
IkReal x12538=(r12*x12524);
IkReal x12539=(gconst11*x12525);
IkReal x12540=(gconst10*x12525);
IkReal x12541=(gconst11*x12524);
IkReal x12542=(x12525*x12534);
IkReal x12543=((1.0)*gconst10*x12524);
evalcond[0]=((((-1.0)*r12*x12525))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x12541))+(((-1.0)*r21*x12543)));
evalcond[2]=(sj0+((r00*x12541))+(((-1.0)*r01*x12543)));
evalcond[3]=(((sj0*x12529))+(((-1.0)*x12526*x12538))+((sj0*x12535)));
evalcond[4]=((((-1.0)*cj1*sj0*x12528))+(((-1.0)*x12537*x12538))+((sj0*x12530)));
evalcond[5]=((((-1.0)*cj3*r20*x12525*x12533))+((r20*x12534))+((r21*x12531))+(((-1.0)*x12535))+(((-1.0)*sj1*x12528))+((x12536*x12540)));
evalcond[6]=((((-1.0)*x12533*x12536))+(((-1.0)*cj1*x12528))+(((-1.0)*r20*x12526*x12539))+x12530+(((-1.0)*gconst10*r20*x12537))+((r21*x12542)));
evalcond[7]=(((r00*x12534))+((x12532*x12540))+(((-1.0)*cj3*r00*x12525*x12533))+(((-1.0)*x12527*x12528))+((r01*x12531))+((cj0*x12530)));
evalcond[8]=((((-1.0)*gconst10*r00*x12537))+((cj0*x12529))+((r01*x12542))+((sj2*x12527))+(((-1.0)*x12532*x12533))+(((-1.0)*r00*x12526*x12539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12544=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12544.valid){
continue;
}
CheckValue<IkReal> x12545=IKPowWithIntegerCheck(r12,-1);
if(!x12545.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x12544.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x12545.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x12544.value)))+IKsqr(((-1.0)*cj0*(x12545.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x12544.value)), ((-1.0)*cj0*(x12545.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12546=IKsin(j4);
IkReal x12547=IKcos(j4);
IkReal x12548=((1.0)*sj3);
IkReal x12549=(cj0*cj1);
IkReal x12550=((1.0)*cj2);
IkReal x12551=(cj2*sj1);
IkReal x12552=(sj1*sj2);
IkReal x12553=(gconst11*sj3);
IkReal x12554=(cj3*r01);
IkReal x12555=((1.0)*gconst11);
IkReal x12556=(gconst10*sj3);
IkReal x12557=(cj1*sj2);
IkReal x12558=(cj3*r21);
IkReal x12559=((1.0)*cj3);
IkReal x12560=(r12*x12546);
IkReal x12561=(gconst11*x12547);
IkReal x12562=(gconst10*x12547);
IkReal x12563=(gconst11*x12546);
IkReal x12564=(x12547*x12556);
IkReal x12565=((1.0)*gconst10*x12546);
evalcond[0]=((((-1.0)*r12*x12547))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x12563))+(((-1.0)*r21*x12565)));
evalcond[2]=(sj0+(((-1.0)*r01*x12565))+((r00*x12563)));
evalcond[3]=(((sj0*x12557))+((sj0*x12551))+(((-1.0)*x12548*x12560)));
evalcond[4]=((((-1.0)*cj1*sj0*x12550))+((sj0*x12552))+(((-1.0)*x12559*x12560)));
evalcond[5]=((((-1.0)*x12557))+(((-1.0)*cj3*r20*x12547*x12555))+((r20*x12556))+((x12558*x12562))+(((-1.0)*sj1*x12550))+((r21*x12553)));
evalcond[6]=((((-1.0)*x12555*x12558))+(((-1.0)*gconst10*r20*x12559))+(((-1.0)*r20*x12548*x12561))+(((-1.0)*cj1*x12550))+((r21*x12564))+x12552);
evalcond[7]=(((r01*x12553))+((r00*x12556))+((cj0*x12552))+((x12554*x12562))+(((-1.0)*cj3*r00*x12547*x12555))+(((-1.0)*x12549*x12550)));
evalcond[8]=((((-1.0)*r00*x12548*x12561))+(((-1.0)*x12554*x12555))+((r01*x12564))+(((-1.0)*gconst10*r00*x12559))+((cj0*x12551))+((sj2*x12549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12566=((-1.0)*r01);
CheckValue<IkReal> x12569 = IKatan2WithCheck(IkReal(x12566),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12569.valid){
continue;
}
IkReal x12567=((1.0)*(x12569.value));
IkReal x12568=x12160;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12567)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12567)));
IkReal gconst10=(x12566*x12568);
IkReal gconst11=((1.0)*r00*x12568);
IkReal x12570=r02*r02;
IkReal x12571=(r12*sj0);
IkReal x12572=x12160;
IkReal x12573=(cj0*x12572);
j4eval[0]=((IKabs((x12571+((cj0*r02)))))+(IKabs((((r02*x12571*x12572))+((x12570*x12573))+(((-1.0)*x12573))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12574=((1.0)*sj3);
IkReal x12575=(gconst11*r20);
IkReal x12576=(gconst10*r21);
IkReal x12577=(cj1*cj2);
IkReal x12578=((1.0)*sj1*sj2);
IkReal x12579=(cj3*gconst10*r20);
IkReal x12580=(cj3*gconst11*r21);
CheckValue<IkReal> x12581=IKPowWithIntegerCheck(((((-1.0)*gconst11*r00*x12574*x12575))+((gconst11*r00*sj3*x12576))+((gconst10*r01*sj3*x12575))+(((-1.0)*gconst10*r01*x12574*x12576))),-1);
if(!x12581.valid){
continue;
}
CheckValue<IkReal> x12582=IKPowWithIntegerCheck(((((-1.0)*x12574*x12575))+((sj3*x12576))),-1);
if(!x12582.valid){
continue;
}
if( IKabs(((x12581.value)*((((r02*x12579))+((r02*x12577))+((r02*x12580))+(((-1.0)*r02*x12578))+((sj0*sj3*x12575))+(((-1.0)*sj0*x12574*x12576)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12582.value)*(((((-1.0)*x12578))+x12579+x12577+x12580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12581.value)*((((r02*x12579))+((r02*x12577))+((r02*x12580))+(((-1.0)*r02*x12578))+((sj0*sj3*x12575))+(((-1.0)*sj0*x12574*x12576))))))+IKsqr(((x12582.value)*(((((-1.0)*x12578))+x12579+x12577+x12580))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12581.value)*((((r02*x12579))+((r02*x12577))+((r02*x12580))+(((-1.0)*r02*x12578))+((sj0*sj3*x12575))+(((-1.0)*sj0*x12574*x12576))))), ((x12582.value)*(((((-1.0)*x12578))+x12579+x12577+x12580))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12583=IKsin(j4);
IkReal x12584=IKcos(j4);
IkReal x12585=((1.0)*sj3);
IkReal x12586=(cj0*cj1);
IkReal x12587=((1.0)*cj2);
IkReal x12588=((1.0)*r10);
IkReal x12589=(gconst10*r01);
IkReal x12590=(cj3*gconst10);
IkReal x12591=(gconst10*r21);
IkReal x12592=(cj1*sj2);
IkReal x12593=(sj1*sj2);
IkReal x12594=(gconst11*r10);
IkReal x12595=(gconst11*sj3);
IkReal x12596=(gconst10*r11);
IkReal x12597=(gconst10*sj3);
IkReal x12598=(cj2*sj1);
IkReal x12599=((1.0)*cj3);
IkReal x12600=(gconst11*r00);
IkReal x12601=((1.0)*r20);
IkReal x12602=(r12*x12583);
IkReal x12603=(cj3*x12584);
IkReal x12604=(sj3*x12584);
IkReal x12605=(gconst11*x12584);
IkReal x12606=(gconst11*x12599);
IkReal x12607=((1.0)*x12584);
IkReal x12608=(r02*x12583);
IkReal x12609=((1.0)*x12583);
evalcond[0]=((((-1.0)*x12591*x12609))+((gconst11*r20*x12583)));
evalcond[1]=(sj0+((x12583*x12600))+(((-1.0)*r02*x12607))+(((-1.0)*x12589*x12609)));
evalcond[2]=((((-1.0)*r12*x12607))+((x12583*x12594))+(((-1.0)*x12596*x12609))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x12584*x12590))+(((-1.0)*sj1*x12587))+((r21*x12595))+(((-1.0)*x12592))+((r20*x12597))+(((-1.0)*r20*x12599*x12605)));
evalcond[4]=((((-1.0)*x12590*x12601))+((x12591*x12604))+(((-1.0)*cj1*x12587))+x12593+(((-1.0)*r21*x12606))+(((-1.0)*r20*x12585*x12605)));
evalcond[5]=(((r01*x12595))+((cj0*x12593))+((r00*x12597))+(((-1.0)*x12584*x12599*x12600))+(((-1.0)*x12586*x12587))+(((-1.0)*x12599*x12608))+((x12589*x12603)));
evalcond[6]=((((-1.0)*gconst11*x12588*x12603))+((r11*x12584*x12590))+(((-1.0)*x12599*x12602))+(((-1.0)*cj1*sj0*x12587))+((sj0*x12593))+((r11*x12595))+((r10*x12597)));
evalcond[7]=(((cj0*x12598))+(((-1.0)*x12585*x12608))+(((-1.0)*r01*x12606))+(((-1.0)*x12584*x12585*x12600))+((sj2*x12586))+(((-1.0)*r00*x12590))+((x12589*x12604)));
evalcond[8]=((((-1.0)*x12588*x12590))+(((-1.0)*x12585*x12602))+(((-1.0)*r11*x12606))+(((-1.0)*x12584*x12585*x12594))+((x12596*x12604))+((sj0*x12592))+((sj0*x12598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12610=((1.0)*gconst10);
CheckValue<IkReal> x12611 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x12610))+(((-1.0)*cj0*r01*x12610))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12611.valid){
continue;
}
CheckValue<IkReal> x12612=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12611.value)+(((1.5707963267949)*(x12612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12613=IKsin(j4);
IkReal x12614=IKcos(j4);
IkReal x12615=((1.0)*sj3);
IkReal x12616=(cj0*cj1);
IkReal x12617=((1.0)*cj2);
IkReal x12618=((1.0)*r10);
IkReal x12619=(gconst10*r01);
IkReal x12620=(cj3*gconst10);
IkReal x12621=(gconst10*r21);
IkReal x12622=(cj1*sj2);
IkReal x12623=(sj1*sj2);
IkReal x12624=(gconst11*r10);
IkReal x12625=(gconst11*sj3);
IkReal x12626=(gconst10*r11);
IkReal x12627=(gconst10*sj3);
IkReal x12628=(cj2*sj1);
IkReal x12629=((1.0)*cj3);
IkReal x12630=(gconst11*r00);
IkReal x12631=((1.0)*r20);
IkReal x12632=(r12*x12613);
IkReal x12633=(cj3*x12614);
IkReal x12634=(sj3*x12614);
IkReal x12635=(gconst11*x12614);
IkReal x12636=(gconst11*x12629);
IkReal x12637=((1.0)*x12614);
IkReal x12638=(r02*x12613);
IkReal x12639=((1.0)*x12613);
evalcond[0]=(((gconst11*r20*x12613))+(((-1.0)*x12621*x12639)));
evalcond[1]=((((-1.0)*x12619*x12639))+sj0+((x12613*x12630))+(((-1.0)*r02*x12637)));
evalcond[2]=((((-1.0)*x12626*x12639))+((x12613*x12624))+(((-1.0)*cj0))+(((-1.0)*r12*x12637)));
evalcond[3]=((((-1.0)*r20*x12629*x12635))+((r21*x12625))+(((-1.0)*x12622))+(((-1.0)*sj1*x12617))+((r20*x12627))+((r21*x12614*x12620)));
evalcond[4]=((((-1.0)*r20*x12615*x12635))+(((-1.0)*cj1*x12617))+(((-1.0)*r21*x12636))+(((-1.0)*x12620*x12631))+((x12621*x12634))+x12623);
evalcond[5]=((((-1.0)*x12614*x12629*x12630))+((x12619*x12633))+(((-1.0)*x12616*x12617))+((r01*x12625))+((r00*x12627))+((cj0*x12623))+(((-1.0)*x12629*x12638)));
evalcond[6]=(((sj0*x12623))+((r11*x12614*x12620))+(((-1.0)*cj1*sj0*x12617))+(((-1.0)*gconst11*x12618*x12633))+(((-1.0)*x12629*x12632))+((r10*x12627))+((r11*x12625)));
evalcond[7]=((((-1.0)*x12614*x12615*x12630))+(((-1.0)*r00*x12620))+((x12619*x12634))+((sj2*x12616))+(((-1.0)*x12615*x12638))+((cj0*x12628))+(((-1.0)*r01*x12636)));
evalcond[8]=(((sj0*x12628))+((sj0*x12622))+((x12626*x12634))+(((-1.0)*x12614*x12615*x12624))+(((-1.0)*x12615*x12632))+(((-1.0)*x12618*x12620))+(((-1.0)*r11*x12636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12640=((1.0)*gconst10);
CheckValue<IkReal> x12641 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12640))+((gconst11*r10*sj0))+(((-1.0)*r11*sj0*x12640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12641.valid){
continue;
}
CheckValue<IkReal> x12642=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12641.value)+(((1.5707963267949)*(x12642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12643=IKsin(j4);
IkReal x12644=IKcos(j4);
IkReal x12645=(cj0*cj1);
IkReal x12646=((1.0)*cj2);
IkReal x12647=(cj3*r10);
IkReal x12648=(cj3*r01);
IkReal x12649=((1.0)*gconst10);
IkReal x12650=(r21*sj3);
IkReal x12651=(cj1*sj2);
IkReal x12652=(cj0*sj1);
IkReal x12653=(r01*sj3);
IkReal x12654=(gconst11*sj3);
IkReal x12655=((1.0)*gconst11);
IkReal x12656=(cj3*r11);
IkReal x12657=(gconst10*sj3);
IkReal x12658=(sj0*sj1);
IkReal x12659=(cj3*r21);
IkReal x12660=(cj3*gconst11);
IkReal x12661=((1.0)*x12644);
IkReal x12662=((1.0)*x12643);
IkReal x12663=(gconst10*x12644);
IkReal x12664=(gconst11*x12643);
evalcond[0]=((((-1.0)*r22*x12661))+(((-1.0)*r21*x12643*x12649))+((r20*x12664)));
evalcond[1]=((((-1.0)*r01*x12643*x12649))+sj0+(((-1.0)*r02*x12661))+((r00*x12664)));
evalcond[2]=(((r10*x12664))+(((-1.0)*r11*x12643*x12649))+(((-1.0)*r12*x12661))+(((-1.0)*cj0)));
evalcond[3]=(((x12659*x12663))+(((-1.0)*cj3*r20*x12644*x12655))+(((-1.0)*sj1*x12646))+((gconst11*x12650))+(((-1.0)*x12651))+((r20*x12657))+(((-1.0)*cj3*r22*x12662)));
evalcond[4]=((((-1.0)*r22*sj3*x12662))+((sj1*sj2))+(((-1.0)*r20*x12654*x12661))+(((-1.0)*cj3*r20*x12649))+(((-1.0)*cj1*x12646))+((x12650*x12663))+(((-1.0)*x12655*x12659)));
evalcond[5]=(((gconst11*x12653))+(((-1.0)*x12645*x12646))+(((-1.0)*cj3*r02*x12662))+((x12648*x12663))+((sj2*x12652))+(((-1.0)*cj3*r00*x12644*x12655))+((r00*x12657)));
evalcond[6]=(((r10*x12657))+((r11*x12654))+(((-1.0)*x12644*x12647*x12655))+((x12656*x12663))+(((-1.0)*cj3*r12*x12662))+((sj2*x12658))+(((-1.0)*cj1*sj0*x12646)));
evalcond[7]=(((cj2*x12652))+(((-1.0)*cj3*r00*x12649))+(((-1.0)*r02*sj3*x12662))+(((-1.0)*r00*x12654*x12661))+((sj2*x12645))+((x12653*x12663))+(((-1.0)*x12648*x12655)));
evalcond[8]=(((cj2*x12658))+(((-1.0)*r10*x12654*x12661))+((sj0*x12651))+(((-1.0)*x12647*x12649))+((r11*x12644*x12657))+(((-1.0)*r12*sj3*x12662))+(((-1.0)*x12655*x12656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12665=((1.0)*gconst10);
CheckValue<IkReal> x12666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12665))+(((-1.0)*gconst11*r01)))),-1);
if(!x12666.valid){
continue;
}
CheckValue<IkReal> x12667 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst11*r20))+(((-1.0)*cj0*r21*x12665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12666.value)))+(x12667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12668=IKsin(j4);
IkReal x12669=IKcos(j4);
IkReal x12670=(cj0*cj1);
IkReal x12671=((1.0)*cj2);
IkReal x12672=(cj3*r10);
IkReal x12673=(cj3*r01);
IkReal x12674=((1.0)*gconst10);
IkReal x12675=(r21*sj3);
IkReal x12676=(cj1*sj2);
IkReal x12677=(cj0*sj1);
IkReal x12678=(r01*sj3);
IkReal x12679=(gconst11*sj3);
IkReal x12680=((1.0)*gconst11);
IkReal x12681=(cj3*r11);
IkReal x12682=(gconst10*sj3);
IkReal x12683=(sj0*sj1);
IkReal x12684=(cj3*r21);
IkReal x12685=(cj3*gconst11);
IkReal x12686=((1.0)*x12669);
IkReal x12687=((1.0)*x12668);
IkReal x12688=(gconst10*x12669);
IkReal x12689=(gconst11*x12668);
evalcond[0]=(((r20*x12689))+(((-1.0)*r21*x12668*x12674))+(((-1.0)*r22*x12686)));
evalcond[1]=(((r00*x12689))+sj0+(((-1.0)*r02*x12686))+(((-1.0)*r01*x12668*x12674)));
evalcond[2]=((((-1.0)*r11*x12668*x12674))+((r10*x12689))+(((-1.0)*r12*x12686))+(((-1.0)*cj0)));
evalcond[3]=(((x12684*x12688))+((gconst11*x12675))+((r20*x12682))+(((-1.0)*x12676))+(((-1.0)*cj3*r20*x12669*x12680))+(((-1.0)*cj3*r22*x12687))+(((-1.0)*sj1*x12671)));
evalcond[4]=((((-1.0)*r22*sj3*x12687))+(((-1.0)*cj1*x12671))+(((-1.0)*cj3*r20*x12674))+((sj1*sj2))+(((-1.0)*r20*x12679*x12686))+((x12675*x12688))+(((-1.0)*x12680*x12684)));
evalcond[5]=(((r00*x12682))+(((-1.0)*cj3*r02*x12687))+((x12673*x12688))+((gconst11*x12678))+(((-1.0)*cj3*r00*x12669*x12680))+(((-1.0)*x12670*x12671))+((sj2*x12677)));
evalcond[6]=((((-1.0)*x12669*x12672*x12680))+((sj2*x12683))+((r10*x12682))+((r11*x12679))+(((-1.0)*cj1*sj0*x12671))+(((-1.0)*cj3*r12*x12687))+((x12681*x12688)));
evalcond[7]=(((x12678*x12688))+(((-1.0)*x12673*x12680))+((cj2*x12677))+(((-1.0)*cj3*r00*x12674))+(((-1.0)*r02*sj3*x12687))+(((-1.0)*r00*x12679*x12686))+((sj2*x12670)));
evalcond[8]=(((sj0*x12676))+((cj2*x12683))+((r11*x12669*x12682))+(((-1.0)*x12672*x12674))+(((-1.0)*r12*sj3*x12687))+(((-1.0)*x12680*x12681))+(((-1.0)*r10*x12679*x12686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12690=((1.0)*gconst10);
CheckValue<IkReal> x12691=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12690))+(((-1.0)*gconst11*r11)))),-1);
if(!x12691.valid){
continue;
}
CheckValue<IkReal> x12692 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst11*r20*sj0))+(((-1.0)*r21*sj0*x12690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12691.value)))+(x12692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12693=IKsin(j4);
IkReal x12694=IKcos(j4);
IkReal x12695=(cj0*cj1);
IkReal x12696=((1.0)*cj2);
IkReal x12697=(cj3*r10);
IkReal x12698=(cj3*r01);
IkReal x12699=((1.0)*gconst10);
IkReal x12700=(r21*sj3);
IkReal x12701=(cj1*sj2);
IkReal x12702=(cj0*sj1);
IkReal x12703=(r01*sj3);
IkReal x12704=(gconst11*sj3);
IkReal x12705=((1.0)*gconst11);
IkReal x12706=(cj3*r11);
IkReal x12707=(gconst10*sj3);
IkReal x12708=(sj0*sj1);
IkReal x12709=(cj3*r21);
IkReal x12710=(cj3*gconst11);
IkReal x12711=((1.0)*x12694);
IkReal x12712=((1.0)*x12693);
IkReal x12713=(gconst10*x12694);
IkReal x12714=(gconst11*x12693);
evalcond[0]=((((-1.0)*r22*x12711))+(((-1.0)*r21*x12693*x12699))+((r20*x12714)));
evalcond[1]=(sj0+((r00*x12714))+(((-1.0)*r01*x12693*x12699))+(((-1.0)*r02*x12711)));
evalcond[2]=((((-1.0)*r12*x12711))+(((-1.0)*r11*x12693*x12699))+((r10*x12714))+(((-1.0)*cj0)));
evalcond[3]=(((x12709*x12713))+((gconst11*x12700))+(((-1.0)*sj1*x12696))+((r20*x12707))+(((-1.0)*cj3*r20*x12694*x12705))+(((-1.0)*cj3*r22*x12712))+(((-1.0)*x12701)));
evalcond[4]=(((x12700*x12713))+(((-1.0)*cj1*x12696))+(((-1.0)*x12705*x12709))+((sj1*sj2))+(((-1.0)*r22*sj3*x12712))+(((-1.0)*cj3*r20*x12699))+(((-1.0)*r20*x12704*x12711)));
evalcond[5]=(((sj2*x12702))+((x12698*x12713))+(((-1.0)*cj3*r00*x12694*x12705))+((gconst11*x12703))+(((-1.0)*cj3*r02*x12712))+((r00*x12707))+(((-1.0)*x12695*x12696)));
evalcond[6]=(((sj2*x12708))+(((-1.0)*cj3*r12*x12712))+(((-1.0)*x12694*x12697*x12705))+((r11*x12704))+((r10*x12707))+((x12706*x12713))+(((-1.0)*cj1*sj0*x12696)));
evalcond[7]=((((-1.0)*r00*x12704*x12711))+(((-1.0)*r02*sj3*x12712))+(((-1.0)*cj3*r00*x12699))+(((-1.0)*x12698*x12705))+((x12703*x12713))+((cj2*x12702))+((sj2*x12695)));
evalcond[8]=((((-1.0)*x12705*x12706))+(((-1.0)*r10*x12704*x12711))+((sj0*x12701))+((cj2*x12708))+(((-1.0)*x12697*x12699))+((r11*x12694*x12707))+(((-1.0)*r12*sj3*x12712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12715=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12715;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12715);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12716=((1.0)*sj5);
IkReal x12717=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12716)));
j4eval[0]=x12717;
j4eval[1]=IKsign(x12717);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12716)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12718=cj5*cj5;
IkReal x12719=(cj3*r00);
IkReal x12720=(cj3*r01);
IkReal x12721=((1.0)*cj5*sj5);
IkReal x12722=((((-1.0)*r21*x12719*x12721))+((r21*x12720))+(((-1.0)*r20*x12720*x12721))+(((-1.0)*r21*x12718*x12720))+((r20*x12718*x12719))+((cj3*r02*r22)));
j4eval[0]=x12722;
j4eval[1]=IKsign(x12722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12723=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12723;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12724=((1.0)*sj5);
IkReal x12725=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12724)));
j4eval[0]=x12725;
j4eval[1]=IKsign(x12725);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12724)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12726=cj5*cj5;
IkReal x12727=r01*r01;
IkReal x12728=(cj5*r00);
IkReal x12729=(r01*sj5);
IkReal x12730=((((-1.0)*x12726*x12727))+((x12726*(r00*r00)))+x12727+(r02*r02)+(((-2.0)*x12728*x12729)));
j4eval[0]=x12730;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x12728))+x12729))));
j4eval[2]=IKsign(x12730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12731=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12731);
rxp0_2=(py*r00);
rxp1_0=(r21*x12731);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12732=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12732);
rxp0_2=(py*r00);
rxp1_0=(r21*x12732);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12733=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12733.valid){
continue;
}
CheckValue<IkReal> x12734=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12734.valid){
continue;
}
if( IKabs(((-1.0)*(x12733.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12734.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12733.value)))+IKsqr(((x12734.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12733.value)), ((x12734.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12735=IKsin(j4);
IkReal x12736=IKcos(j4);
IkReal x12737=(r01*sj5);
IkReal x12738=(r21*sj5);
IkReal x12739=((1.0)*x12735);
IkReal x12740=(cj5*x12735);
IkReal x12741=((1.0)*cj5*x12736);
evalcond[0]=((-1.0)*r12*x12736);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12739)));
evalcond[2]=((((-1.0)*x12738*x12739))+((r20*x12740)));
evalcond[3]=(((x12736*x12737))+(((-1.0)*r00*x12741)));
evalcond[4]=((1.0)+((r00*x12740))+(((-1.0)*x12737*x12739)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12736*x12738))+(((-1.0)*r20*x12741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12742=IKPowWithIntegerCheck(r12,-1);
if(!x12742.valid){
continue;
}
CheckValue<IkReal> x12743=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12743.valid){
continue;
}
if( IKabs(((x12742.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12743.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12742.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12743.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12742.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12743.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12744=IKsin(j4);
IkReal x12745=IKcos(j4);
IkReal x12746=(r01*sj5);
IkReal x12747=(r21*sj5);
IkReal x12748=((1.0)*x12744);
IkReal x12749=(cj5*x12744);
IkReal x12750=((1.0)*cj5*x12745);
evalcond[0]=((-1.0)*r12*x12745);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r12*x12748))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x12747*x12748))+((r20*x12749)));
evalcond[3]=(((x12745*x12746))+(((-1.0)*r00*x12750)));
evalcond[4]=((1.0)+(((-1.0)*x12746*x12748))+((r00*x12749)));
evalcond[5]=(((x12745*x12747))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12751=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12751);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12751);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12752=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12752);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12752);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12753=((1.0)*cj2);
CheckValue<IkReal> x12754=IKPowWithIntegerCheck(r22,-1);
if(!x12754.valid){
continue;
}
CheckValue<IkReal> x12755=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12755.valid){
continue;
}
if( IKabs(((x12754.value)*((((sj1*sj2))+(((-1.0)*cj1*x12753)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12755.value)*(((((-1.0)*sj1*x12753))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12754.value)*((((sj1*sj2))+(((-1.0)*cj1*x12753))))))+IKsqr(((x12755.value)*(((((-1.0)*sj1*x12753))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12754.value)*((((sj1*sj2))+(((-1.0)*cj1*x12753))))), ((x12755.value)*(((((-1.0)*sj1*x12753))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12756=IKsin(j4);
IkReal x12757=IKcos(j4);
IkReal x12758=(sj5*x12757);
IkReal x12759=(cj5*x12756);
IkReal x12760=((1.0)*sj5*x12756);
IkReal x12761=((1.0)*cj5*x12757);
evalcond[0]=((-1.0)*r22*x12757);
evalcond[1]=((((-1.0)*r11*x12760))+((r10*x12759)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12756)));
evalcond[3]=(((r01*x12758))+(((-1.0)*r00*x12761)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12760))+((r00*x12759)));
evalcond[5]=((((-1.0)*r10*x12761))+((cj2*sj1))+((r11*x12758))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12762=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12762.valid){
continue;
}
CheckValue<IkReal> x12763=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12763.valid){
continue;
}
if( IKabs(((-1.0)*(x12762.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12763.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12762.value)))+IKsqr(((x12763.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12762.value)), ((x12763.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12764=IKsin(j4);
IkReal x12765=IKcos(j4);
IkReal x12766=(sj5*x12765);
IkReal x12767=(cj5*x12764);
IkReal x12768=((1.0)*sj5*x12764);
IkReal x12769=((1.0)*cj5*x12765);
evalcond[0]=((-1.0)*r22*x12765);
evalcond[1]=((((-1.0)*r11*x12768))+((r10*x12767)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12764)));
evalcond[3]=(((r01*x12766))+(((-1.0)*r00*x12769)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12768))+((r00*x12767)));
evalcond[5]=((((-1.0)*r10*x12769))+((cj2*sj1))+((cj1*sj2))+((r11*x12766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12770=cj5*cj5;
IkReal x12771=r01*r01;
IkReal x12772=(r01*sj5);
IkReal x12773=(cj5*r00);
CheckValue<IkReal> x12774 = IKatan2WithCheck(IkReal(((((-1.0)*x12773))+x12772)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12774.valid){
continue;
}
CheckValue<IkReal> x12775=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12770*x12771))+(((-2.0)*x12772*x12773))+((x12770*(r00*r00)))+x12771+(r02*r02))),-1);
if(!x12775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12774.value)+(((1.5707963267949)*(x12775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12776=IKsin(j4);
IkReal x12777=IKcos(j4);
IkReal x12778=(cj5*r00);
IkReal x12779=(cj5*r20);
IkReal x12780=(cj5*r10);
IkReal x12781=((1.0)*x12777);
IkReal x12782=(sj5*x12777);
IkReal x12783=((1.0)*x12776);
IkReal x12784=(sj5*x12783);
evalcond[0]=((((-1.0)*r21*x12784))+(((-1.0)*r22*x12781))+((x12776*x12779)));
evalcond[1]=((((-1.0)*r11*x12784))+((x12776*x12780))+(((-1.0)*r12*x12781)));
evalcond[2]=(((r01*x12782))+(((-1.0)*x12778*x12781))+(((-1.0)*r02*x12783)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12784))+((x12776*x12778))+(((-1.0)*r02*x12781)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x12782))+(((-1.0)*r12*x12783))+(((-1.0)*x12780*x12781)));
evalcond[5]=((((-1.0)*x12779*x12781))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12782))+(((-1.0)*r22*x12783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12785=((1.0)*sj5);
CheckValue<IkReal> x12786=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12785)))),-1);
if(!x12786.valid){
continue;
}
CheckValue<IkReal> x12787 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x12785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12786.value)))+(x12787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12788=IKsin(j4);
IkReal x12789=IKcos(j4);
IkReal x12790=(cj5*r00);
IkReal x12791=(cj5*r20);
IkReal x12792=(cj5*r10);
IkReal x12793=((1.0)*x12789);
IkReal x12794=(sj5*x12789);
IkReal x12795=((1.0)*x12788);
IkReal x12796=(sj5*x12795);
evalcond[0]=((((-1.0)*r21*x12796))+(((-1.0)*r22*x12793))+((x12788*x12791)));
evalcond[1]=((((-1.0)*r11*x12796))+(((-1.0)*r12*x12793))+((x12788*x12792)));
evalcond[2]=((((-1.0)*r02*x12795))+((r01*x12794))+(((-1.0)*x12790*x12793)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12796))+(((-1.0)*r02*x12793))+((x12788*x12790)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12792*x12793))+((r11*x12794))+(((-1.0)*r12*x12795)));
evalcond[5]=((((-1.0)*r22*x12795))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12791*x12793))+((r21*x12794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12797 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12797.valid){
continue;
}
CheckValue<IkReal> x12798=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12797.value)+(((1.5707963267949)*(x12798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12799=IKsin(j4);
IkReal x12800=IKcos(j4);
IkReal x12801=(cj5*r00);
IkReal x12802=(cj5*r20);
IkReal x12803=(cj5*r10);
IkReal x12804=((1.0)*x12800);
IkReal x12805=(sj5*x12800);
IkReal x12806=((1.0)*x12799);
IkReal x12807=(sj5*x12806);
evalcond[0]=(((x12799*x12802))+(((-1.0)*r21*x12807))+(((-1.0)*r22*x12804)));
evalcond[1]=(((x12799*x12803))+(((-1.0)*r11*x12807))+(((-1.0)*r12*x12804)));
evalcond[2]=((((-1.0)*r02*x12806))+((r01*x12805))+(((-1.0)*x12801*x12804)));
evalcond[3]=((1.0)+((x12799*x12801))+(((-1.0)*r02*x12804))+(((-1.0)*r01*x12807)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12803*x12804))+(((-1.0)*r12*x12806))+((r11*x12805)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12805))+(((-1.0)*r22*x12806))+(((-1.0)*x12802*x12804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12808=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12808;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12809=((1.0)*sj5);
IkReal x12810=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12809)));
j4eval[0]=x12810;
j4eval[1]=IKsign(x12810);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12809)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12811=(cj1*sj2);
IkReal x12812=(cj5*r00);
IkReal x12813=((1.0)*r02);
IkReal x12814=(cj2*sj1);
IkReal x12815=((1.0)*r01*sj5);
IkReal x12816=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12816;
j4eval[1]=((IKabs(((((-1.0)*x12813*x12814))+(((-1.0)*x12811*x12813)))))+(IKabs((((x12812*x12814))+(((-1.0)*x12814*x12815))+(((-1.0)*x12811*x12815))+((x12811*x12812))))));
j4eval[2]=IKsign(x12816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12817=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12817);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12817);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12818=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12818);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12818);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12819=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x12819))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x12819)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12820=((1.0)*sj5);
CheckValue<IkReal> x12821=IKPowWithIntegerCheck(((((-1.0)*r01*x12820))+((cj5*r00))),-1);
if(!x12821.valid){
continue;
}
CheckValue<IkReal> x12822=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x12820))),-1);
if(!x12822.valid){
continue;
}
if( IKabs(((-1.0)*(x12821.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12822.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12821.value)))+IKsqr(((x12822.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12821.value)), ((x12822.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12823=IKsin(j4);
IkReal x12824=IKcos(j4);
IkReal x12825=(cj5*r00);
IkReal x12826=(cj5*r10);
IkReal x12827=((1.0)*sj5*x12823);
IkReal x12828=((1.0)*sj5*x12824);
evalcond[0]=((-1.0)*r22*x12824);
evalcond[1]=((((-1.0)*cj1*cj2))+((r22*x12823))+((sj1*sj2)));
evalcond[2]=((((-1.0)*r11*x12827))+((x12823*x12826)));
evalcond[3]=(((x12824*x12825))+(((-1.0)*r01*x12828)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12827))+((x12823*x12825)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x12828))+((x12824*x12826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12829=((1.0)*sj1);
CheckValue<IkReal> x12830=IKPowWithIntegerCheck(r22,-1);
if(!x12830.valid){
continue;
}
CheckValue<IkReal> x12831=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12831.valid){
continue;
}
if( IKabs(((x12830.value)*((((cj1*cj2))+(((-1.0)*sj2*x12829)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12831.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12829)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12830.value)*((((cj1*cj2))+(((-1.0)*sj2*x12829))))))+IKsqr(((x12831.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12829))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12830.value)*((((cj1*cj2))+(((-1.0)*sj2*x12829))))), ((x12831.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12829))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12832=IKsin(j4);
IkReal x12833=IKcos(j4);
IkReal x12834=(cj5*r00);
IkReal x12835=(cj5*r10);
IkReal x12836=((1.0)*sj5*x12832);
IkReal x12837=((1.0)*sj5*x12833);
evalcond[0]=((-1.0)*r22*x12833);
evalcond[1]=(((r22*x12832))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[2]=(((x12832*x12835))+(((-1.0)*r11*x12836)));
evalcond[3]=((((-1.0)*r01*x12837))+((x12833*x12834)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12836))+((x12832*x12834)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12833*x12835))+(((-1.0)*r11*x12837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12838=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12838;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12839=((1.0)*sj5);
IkReal x12840=((((-1.0)*r00*x12839))+(((-1.0)*cj5*r01)));
j4eval[0]=x12840;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12839))))));
j4eval[2]=IKsign(x12840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12841=cj5*cj5;
IkReal x12842=r01*r01;
IkReal x12843=(r01*sj5);
IkReal x12844=(cj5*r00);
IkReal x12845=((((2.0)*x12843*x12844))+((x12841*x12842))+(((-1.0)*(r02*r02)))+(((-1.0)*x12842))+(((-1.0)*x12841*(r00*r00))));
j4eval[0]=x12845;
j4eval[1]=IKsign(x12845);
j4eval[2]=((IKabs(r02))+(IKabs((x12844+(((-1.0)*x12843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12846=cj5*cj5;
IkReal x12847=r01*r01;
IkReal x12848=(r01*sj5);
IkReal x12849=(cj5*r00);
CheckValue<IkReal> x12850=IKPowWithIntegerCheck(IKsign(((((2.0)*x12848*x12849))+(((-1.0)*(r02*r02)))+((x12846*x12847))+(((-1.0)*x12847))+(((-1.0)*x12846*(r00*r00))))),-1);
if(!x12850.valid){
continue;
}
CheckValue<IkReal> x12851 = IKatan2WithCheck(IkReal((x12849+(((-1.0)*x12848)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12850.value)))+(x12851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12852=IKcos(j4);
IkReal x12853=IKsin(j4);
IkReal x12854=(r11*sj5);
IkReal x12855=(cj5*r20);
IkReal x12856=(r21*sj5);
IkReal x12857=(r01*sj5);
IkReal x12858=((1.0)*x12852);
IkReal x12859=((1.0)*x12853);
IkReal x12860=(cj5*x12853);
IkReal x12861=(cj5*x12852);
evalcond[0]=((((-1.0)*x12857*x12858))+((r02*x12853))+((r00*x12861)));
evalcond[1]=((((-1.0)*x12854*x12858))+((r12*x12853))+((r10*x12861)));
evalcond[2]=(((x12853*x12855))+(((-1.0)*r22*x12858))+(((-1.0)*x12856*x12859)));
evalcond[3]=((((-1.0)*x12854*x12859))+(((-1.0)*r12*x12858))+((r10*x12860)));
evalcond[4]=((-1.0)+((x12852*x12855))+(((-1.0)*x12856*x12858))+((r22*x12853)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12858))+(((-1.0)*x12857*x12859))+((r00*x12860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12862=((1.0)*sj5);
CheckValue<IkReal> x12863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12862))+(((-1.0)*cj5*r01)))),-1);
if(!x12863.valid){
continue;
}
CheckValue<IkReal> x12864 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x12862)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12863.value)))+(x12864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12865=IKcos(j4);
IkReal x12866=IKsin(j4);
IkReal x12867=(r11*sj5);
IkReal x12868=(cj5*r20);
IkReal x12869=(r21*sj5);
IkReal x12870=(r01*sj5);
IkReal x12871=((1.0)*x12865);
IkReal x12872=((1.0)*x12866);
IkReal x12873=(cj5*x12866);
IkReal x12874=(cj5*x12865);
evalcond[0]=(((r00*x12874))+((r02*x12866))+(((-1.0)*x12870*x12871)));
evalcond[1]=((((-1.0)*x12867*x12871))+((r12*x12866))+((r10*x12874)));
evalcond[2]=((((-1.0)*r22*x12871))+((x12866*x12868))+(((-1.0)*x12869*x12872)));
evalcond[3]=((((-1.0)*x12867*x12872))+(((-1.0)*r12*x12871))+((r10*x12873)));
evalcond[4]=((-1.0)+((x12865*x12868))+(((-1.0)*x12869*x12871))+((r22*x12866)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12871))+((r00*x12873))+(((-1.0)*x12870*x12872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12875 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12875.valid){
continue;
}
CheckValue<IkReal> x12876=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12875.value)+(((1.5707963267949)*(x12876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12877=IKcos(j4);
IkReal x12878=IKsin(j4);
IkReal x12879=(r11*sj5);
IkReal x12880=(cj5*r20);
IkReal x12881=(r21*sj5);
IkReal x12882=(r01*sj5);
IkReal x12883=((1.0)*x12877);
IkReal x12884=((1.0)*x12878);
IkReal x12885=(cj5*x12878);
IkReal x12886=(cj5*x12877);
evalcond[0]=(((r00*x12886))+((r02*x12878))+(((-1.0)*x12882*x12883)));
evalcond[1]=((((-1.0)*x12879*x12883))+((r12*x12878))+((r10*x12886)));
evalcond[2]=((((-1.0)*r22*x12883))+(((-1.0)*x12881*x12884))+((x12878*x12880)));
evalcond[3]=((((-1.0)*x12879*x12884))+(((-1.0)*r12*x12883))+((r10*x12885)));
evalcond[4]=((-1.0)+((r22*x12878))+(((-1.0)*x12881*x12883))+((x12877*x12880)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12883))+((r00*x12885))+(((-1.0)*x12882*x12884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12887=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12887;
j4eval[1]=IKsign(x12887);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12888=((1.0)*sj5);
IkReal x12889=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12888)));
j4eval[0]=x12889;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12888))+((cj5*r00))))));
j4eval[2]=IKsign(x12889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12890=cj5*cj5;
IkReal x12891=r01*r01;
IkReal x12892=(r01*sj5);
IkReal x12893=(cj5*r00);
IkReal x12894=((((-1.0)*x12891))+(((-1.0)*x12890*(r00*r00)))+(((-1.0)*(r02*r02)))+((x12890*x12891))+(((2.0)*x12892*x12893)));
j4eval[0]=x12894;
j4eval[1]=IKsign(x12894);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12892))+x12893))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12895=cj5*cj5;
IkReal x12896=r01*r01;
IkReal x12897=(r01*sj5);
IkReal x12898=(cj5*r00);
CheckValue<IkReal> x12899=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12896))+(((-1.0)*(r02*r02)))+((x12895*x12896))+(((-1.0)*x12895*(r00*r00)))+(((2.0)*x12897*x12898)))),-1);
if(!x12899.valid){
continue;
}
CheckValue<IkReal> x12900 = IKatan2WithCheck(IkReal(((((-1.0)*x12897))+x12898)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12899.value)))+(x12900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12901=IKcos(j4);
IkReal x12902=IKsin(j4);
IkReal x12903=(r11*sj5);
IkReal x12904=(cj5*r20);
IkReal x12905=(r21*sj5);
IkReal x12906=(r01*sj5);
IkReal x12907=((1.0)*x12901);
IkReal x12908=((1.0)*x12902);
IkReal x12909=(cj5*x12902);
IkReal x12910=(cj5*x12901);
evalcond[0]=(((r00*x12910))+(((-1.0)*x12906*x12907))+((r02*x12902)));
evalcond[1]=((((-1.0)*x12903*x12907))+((r12*x12902))+((r10*x12910)));
evalcond[2]=(((x12902*x12904))+(((-1.0)*x12905*x12908))+(((-1.0)*r22*x12907)));
evalcond[3]=((((-1.0)*x12903*x12908))+(((-1.0)*r12*x12907))+((r10*x12909)));
evalcond[4]=((1.0)+(((-1.0)*x12905*x12907))+((x12901*x12904))+((r22*x12902)));
evalcond[5]=((1.0)+((r00*x12909))+(((-1.0)*r02*x12907))+(((-1.0)*x12906*x12908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12911=((1.0)*sj5);
CheckValue<IkReal> x12912 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12911))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12912.valid){
continue;
}
CheckValue<IkReal> x12913=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12911)))),-1);
if(!x12913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12912.value)+(((1.5707963267949)*(x12913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12914=IKcos(j4);
IkReal x12915=IKsin(j4);
IkReal x12916=(r11*sj5);
IkReal x12917=(cj5*r20);
IkReal x12918=(r21*sj5);
IkReal x12919=(r01*sj5);
IkReal x12920=((1.0)*x12914);
IkReal x12921=((1.0)*x12915);
IkReal x12922=(cj5*x12915);
IkReal x12923=(cj5*x12914);
evalcond[0]=((((-1.0)*x12919*x12920))+((r02*x12915))+((r00*x12923)));
evalcond[1]=(((r10*x12923))+((r12*x12915))+(((-1.0)*x12916*x12920)));
evalcond[2]=((((-1.0)*x12918*x12921))+((x12915*x12917))+(((-1.0)*r22*x12920)));
evalcond[3]=((((-1.0)*r12*x12920))+((r10*x12922))+(((-1.0)*x12916*x12921)));
evalcond[4]=((1.0)+(((-1.0)*x12918*x12920))+((x12914*x12917))+((r22*x12915)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12920))+(((-1.0)*x12919*x12921))+((r00*x12922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12924 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12924.valid){
continue;
}
CheckValue<IkReal> x12925=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12924.value)+(((1.5707963267949)*(x12925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12926=IKcos(j4);
IkReal x12927=IKsin(j4);
IkReal x12928=(r11*sj5);
IkReal x12929=(cj5*r20);
IkReal x12930=(r21*sj5);
IkReal x12931=(r01*sj5);
IkReal x12932=((1.0)*x12926);
IkReal x12933=((1.0)*x12927);
IkReal x12934=(cj5*x12927);
IkReal x12935=(cj5*x12926);
evalcond[0]=(((r02*x12927))+((r00*x12935))+(((-1.0)*x12931*x12932)));
evalcond[1]=((((-1.0)*x12928*x12932))+((r10*x12935))+((r12*x12927)));
evalcond[2]=((((-1.0)*x12930*x12933))+((x12927*x12929))+(((-1.0)*r22*x12932)));
evalcond[3]=((((-1.0)*x12928*x12933))+(((-1.0)*r12*x12932))+((r10*x12934)));
evalcond[4]=((1.0)+(((-1.0)*x12930*x12932))+((x12926*x12929))+((r22*x12927)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12932))+((r00*x12934))+(((-1.0)*x12931*x12933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12936=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12936;
j4eval[1]=IKsign(x12936);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12937=((1.0)*sj5);
IkReal x12938=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12937)));
j4eval[0]=x12938;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12937))+((cj5*r00))))));
j4eval[2]=IKsign(x12938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12939=cj5*cj5;
IkReal x12940=r01*r01;
IkReal x12941=(r01*sj5);
IkReal x12942=(cj5*r00);
IkReal x12943=(((x12939*x12940))+(((-1.0)*(r02*r02)))+(((2.0)*x12941*x12942))+(((-1.0)*x12940))+(((-1.0)*x12939*(r00*r00))));
j4eval[0]=x12943;
j4eval[1]=IKsign(x12943);
j4eval[2]=((IKabs(r02))+(IKabs((x12942+(((-1.0)*x12941))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12944=cj5*cj5;
IkReal x12945=r01*r01;
IkReal x12946=(r01*sj5);
IkReal x12947=(cj5*r00);
CheckValue<IkReal> x12948 = IKatan2WithCheck(IkReal((x12947+(((-1.0)*x12946)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12948.valid){
continue;
}
CheckValue<IkReal> x12949=IKPowWithIntegerCheck(IKsign((((x12944*x12945))+(((-1.0)*(r02*r02)))+(((-1.0)*x12944*(r00*r00)))+(((-1.0)*x12945))+(((2.0)*x12946*x12947)))),-1);
if(!x12949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12948.value)+(((1.5707963267949)*(x12949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12950=IKcos(j4);
IkReal x12951=IKsin(j4);
IkReal x12952=(r11*sj5);
IkReal x12953=(cj5*r20);
IkReal x12954=(r21*sj5);
IkReal x12955=(r01*sj5);
IkReal x12956=((1.0)*x12950);
IkReal x12957=((1.0)*x12951);
IkReal x12958=(cj5*x12951);
IkReal x12959=(cj5*x12950);
evalcond[0]=((((-1.0)*x12955*x12956))+((r00*x12959))+((r02*x12951)));
evalcond[1]=(((r10*x12959))+(((-1.0)*x12952*x12956))+((r12*x12951)));
evalcond[2]=((((-1.0)*x12954*x12957))+((x12951*x12953))+(((-1.0)*r22*x12956)));
evalcond[3]=((((-1.0)*r12*x12956))+((r10*x12958))+(((-1.0)*x12952*x12957)));
evalcond[4]=((1.0)+(((-1.0)*x12954*x12956))+((r22*x12951))+((x12950*x12953)));
evalcond[5]=((1.0)+(((-1.0)*x12955*x12957))+((r00*x12958))+(((-1.0)*r02*x12956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12960=((1.0)*sj5);
CheckValue<IkReal> x12961=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12960)))),-1);
if(!x12961.valid){
continue;
}
CheckValue<IkReal> x12962 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12960))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12961.value)))+(x12962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12963=IKcos(j4);
IkReal x12964=IKsin(j4);
IkReal x12965=(r11*sj5);
IkReal x12966=(cj5*r20);
IkReal x12967=(r21*sj5);
IkReal x12968=(r01*sj5);
IkReal x12969=((1.0)*x12963);
IkReal x12970=((1.0)*x12964);
IkReal x12971=(cj5*x12964);
IkReal x12972=(cj5*x12963);
evalcond[0]=(((r00*x12972))+((r02*x12964))+(((-1.0)*x12968*x12969)));
evalcond[1]=((((-1.0)*x12965*x12969))+((r12*x12964))+((r10*x12972)));
evalcond[2]=((((-1.0)*r22*x12969))+((x12964*x12966))+(((-1.0)*x12967*x12970)));
evalcond[3]=((((-1.0)*x12965*x12970))+(((-1.0)*r12*x12969))+((r10*x12971)));
evalcond[4]=((1.0)+(((-1.0)*x12967*x12969))+((r22*x12964))+((x12963*x12966)));
evalcond[5]=((1.0)+((r00*x12971))+(((-1.0)*r02*x12969))+(((-1.0)*x12968*x12970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12973 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12973.valid){
continue;
}
CheckValue<IkReal> x12974=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12973.value)+(((1.5707963267949)*(x12974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12975=IKcos(j4);
IkReal x12976=IKsin(j4);
IkReal x12977=(r11*sj5);
IkReal x12978=(cj5*r20);
IkReal x12979=(r21*sj5);
IkReal x12980=(r01*sj5);
IkReal x12981=((1.0)*x12975);
IkReal x12982=((1.0)*x12976);
IkReal x12983=(cj5*x12976);
IkReal x12984=(cj5*x12975);
evalcond[0]=((((-1.0)*x12980*x12981))+((r02*x12976))+((r00*x12984)));
evalcond[1]=(((r10*x12984))+(((-1.0)*x12977*x12981))+((r12*x12976)));
evalcond[2]=((((-1.0)*r22*x12981))+((x12976*x12978))+(((-1.0)*x12979*x12982)));
evalcond[3]=(((r10*x12983))+(((-1.0)*x12977*x12982))+(((-1.0)*r12*x12981)));
evalcond[4]=((1.0)+((x12975*x12978))+(((-1.0)*x12979*x12981))+((r22*x12976)));
evalcond[5]=((1.0)+(((-1.0)*x12980*x12982))+((r00*x12983))+(((-1.0)*r02*x12981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12985=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12985;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12986=((1.0)*sj5);
IkReal x12987=((((-1.0)*r00*x12986))+(((-1.0)*cj5*r01)));
j4eval[0]=x12987;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12986))))));
j4eval[2]=IKsign(x12987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12988=cj5*cj5;
IkReal x12989=r01*r01;
IkReal x12990=(r01*sj5);
IkReal x12991=(cj5*r00);
IkReal x12992=((((-1.0)*x12988*(r00*r00)))+(((2.0)*x12990*x12991))+((x12988*x12989))+(((-1.0)*(r02*r02)))+(((-1.0)*x12989)));
j4eval[0]=x12992;
j4eval[1]=IKsign(x12992);
j4eval[2]=((IKabs(r02))+(IKabs((x12991+(((-1.0)*x12990))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12993=cj5*cj5;
IkReal x12994=r01*r01;
IkReal x12995=(r01*sj5);
IkReal x12996=(cj5*r00);
CheckValue<IkReal> x12997=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x12993*x12994))+(((2.0)*x12995*x12996))+(((-1.0)*x12994))+(((-1.0)*x12993*(r00*r00))))),-1);
if(!x12997.valid){
continue;
}
CheckValue<IkReal> x12998 = IKatan2WithCheck(IkReal((x12996+(((-1.0)*x12995)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12997.value)))+(x12998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12999=IKcos(j4);
IkReal x13000=IKsin(j4);
IkReal x13001=(r11*sj5);
IkReal x13002=(cj5*r20);
IkReal x13003=(r21*sj5);
IkReal x13004=(r01*sj5);
IkReal x13005=((1.0)*x12999);
IkReal x13006=((1.0)*x13000);
IkReal x13007=(cj5*x13000);
IkReal x13008=(cj5*x12999);
evalcond[0]=(((r00*x13008))+(((-1.0)*x13004*x13005))+((r02*x13000)));
evalcond[1]=((((-1.0)*x13001*x13005))+((r12*x13000))+((r10*x13008)));
evalcond[2]=((((-1.0)*x13003*x13006))+(((-1.0)*r22*x13005))+((x13000*x13002)));
evalcond[3]=((((-1.0)*r12*x13005))+(((-1.0)*x13001*x13006))+((r10*x13007)));
evalcond[4]=((-1.0)+(((-1.0)*x13003*x13005))+((x12999*x13002))+((r22*x13000)));
evalcond[5]=((1.0)+((r00*x13007))+(((-1.0)*x13004*x13006))+(((-1.0)*r02*x13005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13009=((1.0)*sj5);
CheckValue<IkReal> x13010 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x13009))+((cj5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13010.valid){
continue;
}
CheckValue<IkReal> x13011=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13009))+(((-1.0)*cj5*r01)))),-1);
if(!x13011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13010.value)+(((1.5707963267949)*(x13011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13012=IKcos(j4);
IkReal x13013=IKsin(j4);
IkReal x13014=(r11*sj5);
IkReal x13015=(cj5*r20);
IkReal x13016=(r21*sj5);
IkReal x13017=(r01*sj5);
IkReal x13018=((1.0)*x13012);
IkReal x13019=((1.0)*x13013);
IkReal x13020=(cj5*x13013);
IkReal x13021=(cj5*x13012);
evalcond[0]=(((r00*x13021))+((r02*x13013))+(((-1.0)*x13017*x13018)));
evalcond[1]=((((-1.0)*x13014*x13018))+((r12*x13013))+((r10*x13021)));
evalcond[2]=((((-1.0)*x13016*x13019))+(((-1.0)*r22*x13018))+((x13013*x13015)));
evalcond[3]=((((-1.0)*x13014*x13019))+(((-1.0)*r12*x13018))+((r10*x13020)));
evalcond[4]=((-1.0)+(((-1.0)*x13016*x13018))+((x13012*x13015))+((r22*x13013)));
evalcond[5]=((1.0)+((r00*x13020))+(((-1.0)*x13017*x13019))+(((-1.0)*r02*x13018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13022 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13022.valid){
continue;
}
CheckValue<IkReal> x13023=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13022.value)+(((1.5707963267949)*(x13023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13024=IKcos(j4);
IkReal x13025=IKsin(j4);
IkReal x13026=(r11*sj5);
IkReal x13027=(cj5*r20);
IkReal x13028=(r21*sj5);
IkReal x13029=(r01*sj5);
IkReal x13030=((1.0)*x13024);
IkReal x13031=((1.0)*x13025);
IkReal x13032=(cj5*x13025);
IkReal x13033=(cj5*x13024);
evalcond[0]=((((-1.0)*x13029*x13030))+((r02*x13025))+((r00*x13033)));
evalcond[1]=((((-1.0)*x13026*x13030))+((r10*x13033))+((r12*x13025)));
evalcond[2]=((((-1.0)*x13028*x13031))+(((-1.0)*r22*x13030))+((x13025*x13027)));
evalcond[3]=((((-1.0)*r12*x13030))+(((-1.0)*x13026*x13031))+((r10*x13032)));
evalcond[4]=((-1.0)+(((-1.0)*x13028*x13030))+((x13024*x13027))+((r22*x13025)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13030))+(((-1.0)*x13029*x13031))+((r00*x13032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13034=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13034;
j4eval[1]=IKsign(x13034);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13035=((1.0)*sj5);
IkReal x13036=((((-1.0)*cj5*r11))+(((-1.0)*r10*x13035)));
j4eval[0]=x13036;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x13035))+((cj5*r00))))));
j4eval[2]=IKsign(x13036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13037=cj5*cj5;
IkReal x13038=r01*r01;
IkReal x13039=(r01*sj5);
IkReal x13040=(cj5*r00);
IkReal x13041=((((-1.0)*x13038))+(((2.0)*x13039*x13040))+(((-1.0)*(r02*r02)))+((x13037*x13038))+(((-1.0)*x13037*(r00*r00))));
j4eval[0]=x13041;
j4eval[1]=IKsign(x13041);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x13039))+x13040))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13042=cj5*cj5;
IkReal x13043=r01*r01;
IkReal x13044=(r01*sj5);
IkReal x13045=(cj5*r00);
CheckValue<IkReal> x13046 = IKatan2WithCheck(IkReal(((((-1.0)*x13044))+x13045)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13046.valid){
continue;
}
CheckValue<IkReal> x13047=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13042*(r00*r00)))+(((-1.0)*x13043))+((x13042*x13043))+(((-1.0)*(r02*r02)))+(((2.0)*x13044*x13045)))),-1);
if(!x13047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13046.value)+(((1.5707963267949)*(x13047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13048=IKcos(j4);
IkReal x13049=IKsin(j4);
IkReal x13050=(r11*sj5);
IkReal x13051=(cj5*r20);
IkReal x13052=(r21*sj5);
IkReal x13053=(r01*sj5);
IkReal x13054=((1.0)*x13048);
IkReal x13055=((1.0)*x13049);
IkReal x13056=(cj5*x13049);
IkReal x13057=(cj5*x13048);
evalcond[0]=(((r02*x13049))+((r00*x13057))+(((-1.0)*x13053*x13054)));
evalcond[1]=(((r10*x13057))+(((-1.0)*x13050*x13054))+((r12*x13049)));
evalcond[2]=((((-1.0)*r22*x13054))+(((-1.0)*x13052*x13055))+((x13049*x13051)));
evalcond[3]=((((-1.0)*r12*x13054))+((r10*x13056))+(((-1.0)*x13050*x13055)));
evalcond[4]=((1.0)+((x13048*x13051))+((r22*x13049))+(((-1.0)*x13052*x13054)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13054))+((r00*x13056))+(((-1.0)*x13053*x13055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13058=((1.0)*sj5);
CheckValue<IkReal> x13059 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13058))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13059.valid){
continue;
}
CheckValue<IkReal> x13060=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13058)))),-1);
if(!x13060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13059.value)+(((1.5707963267949)*(x13060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13061=IKcos(j4);
IkReal x13062=IKsin(j4);
IkReal x13063=(r11*sj5);
IkReal x13064=(cj5*r20);
IkReal x13065=(r21*sj5);
IkReal x13066=(r01*sj5);
IkReal x13067=((1.0)*x13061);
IkReal x13068=((1.0)*x13062);
IkReal x13069=(cj5*x13062);
IkReal x13070=(cj5*x13061);
evalcond[0]=(((r02*x13062))+((r00*x13070))+(((-1.0)*x13066*x13067)));
evalcond[1]=(((r12*x13062))+((r10*x13070))+(((-1.0)*x13063*x13067)));
evalcond[2]=(((x13062*x13064))+(((-1.0)*r22*x13067))+(((-1.0)*x13065*x13068)));
evalcond[3]=((((-1.0)*x13063*x13068))+(((-1.0)*r12*x13067))+((r10*x13069)));
evalcond[4]=((1.0)+((r22*x13062))+(((-1.0)*x13065*x13067))+((x13061*x13064)));
evalcond[5]=((1.0)+(((-1.0)*x13066*x13068))+(((-1.0)*r02*x13067))+((r00*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13071 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13071.valid){
continue;
}
CheckValue<IkReal> x13072=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13071.value)+(((1.5707963267949)*(x13072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13073=IKcos(j4);
IkReal x13074=IKsin(j4);
IkReal x13075=(r11*sj5);
IkReal x13076=(cj5*r20);
IkReal x13077=(r21*sj5);
IkReal x13078=(r01*sj5);
IkReal x13079=((1.0)*x13073);
IkReal x13080=((1.0)*x13074);
IkReal x13081=(cj5*x13074);
IkReal x13082=(cj5*x13073);
evalcond[0]=(((r02*x13074))+(((-1.0)*x13078*x13079))+((r00*x13082)));
evalcond[1]=(((r12*x13074))+(((-1.0)*x13075*x13079))+((r10*x13082)));
evalcond[2]=(((x13074*x13076))+(((-1.0)*x13077*x13080))+(((-1.0)*r22*x13079)));
evalcond[3]=((((-1.0)*r12*x13079))+(((-1.0)*x13075*x13080))+((r10*x13081)));
evalcond[4]=((1.0)+((x13073*x13076))+(((-1.0)*x13077*x13079))+((r22*x13074)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13079))+((r00*x13081))+(((-1.0)*x13078*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13083=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13083;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x13083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13084=((1.0)*sj5);
IkReal x13085=((((-1.0)*r00*x13084))+(((-1.0)*cj5*r01)));
j4eval[0]=x13085;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13084))))));
j4eval[2]=IKsign(x13085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13086=cj5*cj5;
IkReal x13087=r01*r01;
IkReal x13088=(r01*sj5);
IkReal x13089=(cj5*r00);
IkReal x13090=((((2.0)*x13088*x13089))+(((-1.0)*(r02*r02)))+(((-1.0)*x13086*(r00*r00)))+((x13086*x13087))+(((-1.0)*x13087)));
j4eval[0]=x13090;
j4eval[1]=IKsign(x13090);
j4eval[2]=((IKabs(r02))+(IKabs((x13089+(((-1.0)*x13088))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13091=cj5*cj5;
IkReal x13092=r01*r01;
IkReal x13093=(r01*sj5);
IkReal x13094=(cj5*r00);
CheckValue<IkReal> x13095 = IKatan2WithCheck(IkReal((x13094+(((-1.0)*x13093)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13095.valid){
continue;
}
CheckValue<IkReal> x13096=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13091*(r00*r00)))+(((-1.0)*(r02*r02)))+((x13091*x13092))+(((2.0)*x13093*x13094))+(((-1.0)*x13092)))),-1);
if(!x13096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13095.value)+(((1.5707963267949)*(x13096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13097=IKcos(j4);
IkReal x13098=IKsin(j4);
IkReal x13099=(r11*sj5);
IkReal x13100=(cj5*r20);
IkReal x13101=(r21*sj5);
IkReal x13102=(r01*sj5);
IkReal x13103=((1.0)*x13097);
IkReal x13104=((1.0)*x13098);
IkReal x13105=(cj5*x13098);
IkReal x13106=(cj5*x13097);
evalcond[0]=(((r00*x13106))+((r02*x13098))+(((-1.0)*x13102*x13103)));
evalcond[1]=((((-1.0)*x13099*x13103))+((r12*x13098))+((r10*x13106)));
evalcond[2]=(((x13098*x13100))+(((-1.0)*x13101*x13104))+(((-1.0)*r22*x13103)));
evalcond[3]=((((-1.0)*x13099*x13104))+(((-1.0)*r12*x13103))+((r10*x13105)));
evalcond[4]=((-1.0)+((x13097*x13100))+(((-1.0)*x13101*x13103))+((r22*x13098)));
evalcond[5]=((1.0)+((r00*x13105))+(((-1.0)*x13102*x13104))+(((-1.0)*r02*x13103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13107=((1.0)*sj5);
CheckValue<IkReal> x13108 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x13107)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13108.valid){
continue;
}
CheckValue<IkReal> x13109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13107))+(((-1.0)*cj5*r01)))),-1);
if(!x13109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13108.value)+(((1.5707963267949)*(x13109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13110=IKcos(j4);
IkReal x13111=IKsin(j4);
IkReal x13112=(r11*sj5);
IkReal x13113=(cj5*r20);
IkReal x13114=(r21*sj5);
IkReal x13115=(r01*sj5);
IkReal x13116=((1.0)*x13110);
IkReal x13117=((1.0)*x13111);
IkReal x13118=(cj5*x13111);
IkReal x13119=(cj5*x13110);
evalcond[0]=(((r02*x13111))+(((-1.0)*x13115*x13116))+((r00*x13119)));
evalcond[1]=(((r12*x13111))+(((-1.0)*x13112*x13116))+((r10*x13119)));
evalcond[2]=((((-1.0)*x13114*x13117))+((x13111*x13113))+(((-1.0)*r22*x13116)));
evalcond[3]=((((-1.0)*r12*x13116))+(((-1.0)*x13112*x13117))+((r10*x13118)));
evalcond[4]=((-1.0)+((r22*x13111))+(((-1.0)*x13114*x13116))+((x13110*x13113)));
evalcond[5]=((1.0)+(((-1.0)*x13115*x13117))+(((-1.0)*r02*x13116))+((r00*x13118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13120 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13120.valid){
continue;
}
CheckValue<IkReal> x13121=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13120.value)+(((1.5707963267949)*(x13121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13122=IKcos(j4);
IkReal x13123=IKsin(j4);
IkReal x13124=(r11*sj5);
IkReal x13125=(cj5*r20);
IkReal x13126=(r21*sj5);
IkReal x13127=(r01*sj5);
IkReal x13128=((1.0)*x13122);
IkReal x13129=((1.0)*x13123);
IkReal x13130=(cj5*x13123);
IkReal x13131=(cj5*x13122);
evalcond[0]=((((-1.0)*x13127*x13128))+((r00*x13131))+((r02*x13123)));
evalcond[1]=(((r10*x13131))+(((-1.0)*x13124*x13128))+((r12*x13123)));
evalcond[2]=((((-1.0)*x13126*x13129))+((x13123*x13125))+(((-1.0)*r22*x13128)));
evalcond[3]=(((r10*x13130))+(((-1.0)*x13124*x13129))+(((-1.0)*r12*x13128)));
evalcond[4]=((-1.0)+(((-1.0)*x13126*x13128))+((x13122*x13125))+((r22*x13123)));
evalcond[5]=((1.0)+(((-1.0)*x13127*x13129))+(((-1.0)*r02*x13128))+((r00*x13130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13132=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13132;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x13132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13133=((1.0)*sj5);
IkReal x13134=((((-1.0)*cj5*r01))+(((-1.0)*r00*x13133)));
j4eval[0]=x13134;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13133))))));
j4eval[2]=IKsign(x13134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13135=cj5*cj5;
IkReal x13136=r01*r01;
IkReal x13137=(r01*sj5);
IkReal x13138=(cj5*r00);
IkReal x13139=(((x13135*x13136))+(((2.0)*x13137*x13138))+(((-1.0)*(r02*r02)))+(((-1.0)*x13135*(r00*r00)))+(((-1.0)*x13136)));
j4eval[0]=x13139;
j4eval[1]=IKsign(x13139);
j4eval[2]=((IKabs(r02))+(IKabs((x13138+(((-1.0)*x13137))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13140=cj5*cj5;
IkReal x13141=r01*r01;
IkReal x13142=(r01*sj5);
IkReal x13143=(cj5*r00);
CheckValue<IkReal> x13144=IKPowWithIntegerCheck(IKsign(((((2.0)*x13142*x13143))+(((-1.0)*x13140*(r00*r00)))+((x13140*x13141))+(((-1.0)*(r02*r02)))+(((-1.0)*x13141)))),-1);
if(!x13144.valid){
continue;
}
CheckValue<IkReal> x13145 = IKatan2WithCheck(IkReal((x13143+(((-1.0)*x13142)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13144.value)))+(x13145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13146=IKcos(j4);
IkReal x13147=IKsin(j4);
IkReal x13148=(r11*sj5);
IkReal x13149=(cj5*r20);
IkReal x13150=(r21*sj5);
IkReal x13151=(r01*sj5);
IkReal x13152=((1.0)*x13146);
IkReal x13153=((1.0)*x13147);
IkReal x13154=(cj5*x13147);
IkReal x13155=(cj5*x13146);
evalcond[0]=((((-1.0)*x13151*x13152))+((r02*x13147))+((r00*x13155)));
evalcond[1]=((((-1.0)*x13148*x13152))+((r12*x13147))+((r10*x13155)));
evalcond[2]=(((x13147*x13149))+(((-1.0)*r22*x13152))+(((-1.0)*x13150*x13153)));
evalcond[3]=((((-1.0)*r12*x13152))+(((-1.0)*x13148*x13153))+((r10*x13154)));
evalcond[4]=((-1.0)+((r22*x13147))+((x13146*x13149))+(((-1.0)*x13150*x13152)));
evalcond[5]=((1.0)+(((-1.0)*x13151*x13153))+(((-1.0)*r02*x13152))+((r00*x13154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13156=((1.0)*sj5);
CheckValue<IkReal> x13157=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13156))+(((-1.0)*cj5*r01)))),-1);
if(!x13157.valid){
continue;
}
CheckValue<IkReal> x13158 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x13156))+((cj5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13157.value)))+(x13158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13159=IKcos(j4);
IkReal x13160=IKsin(j4);
IkReal x13161=(r11*sj5);
IkReal x13162=(cj5*r20);
IkReal x13163=(r21*sj5);
IkReal x13164=(r01*sj5);
IkReal x13165=((1.0)*x13159);
IkReal x13166=((1.0)*x13160);
IkReal x13167=(cj5*x13160);
IkReal x13168=(cj5*x13159);
evalcond[0]=(((r00*x13168))+((r02*x13160))+(((-1.0)*x13164*x13165)));
evalcond[1]=((((-1.0)*x13161*x13165))+((r12*x13160))+((r10*x13168)));
evalcond[2]=(((x13160*x13162))+(((-1.0)*x13163*x13166))+(((-1.0)*r22*x13165)));
evalcond[3]=((((-1.0)*r12*x13165))+(((-1.0)*x13161*x13166))+((r10*x13167)));
evalcond[4]=((-1.0)+((r22*x13160))+(((-1.0)*x13163*x13165))+((x13159*x13162)));
evalcond[5]=((1.0)+((r00*x13167))+(((-1.0)*x13164*x13166))+(((-1.0)*r02*x13165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13169 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13169.valid){
continue;
}
CheckValue<IkReal> x13170=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13169.value)+(((1.5707963267949)*(x13170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13171=IKcos(j4);
IkReal x13172=IKsin(j4);
IkReal x13173=(r11*sj5);
IkReal x13174=(cj5*r20);
IkReal x13175=(r21*sj5);
IkReal x13176=(r01*sj5);
IkReal x13177=((1.0)*x13171);
IkReal x13178=((1.0)*x13172);
IkReal x13179=(cj5*x13172);
IkReal x13180=(cj5*x13171);
evalcond[0]=(((r02*x13172))+((r00*x13180))+(((-1.0)*x13176*x13177)));
evalcond[1]=((((-1.0)*x13173*x13177))+((r10*x13180))+((r12*x13172)));
evalcond[2]=((((-1.0)*r22*x13177))+(((-1.0)*x13175*x13178))+((x13172*x13174)));
evalcond[3]=((((-1.0)*x13173*x13178))+(((-1.0)*r12*x13177))+((r10*x13179)));
evalcond[4]=((-1.0)+((r22*x13172))+((x13171*x13174))+(((-1.0)*x13175*x13177)));
evalcond[5]=((1.0)+((r00*x13179))+(((-1.0)*r02*x13177))+(((-1.0)*x13176*x13178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13181=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13181;
j4eval[1]=IKsign(x13181);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13182=((1.0)*sj5);
IkReal x13183=((((-1.0)*cj5*r11))+(((-1.0)*r10*x13182)));
j4eval[0]=x13183;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x13182))+((cj5*r00))))));
j4eval[2]=IKsign(x13183);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13184=cj5*cj5;
IkReal x13185=r01*r01;
IkReal x13186=(r01*sj5);
IkReal x13187=(cj5*r00);
IkReal x13188=((((-1.0)*x13184*(r00*r00)))+(((-1.0)*x13185))+(((-1.0)*(r02*r02)))+((x13184*x13185))+(((2.0)*x13186*x13187)));
j4eval[0]=x13188;
j4eval[1]=IKsign(x13188);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x13186))+x13187))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13189=cj5*cj5;
IkReal x13190=r01*r01;
IkReal x13191=(r01*sj5);
IkReal x13192=(cj5*r00);
CheckValue<IkReal> x13193=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13190))+(((-1.0)*(r02*r02)))+(((-1.0)*x13189*(r00*r00)))+(((2.0)*x13191*x13192))+((x13189*x13190)))),-1);
if(!x13193.valid){
continue;
}
CheckValue<IkReal> x13194 = IKatan2WithCheck(IkReal(((((-1.0)*x13191))+x13192)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13193.value)))+(x13194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13195=IKcos(j4);
IkReal x13196=IKsin(j4);
IkReal x13197=(r11*sj5);
IkReal x13198=(cj5*r20);
IkReal x13199=(r21*sj5);
IkReal x13200=(r01*sj5);
IkReal x13201=((1.0)*x13195);
IkReal x13202=((1.0)*x13196);
IkReal x13203=(cj5*x13196);
IkReal x13204=(cj5*x13195);
evalcond[0]=(((r00*x13204))+((r02*x13196))+(((-1.0)*x13200*x13201)));
evalcond[1]=(((r12*x13196))+((r10*x13204))+(((-1.0)*x13197*x13201)));
evalcond[2]=((((-1.0)*x13199*x13202))+((x13196*x13198))+(((-1.0)*r22*x13201)));
evalcond[3]=(((r10*x13203))+(((-1.0)*r12*x13201))+(((-1.0)*x13197*x13202)));
evalcond[4]=((1.0)+(((-1.0)*x13199*x13201))+((x13195*x13198))+((r22*x13196)));
evalcond[5]=((1.0)+((r00*x13203))+(((-1.0)*r02*x13201))+(((-1.0)*x13200*x13202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13205=((1.0)*sj5);
CheckValue<IkReal> x13206 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13205))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13206.valid){
continue;
}
CheckValue<IkReal> x13207=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13205)))),-1);
if(!x13207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13206.value)+(((1.5707963267949)*(x13207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13208=IKcos(j4);
IkReal x13209=IKsin(j4);
IkReal x13210=(r11*sj5);
IkReal x13211=(cj5*r20);
IkReal x13212=(r21*sj5);
IkReal x13213=(r01*sj5);
IkReal x13214=((1.0)*x13208);
IkReal x13215=((1.0)*x13209);
IkReal x13216=(cj5*x13209);
IkReal x13217=(cj5*x13208);
evalcond[0]=(((r00*x13217))+((r02*x13209))+(((-1.0)*x13213*x13214)));
evalcond[1]=(((r10*x13217))+(((-1.0)*x13210*x13214))+((r12*x13209)));
evalcond[2]=(((x13209*x13211))+(((-1.0)*r22*x13214))+(((-1.0)*x13212*x13215)));
evalcond[3]=(((r10*x13216))+(((-1.0)*x13210*x13215))+(((-1.0)*r12*x13214)));
evalcond[4]=((1.0)+((r22*x13209))+((x13208*x13211))+(((-1.0)*x13212*x13214)));
evalcond[5]=((1.0)+((r00*x13216))+(((-1.0)*x13213*x13215))+(((-1.0)*r02*x13214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13218 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13218.valid){
continue;
}
CheckValue<IkReal> x13219=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13218.value)+(((1.5707963267949)*(x13219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13220=IKcos(j4);
IkReal x13221=IKsin(j4);
IkReal x13222=(r11*sj5);
IkReal x13223=(cj5*r20);
IkReal x13224=(r21*sj5);
IkReal x13225=(r01*sj5);
IkReal x13226=((1.0)*x13220);
IkReal x13227=((1.0)*x13221);
IkReal x13228=(cj5*x13221);
IkReal x13229=(cj5*x13220);
evalcond[0]=(((r02*x13221))+(((-1.0)*x13225*x13226))+((r00*x13229)));
evalcond[1]=(((r10*x13229))+((r12*x13221))+(((-1.0)*x13222*x13226)));
evalcond[2]=((((-1.0)*r22*x13226))+((x13221*x13223))+(((-1.0)*x13224*x13227)));
evalcond[3]=(((r10*x13228))+(((-1.0)*r12*x13226))+(((-1.0)*x13222*x13227)));
evalcond[4]=((1.0)+((r22*x13221))+((x13220*x13223))+(((-1.0)*x13224*x13226)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13226))+(((-1.0)*x13225*x13227))+((r00*x13228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13230=(cj1*sj2);
IkReal x13231=(cj5*r00);
IkReal x13232=((1.0)*r02);
IkReal x13233=(cj2*sj1);
IkReal x13234=((1.0)*r01*sj5);
CheckValue<IkReal> x13235 = IKatan2WithCheck(IkReal((((x13230*x13231))+(((-1.0)*x13233*x13234))+((x13231*x13233))+(((-1.0)*x13230*x13234)))),IkReal(((((-1.0)*x13232*x13233))+(((-1.0)*x13230*x13232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13235.valid){
continue;
}
CheckValue<IkReal> x13236=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13235.value)+(((1.5707963267949)*(x13236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13237=IKcos(j4);
IkReal x13238=IKsin(j4);
IkReal x13239=((1.0)*x13237);
IkReal x13240=(cj5*x13237);
IkReal x13241=(cj5*x13238);
IkReal x13242=((1.0)*sj5*x13238);
evalcond[0]=(((r02*x13238))+(((-1.0)*r01*sj5*x13239))+((r00*x13240)));
evalcond[1]=((((-1.0)*r22*x13239))+(((-1.0)*r21*x13242))+((r20*x13241)));
evalcond[2]=(((r10*x13241))+(((-1.0)*r12*x13239))+(((-1.0)*r11*x13242)));
evalcond[3]=((1.0)+(((-1.0)*r01*x13242))+(((-1.0)*r02*x13239))+((r00*x13241)));
evalcond[4]=(((cj2*sj1))+((r10*x13240))+((cj1*sj2))+(((-1.0)*r11*sj5*x13239))+((r12*x13238)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13238))+(((-1.0)*r21*sj5*x13239))+((r20*x13240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13243=((1.0)*sj5);
CheckValue<IkReal> x13244 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x13243)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13244.valid){
continue;
}
CheckValue<IkReal> x13245=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13243)))),-1);
if(!x13245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13244.value)+(((1.5707963267949)*(x13245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13246=IKcos(j4);
IkReal x13247=IKsin(j4);
IkReal x13248=((1.0)*x13246);
IkReal x13249=(cj5*x13246);
IkReal x13250=(cj5*x13247);
IkReal x13251=((1.0)*sj5*x13247);
evalcond[0]=((((-1.0)*r01*sj5*x13248))+((r02*x13247))+((r00*x13249)));
evalcond[1]=((((-1.0)*r22*x13248))+(((-1.0)*r21*x13251))+((r20*x13250)));
evalcond[2]=(((r10*x13250))+(((-1.0)*r11*x13251))+(((-1.0)*r12*x13248)));
evalcond[3]=((1.0)+(((-1.0)*r02*x13248))+((r00*x13250))+(((-1.0)*r01*x13251)));
evalcond[4]=(((cj2*sj1))+((r10*x13249))+((cj1*sj2))+((r12*x13247))+(((-1.0)*r11*sj5*x13248)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13247))+(((-1.0)*r21*sj5*x13248))+((r20*x13249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13252 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13252.valid){
continue;
}
CheckValue<IkReal> x13253=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13252.value)+(((1.5707963267949)*(x13253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13254=IKcos(j4);
IkReal x13255=IKsin(j4);
IkReal x13256=((1.0)*x13254);
IkReal x13257=(cj5*x13254);
IkReal x13258=(cj5*x13255);
IkReal x13259=((1.0)*sj5*x13255);
evalcond[0]=(((r02*x13255))+(((-1.0)*r01*sj5*x13256))+((r00*x13257)));
evalcond[1]=((((-1.0)*r22*x13256))+(((-1.0)*r21*x13259))+((r20*x13258)));
evalcond[2]=(((r10*x13258))+(((-1.0)*r11*x13259))+(((-1.0)*r12*x13256)));
evalcond[3]=((1.0)+(((-1.0)*r02*x13256))+((r00*x13258))+(((-1.0)*r01*x13259)));
evalcond[4]=(((cj2*sj1))+((r10*x13257))+((cj1*sj2))+((r12*x13255))+(((-1.0)*r11*sj5*x13256)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13255))+(((-1.0)*r21*sj5*x13256))+((r20*x13257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13260=((-1.0)*r10);
IkReal x13262 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13262)==0){
continue;
}
IkReal x13261=pow(x13262,-0.5);
CheckValue<IkReal> x13263 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13260),IKFAST_ATAN2_MAGTHRESH);
if(!x13263.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13263.value));
IkReal gconst19=(r11*x13261);
IkReal gconst20=(x13260*x13261);
CheckValue<IkReal> x13264 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13264.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13264.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13265=((-1.0)*r10);
IkReal x13266=x13261;
CheckValue<IkReal> x13268 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13265),IKFAST_ATAN2_MAGTHRESH);
if(!x13268.valid){
continue;
}
IkReal x13267=((-1.0)*(x13268.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13267;
IkReal gconst18=x13267;
IkReal gconst19=(r11*x13266);
IkReal gconst20=(x13265*x13266);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13269=((-1.0)*r10);
IkReal x13270=x13261;
CheckValue<IkReal> x13272 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13269),IKFAST_ATAN2_MAGTHRESH);
if(!x13272.valid){
continue;
}
IkReal x13271=((-1.0)*(x13272.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13271;
IkReal gconst18=x13271;
IkReal gconst19=(r11*x13270);
IkReal gconst20=(x13269*x13270);
CheckValue<IkReal> x13280=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13280.valid){
continue;
}
IkReal x13273=x13280.value;
IkReal x13274=(cj3*x13273);
IkReal x13275=(r00*x13274);
IkReal x13276=(r21*x13274);
IkReal x13277=(r20*x13274);
IkReal x13278=(r01*x13274);
IkReal x13279=(r10*r11*x13274);
j4eval[0]=IKsign((((r20*x13275*(r10*r10)))+((r10*r11*r21*x13275))+((r01*x13276*(r11*r11)))+((cj3*r02*r22))+((r01*r10*r11*x13277))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13281=((-1.0)*r10);
IkReal x13282=x13261;
CheckValue<IkReal> x13284 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13281),IKFAST_ATAN2_MAGTHRESH);
if(!x13284.valid){
continue;
}
IkReal x13283=((-1.0)*(x13284.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13283;
IkReal gconst18=x13283;
IkReal gconst19=(r11*x13282);
IkReal gconst20=(x13281*x13282);
CheckValue<IkReal> x13292=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13292.valid){
continue;
}
IkReal x13285=x13292.value;
IkReal x13286=(sj3*x13285);
IkReal x13287=(r20*x13286);
IkReal x13288=(r00*x13286);
IkReal x13289=(r01*x13286);
IkReal x13290=(r21*x13286);
IkReal x13291=(r10*r11*x13286);
j4eval[0]=IKsign((((r10*r11*r21*x13288))+((r00*x13287*(r10*r10)))+((r21*x13289*(r11*r11)))+((r01*r10*r11*x13287))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13293=((-1.0)*r10);
IkReal x13294=x13261;
CheckValue<IkReal> x13296 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13293),IKFAST_ATAN2_MAGTHRESH);
if(!x13296.valid){
continue;
}
IkReal x13295=((-1.0)*(x13296.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13295;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13295;
IkReal gconst19=(r11*x13294);
IkReal gconst20=(x13293*x13294);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13297=((-1.0)*r10);
IkReal x13298=x13261;
CheckValue<IkReal> x13300 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13297),IKFAST_ATAN2_MAGTHRESH);
if(!x13300.valid){
continue;
}
IkReal x13299=((-1.0)*(x13300.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13299;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13299;
IkReal gconst19=(r11*x13298);
IkReal gconst20=(x13297*x13298);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13301=((-1.0)*r10);
IkReal x13302=x13261;
CheckValue<IkReal> x13304 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13301),IKFAST_ATAN2_MAGTHRESH);
if(!x13304.valid){
continue;
}
IkReal x13303=((-1.0)*(x13304.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13303;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13303;
IkReal gconst19=(r11*x13302);
IkReal gconst20=(x13301*x13302);
IkReal x13305=r12*r12;
IkReal x13306=(r02*sj1*sj2);
CheckValue<IkReal> x13311=IKPowWithIntegerCheck(((-1.0)+x13305),-1);
if(!x13311.valid){
continue;
}
IkReal x13307=x13311.value;
IkReal x13308=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x13305)))) < -0.00001)
continue;
IkReal x13309=IKsqrt(((1.0)+(((-1.0)*x13305))));
IkReal x13310=(r12*x13307*x13309);
j4eval[0]=((IKabs(((((-1.0)*x13308*x13310))+((x13306*x13310)))))+(IKabs(((((-1.0)*x13308))+x13306))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13312=(gconst19*r01);
IkReal x13313=(sj1*sj2);
IkReal x13314=(gconst20*r00);
IkReal x13315=((1.0)*cj1*cj2);
CheckValue<IkReal> x13316 = IKatan2WithCheck(IkReal(((((-1.0)*x13312*x13315))+(((-1.0)*x13313*x13314))+((x13312*x13313))+((cj1*cj2*x13314)))),IkReal(((((-1.0)*r02*x13315))+((r02*x13313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13316.valid){
continue;
}
CheckValue<IkReal> x13317=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13316.value)+(((1.5707963267949)*(x13317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13318=IKsin(j4);
IkReal x13319=IKcos(j4);
IkReal x13320=(gconst20*r20);
IkReal x13321=(gconst20*r00);
IkReal x13322=((1.0)*cj2);
IkReal x13323=(gconst20*r10);
IkReal x13324=((1.0)*x13319);
IkReal x13325=(gconst19*x13319);
IkReal x13326=((1.0)*x13318);
evalcond[0]=((((-1.0)*r22*x13324))+((x13318*x13320))+(((-1.0)*gconst19*r21*x13326)));
evalcond[1]=((((-1.0)*r12*x13324))+((x13318*x13323))+(((-1.0)*gconst19*r11*x13326)));
evalcond[2]=((((-1.0)*x13321*x13324))+(((-1.0)*r02*x13326))+((r01*x13325)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x13326))+(((-1.0)*r02*x13324))+((x13318*x13321)));
evalcond[4]=((((-1.0)*r12*x13326))+((sj1*sj2))+(((-1.0)*x13323*x13324))+(((-1.0)*cj1*x13322))+((r11*x13325)));
evalcond[5]=((((-1.0)*sj1*x13322))+(((-1.0)*r22*x13326))+(((-1.0)*x13320*x13324))+(((-1.0)*cj1*sj2))+((r21*x13325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13327=(gconst19*r01);
IkReal x13328=(gconst20*r00);
CheckValue<IkReal> x13329=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13327*x13328))+(x13327*x13327)+(x13328*x13328)+(r02*r02))),-1);
if(!x13329.valid){
continue;
}
CheckValue<IkReal> x13330 = IKatan2WithCheck(IkReal(((((-1.0)*x13328))+x13327)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13329.value)))+(x13330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13331=IKsin(j4);
IkReal x13332=IKcos(j4);
IkReal x13333=(gconst20*r20);
IkReal x13334=(gconst20*r00);
IkReal x13335=((1.0)*cj2);
IkReal x13336=(gconst20*r10);
IkReal x13337=((1.0)*x13332);
IkReal x13338=(gconst19*x13332);
IkReal x13339=((1.0)*x13331);
evalcond[0]=((((-1.0)*r22*x13337))+(((-1.0)*gconst19*r21*x13339))+((x13331*x13333)));
evalcond[1]=((((-1.0)*r12*x13337))+(((-1.0)*gconst19*r11*x13339))+((x13331*x13336)));
evalcond[2]=(((r01*x13338))+(((-1.0)*x13334*x13337))+(((-1.0)*r02*x13339)));
evalcond[3]=((1.0)+((x13331*x13334))+(((-1.0)*gconst19*r01*x13339))+(((-1.0)*r02*x13337)));
evalcond[4]=((((-1.0)*r12*x13339))+(((-1.0)*x13336*x13337))+((sj1*sj2))+(((-1.0)*cj1*x13335))+((r11*x13338)));
evalcond[5]=((((-1.0)*sj1*x13335))+(((-1.0)*r22*x13339))+(((-1.0)*cj1*sj2))+(((-1.0)*x13333*x13337))+((r21*x13338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13340 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13340.valid){
continue;
}
CheckValue<IkReal> x13341=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13340.value)+(((1.5707963267949)*(x13341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13342=IKsin(j4);
IkReal x13343=IKcos(j4);
IkReal x13344=(gconst20*r20);
IkReal x13345=(gconst20*r00);
IkReal x13346=((1.0)*cj2);
IkReal x13347=(gconst20*r10);
IkReal x13348=((1.0)*x13343);
IkReal x13349=(gconst19*x13343);
IkReal x13350=((1.0)*x13342);
evalcond[0]=(((x13342*x13344))+(((-1.0)*gconst19*r21*x13350))+(((-1.0)*r22*x13348)));
evalcond[1]=(((x13342*x13347))+(((-1.0)*gconst19*r11*x13350))+(((-1.0)*r12*x13348)));
evalcond[2]=((((-1.0)*r02*x13350))+(((-1.0)*x13345*x13348))+((r01*x13349)));
evalcond[3]=((1.0)+(((-1.0)*r02*x13348))+((x13342*x13345))+(((-1.0)*gconst19*r01*x13350)));
evalcond[4]=((((-1.0)*r12*x13350))+((sj1*sj2))+((r11*x13349))+(((-1.0)*x13347*x13348))+(((-1.0)*cj1*x13346)));
evalcond[5]=((((-1.0)*r22*x13350))+((r21*x13349))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13346))+(((-1.0)*x13344*x13348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13351=((-1.0)*r10);
IkReal x13352=x13261;
CheckValue<IkReal> x13354 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13351),IKFAST_ATAN2_MAGTHRESH);
if(!x13354.valid){
continue;
}
IkReal x13353=((-1.0)*(x13354.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13353;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13353;
IkReal gconst19=(r11*x13352);
IkReal gconst20=(x13351*x13352);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13355=((-1.0)*r10);
IkReal x13356=x13261;
CheckValue<IkReal> x13358 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13355),IKFAST_ATAN2_MAGTHRESH);
if(!x13358.valid){
continue;
}
IkReal x13357=((-1.0)*(x13358.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13357;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13357;
IkReal gconst19=(r11*x13356);
IkReal gconst20=(x13355*x13356);
IkReal x13359=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x13363=IKPowWithIntegerCheck(x13359,-1);
if(!x13363.valid){
continue;
}
IkReal x13360=x13363.value;
IkReal x13361=((1.0)*x13360);
IkReal x13362=((((-1.0)*(r02*r02)))+(((-1.0)*x13361*(r00*r00)*(r10*r10)))+(((-1.0)*x13361*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x13360)));
j4eval[0]=x13362;
j4eval[1]=r02;
j4eval[2]=x13359;
j4eval[3]=IKsign(x13362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13364=((-1.0)*r10);
IkReal x13365=x13261;
CheckValue<IkReal> x13367 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13364),IKFAST_ATAN2_MAGTHRESH);
if(!x13367.valid){
continue;
}
IkReal x13366=((-1.0)*(x13367.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13366;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13366;
IkReal gconst19=(r11*x13365);
IkReal gconst20=(x13364*x13365);
IkReal x13368=r12*r12;
IkReal x13369=(cj1*cj2*r02);
CheckValue<IkReal> x13374=IKPowWithIntegerCheck(((-1.0)+x13368),-1);
if(!x13374.valid){
continue;
}
IkReal x13370=x13374.value;
IkReal x13371=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x13368)))) < -0.00001)
continue;
IkReal x13372=IKsqrt(((1.0)+(((-1.0)*x13368))));
IkReal x13373=(r12*x13370*x13372);
j4eval[0]=((IKabs(((((-1.0)*x13371))+x13369)))+(IKabs((((x13369*x13373))+(((-1.0)*x13371*x13373))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13375=(sj1*sj2);
IkReal x13376=(cj1*cj2);
IkReal x13377=(gconst19*r01);
IkReal x13378=(gconst20*r00);
CheckValue<IkReal> x13379=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13379.valid){
continue;
}
CheckValue<IkReal> x13380 = IKatan2WithCheck(IkReal((((x13376*x13377))+(((-1.0)*x13376*x13378))+((x13375*x13378))+(((-1.0)*x13375*x13377)))),IkReal((((r02*x13376))+(((-1.0)*r02*x13375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13379.value)))+(x13380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13381=IKcos(j4);
IkReal x13382=IKsin(j4);
IkReal x13383=(gconst20*r00);
IkReal x13384=((1.0)*cj2);
IkReal x13385=(gconst19*r21);
IkReal x13386=(gconst20*r20);
IkReal x13387=(gconst19*r01);
IkReal x13388=(gconst20*r10);
IkReal x13389=(gconst19*r11);
IkReal x13390=((1.0)*x13381);
IkReal x13391=((1.0)*x13382);
evalcond[0]=((((-1.0)*x13387*x13390))+((x13381*x13383))+((r02*x13382)));
evalcond[1]=((((-1.0)*r22*x13390))+((x13382*x13386))+(((-1.0)*x13385*x13391)));
evalcond[2]=((((-1.0)*x13389*x13391))+((x13382*x13388))+(((-1.0)*r12*x13390)));
evalcond[3]=((1.0)+(((-1.0)*x13387*x13391))+((x13382*x13383))+(((-1.0)*r02*x13390)));
evalcond[4]=(((r12*x13382))+(((-1.0)*x13389*x13390))+((sj1*sj2))+((x13381*x13388))+(((-1.0)*cj1*x13384)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13385*x13390))+((x13381*x13386))+((r22*x13382))+(((-1.0)*sj1*x13384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13392=(gconst20*r00);
IkReal x13393=(gconst19*r01);
CheckValue<IkReal> x13394 = IKatan2WithCheck(IkReal(((((-1.0)*x13393))+x13392)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13394.valid){
continue;
}
CheckValue<IkReal> x13395=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13393*x13393)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x13392*x13392)))+(((2.0)*x13392*x13393)))),-1);
if(!x13395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13394.value)+(((1.5707963267949)*(x13395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13396=IKcos(j4);
IkReal x13397=IKsin(j4);
IkReal x13398=(gconst20*r00);
IkReal x13399=((1.0)*cj2);
IkReal x13400=(gconst19*r21);
IkReal x13401=(gconst20*r20);
IkReal x13402=(gconst19*r01);
IkReal x13403=(gconst20*r10);
IkReal x13404=(gconst19*r11);
IkReal x13405=((1.0)*x13396);
IkReal x13406=((1.0)*x13397);
evalcond[0]=((((-1.0)*x13402*x13405))+((x13396*x13398))+((r02*x13397)));
evalcond[1]=(((x13397*x13401))+(((-1.0)*x13400*x13406))+(((-1.0)*r22*x13405)));
evalcond[2]=(((x13397*x13403))+(((-1.0)*r12*x13405))+(((-1.0)*x13404*x13406)));
evalcond[3]=((1.0)+(((-1.0)*r02*x13405))+(((-1.0)*x13402*x13406))+((x13397*x13398)));
evalcond[4]=(((r12*x13397))+((sj1*sj2))+(((-1.0)*cj1*x13399))+(((-1.0)*x13404*x13405))+((x13396*x13403)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13400*x13405))+((r22*x13397))+(((-1.0)*sj1*x13399))+((x13396*x13401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13407 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13407.valid){
continue;
}
CheckValue<IkReal> x13408=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13407.value)+(((1.5707963267949)*(x13408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13409=IKcos(j4);
IkReal x13410=IKsin(j4);
IkReal x13411=(gconst20*r00);
IkReal x13412=((1.0)*cj2);
IkReal x13413=(gconst19*r21);
IkReal x13414=(gconst20*r20);
IkReal x13415=(gconst19*r01);
IkReal x13416=(gconst20*r10);
IkReal x13417=(gconst19*r11);
IkReal x13418=((1.0)*x13409);
IkReal x13419=((1.0)*x13410);
evalcond[0]=(((r02*x13410))+((x13409*x13411))+(((-1.0)*x13415*x13418)));
evalcond[1]=(((x13410*x13414))+(((-1.0)*x13413*x13419))+(((-1.0)*r22*x13418)));
evalcond[2]=((((-1.0)*r12*x13418))+((x13410*x13416))+(((-1.0)*x13417*x13419)));
evalcond[3]=((1.0)+((x13410*x13411))+(((-1.0)*r02*x13418))+(((-1.0)*x13415*x13419)));
evalcond[4]=(((x13409*x13416))+((sj1*sj2))+(((-1.0)*cj1*x13412))+((r12*x13410))+(((-1.0)*x13417*x13418)));
evalcond[5]=(((r22*x13410))+((x13409*x13414))+(((-1.0)*x13413*x13418))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13420=((-1.0)*r10);
IkReal x13421=x13261;
CheckValue<IkReal> x13423 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13420),IKFAST_ATAN2_MAGTHRESH);
if(!x13423.valid){
continue;
}
IkReal x13422=((-1.0)*(x13423.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13422;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13422;
IkReal gconst19=(r11*x13421);
IkReal gconst20=(x13420*x13421);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13424=((-1.0)*r10);
IkReal x13425=x13261;
CheckValue<IkReal> x13427 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13424),IKFAST_ATAN2_MAGTHRESH);
if(!x13427.valid){
continue;
}
IkReal x13426=((-1.0)*(x13427.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13426;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13426;
IkReal gconst19=(r11*x13425);
IkReal gconst20=(x13424*x13425);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13428=((-1.0)*r10);
IkReal x13429=x13261;
CheckValue<IkReal> x13431 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13428),IKFAST_ATAN2_MAGTHRESH);
if(!x13431.valid){
continue;
}
IkReal x13430=((-1.0)*(x13431.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13430;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13430;
IkReal gconst19=(r11*x13429);
IkReal gconst20=(x13428*x13429);
IkReal x13432=(cj1*r02*sj2);
IkReal x13433=(cj2*r02*sj1);
IkReal x13434=x13261;
IkReal x13435=(r12*x13434);
j4eval[0]=((IKabs((((x13432*x13435))+((x13433*x13435)))))+(IKabs((x13432+x13433))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13436=(cj2*sj1);
IkReal x13437=(gconst19*r01);
IkReal x13438=(cj1*sj2);
IkReal x13439=((1.0)*gconst20*r00);
CheckValue<IkReal> x13440 = IKatan2WithCheck(IkReal(((((-1.0)*x13436*x13439))+((x13436*x13437))+((x13437*x13438))+(((-1.0)*x13438*x13439)))),IkReal((((r02*x13438))+((r02*x13436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13440.valid){
continue;
}
CheckValue<IkReal> x13441=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13440.value)+(((1.5707963267949)*(x13441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13442=IKsin(j4);
IkReal x13443=IKcos(j4);
IkReal x13444=(gconst20*r20);
IkReal x13445=(gconst20*r00);
IkReal x13446=(gconst20*r10);
IkReal x13447=((1.0)*x13443);
IkReal x13448=(gconst19*x13443);
IkReal x13449=((1.0)*x13442);
evalcond[0]=(((x13442*x13444))+(((-1.0)*gconst19*r21*x13449))+(((-1.0)*r22*x13447)));
evalcond[1]=(((x13442*x13446))+(((-1.0)*r12*x13447))+(((-1.0)*gconst19*r11*x13449)));
evalcond[2]=((((-1.0)*r02*x13449))+((r01*x13448))+(((-1.0)*x13445*x13447)));
evalcond[3]=((1.0)+((x13442*x13445))+(((-1.0)*r02*x13447))+(((-1.0)*gconst19*r01*x13449)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x13449))+((r11*x13448))+(((-1.0)*x13446*x13447)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13449))+(((-1.0)*x13444*x13447))+((r21*x13448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13450=(gconst19*r01);
IkReal x13451=(gconst20*r00);
CheckValue<IkReal> x13452=IKPowWithIntegerCheck(IKsign(((x13451*x13451)+(((-2.0)*x13450*x13451))+(x13450*x13450)+(r02*r02))),-1);
if(!x13452.valid){
continue;
}
CheckValue<IkReal> x13453 = IKatan2WithCheck(IkReal((x13450+(((-1.0)*x13451)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13452.value)))+(x13453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13454=IKsin(j4);
IkReal x13455=IKcos(j4);
IkReal x13456=(gconst20*r20);
IkReal x13457=(gconst20*r00);
IkReal x13458=(gconst20*r10);
IkReal x13459=((1.0)*x13455);
IkReal x13460=(gconst19*x13455);
IkReal x13461=((1.0)*x13454);
evalcond[0]=((((-1.0)*r22*x13459))+((x13454*x13456))+(((-1.0)*gconst19*r21*x13461)));
evalcond[1]=((((-1.0)*gconst19*r11*x13461))+((x13454*x13458))+(((-1.0)*r12*x13459)));
evalcond[2]=((((-1.0)*x13457*x13459))+(((-1.0)*r02*x13461))+((r01*x13460)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x13461))+((x13454*x13457))+(((-1.0)*r02*x13459)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x13460))+(((-1.0)*x13458*x13459))+(((-1.0)*r12*x13461)));
evalcond[5]=((((-1.0)*r22*x13461))+((r21*x13460))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13456*x13459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13462 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13462.valid){
continue;
}
CheckValue<IkReal> x13463=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13462.value)+(((1.5707963267949)*(x13463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13464=IKsin(j4);
IkReal x13465=IKcos(j4);
IkReal x13466=(gconst20*r20);
IkReal x13467=(gconst20*r00);
IkReal x13468=(gconst20*r10);
IkReal x13469=((1.0)*x13465);
IkReal x13470=(gconst19*x13465);
IkReal x13471=((1.0)*x13464);
evalcond[0]=((((-1.0)*r22*x13469))+((x13464*x13466))+(((-1.0)*gconst19*r21*x13471)));
evalcond[1]=(((x13464*x13468))+(((-1.0)*r12*x13469))+(((-1.0)*gconst19*r11*x13471)));
evalcond[2]=(((r01*x13470))+(((-1.0)*r02*x13471))+(((-1.0)*x13467*x13469)));
evalcond[3]=((1.0)+((x13464*x13467))+(((-1.0)*r02*x13469))+(((-1.0)*gconst19*r01*x13471)));
evalcond[4]=(((cj2*sj1))+((r11*x13470))+((cj1*sj2))+(((-1.0)*x13468*x13469))+(((-1.0)*r12*x13471)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x13470))+(((-1.0)*x13466*x13469))+(((-1.0)*r22*x13471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13472=((-1.0)*r10);
IkReal x13473=x13261;
CheckValue<IkReal> x13475 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13472),IKFAST_ATAN2_MAGTHRESH);
if(!x13475.valid){
continue;
}
IkReal x13474=((-1.0)*(x13475.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13474;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13474;
IkReal gconst19=(r11*x13473);
IkReal gconst20=(x13472*x13473);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13476=((-1.0)*r10);
IkReal x13477=x13261;
CheckValue<IkReal> x13479 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13476),IKFAST_ATAN2_MAGTHRESH);
if(!x13479.valid){
continue;
}
IkReal x13478=((-1.0)*(x13479.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13478;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13478;
IkReal gconst19=(r11*x13477);
IkReal gconst20=(x13476*x13477);
IkReal x13480=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x13484=IKPowWithIntegerCheck(x13480,-1);
if(!x13484.valid){
continue;
}
IkReal x13481=x13484.value;
IkReal x13482=((1.0)*x13481);
IkReal x13483=((((-1.0)*x13482*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-1.0)*x13482*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x13481)));
j4eval[0]=x13483;
j4eval[1]=r02;
j4eval[2]=x13480;
j4eval[3]=IKsign(x13483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13485=((-1.0)*r10);
IkReal x13486=x13261;
CheckValue<IkReal> x13488 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13485),IKFAST_ATAN2_MAGTHRESH);
if(!x13488.valid){
continue;
}
IkReal x13487=((-1.0)*(x13488.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13487;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13487;
IkReal gconst19=(r11*x13486);
IkReal gconst20=(x13485*x13486);
IkReal x13489=r12*r12;
IkReal x13490=((1.0)*r02);
IkReal x13491=(cj1*sj2);
IkReal x13492=(cj2*sj1);
CheckValue<IkReal> x13496=IKPowWithIntegerCheck(((-1.0)+x13489),-1);
if(!x13496.valid){
continue;
}
IkReal x13493=x13496.value;
if((((1.0)+(((-1.0)*x13489)))) < -0.00001)
continue;
IkReal x13494=IKsqrt(((1.0)+(((-1.0)*x13489))));
IkReal x13495=(r12*x13493*x13494);
j4eval[0]=((IKabs(((((-1.0)*x13490*x13491))+(((-1.0)*x13490*x13492)))))+(IKabs(((((-1.0)*x13490*x13491*x13495))+(((-1.0)*x13490*x13492*x13495))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13497=(gconst19*r01);
IkReal x13498=(cj2*sj1);
IkReal x13499=(gconst20*r00);
IkReal x13500=((1.0)*cj1*sj2);
CheckValue<IkReal> x13501 = IKatan2WithCheck(IkReal((((x13498*x13499))+(((-1.0)*x13497*x13498))+(((-1.0)*x13497*x13500))+((cj1*sj2*x13499)))),IkReal(((((-1.0)*r02*x13498))+(((-1.0)*r02*x13500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13501.valid){
continue;
}
CheckValue<IkReal> x13502=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13501.value)+(((1.5707963267949)*(x13502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13503=IKcos(j4);
IkReal x13504=IKsin(j4);
IkReal x13505=(gconst20*r00);
IkReal x13506=(gconst19*r21);
IkReal x13507=(gconst20*r20);
IkReal x13508=(gconst19*r01);
IkReal x13509=(gconst20*r10);
IkReal x13510=(gconst19*r11);
IkReal x13511=((1.0)*x13503);
IkReal x13512=((1.0)*x13504);
evalcond[0]=((((-1.0)*x13508*x13511))+((r02*x13504))+((x13503*x13505)));
evalcond[1]=((((-1.0)*r22*x13511))+(((-1.0)*x13506*x13512))+((x13504*x13507)));
evalcond[2]=((((-1.0)*r12*x13511))+((x13504*x13509))+(((-1.0)*x13510*x13512)));
evalcond[3]=((1.0)+(((-1.0)*x13508*x13512))+((x13504*x13505))+(((-1.0)*r02*x13511)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13503*x13509))+((r12*x13504))+(((-1.0)*x13510*x13511)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13506*x13511))+((r22*x13504))+((x13503*x13507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13513=(gconst20*r00);
IkReal x13514=(gconst19*r01);
CheckValue<IkReal> x13515=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x13514*x13514)))+(((2.0)*x13513*x13514))+(((-1.0)*(x13513*x13513))))),-1);
if(!x13515.valid){
continue;
}
CheckValue<IkReal> x13516 = IKatan2WithCheck(IkReal((x13513+(((-1.0)*x13514)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13515.value)))+(x13516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13517=IKcos(j4);
IkReal x13518=IKsin(j4);
IkReal x13519=(gconst20*r00);
IkReal x13520=(gconst19*r21);
IkReal x13521=(gconst20*r20);
IkReal x13522=(gconst19*r01);
IkReal x13523=(gconst20*r10);
IkReal x13524=(gconst19*r11);
IkReal x13525=((1.0)*x13517);
IkReal x13526=((1.0)*x13518);
evalcond[0]=(((r02*x13518))+(((-1.0)*x13522*x13525))+((x13517*x13519)));
evalcond[1]=((((-1.0)*r22*x13525))+((x13518*x13521))+(((-1.0)*x13520*x13526)));
evalcond[2]=((((-1.0)*r12*x13525))+((x13518*x13523))+(((-1.0)*x13524*x13526)));
evalcond[3]=((1.0)+((x13518*x13519))+(((-1.0)*x13522*x13526))+(((-1.0)*r02*x13525)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13524*x13525))+((r12*x13518))+((x13517*x13523)));
evalcond[5]=((((-1.0)*x13520*x13525))+((r22*x13518))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13517*x13521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13527 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13527.valid){
continue;
}
CheckValue<IkReal> x13528=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13527.value)+(((1.5707963267949)*(x13528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13529=IKcos(j4);
IkReal x13530=IKsin(j4);
IkReal x13531=(gconst20*r00);
IkReal x13532=(gconst19*r21);
IkReal x13533=(gconst20*r20);
IkReal x13534=(gconst19*r01);
IkReal x13535=(gconst20*r10);
IkReal x13536=(gconst19*r11);
IkReal x13537=((1.0)*x13529);
IkReal x13538=((1.0)*x13530);
evalcond[0]=((((-1.0)*x13534*x13537))+((r02*x13530))+((x13529*x13531)));
evalcond[1]=((((-1.0)*r22*x13537))+((x13530*x13533))+(((-1.0)*x13532*x13538)));
evalcond[2]=(((x13530*x13535))+(((-1.0)*r12*x13537))+(((-1.0)*x13536*x13538)));
evalcond[3]=((1.0)+((x13530*x13531))+(((-1.0)*x13534*x13538))+(((-1.0)*r02*x13537)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13529*x13535))+((r12*x13530))+(((-1.0)*x13536*x13537)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13532*x13537))+((x13529*x13533))+((r22*x13530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13539=((-1.0)*r10);
IkReal x13540=((-1.0)*pz);
CheckValue<IkReal> x13542 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13539),IKFAST_ATAN2_MAGTHRESH);
if(!x13542.valid){
continue;
}
IkReal x13541=((-1.0)*(x13542.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13541;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13540);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13540);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13541;
IkReal gconst19=r11;
IkReal gconst20=x13539;
IkReal x13543=(r00*r10);
IkReal x13544=(r01*r11);
j4eval[0]=((((-1.0)*x13543))+(((-1.0)*x13544)));
j4eval[1]=(((sj3*x13544))+((sj3*x13543)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13545=((-1.0)*r10);
IkReal x13546=((-1.0)*pz);
CheckValue<IkReal> x13548 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13545),IKFAST_ATAN2_MAGTHRESH);
if(!x13548.valid){
continue;
}
IkReal x13547=((-1.0)*(x13548.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13547;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13546);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13546);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13547;
IkReal gconst19=r11;
IkReal gconst20=x13545;
IkReal x13549=(r00*r10);
IkReal x13550=(r01*r11);
j4eval[0]=((((-1.0)*x13550))+(((-1.0)*x13549)));
j4eval[1]=(((cj3*x13550))+((cj3*x13549)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13551=((-1.0)*r10);
IkReal x13552=((-1.0)*pz);
CheckValue<IkReal> x13554 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13551),IKFAST_ATAN2_MAGTHRESH);
if(!x13554.valid){
continue;
}
IkReal x13553=((-1.0)*(x13554.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13553;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13552);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13552);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13553;
IkReal gconst19=r11;
IkReal gconst20=x13551;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*r11))+((cj3*r00*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13555=((1.0)*r00);
CheckValue<IkReal> x13556=IKPowWithIntegerCheck(r22,-1);
if(!x13556.valid){
continue;
}
CheckValue<IkReal> x13557=IKPowWithIntegerCheck(sj3,-1);
if(!x13557.valid){
continue;
}
CheckValue<IkReal> x13558=IKPowWithIntegerCheck((((cj3*gconst19*r01))+(((-1.0)*cj3*gconst20*x13555))),-1);
if(!x13558.valid){
continue;
}
if( IKabs(((x13556.value)*(x13557.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13558.value)*(((((-1.0)*gconst20*r01*sj3))+(((-1.0)*gconst19*sj3*x13555)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13556.value)*(x13557.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13558.value)*(((((-1.0)*gconst20*r01*sj3))+(((-1.0)*gconst19*sj3*x13555))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13556.value)*(x13557.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13558.value)*(((((-1.0)*gconst20*r01*sj3))+(((-1.0)*gconst19*sj3*x13555))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13559=IKsin(j4);
IkReal x13560=IKcos(j4);
IkReal x13561=(sj1*sj2);
IkReal x13562=(gconst20*r00);
IkReal x13563=(cj3*gconst19);
IkReal x13564=(gconst19*sj3);
IkReal x13565=((1.0)*cj1);
IkReal x13566=((1.0)*cj3);
IkReal x13567=(gconst20*r11);
IkReal x13568=(gconst20*sj3);
IkReal x13569=(cj2*sj1);
IkReal x13570=(gconst20*r10);
IkReal x13571=(cj2*x13565);
IkReal x13572=(r22*x13559);
IkReal x13573=((1.0)*x13560);
IkReal x13574=(x13560*x13564);
IkReal x13575=((1.0)*gconst19*x13559);
evalcond[0]=((-1.0)*r22*x13560);
evalcond[1]=(((x13559*x13570))+(((-1.0)*r11*x13575)));
evalcond[2]=((1.0)+((x13559*x13562))+(((-1.0)*r01*x13575)));
evalcond[3]=(x13561+(((-1.0)*sj3*x13572))+(((-1.0)*x13571)));
evalcond[4]=((((-1.0)*sj2*x13565))+(((-1.0)*x13566*x13572))+(((-1.0)*x13569)));
evalcond[5]=(((r00*x13564))+((r01*x13560*x13563))+((r01*x13568))+(((-1.0)*x13560*x13562*x13566)));
evalcond[6]=((((-1.0)*r00*x13563))+(((-1.0)*sj3*x13562*x13573))+(((-1.0)*gconst20*r01*x13566))+((r01*x13574)));
evalcond[7]=(x13561+((sj3*x13567))+((r10*x13564))+(((-1.0)*x13560*x13566*x13570))+((r11*x13560*x13563))+(((-1.0)*x13571)));
evalcond[8]=((((-1.0)*x13566*x13567))+x13569+((cj1*sj2))+(((-1.0)*r10*x13563))+((r11*x13574))+(((-1.0)*r10*x13568*x13573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13576=((1.0)*r00);
IkReal x13577=(gconst19*r01);
CheckValue<IkReal> x13578=IKPowWithIntegerCheck((((gconst20*r00))+(((-1.0)*x13577))),-1);
if(!x13578.valid){
continue;
}
CheckValue<IkReal> x13579=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst20*x13576))+((cj3*x13577))),-1);
if(!x13579.valid){
continue;
}
if( IKabs(((-1.0)*(x13578.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13579.value)*(((((-1.0)*gconst19*sj3*x13576))+(((-1.0)*gconst20*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13578.value)))+IKsqr(((x13579.value)*(((((-1.0)*gconst19*sj3*x13576))+(((-1.0)*gconst20*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13578.value)), ((x13579.value)*(((((-1.0)*gconst19*sj3*x13576))+(((-1.0)*gconst20*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13580=IKsin(j4);
IkReal x13581=IKcos(j4);
IkReal x13582=(sj1*sj2);
IkReal x13583=(gconst20*r00);
IkReal x13584=(cj3*gconst19);
IkReal x13585=(gconst19*sj3);
IkReal x13586=((1.0)*cj1);
IkReal x13587=((1.0)*cj3);
IkReal x13588=(gconst20*r11);
IkReal x13589=(gconst20*sj3);
IkReal x13590=(cj2*sj1);
IkReal x13591=(gconst20*r10);
IkReal x13592=(cj2*x13586);
IkReal x13593=(r22*x13580);
IkReal x13594=((1.0)*x13581);
IkReal x13595=(x13581*x13585);
IkReal x13596=((1.0)*gconst19*x13580);
evalcond[0]=((-1.0)*r22*x13581);
evalcond[1]=(((x13580*x13591))+(((-1.0)*r11*x13596)));
evalcond[2]=((1.0)+(((-1.0)*r01*x13596))+((x13580*x13583)));
evalcond[3]=(x13582+(((-1.0)*sj3*x13593))+(((-1.0)*x13592)));
evalcond[4]=((((-1.0)*sj2*x13586))+(((-1.0)*x13590))+(((-1.0)*x13587*x13593)));
evalcond[5]=(((r00*x13585))+((r01*x13589))+((r01*x13581*x13584))+(((-1.0)*x13581*x13583*x13587)));
evalcond[6]=(((r01*x13595))+(((-1.0)*sj3*x13583*x13594))+(((-1.0)*gconst20*r01*x13587))+(((-1.0)*r00*x13584)));
evalcond[7]=(x13582+(((-1.0)*x13581*x13587*x13591))+((r10*x13585))+((sj3*x13588))+((r11*x13581*x13584))+(((-1.0)*x13592)));
evalcond[8]=(x13590+(((-1.0)*r10*x13589*x13594))+((r11*x13595))+((cj1*sj2))+(((-1.0)*x13587*x13588))+(((-1.0)*r10*x13584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13597=(gconst20*r00);
IkReal x13598=(gconst19*r01);
CheckValue<IkReal> x13599=IKPowWithIntegerCheck((x13597+(((-1.0)*x13598))),-1);
if(!x13599.valid){
continue;
}
CheckValue<IkReal> x13600=IKPowWithIntegerCheck(((((-1.0)*sj3*x13597))+((sj3*x13598))),-1);
if(!x13600.valid){
continue;
}
if( IKabs(((-1.0)*(x13599.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13600.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13599.value)))+IKsqr(((x13600.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13599.value)), ((x13600.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13601=IKsin(j4);
IkReal x13602=IKcos(j4);
IkReal x13603=(sj1*sj2);
IkReal x13604=(gconst20*r00);
IkReal x13605=(cj3*gconst19);
IkReal x13606=(gconst19*sj3);
IkReal x13607=((1.0)*cj1);
IkReal x13608=((1.0)*cj3);
IkReal x13609=(gconst20*r11);
IkReal x13610=(gconst20*sj3);
IkReal x13611=(cj2*sj1);
IkReal x13612=(gconst20*r10);
IkReal x13613=(cj2*x13607);
IkReal x13614=(r22*x13601);
IkReal x13615=((1.0)*x13602);
IkReal x13616=(x13602*x13606);
IkReal x13617=((1.0)*gconst19*x13601);
evalcond[0]=((-1.0)*r22*x13602);
evalcond[1]=(((x13601*x13612))+(((-1.0)*r11*x13617)));
evalcond[2]=((1.0)+((x13601*x13604))+(((-1.0)*r01*x13617)));
evalcond[3]=((((-1.0)*x13613))+x13603+(((-1.0)*sj3*x13614)));
evalcond[4]=((((-1.0)*x13608*x13614))+(((-1.0)*sj2*x13607))+(((-1.0)*x13611)));
evalcond[5]=(((r01*x13602*x13605))+(((-1.0)*x13602*x13604*x13608))+((r01*x13610))+((r00*x13606)));
evalcond[6]=((((-1.0)*r00*x13605))+((r01*x13616))+(((-1.0)*gconst20*r01*x13608))+(((-1.0)*sj3*x13604*x13615)));
evalcond[7]=((((-1.0)*x13613))+((r10*x13606))+x13603+(((-1.0)*x13602*x13608*x13612))+((r11*x13602*x13605))+((sj3*x13609)));
evalcond[8]=(x13611+((cj1*sj2))+(((-1.0)*r10*x13605))+(((-1.0)*x13608*x13609))+(((-1.0)*r10*x13610*x13615))+((r11*x13616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13618=gconst19*gconst19;
IkReal x13619=gconst20*gconst20;
IkReal x13620=(r20*sj3);
IkReal x13621=(cj3*r21);
IkReal x13622=(gconst19*r00);
IkReal x13623=((1.0)*gconst20);
IkReal x13624=(cj3*r20);
IkReal x13625=(r21*sj3);
IkReal x13626=(gconst19*gconst20*r01);
IkReal x13627=((1.0)*cj3*r22);
CheckValue<IkReal> x13628 = IKatan2WithCheck(IkReal(((((-1.0)*x13622*x13627))+(((-1.0)*cj3*r01*r22*x13623)))),IkReal((((r00*x13618*x13621))+((x13621*x13626))+(((-1.0)*r01*x13619*x13624))+(((-1.0)*x13622*x13623*x13624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13628.valid){
continue;
}
CheckValue<IkReal> x13629=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r01*x13620*x13623))+((r01*x13618*x13625))+(((-1.0)*x13622*x13623*x13625))+((r02*r22*sj3))+((r00*x13619*x13620)))),-1);
if(!x13629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13628.value)+(((1.5707963267949)*(x13629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13630=IKsin(j4);
IkReal x13631=IKcos(j4);
IkReal x13632=(sj1*sj2);
IkReal x13633=(gconst20*sj3);
IkReal x13634=(cj3*gconst19);
IkReal x13635=(gconst19*sj3);
IkReal x13636=((1.0)*cj1);
IkReal x13637=(cj2*sj1);
IkReal x13638=(cj3*gconst20);
IkReal x13639=(cj2*x13636);
IkReal x13640=((1.0)*x13631);
IkReal x13641=((1.0)*x13630);
IkReal x13642=(gconst20*x13630);
IkReal x13643=((1.0)*x13638);
IkReal x13644=(x13631*x13635);
evalcond[0]=((((-1.0)*gconst19*r21*x13641))+((r20*x13642))+(((-1.0)*r22*x13640)));
evalcond[1]=((((-1.0)*r12*x13640))+(((-1.0)*gconst19*r11*x13641))+((r10*x13642)));
evalcond[2]=((1.0)+(((-1.0)*gconst19*r01*x13641))+((r00*x13642))+(((-1.0)*r02*x13640)));
evalcond[3]=((((-1.0)*cj3*r02*x13641))+((r01*x13631*x13634))+(((-1.0)*r00*x13638*x13640))+((r00*x13635))+((r01*x13633)));
evalcond[4]=((((-1.0)*r00*x13634))+(((-1.0)*r00*x13633*x13640))+(((-1.0)*r02*sj3*x13641))+((r01*x13644))+(((-1.0)*r01*x13643)));
evalcond[5]=(((r11*x13633))+((r10*x13635))+x13632+((r11*x13631*x13634))+(((-1.0)*cj3*r12*x13641))+(((-1.0)*x13639))+(((-1.0)*r10*x13638*x13640)));
evalcond[6]=((((-1.0)*x13637))+(((-1.0)*r20*x13638*x13640))+((r21*x13631*x13634))+(((-1.0)*sj2*x13636))+(((-1.0)*cj3*r22*x13641))+((r21*x13633))+((r20*x13635)));
evalcond[7]=(x13637+((cj1*sj2))+(((-1.0)*r11*x13643))+(((-1.0)*r10*x13634))+((r11*x13644))+(((-1.0)*r10*x13633*x13640))+(((-1.0)*r12*sj3*x13641)));
evalcond[8]=(x13632+(((-1.0)*r22*sj3*x13641))+(((-1.0)*r20*x13633*x13640))+(((-1.0)*r20*x13634))+(((-1.0)*x13639))+(((-1.0)*r21*x13643))+((r21*x13644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13645=gconst20*gconst20;
IkReal x13646=gconst19*gconst19;
IkReal x13647=(cj3*r21);
IkReal x13648=((1.0)*r00);
IkReal x13649=(gconst19*gconst20);
IkReal x13650=(r21*sj3);
IkReal x13651=(r00*r20);
IkReal x13652=(r01*r20);
IkReal x13653=(r22*sj3);
CheckValue<IkReal> x13654=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*x13649*x13652))+((r01*x13646*x13647))+((cj3*x13645*x13651))+(((-1.0)*x13647*x13648*x13649))+((cj3*r02*r22)))),-1);
if(!x13654.valid){
continue;
}
CheckValue<IkReal> x13655 = IKatan2WithCheck(IkReal((((gconst20*r01*x13653))+((gconst19*r00*x13653)))),IkReal(((((-1.0)*x13646*x13648*x13650))+(((-1.0)*r01*x13649*x13650))+((sj3*x13645*x13652))+((sj3*x13649*x13651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13654.value)))+(x13655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13656=IKsin(j4);
IkReal x13657=IKcos(j4);
IkReal x13658=(sj1*sj2);
IkReal x13659=(gconst20*sj3);
IkReal x13660=(cj3*gconst19);
IkReal x13661=(gconst19*sj3);
IkReal x13662=((1.0)*cj1);
IkReal x13663=(cj2*sj1);
IkReal x13664=(cj3*gconst20);
IkReal x13665=(cj2*x13662);
IkReal x13666=((1.0)*x13657);
IkReal x13667=((1.0)*x13656);
IkReal x13668=(gconst20*x13656);
IkReal x13669=((1.0)*x13664);
IkReal x13670=(x13657*x13661);
evalcond[0]=((((-1.0)*r22*x13666))+((r20*x13668))+(((-1.0)*gconst19*r21*x13667)));
evalcond[1]=((((-1.0)*r12*x13666))+(((-1.0)*gconst19*r11*x13667))+((r10*x13668)));
evalcond[2]=((1.0)+((r00*x13668))+(((-1.0)*r02*x13666))+(((-1.0)*gconst19*r01*x13667)));
evalcond[3]=(((r01*x13659))+(((-1.0)*cj3*r02*x13667))+((r00*x13661))+((r01*x13657*x13660))+(((-1.0)*r00*x13664*x13666)));
evalcond[4]=((((-1.0)*r02*sj3*x13667))+((r01*x13670))+(((-1.0)*r01*x13669))+(((-1.0)*r00*x13660))+(((-1.0)*r00*x13659*x13666)));
evalcond[5]=(x13658+(((-1.0)*cj3*r12*x13667))+(((-1.0)*x13665))+((r11*x13657*x13660))+(((-1.0)*r10*x13664*x13666))+((r10*x13661))+((r11*x13659)));
evalcond[6]=((((-1.0)*r20*x13664*x13666))+(((-1.0)*sj2*x13662))+((r21*x13659))+(((-1.0)*x13663))+((r20*x13661))+(((-1.0)*cj3*r22*x13667))+((r21*x13657*x13660)));
evalcond[7]=(x13663+((cj1*sj2))+(((-1.0)*r10*x13660))+(((-1.0)*r11*x13669))+((r11*x13670))+(((-1.0)*r12*sj3*x13667))+(((-1.0)*r10*x13659*x13666)));
evalcond[8]=((((-1.0)*r20*x13660))+(((-1.0)*r22*sj3*x13667))+x13658+(((-1.0)*x13665))+(((-1.0)*r21*x13669))+(((-1.0)*r20*x13659*x13666))+((r21*x13670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13671 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13671.valid){
continue;
}
CheckValue<IkReal> x13672=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13671.value)+(((1.5707963267949)*(x13672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13673=IKsin(j4);
IkReal x13674=IKcos(j4);
IkReal x13675=(sj1*sj2);
IkReal x13676=(gconst20*sj3);
IkReal x13677=(cj3*gconst19);
IkReal x13678=(gconst19*sj3);
IkReal x13679=((1.0)*cj1);
IkReal x13680=(cj2*sj1);
IkReal x13681=(cj3*gconst20);
IkReal x13682=(cj2*x13679);
IkReal x13683=((1.0)*x13674);
IkReal x13684=((1.0)*x13673);
IkReal x13685=(gconst20*x13673);
IkReal x13686=((1.0)*x13681);
IkReal x13687=(x13674*x13678);
evalcond[0]=((((-1.0)*r22*x13683))+(((-1.0)*gconst19*r21*x13684))+((r20*x13685)));
evalcond[1]=((((-1.0)*gconst19*r11*x13684))+(((-1.0)*r12*x13683))+((r10*x13685)));
evalcond[2]=((1.0)+((r00*x13685))+(((-1.0)*gconst19*r01*x13684))+(((-1.0)*r02*x13683)));
evalcond[3]=((((-1.0)*r00*x13681*x13683))+((r01*x13676))+((r00*x13678))+((r01*x13674*x13677))+(((-1.0)*cj3*r02*x13684)));
evalcond[4]=((((-1.0)*r02*sj3*x13684))+(((-1.0)*r01*x13686))+(((-1.0)*r00*x13676*x13683))+(((-1.0)*r00*x13677))+((r01*x13687)));
evalcond[5]=(x13675+(((-1.0)*r10*x13681*x13683))+((r11*x13676))+(((-1.0)*cj3*r12*x13684))+(((-1.0)*x13682))+((r10*x13678))+((r11*x13674*x13677)));
evalcond[6]=((((-1.0)*cj3*r22*x13684))+(((-1.0)*sj2*x13679))+(((-1.0)*x13680))+((r20*x13678))+((r21*x13676))+((r21*x13674*x13677))+(((-1.0)*r20*x13681*x13683)));
evalcond[7]=((((-1.0)*r12*sj3*x13684))+x13680+((cj1*sj2))+((r11*x13687))+(((-1.0)*r10*x13677))+(((-1.0)*r11*x13686))+(((-1.0)*r10*x13676*x13683)));
evalcond[8]=((((-1.0)*r20*x13677))+x13675+(((-1.0)*x13682))+(((-1.0)*r20*x13676*x13683))+(((-1.0)*r21*x13686))+(((-1.0)*r22*sj3*x13684))+((r21*x13687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13688=((-1.0)*r11);
IkReal x13690 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13690)==0){
continue;
}
IkReal x13689=pow(x13690,-0.5);
CheckValue<IkReal> x13691 = IKatan2WithCheck(IkReal(x13688),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13691.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13691.value))));
IkReal gconst22=(x13688*x13689);
IkReal gconst23=((1.0)*r10*x13689);
CheckValue<IkReal> x13692 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13692.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13692.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13693=((-1.0)*r11);
CheckValue<IkReal> x13696 = IKatan2WithCheck(IkReal(x13693),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13696.valid){
continue;
}
IkReal x13694=((1.0)*(x13696.value));
IkReal x13695=x13689;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13694)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13694)));
IkReal gconst22=(x13693*x13695);
IkReal gconst23=((1.0)*r10*x13695);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13697=gconst23*gconst23;
IkReal x13698=gconst22*gconst22;
IkReal x13699=(r01*sj3);
IkReal x13700=(cj3*r00);
IkReal x13701=(cj3*r01);
IkReal x13702=(r00*sj3);
IkReal x13703=((1.0)*gconst22*gconst23);
IkReal x13704=(r20*x13697);
IkReal x13705=(r21*x13698);
CheckValue<IkReal> x13706 = IKatan2WithCheck(IkReal((((gconst22*r22*x13702))+((gconst23*r22*x13699)))),IkReal(((((-1.0)*r21*x13699*x13703))+((gconst22*gconst23*r20*x13702))+(((-1.0)*x13702*x13705))+((x13699*x13704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13706.valid){
continue;
}
CheckValue<IkReal> x13707=IKPowWithIntegerCheck(IKsign((((x13700*x13704))+(((-1.0)*r21*x13700*x13703))+((cj3*r02*r22))+(((-1.0)*r20*x13701*x13703))+((x13701*x13705)))),-1);
if(!x13707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13706.value)+(((1.5707963267949)*(x13707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13708=IKsin(j4);
IkReal x13709=IKcos(j4);
IkReal x13710=(sj1*sj2);
IkReal x13711=(gconst23*sj3);
IkReal x13712=(gconst22*r21);
IkReal x13713=(gconst22*sj3);
IkReal x13714=(gconst22*r01);
IkReal x13715=((1.0)*cj2);
IkReal x13716=((1.0)*cj3);
IkReal x13717=(cj1*sj2);
IkReal x13718=(cj3*gconst23);
IkReal x13719=(gconst22*r11);
IkReal x13720=(cj1*x13715);
IkReal x13721=((1.0)*x13709);
IkReal x13722=((1.0)*x13708);
IkReal x13723=(gconst23*x13708);
IkReal x13724=(cj3*x13709);
evalcond[0]=(((r20*x13723))+(((-1.0)*x13712*x13722))+(((-1.0)*r22*x13721)));
evalcond[1]=(((r10*x13723))+(((-1.0)*r12*x13721))+(((-1.0)*x13719*x13722)));
evalcond[2]=((1.0)+((r00*x13723))+(((-1.0)*x13714*x13722))+(((-1.0)*r02*x13721)));
evalcond[3]=((((-1.0)*r02*x13708*x13716))+((r00*x13713))+((r01*x13711))+(((-1.0)*gconst23*r00*x13709*x13716))+((x13714*x13724)));
evalcond[4]=((((-1.0)*gconst22*r00*x13716))+(((-1.0)*r02*sj3*x13722))+(((-1.0)*gconst23*r01*x13716))+(((-1.0)*r00*x13711*x13721))+((r01*x13709*x13713)));
evalcond[5]=(x13710+(((-1.0)*gconst23*r10*x13709*x13716))+((x13719*x13724))+(((-1.0)*r12*x13708*x13716))+((r10*x13713))+(((-1.0)*x13720))+((r11*x13711)));
evalcond[6]=(((r21*x13711))+(((-1.0)*gconst23*r20*x13709*x13716))+(((-1.0)*x13717))+((r20*x13713))+(((-1.0)*sj1*x13715))+(((-1.0)*r22*x13708*x13716))+((x13712*x13724)));
evalcond[7]=((((-1.0)*r12*sj3*x13722))+((cj2*sj1))+(((-1.0)*gconst23*r11*x13716))+((r11*x13709*x13713))+x13717+(((-1.0)*gconst22*r10*x13716))+(((-1.0)*r10*x13711*x13721)));
evalcond[8]=((((-1.0)*gconst22*r20*x13716))+x13710+(((-1.0)*gconst23*r21*x13716))+(((-1.0)*r22*sj3*x13722))+((sj3*x13709*x13712))+(((-1.0)*x13720))+(((-1.0)*r20*x13711*x13721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13725 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r11))+((gconst23*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13725.valid){
continue;
}
CheckValue<IkReal> x13726=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13725.value)+(((1.5707963267949)*(x13726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13727=IKsin(j4);
IkReal x13728=IKcos(j4);
IkReal x13729=(sj1*sj2);
IkReal x13730=(gconst23*sj3);
IkReal x13731=(gconst22*r21);
IkReal x13732=(gconst22*sj3);
IkReal x13733=(gconst22*r01);
IkReal x13734=((1.0)*cj2);
IkReal x13735=((1.0)*cj3);
IkReal x13736=(cj1*sj2);
IkReal x13737=(cj3*gconst23);
IkReal x13738=(gconst22*r11);
IkReal x13739=(cj1*x13734);
IkReal x13740=((1.0)*x13728);
IkReal x13741=((1.0)*x13727);
IkReal x13742=(gconst23*x13727);
IkReal x13743=(cj3*x13728);
evalcond[0]=(((r20*x13742))+(((-1.0)*r22*x13740))+(((-1.0)*x13731*x13741)));
evalcond[1]=((((-1.0)*r12*x13740))+((r10*x13742))+(((-1.0)*x13738*x13741)));
evalcond[2]=((1.0)+(((-1.0)*r02*x13740))+(((-1.0)*x13733*x13741))+((r00*x13742)));
evalcond[3]=(((r00*x13732))+(((-1.0)*r02*x13727*x13735))+(((-1.0)*gconst23*r00*x13728*x13735))+((x13733*x13743))+((r01*x13730)));
evalcond[4]=((((-1.0)*gconst22*r00*x13735))+(((-1.0)*r02*sj3*x13741))+(((-1.0)*gconst23*r01*x13735))+((r01*x13728*x13732))+(((-1.0)*r00*x13730*x13740)));
evalcond[5]=(((r10*x13732))+x13729+(((-1.0)*x13739))+(((-1.0)*gconst23*r10*x13728*x13735))+((r11*x13730))+((x13738*x13743))+(((-1.0)*r12*x13727*x13735)));
evalcond[6]=((((-1.0)*r22*x13727*x13735))+(((-1.0)*sj1*x13734))+((x13731*x13743))+(((-1.0)*gconst23*r20*x13728*x13735))+((r21*x13730))+((r20*x13732))+(((-1.0)*x13736)));
evalcond[7]=(((cj2*sj1))+x13736+((r11*x13728*x13732))+(((-1.0)*gconst23*r11*x13735))+(((-1.0)*r10*x13730*x13740))+(((-1.0)*r12*sj3*x13741))+(((-1.0)*gconst22*r10*x13735)));
evalcond[8]=((((-1.0)*gconst22*r20*x13735))+x13729+(((-1.0)*x13739))+(((-1.0)*r20*x13730*x13740))+(((-1.0)*r22*sj3*x13741))+((sj3*x13728*x13731))+(((-1.0)*gconst23*r21*x13735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13744=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13744);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13744);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13745=(cj5*r00);
IkReal x13746=(r01*sj5);
j4eval[0]=(x13745+(((-1.0)*x13746)));
j4eval[1]=((((-1.0)*sj3*x13745))+((sj3*x13746)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13747=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13747);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13748=(cj5*r00);
IkReal x13749=(r01*sj5);
j4eval[0]=(x13748+(((-1.0)*x13749)));
j4eval[1]=((((-1.0)*cj3*x13748))+((cj3*x13749)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13750=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13750);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13750);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13751=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13751);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13751);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13752=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13752);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13752);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13753=((1.0)*sj1);
CheckValue<IkReal> x13754=IKPowWithIntegerCheck(r22,-1);
if(!x13754.valid){
continue;
}
CheckValue<IkReal> x13755=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13755.valid){
continue;
}
if( IKabs(((x13754.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13753)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13755.value)*((((cj1*cj2))+(((-1.0)*sj2*x13753)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13754.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13753))))))+IKsqr(((x13755.value)*((((cj1*cj2))+(((-1.0)*sj2*x13753))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13754.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13753))))), ((x13755.value)*((((cj1*cj2))+(((-1.0)*sj2*x13753))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13756=IKsin(j4);
IkReal x13757=IKcos(j4);
IkReal x13758=(cj5*r00);
IkReal x13759=((1.0)*cj1);
IkReal x13760=(cj5*r10);
IkReal x13761=((1.0)*x13757);
IkReal x13762=(sj5*x13757);
IkReal x13763=((1.0)*sj5*x13756);
evalcond[0]=((-1.0)*r22*x13757);
evalcond[1]=((((-1.0)*r11*x13763))+((x13756*x13760)));
evalcond[2]=((((-1.0)*x13758*x13761))+((r01*x13762)));
evalcond[3]=((1.0)+(((-1.0)*r01*x13763))+((x13756*x13758)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x13756))+(((-1.0)*sj2*x13759)));
evalcond[5]=(((r11*x13762))+((sj1*sj2))+(((-1.0)*cj2*x13759))+(((-1.0)*x13760*x13761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13764=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13764.valid){
continue;
}
CheckValue<IkReal> x13765=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13765.valid){
continue;
}
if( IKabs(((-1.0)*(x13764.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13765.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13764.value)))+IKsqr(((x13765.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13764.value)), ((x13765.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13766=IKsin(j4);
IkReal x13767=IKcos(j4);
IkReal x13768=(cj5*r00);
IkReal x13769=((1.0)*cj1);
IkReal x13770=(cj5*r10);
IkReal x13771=((1.0)*x13767);
IkReal x13772=(sj5*x13767);
IkReal x13773=((1.0)*sj5*x13766);
evalcond[0]=((-1.0)*r22*x13767);
evalcond[1]=(((x13766*x13770))+(((-1.0)*r11*x13773)));
evalcond[2]=(((r01*x13772))+(((-1.0)*x13768*x13771)));
evalcond[3]=((1.0)+(((-1.0)*r01*x13773))+((x13766*x13768)));
evalcond[4]=((((-1.0)*r22*x13766))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x13769)));
evalcond[5]=(((r11*x13772))+(((-1.0)*x13770*x13771))+((sj1*sj2))+(((-1.0)*cj2*x13769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13774=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13774);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13774);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13775=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13775);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13775);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13776=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x13776))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x13776)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13777=((1.0)*sj5);
CheckValue<IkReal> x13778=IKPowWithIntegerCheck(((((-1.0)*r01*x13777))+((cj5*r00))),-1);
if(!x13778.valid){
continue;
}
CheckValue<IkReal> x13779=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x13777))),-1);
if(!x13779.valid){
continue;
}
if( IKabs(((-1.0)*(x13778.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13779.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13778.value)))+IKsqr(((x13779.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13778.value)), ((x13779.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13780=IKsin(j4);
IkReal x13781=IKcos(j4);
IkReal x13782=((1.0)*sj5);
IkReal x13783=(cj5*r00);
IkReal x13784=((1.0)*cj2);
IkReal x13785=(cj5*r10);
evalcond[0]=((-1.0)*r22*x13781);
evalcond[1]=((((-1.0)*r11*x13780*x13782))+((x13780*x13785)));
evalcond[2]=((((-1.0)*sj1*x13784))+(((-1.0)*cj1*sj2))+((r22*x13780)));
evalcond[3]=((((-1.0)*r01*x13781*x13782))+((x13781*x13783)));
evalcond[4]=((1.0)+((x13780*x13783))+(((-1.0)*r01*x13780*x13782)));
evalcond[5]=((((-1.0)*r11*x13781*x13782))+(((-1.0)*cj1*x13784))+((sj1*sj2))+((x13781*x13785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13786=IKPowWithIntegerCheck(r22,-1);
if(!x13786.valid){
continue;
}
CheckValue<IkReal> x13787=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x13787.valid){
continue;
}
if( IKabs(((x13786.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13787.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13786.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13787.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13786.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13787.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13788=IKsin(j4);
IkReal x13789=IKcos(j4);
IkReal x13790=((1.0)*sj5);
IkReal x13791=(cj5*r00);
IkReal x13792=((1.0)*cj2);
IkReal x13793=(cj5*r10);
evalcond[0]=((-1.0)*r22*x13789);
evalcond[1]=((((-1.0)*r11*x13788*x13790))+((x13788*x13793)));
evalcond[2]=((((-1.0)*sj1*x13792))+(((-1.0)*cj1*sj2))+((r22*x13788)));
evalcond[3]=((((-1.0)*r01*x13789*x13790))+((x13789*x13791)));
evalcond[4]=((1.0)+(((-1.0)*r01*x13788*x13790))+((x13788*x13791)));
evalcond[5]=((((-1.0)*cj1*x13792))+((sj1*sj2))+(((-1.0)*r11*x13789*x13790))+((x13789*x13793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13794=((1.0)*r00);
CheckValue<IkReal> x13795=IKPowWithIntegerCheck(r22,-1);
if(!x13795.valid){
continue;
}
CheckValue<IkReal> x13796=IKPowWithIntegerCheck(sj3,-1);
if(!x13796.valid){
continue;
}
CheckValue<IkReal> x13797=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x13794))),-1);
if(!x13797.valid){
continue;
}
if( IKabs(((x13795.value)*(x13796.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13797.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x13794)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13795.value)*(x13796.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13797.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x13794))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13795.value)*(x13796.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13797.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x13794))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13798=IKsin(j4);
IkReal x13799=IKcos(j4);
IkReal x13800=(sj1*sj2);
IkReal x13801=(cj5*sj3);
IkReal x13802=((1.0)*r11);
IkReal x13803=(cj3*cj5);
IkReal x13804=((1.0)*r10);
IkReal x13805=(cj3*sj5);
IkReal x13806=((1.0)*cj1);
IkReal x13807=((1.0)*r01);
IkReal x13808=(sj3*sj5);
IkReal x13809=(cj2*sj1);
IkReal x13810=((1.0)*r00);
IkReal x13811=(cj2*x13806);
IkReal x13812=(sj5*x13798);
IkReal x13813=(r11*x13799);
IkReal x13814=(cj5*x13798);
IkReal x13815=(r01*x13799);
IkReal x13816=((1.0)*r22*x13798);
evalcond[0]=((-1.0)*r22*x13799);
evalcond[1]=(((r10*x13814))+(((-1.0)*x13802*x13812)));
evalcond[2]=((1.0)+(((-1.0)*x13807*x13812))+((r00*x13814)));
evalcond[3]=((((-1.0)*x13811))+x13800+(((-1.0)*sj3*x13816)));
evalcond[4]=((((-1.0)*x13809))+(((-1.0)*cj3*x13816))+(((-1.0)*sj2*x13806)));
evalcond[5]=(((r01*x13801))+(((-1.0)*x13799*x13803*x13810))+((r00*x13808))+((x13805*x13815)));
evalcond[6]=((((-1.0)*x13805*x13810))+((x13808*x13815))+(((-1.0)*x13799*x13801*x13810))+(((-1.0)*x13803*x13807)));
evalcond[7]=((((-1.0)*x13811))+((r11*x13801))+x13800+((x13805*x13813))+(((-1.0)*x13799*x13803*x13804))+((r10*x13808)));
evalcond[8]=(x13809+((cj1*sj2))+((x13808*x13813))+(((-1.0)*x13804*x13805))+(((-1.0)*x13802*x13803))+(((-1.0)*x13799*x13801*x13804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13817=((1.0)*sj5);
IkReal x13818=(cj5*r00);
CheckValue<IkReal> x13819=IKPowWithIntegerCheck((x13818+(((-1.0)*r01*x13817))),-1);
if(!x13819.valid){
continue;
}
CheckValue<IkReal> x13820=IKPowWithIntegerCheck(((((-1.0)*cj3*x13818))+((cj3*r01*sj5))),-1);
if(!x13820.valid){
continue;
}
if( IKabs(((-1.0)*(x13819.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13820.value)*(((((-1.0)*r00*sj3*x13817))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13819.value)))+IKsqr(((x13820.value)*(((((-1.0)*r00*sj3*x13817))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13819.value)), ((x13820.value)*(((((-1.0)*r00*sj3*x13817))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13821=IKsin(j4);
IkReal x13822=IKcos(j4);
IkReal x13823=(sj1*sj2);
IkReal x13824=(cj5*sj3);
IkReal x13825=((1.0)*r11);
IkReal x13826=(cj3*cj5);
IkReal x13827=((1.0)*r10);
IkReal x13828=(cj3*sj5);
IkReal x13829=((1.0)*cj1);
IkReal x13830=((1.0)*r01);
IkReal x13831=(sj3*sj5);
IkReal x13832=(cj2*sj1);
IkReal x13833=((1.0)*r00);
IkReal x13834=(cj2*x13829);
IkReal x13835=(sj5*x13821);
IkReal x13836=(r11*x13822);
IkReal x13837=(cj5*x13821);
IkReal x13838=(r01*x13822);
IkReal x13839=((1.0)*r22*x13821);
evalcond[0]=((-1.0)*r22*x13822);
evalcond[1]=((((-1.0)*x13825*x13835))+((r10*x13837)));
evalcond[2]=((1.0)+(((-1.0)*x13830*x13835))+((r00*x13837)));
evalcond[3]=((((-1.0)*x13834))+x13823+(((-1.0)*sj3*x13839)));
evalcond[4]=((((-1.0)*sj2*x13829))+(((-1.0)*cj3*x13839))+(((-1.0)*x13832)));
evalcond[5]=(((r01*x13824))+(((-1.0)*x13822*x13826*x13833))+((x13828*x13838))+((r00*x13831)));
evalcond[6]=((((-1.0)*x13822*x13824*x13833))+((x13831*x13838))+(((-1.0)*x13826*x13830))+(((-1.0)*x13828*x13833)));
evalcond[7]=((((-1.0)*x13834))+((r11*x13824))+x13823+((r10*x13831))+(((-1.0)*x13822*x13826*x13827))+((x13828*x13836)));
evalcond[8]=((((-1.0)*x13825*x13826))+x13832+((cj1*sj2))+((x13831*x13836))+(((-1.0)*x13827*x13828))+(((-1.0)*x13822*x13824*x13827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13840=(r01*sj5);
IkReal x13841=(cj5*r00);
CheckValue<IkReal> x13842=IKPowWithIntegerCheck((x13841+(((-1.0)*x13840))),-1);
if(!x13842.valid){
continue;
}
CheckValue<IkReal> x13843=IKPowWithIntegerCheck(((((-1.0)*sj3*x13841))+((sj3*x13840))),-1);
if(!x13843.valid){
continue;
}
if( IKabs(((-1.0)*(x13842.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13843.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13842.value)))+IKsqr(((x13843.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13842.value)), ((x13843.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13844=IKsin(j4);
IkReal x13845=IKcos(j4);
IkReal x13846=(sj1*sj2);
IkReal x13847=(cj5*sj3);
IkReal x13848=((1.0)*r11);
IkReal x13849=(cj3*cj5);
IkReal x13850=((1.0)*r10);
IkReal x13851=(cj3*sj5);
IkReal x13852=((1.0)*cj1);
IkReal x13853=((1.0)*r01);
IkReal x13854=(sj3*sj5);
IkReal x13855=(cj2*sj1);
IkReal x13856=((1.0)*r00);
IkReal x13857=(cj2*x13852);
IkReal x13858=(sj5*x13844);
IkReal x13859=(r11*x13845);
IkReal x13860=(cj5*x13844);
IkReal x13861=(r01*x13845);
IkReal x13862=((1.0)*r22*x13844);
evalcond[0]=((-1.0)*r22*x13845);
evalcond[1]=((((-1.0)*x13848*x13858))+((r10*x13860)));
evalcond[2]=((1.0)+((r00*x13860))+(((-1.0)*x13853*x13858)));
evalcond[3]=(x13846+(((-1.0)*sj3*x13862))+(((-1.0)*x13857)));
evalcond[4]=((((-1.0)*x13855))+(((-1.0)*sj2*x13852))+(((-1.0)*cj3*x13862)));
evalcond[5]=(((r00*x13854))+(((-1.0)*x13845*x13849*x13856))+((x13851*x13861))+((r01*x13847)));
evalcond[6]=((((-1.0)*x13845*x13847*x13856))+(((-1.0)*x13851*x13856))+((x13854*x13861))+(((-1.0)*x13849*x13853)));
evalcond[7]=(x13846+(((-1.0)*x13845*x13849*x13850))+((x13851*x13859))+((r11*x13847))+((r10*x13854))+(((-1.0)*x13857)));
evalcond[8]=((((-1.0)*x13848*x13849))+x13855+((cj1*sj2))+(((-1.0)*x13845*x13847*x13850))+((x13854*x13859))+(((-1.0)*x13850*x13851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13863=cj5*cj5;
IkReal x13864=(cj3*r00);
IkReal x13865=(r01*sj3);
IkReal x13866=(r00*sj3);
IkReal x13867=(cj3*r01);
IkReal x13868=(cj5*r20*sj5);
IkReal x13869=(r21*x13863);
IkReal x13870=(r20*x13863);
IkReal x13871=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x13872 = IKatan2WithCheck(IkReal((((cj5*r22*x13865))+((r22*sj5*x13866)))),IkReal((((x13866*x13868))+((x13866*x13869))+((x13865*x13870))+(((-1.0)*x13865*x13871))+(((-1.0)*r21*x13866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13872.valid){
continue;
}
CheckValue<IkReal> x13873=IKPowWithIntegerCheck(IKsign((((x13864*x13870))+((r21*x13867))+(((-1.0)*x13864*x13871))+((cj3*r02*r22))+(((-1.0)*x13867*x13868))+(((-1.0)*x13867*x13869)))),-1);
if(!x13873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13872.value)+(((1.5707963267949)*(x13873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13874=IKsin(j4);
IkReal x13875=IKcos(j4);
IkReal x13876=(sj1*sj2);
IkReal x13877=(r11*sj5);
IkReal x13878=(cj5*sj3);
IkReal x13879=((1.0)*cj1);
IkReal x13880=(r21*sj5);
IkReal x13881=(r01*sj5);
IkReal x13882=(sj3*sj5);
IkReal x13883=(cj2*sj1);
IkReal x13884=(cj3*cj5);
IkReal x13885=(cj2*x13879);
IkReal x13886=((1.0)*x13875);
IkReal x13887=((1.0)*x13874);
IkReal x13888=(cj3*x13875);
IkReal x13889=((1.0)*x13884);
IkReal x13890=((1.0)*cj3*sj5);
IkReal x13891=(cj5*x13874);
IkReal x13892=(sj3*x13875);
evalcond[0]=(((r20*x13891))+(((-1.0)*x13880*x13887))+(((-1.0)*r22*x13886)));
evalcond[1]=(((r10*x13891))+(((-1.0)*x13877*x13887))+(((-1.0)*r12*x13886)));
evalcond[2]=((1.0)+(((-1.0)*r02*x13886))+(((-1.0)*x13881*x13887))+((r00*x13891)));
evalcond[3]=(((x13881*x13888))+((r01*x13878))+((r00*x13882))+(((-1.0)*cj3*r02*x13887))+(((-1.0)*r00*x13884*x13886)));
evalcond[4]=((((-1.0)*r01*x13889))+((x13881*x13892))+(((-1.0)*r00*x13890))+(((-1.0)*r00*x13878*x13886))+(((-1.0)*r02*sj3*x13887)));
evalcond[5]=(x13876+(((-1.0)*r10*x13884*x13886))+((r10*x13882))+((r11*x13878))+(((-1.0)*cj3*r12*x13887))+(((-1.0)*x13885))+((x13877*x13888)));
evalcond[6]=(((x13880*x13888))+((r21*x13878))+(((-1.0)*r20*x13884*x13886))+((r20*x13882))+(((-1.0)*sj2*x13879))+(((-1.0)*cj3*r22*x13887))+(((-1.0)*x13883)));
evalcond[7]=((((-1.0)*r11*x13889))+x13883+((cj1*sj2))+(((-1.0)*r10*x13878*x13886))+(((-1.0)*r10*x13890))+((x13877*x13892))+(((-1.0)*r12*sj3*x13887)));
evalcond[8]=((((-1.0)*r22*sj3*x13887))+x13876+(((-1.0)*r20*x13878*x13886))+((x13880*x13892))+(((-1.0)*r20*x13890))+(((-1.0)*r21*x13889))+(((-1.0)*x13885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13893=((1.0)*sj5);
CheckValue<IkReal> x13894 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x13893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13894.valid){
continue;
}
CheckValue<IkReal> x13895=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13893)))),-1);
if(!x13895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13894.value)+(((1.5707963267949)*(x13895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13896=IKsin(j4);
IkReal x13897=IKcos(j4);
IkReal x13898=(sj1*sj2);
IkReal x13899=(r11*sj5);
IkReal x13900=(cj5*sj3);
IkReal x13901=((1.0)*cj1);
IkReal x13902=(r21*sj5);
IkReal x13903=(r01*sj5);
IkReal x13904=(sj3*sj5);
IkReal x13905=(cj2*sj1);
IkReal x13906=(cj3*cj5);
IkReal x13907=(cj2*x13901);
IkReal x13908=((1.0)*x13897);
IkReal x13909=((1.0)*x13896);
IkReal x13910=(cj3*x13897);
IkReal x13911=((1.0)*x13906);
IkReal x13912=((1.0)*cj3*sj5);
IkReal x13913=(cj5*x13896);
IkReal x13914=(sj3*x13897);
evalcond[0]=((((-1.0)*x13902*x13909))+(((-1.0)*r22*x13908))+((r20*x13913)));
evalcond[1]=(((r10*x13913))+(((-1.0)*r12*x13908))+(((-1.0)*x13899*x13909)));
evalcond[2]=((1.0)+((r00*x13913))+(((-1.0)*r02*x13908))+(((-1.0)*x13903*x13909)));
evalcond[3]=((((-1.0)*r00*x13906*x13908))+((x13903*x13910))+((r01*x13900))+((r00*x13904))+(((-1.0)*cj3*r02*x13909)));
evalcond[4]=((((-1.0)*r02*sj3*x13909))+(((-1.0)*r00*x13912))+((x13903*x13914))+(((-1.0)*r01*x13911))+(((-1.0)*r00*x13900*x13908)));
evalcond[5]=((((-1.0)*r10*x13906*x13908))+((r10*x13904))+((x13899*x13910))+x13898+(((-1.0)*cj3*r12*x13909))+((r11*x13900))+(((-1.0)*x13907)));
evalcond[6]=((((-1.0)*cj3*r22*x13909))+(((-1.0)*r20*x13906*x13908))+(((-1.0)*x13905))+((x13902*x13910))+(((-1.0)*sj2*x13901))+((r20*x13904))+((r21*x13900)));
evalcond[7]=((((-1.0)*r10*x13912))+((x13899*x13914))+(((-1.0)*r12*sj3*x13909))+((cj1*sj2))+x13905+(((-1.0)*r11*x13911))+(((-1.0)*r10*x13900*x13908)));
evalcond[8]=((((-1.0)*r22*sj3*x13909))+x13898+((x13902*x13914))+(((-1.0)*r20*x13900*x13908))+(((-1.0)*x13907))+(((-1.0)*r20*x13912))+(((-1.0)*r21*x13911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13915 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13915.valid){
continue;
}
CheckValue<IkReal> x13916=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13915.value)+(((1.5707963267949)*(x13916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13917=IKsin(j4);
IkReal x13918=IKcos(j4);
IkReal x13919=(sj1*sj2);
IkReal x13920=(r11*sj5);
IkReal x13921=(cj5*sj3);
IkReal x13922=((1.0)*cj1);
IkReal x13923=(r21*sj5);
IkReal x13924=(r01*sj5);
IkReal x13925=(sj3*sj5);
IkReal x13926=(cj2*sj1);
IkReal x13927=(cj3*cj5);
IkReal x13928=(cj2*x13922);
IkReal x13929=((1.0)*x13918);
IkReal x13930=((1.0)*x13917);
IkReal x13931=(cj3*x13918);
IkReal x13932=((1.0)*x13927);
IkReal x13933=((1.0)*cj3*sj5);
IkReal x13934=(cj5*x13917);
IkReal x13935=(sj3*x13918);
evalcond[0]=(((r20*x13934))+(((-1.0)*r22*x13929))+(((-1.0)*x13923*x13930)));
evalcond[1]=((((-1.0)*r12*x13929))+((r10*x13934))+(((-1.0)*x13920*x13930)));
evalcond[2]=((1.0)+((r00*x13934))+(((-1.0)*x13924*x13930))+(((-1.0)*r02*x13929)));
evalcond[3]=(((x13924*x13931))+((r01*x13921))+(((-1.0)*cj3*r02*x13930))+((r00*x13925))+(((-1.0)*r00*x13927*x13929)));
evalcond[4]=((((-1.0)*r02*sj3*x13930))+(((-1.0)*r00*x13921*x13929))+((x13924*x13935))+(((-1.0)*r00*x13933))+(((-1.0)*r01*x13932)));
evalcond[5]=(((r10*x13925))+(((-1.0)*cj3*r12*x13930))+x13919+(((-1.0)*x13928))+((r11*x13921))+((x13920*x13931))+(((-1.0)*r10*x13927*x13929)));
evalcond[6]=((((-1.0)*sj2*x13922))+((r21*x13921))+((r20*x13925))+(((-1.0)*cj3*r22*x13930))+(((-1.0)*x13926))+((x13923*x13931))+(((-1.0)*r20*x13927*x13929)));
evalcond[7]=((((-1.0)*r12*sj3*x13930))+(((-1.0)*r11*x13932))+((cj1*sj2))+x13926+(((-1.0)*r10*x13921*x13929))+(((-1.0)*r10*x13933))+((x13920*x13935)));
evalcond[8]=((((-1.0)*r20*x13921*x13929))+(((-1.0)*r20*x13933))+(((-1.0)*r22*sj3*x13930))+(((-1.0)*r21*x13932))+x13919+(((-1.0)*x13928))+((x13923*x13935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13936=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13936;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13937=((1.0)*sj5);
IkReal x13938=((((-1.0)*r20*x13937))+(((-1.0)*cj5*r21)));
j4eval[0]=x13938;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13937))))));
j4eval[2]=IKsign(x13938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13939=cj5*cj5;
IkReal x13940=(cj3*r00);
IkReal x13941=(cj3*r01);
IkReal x13942=((1.0)*cj5*sj5);
IkReal x13943=(((r20*x13939*x13940))+(((-1.0)*r21*x13940*x13942))+(((-1.0)*r21*x13939*x13941))+(((-1.0)*r20*x13941*x13942))+((cj3*r02*r22))+((r21*x13941)));
j4eval[0]=x13943;
j4eval[1]=IKsign(x13943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13944=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13944;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13945=((1.0)*sj5);
IkReal x13946=((((-1.0)*r20*x13945))+(((-1.0)*cj5*r21)));
j4eval[0]=x13946;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x13945)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13947=cj5*cj5;
IkReal x13948=r01*r01;
IkReal x13949=(r01*sj5);
IkReal x13950=(cj5*r00);
IkReal x13951=((((-1.0)*x13948))+(((-1.0)*x13947*(r00*r00)))+(((-1.0)*(r02*r02)))+((x13947*x13948))+(((2.0)*x13949*x13950)));
j4eval[0]=x13951;
j4eval[1]=IKsign(x13951);
j4eval[2]=((IKabs(r02))+(IKabs((x13949+(((-1.0)*x13950))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13952=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13952);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13952);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13953=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13953);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13953);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13954=IKPowWithIntegerCheck(r22,-1);
if(!x13954.valid){
continue;
}
CheckValue<IkReal> x13955=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13955.valid){
continue;
}
if( IKabs(((x13954.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13955.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13954.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13955.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13954.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13955.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13956=IKsin(j4);
IkReal x13957=IKcos(j4);
IkReal x13958=((1.0)*cj1);
IkReal x13959=(sj5*x13957);
IkReal x13960=(cj5*x13956);
IkReal x13961=((1.0)*sj5*x13956);
IkReal x13962=((1.0)*cj5*x13957);
evalcond[0]=((-1.0)*r22*x13957);
evalcond[1]=((((-1.0)*r11*x13961))+((r10*x13960)));
evalcond[2]=((((-1.0)*r22*x13956))+(((-1.0)*cj2*x13958))+((sj1*sj2)));
evalcond[3]=(((r01*x13959))+(((-1.0)*r00*x13962)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x13961))+((r00*x13960)));
evalcond[5]=(((r11*x13959))+(((-1.0)*r10*x13962))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x13958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13963=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13963.valid){
continue;
}
CheckValue<IkReal> x13964=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13964.valid){
continue;
}
if( IKabs(x13963.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13964.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13963.value)+IKsqr(((x13964.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13963.value, ((x13964.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13965=IKsin(j4);
IkReal x13966=IKcos(j4);
IkReal x13967=((1.0)*cj1);
IkReal x13968=(sj5*x13966);
IkReal x13969=(cj5*x13965);
IkReal x13970=((1.0)*sj5*x13965);
IkReal x13971=((1.0)*cj5*x13966);
evalcond[0]=((-1.0)*r22*x13966);
evalcond[1]=(((r10*x13969))+(((-1.0)*r11*x13970)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x13965))+(((-1.0)*cj2*x13967)));
evalcond[3]=((((-1.0)*r00*x13971))+((r01*x13968)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x13970))+((r00*x13969)));
evalcond[5]=((((-1.0)*r10*x13971))+(((-1.0)*sj2*x13967))+(((-1.0)*cj2*sj1))+((r11*x13968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13972=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13972);
rxp0_2=(py*r00);
rxp1_0=(r21*x13972);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13973=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13973);
rxp0_2=(py*r00);
rxp1_0=(r21*x13973);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13974=((1.0)*sj1);
CheckValue<IkReal> x13975=IKPowWithIntegerCheck(r12,-1);
if(!x13975.valid){
continue;
}
CheckValue<IkReal> x13976=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13976.valid){
continue;
}
if( IKabs(((x13975.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13974)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13976.value)*(((((-1.0)*sj2*x13974))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13975.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13974))))))+IKsqr(((x13976.value)*(((((-1.0)*sj2*x13974))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13975.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13974))))), ((x13976.value)*(((((-1.0)*sj2*x13974))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13977=IKsin(j4);
IkReal x13978=IKcos(j4);
IkReal x13979=(r01*sj5);
IkReal x13980=((1.0)*cj1);
IkReal x13981=(r21*sj5);
IkReal x13982=((1.0)*x13977);
IkReal x13983=(cj5*x13977);
IkReal x13984=((1.0)*cj5*x13978);
evalcond[0]=((-1.0)*r12*x13978);
evalcond[1]=(((r20*x13983))+(((-1.0)*x13981*x13982)));
evalcond[2]=(((x13978*x13979))+(((-1.0)*r00*x13984)));
evalcond[3]=((-1.0)+(((-1.0)*x13979*x13982))+((r00*x13983)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x13982))+(((-1.0)*sj2*x13980)));
evalcond[5]=((((-1.0)*cj2*x13980))+(((-1.0)*r20*x13984))+((sj1*sj2))+((x13978*x13981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13985=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13985.valid){
continue;
}
CheckValue<IkReal> x13986=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13986.valid){
continue;
}
if( IKabs(x13985.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13986.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13985.value)+IKsqr(((x13986.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13985.value, ((x13986.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13987=IKsin(j4);
IkReal x13988=IKcos(j4);
IkReal x13989=(r01*sj5);
IkReal x13990=((1.0)*cj1);
IkReal x13991=(r21*sj5);
IkReal x13992=((1.0)*x13987);
IkReal x13993=(cj5*x13987);
IkReal x13994=((1.0)*cj5*x13988);
evalcond[0]=((-1.0)*r12*x13988);
evalcond[1]=(((r20*x13993))+(((-1.0)*x13991*x13992)));
evalcond[2]=((((-1.0)*r00*x13994))+((x13988*x13989)));
evalcond[3]=((-1.0)+(((-1.0)*x13989*x13992))+((r00*x13993)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x13992))+(((-1.0)*sj2*x13990)));
evalcond[5]=((((-1.0)*cj2*x13990))+(((-1.0)*r20*x13994))+((sj1*sj2))+((x13988*x13991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13995=cj5*cj5;
IkReal x13996=r01*r01;
IkReal x13997=(r01*sj5);
IkReal x13998=(cj5*r00);
CheckValue<IkReal> x13999 = IKatan2WithCheck(IkReal((x13997+(((-1.0)*x13998)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13999.valid){
continue;
}
CheckValue<IkReal> x14000=IKPowWithIntegerCheck(IKsign((((x13995*x13996))+(((-1.0)*(r02*r02)))+(((2.0)*x13997*x13998))+(((-1.0)*x13995*(r00*r00)))+(((-1.0)*x13996)))),-1);
if(!x14000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13999.value)+(((1.5707963267949)*(x14000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14001=IKsin(j4);
IkReal x14002=IKcos(j4);
IkReal x14003=(cj5*r00);
IkReal x14004=((1.0)*cj1);
IkReal x14005=(cj5*r20);
IkReal x14006=(cj5*r10);
IkReal x14007=((1.0)*x14002);
IkReal x14008=(sj5*x14002);
IkReal x14009=((1.0)*x14001);
IkReal x14010=(sj5*x14009);
evalcond[0]=(((x14001*x14005))+(((-1.0)*r21*x14010))+(((-1.0)*r22*x14007)));
evalcond[1]=((((-1.0)*r12*x14007))+(((-1.0)*r11*x14010))+((x14001*x14006)));
evalcond[2]=((((-1.0)*r02*x14009))+(((-1.0)*x14003*x14007))+((r01*x14008)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14010))+(((-1.0)*r02*x14007))+((x14001*x14003)));
evalcond[4]=(((r21*x14008))+(((-1.0)*x14005*x14007))+(((-1.0)*cj2*x14004))+((sj1*sj2))+(((-1.0)*r22*x14009)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x14004))+((r11*x14008))+(((-1.0)*x14006*x14007))+(((-1.0)*r12*x14009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14011=((1.0)*sj5);
CheckValue<IkReal> x14012=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x14011)))),-1);
if(!x14012.valid){
continue;
}
CheckValue<IkReal> x14013 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14012.value)))+(x14013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14014=IKsin(j4);
IkReal x14015=IKcos(j4);
IkReal x14016=(cj5*r00);
IkReal x14017=((1.0)*cj1);
IkReal x14018=(cj5*r20);
IkReal x14019=(cj5*r10);
IkReal x14020=((1.0)*x14015);
IkReal x14021=(sj5*x14015);
IkReal x14022=((1.0)*x14014);
IkReal x14023=(sj5*x14022);
evalcond[0]=((((-1.0)*r21*x14023))+((x14014*x14018))+(((-1.0)*r22*x14020)));
evalcond[1]=((((-1.0)*r11*x14023))+(((-1.0)*r12*x14020))+((x14014*x14019)));
evalcond[2]=(((r01*x14021))+(((-1.0)*x14016*x14020))+(((-1.0)*r02*x14022)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14023))+((x14014*x14016))+(((-1.0)*r02*x14020)));
evalcond[4]=((((-1.0)*cj2*x14017))+((sj1*sj2))+((r21*x14021))+(((-1.0)*r22*x14022))+(((-1.0)*x14018*x14020)));
evalcond[5]=(((r11*x14021))+(((-1.0)*sj2*x14017))+(((-1.0)*cj2*sj1))+(((-1.0)*x14019*x14020))+(((-1.0)*r12*x14022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14024=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14024.valid){
continue;
}
CheckValue<IkReal> x14025 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14024.value)))+(x14025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14026=IKsin(j4);
IkReal x14027=IKcos(j4);
IkReal x14028=(cj5*r00);
IkReal x14029=((1.0)*cj1);
IkReal x14030=(cj5*r20);
IkReal x14031=(cj5*r10);
IkReal x14032=((1.0)*x14027);
IkReal x14033=(sj5*x14027);
IkReal x14034=((1.0)*x14026);
IkReal x14035=(sj5*x14034);
evalcond[0]=(((x14026*x14030))+(((-1.0)*r21*x14035))+(((-1.0)*r22*x14032)));
evalcond[1]=(((x14026*x14031))+(((-1.0)*r11*x14035))+(((-1.0)*r12*x14032)));
evalcond[2]=(((r01*x14033))+(((-1.0)*x14028*x14032))+(((-1.0)*r02*x14034)));
evalcond[3]=((-1.0)+((x14026*x14028))+(((-1.0)*r01*x14035))+(((-1.0)*r02*x14032)));
evalcond[4]=((((-1.0)*x14030*x14032))+((sj1*sj2))+((r21*x14033))+(((-1.0)*r22*x14034))+(((-1.0)*cj2*x14029)));
evalcond[5]=(((r11*x14033))+(((-1.0)*x14031*x14032))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x14034))+(((-1.0)*sj2*x14029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14036=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14036;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x14036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14037=((1.0)*sj5);
IkReal x14038=((((-1.0)*r20*x14037))+(((-1.0)*cj5*r21)));
j4eval[0]=x14038;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x14037)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14039=cj5*cj5;
IkReal x14040=r01*r01;
IkReal x14041=(cj5*r00);
IkReal x14042=(r01*sj5);
IkReal x14043=(((x14039*(r00*r00)))+(((-2.0)*x14041*x14042))+(((-1.0)*x14039*x14040))+(r02*r02)+x14040);
j4eval[0]=x14043;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14042))+x14041))));
j4eval[2]=IKsign(x14043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14044=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14044);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14044);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14045=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x14045))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x14045)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14046=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14046);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14046);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14047=IKPowWithIntegerCheck(r22,-1);
if(!x14047.valid){
continue;
}
CheckValue<IkReal> x14048=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x14048.valid){
continue;
}
if( IKabs(((x14047.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14048.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14047.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14048.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14047.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14048.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14049=IKsin(j4);
IkReal x14050=IKcos(j4);
IkReal x14051=((1.0)*sj5);
IkReal x14052=(cj5*r00);
IkReal x14053=(cj5*r10);
IkReal x14054=((1.0)*cj1);
evalcond[0]=((-1.0)*r22*x14050);
evalcond[1]=(((r22*x14049))+((sj1*sj2))+(((-1.0)*cj2*x14054)));
evalcond[2]=((((-1.0)*r11*x14049*x14051))+((x14049*x14053)));
evalcond[3]=(((x14050*x14052))+(((-1.0)*r01*x14050*x14051)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x14049*x14051))+((x14049*x14052)));
evalcond[5]=(((x14050*x14053))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*x14050*x14051))+(((-1.0)*sj2*x14054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14055=((1.0)*sj5);
CheckValue<IkReal> x14056=IKPowWithIntegerCheck(((((-1.0)*r01*x14055))+((cj5*r00))),-1);
if(!x14056.valid){
continue;
}
CheckValue<IkReal> x14057=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x14055))),-1);
if(!x14057.valid){
continue;
}
if( IKabs(x14056.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14057.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14056.value)+IKsqr(((x14057.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14056.value, ((x14057.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14058=IKsin(j4);
IkReal x14059=IKcos(j4);
IkReal x14060=((1.0)*sj5);
IkReal x14061=(cj5*r00);
IkReal x14062=(cj5*r10);
IkReal x14063=((1.0)*cj1);
evalcond[0]=((-1.0)*r22*x14059);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj2*x14063))+((r22*x14058)));
evalcond[2]=((((-1.0)*r11*x14058*x14060))+((x14058*x14062)));
evalcond[3]=((((-1.0)*r01*x14059*x14060))+((x14059*x14061)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x14058*x14060))+((x14058*x14061)));
evalcond[5]=((((-1.0)*sj2*x14063))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*x14059*x14060))+((x14059*x14062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14064=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14064);
rxp0_2=(py*r00);
rxp1_0=(r21*x14064);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14065=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x14065))+((cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x14065)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14066=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14066);
rxp0_2=(py*r00);
rxp1_0=(r21*x14066);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14067=IKPowWithIntegerCheck(r12,-1);
if(!x14067.valid){
continue;
}
CheckValue<IkReal> x14068=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14068.valid){
continue;
}
if( IKabs(((x14067.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14068.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14067.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14068.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14067.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14068.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14069=IKsin(j4);
IkReal x14070=IKcos(j4);
IkReal x14071=((1.0)*cj1);
IkReal x14072=(cj5*x14070);
IkReal x14073=((1.0)*r01*sj5);
IkReal x14074=(cj5*x14069);
IkReal x14075=((1.0)*r21*sj5);
evalcond[0]=((-1.0)*r12*x14070);
evalcond[1]=(((r20*x14074))+(((-1.0)*x14069*x14075)));
evalcond[2]=(((r00*x14072))+(((-1.0)*x14070*x14073)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r12*x14069))+(((-1.0)*sj2*x14071)));
evalcond[4]=((-1.0)+((r00*x14074))+(((-1.0)*x14069*x14073)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*cj2*x14071))+((r20*x14072))+(((-1.0)*x14070*x14075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14076=((1.0)*sj5);
CheckValue<IkReal> x14077=IKPowWithIntegerCheck(((((-1.0)*r01*x14076))+((cj5*r00))),-1);
if(!x14077.valid){
continue;
}
CheckValue<IkReal> x14078=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x14076))),-1);
if(!x14078.valid){
continue;
}
if( IKabs(x14077.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14078.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14077.value)+IKsqr(((x14078.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14077.value, ((x14078.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14079=IKsin(j4);
IkReal x14080=IKcos(j4);
IkReal x14081=((1.0)*cj1);
IkReal x14082=(cj5*x14080);
IkReal x14083=((1.0)*r01*sj5);
IkReal x14084=(cj5*x14079);
IkReal x14085=((1.0)*r21*sj5);
evalcond[0]=((-1.0)*r12*x14080);
evalcond[1]=(((r20*x14084))+(((-1.0)*x14079*x14085)));
evalcond[2]=(((r00*x14082))+(((-1.0)*x14080*x14083)));
evalcond[3]=((((-1.0)*sj2*x14081))+(((-1.0)*cj2*sj1))+((r12*x14079)));
evalcond[4]=((-1.0)+((r00*x14084))+(((-1.0)*x14079*x14083)));
evalcond[5]=(((r20*x14082))+((sj1*sj2))+(((-1.0)*x14080*x14085))+(((-1.0)*cj2*x14081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14086=cj5*cj5;
IkReal x14087=r01*r01;
IkReal x14088=(r01*sj5);
IkReal x14089=(cj5*r00);
CheckValue<IkReal> x14090=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14086*x14087))+((x14086*(r00*r00)))+(((-2.0)*x14088*x14089))+(r02*r02)+x14087)),-1);
if(!x14090.valid){
continue;
}
CheckValue<IkReal> x14091 = IKatan2WithCheck(IkReal(((((-1.0)*x14088))+x14089)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14090.value)))+(x14091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14092=IKcos(j4);
IkReal x14093=IKsin(j4);
IkReal x14094=((1.0)*cj1);
IkReal x14095=((1.0)*x14092);
IkReal x14096=(cj5*x14092);
IkReal x14097=(cj5*x14093);
IkReal x14098=((1.0)*sj5*x14093);
evalcond[0]=(((r00*x14096))+((r02*x14093))+(((-1.0)*r01*sj5*x14095)));
evalcond[1]=((((-1.0)*r22*x14095))+((r20*x14097))+(((-1.0)*r21*x14098)));
evalcond[2]=((((-1.0)*r11*x14098))+(((-1.0)*r12*x14095))+((r10*x14097)));
evalcond[3]=((-1.0)+((r00*x14097))+(((-1.0)*r02*x14095))+(((-1.0)*r01*x14098)));
evalcond[4]=(((r20*x14096))+(((-1.0)*r21*sj5*x14095))+((sj1*sj2))+(((-1.0)*cj2*x14094))+((r22*x14093)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x14094))+((r12*x14093))+((r10*x14096))+(((-1.0)*r11*sj5*x14095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14099=((1.0)*sj5);
CheckValue<IkReal> x14100=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x14099)))),-1);
if(!x14100.valid){
continue;
}
CheckValue<IkReal> x14101 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14100.value)))+(x14101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14102=IKcos(j4);
IkReal x14103=IKsin(j4);
IkReal x14104=((1.0)*cj1);
IkReal x14105=((1.0)*x14102);
IkReal x14106=(cj5*x14102);
IkReal x14107=(cj5*x14103);
IkReal x14108=((1.0)*sj5*x14103);
evalcond[0]=(((r02*x14103))+((r00*x14106))+(((-1.0)*r01*sj5*x14105)));
evalcond[1]=((((-1.0)*r21*x14108))+(((-1.0)*r22*x14105))+((r20*x14107)));
evalcond[2]=((((-1.0)*r12*x14105))+(((-1.0)*r11*x14108))+((r10*x14107)));
evalcond[3]=((-1.0)+((r00*x14107))+(((-1.0)*r01*x14108))+(((-1.0)*r02*x14105)));
evalcond[4]=((((-1.0)*cj2*x14104))+((r22*x14103))+((sj1*sj2))+(((-1.0)*r21*sj5*x14105))+((r20*x14106)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x14105))+(((-1.0)*sj2*x14104))+((r10*x14106))+((r12*x14103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14109=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14109.valid){
continue;
}
CheckValue<IkReal> x14110 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14109.value)))+(x14110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14111=IKcos(j4);
IkReal x14112=IKsin(j4);
IkReal x14113=((1.0)*cj1);
IkReal x14114=((1.0)*x14111);
IkReal x14115=(cj5*x14111);
IkReal x14116=(cj5*x14112);
IkReal x14117=((1.0)*sj5*x14112);
evalcond[0]=(((r02*x14112))+((r00*x14115))+(((-1.0)*r01*sj5*x14114)));
evalcond[1]=((((-1.0)*r21*x14117))+(((-1.0)*r22*x14114))+((r20*x14116)));
evalcond[2]=((((-1.0)*r11*x14117))+(((-1.0)*r12*x14114))+((r10*x14116)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14117))+((r00*x14116))+(((-1.0)*r02*x14114)));
evalcond[4]=((((-1.0)*cj2*x14113))+((sj1*sj2))+((r22*x14112))+(((-1.0)*r21*sj5*x14114))+((r20*x14115)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x14114))+(((-1.0)*sj2*x14113))+((r10*x14115))+((r12*x14112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14118=((-1.0)*r20);
IkReal x14120 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14120)==0){
continue;
}
IkReal x14119=pow(x14120,-0.5);
CheckValue<IkReal> x14121 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14118),IKFAST_ATAN2_MAGTHRESH);
if(!x14121.valid){
continue;
}
IkReal gconst30=((-1.0)*(x14121.value));
IkReal gconst31=(r21*x14119);
IkReal gconst32=(x14118*x14119);
CheckValue<IkReal> x14122 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14122.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14122.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14123=((-1.0)*r20);
IkReal x14124=x14119;
CheckValue<IkReal> x14126 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14123),IKFAST_ATAN2_MAGTHRESH);
if(!x14126.valid){
continue;
}
IkReal x14125=((-1.0)*(x14126.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14125;
IkReal gconst30=x14125;
IkReal gconst31=(r21*x14124);
IkReal gconst32=(x14123*x14124);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14127=((-1.0)*r20);
IkReal x14128=x14119;
CheckValue<IkReal> x14130 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14127),IKFAST_ATAN2_MAGTHRESH);
if(!x14130.valid){
continue;
}
IkReal x14129=((-1.0)*(x14130.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14129;
IkReal gconst30=x14129;
IkReal gconst31=(r21*x14128);
IkReal gconst32=(x14127*x14128);
CheckValue<IkReal> x14138=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14138.valid){
continue;
}
IkReal x14131=x14138.value;
IkReal x14132=(cj3*x14131);
IkReal x14133=(r11*x14132);
IkReal x14134=(r01*x14132);
IkReal x14135=(r00*x14132);
IkReal x14136=(r10*x14132);
IkReal x14137=(r20*r21*x14132);
j4eval[0]=IKsign((((r01*x14133*(r21*r21)))+((cj3*r02*r12))+((r10*r20*r21*x14134))+((r00*r20*r21*x14133))+((r10*x14135*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14139=((-1.0)*r20);
IkReal x14140=x14119;
CheckValue<IkReal> x14142 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14139),IKFAST_ATAN2_MAGTHRESH);
if(!x14142.valid){
continue;
}
IkReal x14141=((-1.0)*(x14142.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14141;
IkReal gconst30=x14141;
IkReal gconst31=(r21*x14140);
IkReal gconst32=(x14139*x14140);
CheckValue<IkReal> x14150=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14150.valid){
continue;
}
IkReal x14143=x14150.value;
IkReal x14144=(sj3*x14143);
IkReal x14145=(r11*x14144);
IkReal x14146=(r00*x14144);
IkReal x14147=(r01*x14144);
IkReal x14148=(r10*x14144);
IkReal x14149=(r20*r21*x14144);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14145))+((r10*x14146*(r20*r20)))+((r10*r20*r21*x14147))+((r01*x14145*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14151=((-1.0)*r20);
IkReal x14152=x14119;
CheckValue<IkReal> x14154 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14151),IKFAST_ATAN2_MAGTHRESH);
if(!x14154.valid){
continue;
}
IkReal x14153=((-1.0)*(x14154.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14153;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x14153;
IkReal gconst31=(r21*x14152);
IkReal gconst32=(x14151*x14152);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14155=((-1.0)*r20);
IkReal x14156=x14119;
CheckValue<IkReal> x14158 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14155),IKFAST_ATAN2_MAGTHRESH);
if(!x14158.valid){
continue;
}
IkReal x14157=((-1.0)*(x14158.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14157;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x14157;
IkReal gconst31=(r21*x14156);
IkReal gconst32=(x14155*x14156);
IkReal x14159=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x14163=IKPowWithIntegerCheck(x14159,-1);
if(!x14163.valid){
continue;
}
IkReal x14160=x14163.value;
IkReal x14161=((1.0)*x14160);
IkReal x14162=((((-1.0)*x14161*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x14161*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x14160)));
j4eval[0]=x14162;
j4eval[1]=IKsign(x14162);
j4eval[2]=r02;
j4eval[3]=x14159;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14164=((-1.0)*r20);
IkReal x14165=x14119;
CheckValue<IkReal> x14167 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14164),IKFAST_ATAN2_MAGTHRESH);
if(!x14167.valid){
continue;
}
IkReal x14166=((-1.0)*(x14167.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14166;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x14166;
IkReal gconst31=(r21*x14165);
IkReal gconst32=(x14164*x14165);
IkReal x14168=r22*r22;
IkReal x14169=(cj1*cj2*r12);
IkReal x14170=(r12*sj1*sj2);
CheckValue<IkReal> x14174=IKPowWithIntegerCheck(((-1.0)+x14168),-1);
if(!x14174.valid){
continue;
}
IkReal x14171=x14174.value;
if((((1.0)+(((-1.0)*x14168)))) < -0.00001)
continue;
IkReal x14172=IKsqrt(((1.0)+(((-1.0)*x14168))));
IkReal x14173=(r22*x14171*x14172);
j4eval[0]=((IKabs(((((-1.0)*x14170))+x14169)))+(IKabs((((x14170*x14173))+(((-1.0)*x14169*x14173))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14175=(gconst32*r10);
IkReal x14176=(cj1*cj2);
IkReal x14177=(gconst31*r11);
IkReal x14178=((1.0)*sj1*sj2);
CheckValue<IkReal> x14179=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x14177*x14177)+(x14175*x14175)+(((-2.0)*x14175*x14177)))),-1);
if(!x14179.valid){
continue;
}
CheckValue<IkReal> x14180 = IKatan2WithCheck(IkReal((((r12*x14176))+(((-1.0)*r12*x14178)))),IkReal((((sj1*sj2*x14177))+(((-1.0)*x14175*x14178))+(((-1.0)*x14176*x14177))+((x14175*x14176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14179.value)))+(x14180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14181=IKsin(j4);
IkReal x14182=IKcos(j4);
IkReal x14183=(gconst32*r20);
IkReal x14184=((1.0)*sj1);
IkReal x14185=((1.0)*x14182);
IkReal x14186=(gconst31*x14182);
IkReal x14187=(gconst32*x14181);
IkReal x14188=((1.0)*x14181);
IkReal x14189=(gconst31*x14188);
evalcond[0]=((((-1.0)*r22*x14185))+((x14181*x14183))+(((-1.0)*r21*x14189)));
evalcond[1]=((((-1.0)*r11*x14189))+(((-1.0)*r12*x14185))+((r10*x14187)));
evalcond[2]=((((-1.0)*gconst32*r00*x14185))+((r01*x14186))+(((-1.0)*r02*x14188)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14185))+((r00*x14187))+(((-1.0)*r01*x14189)));
evalcond[4]=((((-1.0)*gconst32*r10*x14185))+(((-1.0)*r12*x14188))+((r11*x14186))+((cj1*cj2))+(((-1.0)*sj2*x14184)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x14188))+((r21*x14186))+(((-1.0)*cj2*x14184))+(((-1.0)*x14183*x14185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14190=(gconst32*r00);
IkReal x14191=(gconst31*r01);
CheckValue<IkReal> x14192=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x14190*x14190)))+(((-1.0)*(r02*r02)))+(((2.0)*x14190*x14191))+(((-1.0)*(x14191*x14191))))),-1);
if(!x14192.valid){
continue;
}
CheckValue<IkReal> x14193 = IKatan2WithCheck(IkReal(((((-1.0)*x14190))+x14191)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14192.value)))+(x14193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14194=IKsin(j4);
IkReal x14195=IKcos(j4);
IkReal x14196=(gconst32*r20);
IkReal x14197=((1.0)*sj1);
IkReal x14198=((1.0)*x14195);
IkReal x14199=(gconst31*x14195);
IkReal x14200=(gconst32*x14194);
IkReal x14201=((1.0)*x14194);
IkReal x14202=(gconst31*x14201);
evalcond[0]=((((-1.0)*r22*x14198))+(((-1.0)*r21*x14202))+((x14194*x14196)));
evalcond[1]=((((-1.0)*r12*x14198))+((r10*x14200))+(((-1.0)*r11*x14202)));
evalcond[2]=((((-1.0)*gconst32*r00*x14198))+(((-1.0)*r02*x14201))+((r01*x14199)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14202))+((r00*x14200))+(((-1.0)*r02*x14198)));
evalcond[4]=((((-1.0)*r12*x14201))+((r11*x14199))+(((-1.0)*sj2*x14197))+((cj1*cj2))+(((-1.0)*gconst32*r10*x14198)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x14196*x14198))+(((-1.0)*cj2*x14197))+((r21*x14199))+(((-1.0)*r22*x14201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14203=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14203.valid){
continue;
}
CheckValue<IkReal> x14204 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14203.value)))+(x14204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14205=IKsin(j4);
IkReal x14206=IKcos(j4);
IkReal x14207=(gconst32*r20);
IkReal x14208=((1.0)*sj1);
IkReal x14209=((1.0)*x14206);
IkReal x14210=(gconst31*x14206);
IkReal x14211=(gconst32*x14205);
IkReal x14212=((1.0)*x14205);
IkReal x14213=(gconst31*x14212);
evalcond[0]=((((-1.0)*r21*x14213))+((x14205*x14207))+(((-1.0)*r22*x14209)));
evalcond[1]=((((-1.0)*r12*x14209))+((r10*x14211))+(((-1.0)*r11*x14213)));
evalcond[2]=((((-1.0)*r02*x14212))+((r01*x14210))+(((-1.0)*gconst32*r00*x14209)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14213))+(((-1.0)*r02*x14209))+((r00*x14211)));
evalcond[4]=((((-1.0)*r12*x14212))+((r11*x14210))+(((-1.0)*sj2*x14208))+(((-1.0)*gconst32*r10*x14209))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x14208))+(((-1.0)*x14207*x14209))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x14212))+((r21*x14210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14214=((-1.0)*r20);
IkReal x14215=x14119;
CheckValue<IkReal> x14217 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14214),IKFAST_ATAN2_MAGTHRESH);
if(!x14217.valid){
continue;
}
IkReal x14216=((-1.0)*(x14217.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14216;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x14216;
IkReal gconst31=(r21*x14215);
IkReal gconst32=(x14214*x14215);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14218=((-1.0)*r20);
IkReal x14219=x14119;
CheckValue<IkReal> x14221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14218),IKFAST_ATAN2_MAGTHRESH);
if(!x14221.valid){
continue;
}
IkReal x14220=((-1.0)*(x14221.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14220;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x14220;
IkReal gconst31=(r21*x14219);
IkReal gconst32=(x14218*x14219);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14222=((-1.0)*r20);
IkReal x14223=x14119;
CheckValue<IkReal> x14225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14222),IKFAST_ATAN2_MAGTHRESH);
if(!x14225.valid){
continue;
}
IkReal x14224=((-1.0)*(x14225.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14224;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x14224;
IkReal gconst31=(r21*x14223);
IkReal gconst32=(x14222*x14223);
IkReal x14226=r22*r22;
IkReal x14227=(cj1*r02*sj2);
IkReal x14228=(cj2*r02*sj1);
CheckValue<IkReal> x14232=IKPowWithIntegerCheck(((-1.0)+x14226),-1);
if(!x14232.valid){
continue;
}
IkReal x14229=x14232.value;
if((((1.0)+(((-1.0)*x14226)))) < -0.00001)
continue;
IkReal x14230=IKsqrt(((1.0)+(((-1.0)*x14226))));
IkReal x14231=(r22*x14229*x14230);
j4eval[0]=((IKabs((((x14228*x14231))+((x14227*x14231)))))+(IKabs((x14227+x14228))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14233=((1.0)*gconst32);
IkReal x14234=(gconst31*r01);
IkReal x14235=(cj1*sj2);
IkReal x14236=(cj2*sj1);
CheckValue<IkReal> x14237=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x14233)))),-1);
if(!x14237.valid){
continue;
}
CheckValue<IkReal> x14238 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x14233*x14235))+(((-1.0)*r00*x14233*x14236))+((x14234*x14236))+((x14234*x14235)))),IkReal((((r02*x14236))+((r02*x14235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14237.value)))+(x14238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14239=IKcos(j4);
IkReal x14240=IKsin(j4);
IkReal x14241=(gconst31*r21);
IkReal x14242=((1.0)*sj1);
IkReal x14243=(gconst31*r01);
IkReal x14244=(gconst31*r11);
IkReal x14245=((1.0)*x14239);
IkReal x14246=((1.0)*x14240);
IkReal x14247=(gconst32*x14240);
IkReal x14248=(gconst32*x14239);
evalcond[0]=(((r02*x14240))+(((-1.0)*x14243*x14245))+((r00*x14248)));
evalcond[1]=((((-1.0)*r22*x14245))+((r20*x14247))+(((-1.0)*x14241*x14246)));
evalcond[2]=((((-1.0)*x14244*x14246))+((r10*x14247))+(((-1.0)*r12*x14245)));
evalcond[3]=((-1.0)+(((-1.0)*x14243*x14246))+(((-1.0)*r02*x14245))+((r00*x14247)));
evalcond[4]=(((r12*x14240))+(((-1.0)*sj2*x14242))+(((-1.0)*x14244*x14245))+((r10*x14248))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r20*x14248))+(((-1.0)*cj2*x14242))+(((-1.0)*x14241*x14245))+((r22*x14240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14249=(gconst32*r00);
IkReal x14250=(gconst31*r01);
CheckValue<IkReal> x14251=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14249*x14250))+(x14249*x14249)+(x14250*x14250)+(r02*r02))),-1);
if(!x14251.valid){
continue;
}
CheckValue<IkReal> x14252 = IKatan2WithCheck(IkReal((x14249+(((-1.0)*x14250)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14251.value)))+(x14252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14253=IKcos(j4);
IkReal x14254=IKsin(j4);
IkReal x14255=(gconst31*r21);
IkReal x14256=((1.0)*sj1);
IkReal x14257=(gconst31*r01);
IkReal x14258=(gconst31*r11);
IkReal x14259=((1.0)*x14253);
IkReal x14260=((1.0)*x14254);
IkReal x14261=(gconst32*x14254);
IkReal x14262=(gconst32*x14253);
evalcond[0]=(((r00*x14262))+((r02*x14254))+(((-1.0)*x14257*x14259)));
evalcond[1]=(((r20*x14261))+(((-1.0)*x14255*x14260))+(((-1.0)*r22*x14259)));
evalcond[2]=((((-1.0)*x14258*x14260))+(((-1.0)*r12*x14259))+((r10*x14261)));
evalcond[3]=((-1.0)+(((-1.0)*x14257*x14260))+((r00*x14261))+(((-1.0)*r02*x14259)));
evalcond[4]=((((-1.0)*sj2*x14256))+((r12*x14254))+(((-1.0)*x14258*x14259))+((cj1*cj2))+((r10*x14262)));
evalcond[5]=(((r20*x14262))+(((-1.0)*cj1*sj2))+(((-1.0)*x14255*x14259))+(((-1.0)*cj2*x14256))+((r22*x14254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14263=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14263.valid){
continue;
}
CheckValue<IkReal> x14264 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14263.value)))+(x14264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14265=IKcos(j4);
IkReal x14266=IKsin(j4);
IkReal x14267=(gconst31*r21);
IkReal x14268=((1.0)*sj1);
IkReal x14269=(gconst31*r01);
IkReal x14270=(gconst31*r11);
IkReal x14271=((1.0)*x14265);
IkReal x14272=((1.0)*x14266);
IkReal x14273=(gconst32*x14266);
IkReal x14274=(gconst32*x14265);
evalcond[0]=(((r02*x14266))+(((-1.0)*x14269*x14271))+((r00*x14274)));
evalcond[1]=(((r20*x14273))+(((-1.0)*r22*x14271))+(((-1.0)*x14267*x14272)));
evalcond[2]=((((-1.0)*x14270*x14272))+(((-1.0)*r12*x14271))+((r10*x14273)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14271))+(((-1.0)*x14269*x14272))+((r00*x14273)));
evalcond[4]=((((-1.0)*x14270*x14271))+(((-1.0)*sj2*x14268))+((r12*x14266))+((r10*x14274))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r20*x14274))+(((-1.0)*cj2*x14268))+((r22*x14266))+(((-1.0)*x14267*x14271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14275=((-1.0)*r20);
IkReal x14276=x14119;
CheckValue<IkReal> x14278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14275),IKFAST_ATAN2_MAGTHRESH);
if(!x14278.valid){
continue;
}
IkReal x14277=((-1.0)*(x14278.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14277;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x14277;
IkReal gconst31=(r21*x14276);
IkReal gconst32=(x14275*x14276);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14279=((-1.0)*r20);
IkReal x14280=x14119;
CheckValue<IkReal> x14282 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14279),IKFAST_ATAN2_MAGTHRESH);
if(!x14282.valid){
continue;
}
IkReal x14281=((-1.0)*(x14282.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14281;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x14281;
IkReal gconst31=(r21*x14280);
IkReal gconst32=(x14279*x14280);
IkReal x14283=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x14287=IKPowWithIntegerCheck(x14283,-1);
if(!x14287.valid){
continue;
}
IkReal x14284=x14287.value;
IkReal x14285=((1.0)*x14284);
IkReal x14286=((((-1.0)*(r02*r02)))+(((-1.0)*x14285*(r00*r00)*(r20*r20)))+(((-1.0)*x14285*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x14284)));
j4eval[0]=x14286;
j4eval[1]=IKsign(x14286);
j4eval[2]=r02;
j4eval[3]=x14283;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14288=((-1.0)*r20);
IkReal x14289=x14119;
CheckValue<IkReal> x14291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14288),IKFAST_ATAN2_MAGTHRESH);
if(!x14291.valid){
continue;
}
IkReal x14290=((-1.0)*(x14291.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14290;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x14290;
IkReal gconst31=(r21*x14289);
IkReal gconst32=(x14288*x14289);
IkReal x14292=r22*r22;
IkReal x14293=(r02*sj1*sj2);
CheckValue<IkReal> x14298=IKPowWithIntegerCheck(((-1.0)+x14292),-1);
if(!x14298.valid){
continue;
}
IkReal x14294=x14298.value;
IkReal x14295=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x14292)))) < -0.00001)
continue;
IkReal x14296=IKsqrt(((1.0)+(((-1.0)*x14292))));
IkReal x14297=(r22*x14294*x14296);
j4eval[0]=((IKabs((((x14293*x14297))+(((-1.0)*x14295*x14297)))))+(IKabs(((((-1.0)*x14295))+x14293))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14299=((1.0)*gconst32);
IkReal x14300=(sj1*sj2);
IkReal x14301=((1.0)*gconst31);
IkReal x14302=(cj1*cj2);
CheckValue<IkReal> x14303 = IKatan2WithCheck(IkReal((((gconst32*r00*x14302))+((gconst31*r01*x14300))+(((-1.0)*r00*x14299*x14300))+(((-1.0)*r01*x14301*x14302)))),IkReal((((r02*x14300))+(((-1.0)*r02*x14302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14303.valid){
continue;
}
CheckValue<IkReal> x14304=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x14301))+(((-1.0)*r11*x14299)))),-1);
if(!x14304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14303.value)+(((1.5707963267949)*(x14304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14305=IKsin(j4);
IkReal x14306=IKcos(j4);
IkReal x14307=(gconst32*r20);
IkReal x14308=((1.0)*cj2);
IkReal x14309=((1.0)*x14306);
IkReal x14310=(gconst31*x14306);
IkReal x14311=(gconst32*x14305);
IkReal x14312=((1.0)*x14305);
IkReal x14313=(gconst31*x14312);
evalcond[0]=((((-1.0)*r22*x14309))+(((-1.0)*r21*x14313))+((x14305*x14307)));
evalcond[1]=((((-1.0)*r12*x14309))+(((-1.0)*r11*x14313))+((r10*x14311)));
evalcond[2]=((((-1.0)*r02*x14312))+(((-1.0)*gconst32*r00*x14309))+((r01*x14310)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14313))+(((-1.0)*r02*x14309))+((r00*x14311)));
evalcond[4]=((((-1.0)*cj1*x14308))+(((-1.0)*r22*x14312))+(((-1.0)*x14307*x14309))+((sj1*sj2))+((r21*x14310)));
evalcond[5]=(((r11*x14310))+(((-1.0)*sj1*x14308))+(((-1.0)*gconst32*r10*x14309))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14314=(gconst32*r00);
IkReal x14315=(gconst31*r01);
CheckValue<IkReal> x14316 = IKatan2WithCheck(IkReal(((((-1.0)*x14314))+x14315)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14316.valid){
continue;
}
CheckValue<IkReal> x14317=IKPowWithIntegerCheck(IKsign(((((2.0)*x14314*x14315))+(((-1.0)*(x14315*x14315)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x14314*x14314))))),-1);
if(!x14317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14316.value)+(((1.5707963267949)*(x14317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14318=IKsin(j4);
IkReal x14319=IKcos(j4);
IkReal x14320=(gconst32*r20);
IkReal x14321=((1.0)*cj2);
IkReal x14322=((1.0)*x14319);
IkReal x14323=(gconst31*x14319);
IkReal x14324=(gconst32*x14318);
IkReal x14325=((1.0)*x14318);
IkReal x14326=(gconst31*x14325);
evalcond[0]=((((-1.0)*r21*x14326))+((x14318*x14320))+(((-1.0)*r22*x14322)));
evalcond[1]=(((r10*x14324))+(((-1.0)*r12*x14322))+(((-1.0)*r11*x14326)));
evalcond[2]=(((r01*x14323))+(((-1.0)*r02*x14325))+(((-1.0)*gconst32*r00*x14322)));
evalcond[3]=((-1.0)+((r00*x14324))+(((-1.0)*r02*x14322))+(((-1.0)*r01*x14326)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x14320*x14322))+((r21*x14323))+(((-1.0)*r22*x14325))+(((-1.0)*cj1*x14321)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14321))+((r11*x14323))+(((-1.0)*gconst32*r10*x14322))+(((-1.0)*r12*x14325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14327=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14327.valid){
continue;
}
CheckValue<IkReal> x14328 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14327.value)))+(x14328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14329=IKsin(j4);
IkReal x14330=IKcos(j4);
IkReal x14331=(gconst32*r20);
IkReal x14332=((1.0)*cj2);
IkReal x14333=((1.0)*x14330);
IkReal x14334=(gconst31*x14330);
IkReal x14335=(gconst32*x14329);
IkReal x14336=((1.0)*x14329);
IkReal x14337=(gconst31*x14336);
evalcond[0]=((((-1.0)*r22*x14333))+(((-1.0)*r21*x14337))+((x14329*x14331)));
evalcond[1]=((((-1.0)*r12*x14333))+(((-1.0)*r11*x14337))+((r10*x14335)));
evalcond[2]=((((-1.0)*r02*x14336))+((r01*x14334))+(((-1.0)*gconst32*r00*x14333)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14333))+((r00*x14335))+(((-1.0)*r01*x14337)));
evalcond[4]=((((-1.0)*cj1*x14332))+(((-1.0)*r22*x14336))+((sj1*sj2))+(((-1.0)*x14331*x14333))+((r21*x14334)));
evalcond[5]=((((-1.0)*sj1*x14332))+((r11*x14334))+(((-1.0)*r12*x14336))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst32*r10*x14333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14338=((-1.0)*r20);
IkReal x14339=x14119;
CheckValue<IkReal> x14341 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14338),IKFAST_ATAN2_MAGTHRESH);
if(!x14341.valid){
continue;
}
IkReal x14340=((-1.0)*(x14341.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14340;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x14340;
IkReal gconst31=(r21*x14339);
IkReal gconst32=(x14338*x14339);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14342=((-1.0)*r20);
IkReal x14343=x14119;
CheckValue<IkReal> x14345 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14342),IKFAST_ATAN2_MAGTHRESH);
if(!x14345.valid){
continue;
}
IkReal x14344=((-1.0)*(x14345.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14344;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x14344;
IkReal gconst31=(r21*x14343);
IkReal gconst32=(x14342*x14343);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14346=((-1.0)*r20);
IkReal x14347=x14119;
CheckValue<IkReal> x14349 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14346),IKFAST_ATAN2_MAGTHRESH);
if(!x14349.valid){
continue;
}
IkReal x14348=((-1.0)*(x14349.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14348;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x14348;
IkReal gconst31=(r21*x14347);
IkReal gconst32=(x14346*x14347);
IkReal x14350=r22*r22;
IkReal x14351=(cj1*cj2*r02);
CheckValue<IkReal> x14356=IKPowWithIntegerCheck(((-1.0)+x14350),-1);
if(!x14356.valid){
continue;
}
IkReal x14352=x14356.value;
IkReal x14353=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x14350)))) < -0.00001)
continue;
IkReal x14354=IKsqrt(((1.0)+(((-1.0)*x14350))));
IkReal x14355=(r22*x14352*x14354);
j4eval[0]=((IKabs((((x14351*x14355))+(((-1.0)*x14353*x14355)))))+(IKabs(((((-1.0)*x14353))+x14351))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14357=((1.0)*gconst32);
IkReal x14358=(gconst31*r01);
IkReal x14359=(cj1*cj2);
IkReal x14360=((1.0)*sj1*sj2);
CheckValue<IkReal> x14361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x14357)))),-1);
if(!x14361.valid){
continue;
}
CheckValue<IkReal> x14362 = IKatan2WithCheck(IkReal((((x14358*x14359))+((gconst32*r00*sj1*sj2))+(((-1.0)*r00*x14357*x14359))+(((-1.0)*x14358*x14360)))),IkReal((((r02*x14359))+(((-1.0)*r02*x14360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14361.value)))+(x14362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14363=IKcos(j4);
IkReal x14364=IKsin(j4);
IkReal x14365=(gconst31*r21);
IkReal x14366=((1.0)*cj2);
IkReal x14367=(gconst31*r01);
IkReal x14368=(gconst31*r11);
IkReal x14369=((1.0)*x14363);
IkReal x14370=((1.0)*x14364);
IkReal x14371=(gconst32*x14364);
IkReal x14372=(gconst32*x14363);
evalcond[0]=(((r00*x14372))+((r02*x14364))+(((-1.0)*x14367*x14369)));
evalcond[1]=((((-1.0)*r22*x14369))+((r20*x14371))+(((-1.0)*x14365*x14370)));
evalcond[2]=(((r10*x14371))+(((-1.0)*r12*x14369))+(((-1.0)*x14368*x14370)));
evalcond[3]=((-1.0)+((r00*x14371))+(((-1.0)*r02*x14369))+(((-1.0)*x14367*x14370)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14366))+(((-1.0)*x14365*x14369))+((r20*x14372))+((r22*x14364)));
evalcond[5]=((((-1.0)*sj1*x14366))+(((-1.0)*x14368*x14369))+(((-1.0)*cj1*sj2))+((r10*x14372))+((r12*x14364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14373=(gconst32*r00);
IkReal x14374=(gconst31*r01);
CheckValue<IkReal> x14375 = IKatan2WithCheck(IkReal(((((-1.0)*x14374))+x14373)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14375.valid){
continue;
}
CheckValue<IkReal> x14376=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14373*x14374))+(x14374*x14374)+(x14373*x14373)+(r02*r02))),-1);
if(!x14376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14375.value)+(((1.5707963267949)*(x14376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14377=IKcos(j4);
IkReal x14378=IKsin(j4);
IkReal x14379=(gconst31*r21);
IkReal x14380=((1.0)*cj2);
IkReal x14381=(gconst31*r01);
IkReal x14382=(gconst31*r11);
IkReal x14383=((1.0)*x14377);
IkReal x14384=((1.0)*x14378);
IkReal x14385=(gconst32*x14378);
IkReal x14386=(gconst32*x14377);
evalcond[0]=(((r00*x14386))+(((-1.0)*x14381*x14383))+((r02*x14378)));
evalcond[1]=(((r20*x14385))+(((-1.0)*x14379*x14384))+(((-1.0)*r22*x14383)));
evalcond[2]=((((-1.0)*r12*x14383))+((r10*x14385))+(((-1.0)*x14382*x14384)));
evalcond[3]=((-1.0)+((r00*x14385))+(((-1.0)*x14381*x14384))+(((-1.0)*r02*x14383)));
evalcond[4]=(((r20*x14386))+(((-1.0)*x14379*x14383))+((sj1*sj2))+((r22*x14378))+(((-1.0)*cj1*x14380)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r10*x14386))+((r12*x14378))+(((-1.0)*x14382*x14383))+(((-1.0)*sj1*x14380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14387=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14387.valid){
continue;
}
CheckValue<IkReal> x14388 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14387.value)))+(x14388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14389=IKcos(j4);
IkReal x14390=IKsin(j4);
IkReal x14391=(gconst31*r21);
IkReal x14392=((1.0)*cj2);
IkReal x14393=(gconst31*r01);
IkReal x14394=(gconst31*r11);
IkReal x14395=((1.0)*x14389);
IkReal x14396=((1.0)*x14390);
IkReal x14397=(gconst32*x14390);
IkReal x14398=(gconst32*x14389);
evalcond[0]=((((-1.0)*x14393*x14395))+((r00*x14398))+((r02*x14390)));
evalcond[1]=((((-1.0)*x14391*x14396))+(((-1.0)*r22*x14395))+((r20*x14397)));
evalcond[2]=((((-1.0)*x14394*x14396))+(((-1.0)*r12*x14395))+((r10*x14397)));
evalcond[3]=((-1.0)+(((-1.0)*x14393*x14396))+((r00*x14397))+(((-1.0)*r02*x14395)));
evalcond[4]=(((sj1*sj2))+((r22*x14390))+(((-1.0)*x14391*x14395))+(((-1.0)*cj1*x14392))+((r20*x14398)));
evalcond[5]=((((-1.0)*x14394*x14395))+((r12*x14390))+(((-1.0)*cj1*sj2))+((r10*x14398))+(((-1.0)*sj1*x14392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14399=((-1.0)*r20);
IkReal x14400=((-1.0)*r21);
CheckValue<IkReal> x14402 = IKatan2WithCheck(IkReal(x14400),IkReal(x14399),IKFAST_ATAN2_MAGTHRESH);
if(!x14402.valid){
continue;
}
IkReal x14401=((-1.0)*(x14402.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14401;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x14399);
rxp0_2=(py*r00);
rxp1_0=(py*x14400);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x14401;
IkReal gconst31=r21;
IkReal gconst32=x14399;
IkReal x14403=(r01*r21);
IkReal x14404=(r00*r20);
j4eval[0]=((((-1.0)*x14403))+(((-1.0)*x14404)));
j4eval[1]=(((sj3*x14404))+((sj3*x14403)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14405=((-1.0)*r20);
IkReal x14406=((-1.0)*r21);
CheckValue<IkReal> x14408 = IKatan2WithCheck(IkReal(x14406),IkReal(x14405),IKFAST_ATAN2_MAGTHRESH);
if(!x14408.valid){
continue;
}
IkReal x14407=((-1.0)*(x14408.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14407;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x14405);
rxp0_2=(py*r00);
rxp1_0=(py*x14406);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x14407;
IkReal gconst31=r21;
IkReal gconst32=x14405;
IkReal x14409=(r01*r21);
IkReal x14410=(r00*r20);
j4eval[0]=((((-1.0)*x14410))+(((-1.0)*x14409)));
j4eval[1]=(((cj3*x14410))+((cj3*x14409)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14411=((-1.0)*r20);
IkReal x14412=((-1.0)*r21);
CheckValue<IkReal> x14414 = IKatan2WithCheck(IkReal(x14412),IkReal(x14411),IKFAST_ATAN2_MAGTHRESH);
if(!x14414.valid){
continue;
}
IkReal x14413=((-1.0)*(x14414.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14413;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x14411);
rxp0_2=(py*r00);
rxp1_0=(py*x14412);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x14413;
IkReal gconst31=r21;
IkReal gconst32=x14411;
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*r21))+((cj3*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14415=((1.0)*r00);
CheckValue<IkReal> x14416=IKPowWithIntegerCheck(cj3,-1);
if(!x14416.valid){
continue;
}
CheckValue<IkReal> x14417=IKPowWithIntegerCheck(r12,-1);
if(!x14417.valid){
continue;
}
CheckValue<IkReal> x14418=IKPowWithIntegerCheck((((cj3*gconst31*r01))+(((-1.0)*cj3*gconst32*x14415))),-1);
if(!x14418.valid){
continue;
}
if( IKabs(((x14416.value)*(x14417.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14418.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x14415)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14416.value)*(x14417.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14418.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x14415))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14416.value)*(x14417.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14418.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x14415))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14419=IKsin(j4);
IkReal x14420=IKcos(j4);
IkReal x14421=(r21*sj3);
IkReal x14422=((1.0)*sj3);
IkReal x14423=(gconst31*sj3);
IkReal x14424=(sj1*sj2);
IkReal x14425=((1.0)*gconst31);
IkReal x14426=((1.0)*cj2);
IkReal x14427=(r01*sj3);
IkReal x14428=((1.0)*cj1*sj2);
IkReal x14429=(sj1*x14426);
IkReal x14430=(r12*x14419);
IkReal x14431=((1.0)*cj3*gconst32);
IkReal x14432=(gconst31*x14420);
IkReal x14433=(gconst32*x14420);
IkReal x14434=(gconst32*x14419);
IkReal x14435=(x14428+x14429);
evalcond[0]=((-1.0)*r12*x14420);
evalcond[1]=((((-1.0)*r21*x14419*x14425))+((r20*x14434)));
evalcond[2]=((-1.0)+((r00*x14434))+(((-1.0)*r01*x14419*x14425)));
evalcond[3]=((((-1.0)*cj3*x14430))+(((-1.0)*x14424))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14435))+(((-1.0)*x14422*x14430)));
evalcond[5]=(((cj3*r01*x14432))+((r00*x14423))+((gconst32*x14427))+(((-1.0)*r00*x14420*x14431)));
evalcond[6]=((((-1.0)*cj3*r00*x14425))+((r01*x14420*x14423))+(((-1.0)*r00*x14422*x14433))+(((-1.0)*r01*x14431)));
evalcond[7]=((((-1.0)*x14435))+((r20*x14423))+((cj3*r21*x14432))+((gconst32*x14421))+(((-1.0)*r20*x14420*x14431)));
evalcond[8]=((((-1.0)*r21*x14431))+(((-1.0)*cj1*x14426))+x14424+((x14421*x14432))+(((-1.0)*r20*x14422*x14433))+(((-1.0)*cj3*r20*x14425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14436=(gconst32*r00);
IkReal x14437=((1.0)*gconst31);
CheckValue<IkReal> x14438=IKPowWithIntegerCheck((x14436+(((-1.0)*r01*x14437))),-1);
if(!x14438.valid){
continue;
}
CheckValue<IkReal> x14439=IKPowWithIntegerCheck((((cj3*gconst31*r01))+(((-1.0)*cj3*x14436))),-1);
if(!x14439.valid){
continue;
}
if( IKabs(x14438.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14439.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x14437)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14438.value)+IKsqr(((x14439.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x14437))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14438.value, ((x14439.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x14437))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14440=IKsin(j4);
IkReal x14441=IKcos(j4);
IkReal x14442=(r21*sj3);
IkReal x14443=((1.0)*sj3);
IkReal x14444=(gconst31*sj3);
IkReal x14445=(sj1*sj2);
IkReal x14446=((1.0)*gconst31);
IkReal x14447=((1.0)*cj2);
IkReal x14448=(r01*sj3);
IkReal x14449=((1.0)*cj1*sj2);
IkReal x14450=(sj1*x14447);
IkReal x14451=(r12*x14440);
IkReal x14452=((1.0)*cj3*gconst32);
IkReal x14453=(gconst31*x14441);
IkReal x14454=(gconst32*x14441);
IkReal x14455=(gconst32*x14440);
IkReal x14456=(x14450+x14449);
evalcond[0]=((-1.0)*r12*x14441);
evalcond[1]=(((r20*x14455))+(((-1.0)*r21*x14440*x14446)));
evalcond[2]=((-1.0)+((r00*x14455))+(((-1.0)*r01*x14440*x14446)));
evalcond[3]=((((-1.0)*cj3*x14451))+(((-1.0)*x14445))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14443*x14451))+(((-1.0)*x14456)));
evalcond[5]=(((r00*x14444))+((gconst32*x14448))+(((-1.0)*r00*x14441*x14452))+((cj3*r01*x14453)));
evalcond[6]=((((-1.0)*r00*x14443*x14454))+(((-1.0)*cj3*r00*x14446))+((r01*x14441*x14444))+(((-1.0)*r01*x14452)));
evalcond[7]=((((-1.0)*x14456))+((cj3*r21*x14453))+((r20*x14444))+(((-1.0)*r20*x14441*x14452))+((gconst32*x14442)));
evalcond[8]=((((-1.0)*cj3*r20*x14446))+((x14442*x14453))+(((-1.0)*cj1*x14447))+x14445+(((-1.0)*r20*x14443*x14454))+(((-1.0)*r21*x14452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14457=(gconst32*r00);
IkReal x14458=(gconst31*r01);
CheckValue<IkReal> x14459=IKPowWithIntegerCheck(((((-1.0)*x14458))+x14457),-1);
if(!x14459.valid){
continue;
}
CheckValue<IkReal> x14460=IKPowWithIntegerCheck(((((-1.0)*sj3*x14457))+((sj3*x14458))),-1);
if(!x14460.valid){
continue;
}
if( IKabs(x14459.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14460.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14459.value)+IKsqr(((x14460.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14459.value, ((x14460.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14461=IKsin(j4);
IkReal x14462=IKcos(j4);
IkReal x14463=(r21*sj3);
IkReal x14464=((1.0)*sj3);
IkReal x14465=(gconst31*sj3);
IkReal x14466=(sj1*sj2);
IkReal x14467=((1.0)*gconst31);
IkReal x14468=((1.0)*cj2);
IkReal x14469=(r01*sj3);
IkReal x14470=((1.0)*cj1*sj2);
IkReal x14471=(sj1*x14468);
IkReal x14472=(r12*x14461);
IkReal x14473=((1.0)*cj3*gconst32);
IkReal x14474=(gconst31*x14462);
IkReal x14475=(gconst32*x14462);
IkReal x14476=(gconst32*x14461);
IkReal x14477=(x14471+x14470);
evalcond[0]=((-1.0)*r12*x14462);
evalcond[1]=((((-1.0)*r21*x14461*x14467))+((r20*x14476)));
evalcond[2]=((-1.0)+((r00*x14476))+(((-1.0)*r01*x14461*x14467)));
evalcond[3]=((((-1.0)*x14466))+(((-1.0)*cj3*x14472))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14464*x14472))+(((-1.0)*x14477)));
evalcond[5]=(((r00*x14465))+((cj3*r01*x14474))+((gconst32*x14469))+(((-1.0)*r00*x14462*x14473)));
evalcond[6]=((((-1.0)*r01*x14473))+(((-1.0)*r00*x14464*x14475))+(((-1.0)*cj3*r00*x14467))+((r01*x14462*x14465)));
evalcond[7]=(((cj3*r21*x14474))+(((-1.0)*r20*x14462*x14473))+((gconst32*x14463))+(((-1.0)*x14477))+((r20*x14465)));
evalcond[8]=((((-1.0)*cj1*x14468))+(((-1.0)*cj3*r20*x14467))+x14466+(((-1.0)*r21*x14473))+((x14463*x14474))+(((-1.0)*r20*x14464*x14475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14478=gconst32*gconst32;
IkReal x14479=gconst31*gconst31;
IkReal x14480=(gconst31*r00);
IkReal x14481=(gconst32*r01);
IkReal x14482=((1.0)*cj3);
IkReal x14483=(cj3*r11);
IkReal x14484=((1.0)*sj3);
IkReal x14485=(r12*x14482);
IkReal x14486=(r10*x14478);
CheckValue<IkReal> x14487=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*r11*x14480*x14484))+((r02*r12*sj3))+((r01*r11*sj3*x14479))+((r00*sj3*x14486))+(((-1.0)*gconst31*r10*x14481*x14484)))),-1);
if(!x14487.valid){
continue;
}
CheckValue<IkReal> x14488 = IKatan2WithCheck(IkReal(((((-1.0)*x14480*x14485))+(((-1.0)*x14481*x14485)))),IkReal((((gconst31*x14481*x14483))+((r00*x14479*x14483))+(((-1.0)*gconst32*r10*x14480*x14482))+(((-1.0)*r01*x14482*x14486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14487.value)))+(x14488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14489=IKsin(j4);
IkReal x14490=IKcos(j4);
IkReal x14491=(r21*sj3);
IkReal x14492=(cj3*gconst32);
IkReal x14493=((1.0)*r01);
IkReal x14494=(gconst32*sj3);
IkReal x14495=(gconst31*sj3);
IkReal x14496=(sj1*sj2);
IkReal x14497=((1.0)*cj2);
IkReal x14498=((1.0)*cj1*sj2);
IkReal x14499=(sj1*x14497);
IkReal x14500=((1.0)*x14490);
IkReal x14501=(gconst31*x14490);
IkReal x14502=((1.0)*x14489);
IkReal x14503=((1.0)*cj3*gconst31);
IkReal x14504=(gconst32*x14489);
IkReal x14505=(x14499+x14498);
evalcond[0]=(((r20*x14504))+(((-1.0)*r22*x14500))+(((-1.0)*gconst31*r21*x14502)));
evalcond[1]=((((-1.0)*gconst31*r11*x14502))+(((-1.0)*r12*x14500))+((r10*x14504)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x14489*x14493))+(((-1.0)*r02*x14500))+((r00*x14504)));
evalcond[3]=((((-1.0)*r00*x14492*x14500))+((r00*x14495))+((r01*x14494))+(((-1.0)*cj3*r02*x14502))+((cj3*r01*x14501)));
evalcond[4]=(((r01*x14490*x14495))+(((-1.0)*r00*x14494*x14500))+(((-1.0)*r00*x14503))+(((-1.0)*x14492*x14493))+(((-1.0)*r02*sj3*x14502)));
evalcond[5]=((((-1.0)*x14496))+((r10*x14495))+((r11*x14494))+(((-1.0)*r10*x14492*x14500))+((cj3*r11*x14501))+(((-1.0)*cj3*r12*x14502))+((cj1*cj2)));
evalcond[6]=(((gconst32*x14491))+(((-1.0)*x14505))+(((-1.0)*cj3*r22*x14502))+(((-1.0)*r20*x14492*x14500))+((cj3*r21*x14501))+((r20*x14495)));
evalcond[7]=((((-1.0)*r20*x14494*x14500))+(((-1.0)*r21*x14492))+(((-1.0)*r20*x14503))+x14496+((x14491*x14501))+(((-1.0)*cj1*x14497))+(((-1.0)*r22*sj3*x14502)));
evalcond[8]=((((-1.0)*r11*x14492))+(((-1.0)*x14505))+((r11*x14490*x14495))+(((-1.0)*r10*x14503))+(((-1.0)*r12*sj3*x14502))+(((-1.0)*r10*x14494*x14500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14506=gconst31*gconst31;
IkReal x14507=gconst32*gconst32;
IkReal x14508=((1.0)*r11);
IkReal x14509=(r00*sj3);
IkReal x14510=(gconst31*gconst32);
IkReal x14511=(cj3*r01);
IkReal x14512=(cj3*r00);
IkReal x14513=(gconst32*r01*sj3);
IkReal x14514=(r10*x14507);
CheckValue<IkReal> x14515=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x14512*x14514))+(((-1.0)*x14508*x14510*x14512))+((r11*x14506*x14511))+(((-1.0)*r10*x14510*x14511)))),-1);
if(!x14515.valid){
continue;
}
CheckValue<IkReal> x14516 = IKatan2WithCheck(IkReal((((r12*x14513))+((gconst31*r12*x14509)))),IkReal((((r01*sj3*x14514))+((r10*x14509*x14510))+(((-1.0)*r01*sj3*x14508*x14510))+(((-1.0)*x14506*x14508*x14509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14515.value)))+(x14516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14517=IKsin(j4);
IkReal x14518=IKcos(j4);
IkReal x14519=(r21*sj3);
IkReal x14520=(cj3*gconst32);
IkReal x14521=((1.0)*r01);
IkReal x14522=(gconst32*sj3);
IkReal x14523=(gconst31*sj3);
IkReal x14524=(sj1*sj2);
IkReal x14525=((1.0)*cj2);
IkReal x14526=((1.0)*cj1*sj2);
IkReal x14527=(sj1*x14525);
IkReal x14528=((1.0)*x14518);
IkReal x14529=(gconst31*x14518);
IkReal x14530=((1.0)*x14517);
IkReal x14531=((1.0)*cj3*gconst31);
IkReal x14532=(gconst32*x14517);
IkReal x14533=(x14527+x14526);
evalcond[0]=((((-1.0)*r22*x14528))+(((-1.0)*gconst31*r21*x14530))+((r20*x14532)));
evalcond[1]=((((-1.0)*r12*x14528))+(((-1.0)*gconst31*r11*x14530))+((r10*x14532)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x14517*x14521))+((r00*x14532))+(((-1.0)*r02*x14528)));
evalcond[3]=(((r01*x14522))+((r00*x14523))+(((-1.0)*cj3*r02*x14530))+(((-1.0)*r00*x14520*x14528))+((cj3*r01*x14529)));
evalcond[4]=((((-1.0)*r00*x14531))+(((-1.0)*r02*sj3*x14530))+(((-1.0)*x14520*x14521))+(((-1.0)*r00*x14522*x14528))+((r01*x14518*x14523)));
evalcond[5]=((((-1.0)*r10*x14520*x14528))+(((-1.0)*x14524))+((r11*x14522))+((cj3*r11*x14529))+((cj1*cj2))+((r10*x14523))+(((-1.0)*cj3*r12*x14530)));
evalcond[6]=((((-1.0)*x14533))+((gconst32*x14519))+(((-1.0)*r20*x14520*x14528))+((r20*x14523))+(((-1.0)*cj3*r22*x14530))+((cj3*r21*x14529)));
evalcond[7]=((((-1.0)*r21*x14520))+(((-1.0)*r20*x14531))+(((-1.0)*r20*x14522*x14528))+(((-1.0)*cj1*x14525))+((x14519*x14529))+x14524+(((-1.0)*r22*sj3*x14530)));
evalcond[8]=((((-1.0)*x14533))+((r11*x14518*x14523))+(((-1.0)*r12*sj3*x14530))+(((-1.0)*r10*x14531))+(((-1.0)*r11*x14520))+(((-1.0)*r10*x14522*x14528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14534=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14534.valid){
continue;
}
CheckValue<IkReal> x14535 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14534.value)))+(x14535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14536=IKsin(j4);
IkReal x14537=IKcos(j4);
IkReal x14538=(r21*sj3);
IkReal x14539=(cj3*gconst32);
IkReal x14540=((1.0)*r01);
IkReal x14541=(gconst32*sj3);
IkReal x14542=(gconst31*sj3);
IkReal x14543=(sj1*sj2);
IkReal x14544=((1.0)*cj2);
IkReal x14545=((1.0)*cj1*sj2);
IkReal x14546=(sj1*x14544);
IkReal x14547=((1.0)*x14537);
IkReal x14548=(gconst31*x14537);
IkReal x14549=((1.0)*x14536);
IkReal x14550=((1.0)*cj3*gconst31);
IkReal x14551=(gconst32*x14536);
IkReal x14552=(x14546+x14545);
evalcond[0]=((((-1.0)*gconst31*r21*x14549))+((r20*x14551))+(((-1.0)*r22*x14547)));
evalcond[1]=((((-1.0)*r12*x14547))+((r10*x14551))+(((-1.0)*gconst31*r11*x14549)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x14536*x14540))+(((-1.0)*r02*x14547))+((r00*x14551)));
evalcond[3]=(((cj3*r01*x14548))+((r01*x14541))+(((-1.0)*cj3*r02*x14549))+(((-1.0)*r00*x14539*x14547))+((r00*x14542)));
evalcond[4]=((((-1.0)*r02*sj3*x14549))+(((-1.0)*r00*x14541*x14547))+((r01*x14537*x14542))+(((-1.0)*x14539*x14540))+(((-1.0)*r00*x14550)));
evalcond[5]=(((r10*x14542))+((r11*x14541))+(((-1.0)*x14543))+(((-1.0)*r10*x14539*x14547))+((cj1*cj2))+((cj3*r11*x14548))+(((-1.0)*cj3*r12*x14549)));
evalcond[6]=(((gconst32*x14538))+(((-1.0)*x14552))+(((-1.0)*cj3*r22*x14549))+((r20*x14542))+((cj3*r21*x14548))+(((-1.0)*r20*x14539*x14547)));
evalcond[7]=(((x14538*x14548))+(((-1.0)*r21*x14539))+(((-1.0)*cj1*x14544))+x14543+(((-1.0)*r20*x14550))+(((-1.0)*r22*sj3*x14549))+(((-1.0)*r20*x14541*x14547)));
evalcond[8]=((((-1.0)*r11*x14539))+(((-1.0)*r12*sj3*x14549))+(((-1.0)*x14552))+(((-1.0)*r10*x14541*x14547))+(((-1.0)*r10*x14550))+((r11*x14537*x14542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14553=((-1.0)*r21);
IkReal x14555 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14555)==0){
continue;
}
IkReal x14554=pow(x14555,-0.5);
CheckValue<IkReal> x14556 = IKatan2WithCheck(IkReal(x14553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14556.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x14556.value))));
IkReal gconst34=(x14553*x14554);
IkReal gconst35=((1.0)*r20*x14554);
CheckValue<IkReal> x14557 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14557.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14557.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14558=((-1.0)*r21);
CheckValue<IkReal> x14561 = IKatan2WithCheck(IkReal(x14558),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14561.valid){
continue;
}
IkReal x14559=((1.0)*(x14561.value));
IkReal x14560=x14554;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14559)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14559)));
IkReal gconst34=(x14558*x14560);
IkReal gconst35=((1.0)*r20*x14560);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14562=((-1.0)*r21);
CheckValue<IkReal> x14565 = IKatan2WithCheck(IkReal(x14562),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14565.valid){
continue;
}
IkReal x14563=((1.0)*(x14565.value));
IkReal x14564=x14554;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14563)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14563)));
IkReal gconst34=(x14562*x14564);
IkReal gconst35=((1.0)*r20*x14564);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14566=((-1.0)*r21);
CheckValue<IkReal> x14569 = IKatan2WithCheck(IkReal(x14566),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14569.valid){
continue;
}
IkReal x14567=((1.0)*(x14569.value));
IkReal x14568=x14554;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14567)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14567)));
IkReal gconst34=(x14566*x14568);
IkReal gconst35=((1.0)*r20*x14568);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14570=gconst35*gconst35;
IkReal x14571=gconst34*gconst34;
IkReal x14572=(r20*sj3);
IkReal x14573=((1.0)*r21);
IkReal x14574=(gconst34*sj3);
IkReal x14575=(gconst35*r01);
IkReal x14576=(cj3*r20);
IkReal x14577=(gconst34*gconst35*r00);
CheckValue<IkReal> x14578=IKPowWithIntegerCheck(IKsign((((cj3*r01*r21*x14571))+(((-1.0)*gconst34*x14575*x14576))+(((-1.0)*cj3*x14573*x14577))+((cj3*r02*r22))+((r00*x14570*x14576)))),-1);
if(!x14578.valid){
continue;
}
CheckValue<IkReal> x14579 = IKatan2WithCheck(IkReal((((r22*sj3*x14575))+((r00*r22*x14574)))),IkReal(((((-1.0)*x14573*x14574*x14575))+((x14572*x14577))+((r01*x14570*x14572))+(((-1.0)*r00*sj3*x14571*x14573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14578.value)))+(x14579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14580=IKsin(j4);
IkReal x14581=IKcos(j4);
IkReal x14582=(r21*sj3);
IkReal x14583=(gconst35*r20);
IkReal x14584=(gconst35*r00);
IkReal x14585=(sj1*sj2);
IkReal x14586=(cj3*r11);
IkReal x14587=((1.0)*cj2);
IkReal x14588=(cj3*r21);
IkReal x14589=((1.0)*gconst35);
IkReal x14590=(gconst35*r10);
IkReal x14591=(r01*sj3);
IkReal x14592=(cj3*r01);
IkReal x14593=(gconst34*r00);
IkReal x14594=((1.0)*cj3);
IkReal x14595=(r11*sj3);
IkReal x14596=(gconst34*r20);
IkReal x14597=(gconst34*r10);
IkReal x14598=((1.0)*cj1*sj2);
IkReal x14599=(sj1*x14587);
IkReal x14600=((1.0)*x14581);
IkReal x14601=((1.0)*x14580);
IkReal x14602=(gconst34*x14581);
IkReal x14603=(x14598+x14599);
evalcond[0]=((((-1.0)*gconst34*r21*x14601))+(((-1.0)*r22*x14600))+((x14580*x14583)));
evalcond[1]=(((x14580*x14590))+(((-1.0)*gconst34*r11*x14601))+(((-1.0)*r12*x14600)));
evalcond[2]=((-1.0)+((x14580*x14584))+(((-1.0)*gconst34*r01*x14601))+(((-1.0)*r02*x14600)));
evalcond[3]=((((-1.0)*x14581*x14584*x14594))+(((-1.0)*r02*x14580*x14594))+((x14592*x14602))+((gconst35*x14591))+((sj3*x14593)));
evalcond[4]=((((-1.0)*sj3*x14584*x14600))+(((-1.0)*x14593*x14594))+(((-1.0)*r02*sj3*x14601))+(((-1.0)*x14589*x14592))+((x14591*x14602)));
evalcond[5]=((((-1.0)*r12*x14580*x14594))+(((-1.0)*cj3*r10*x14581*x14589))+(((-1.0)*x14585))+((gconst35*x14595))+((x14586*x14602))+((cj1*cj2))+((sj3*x14597)));
evalcond[6]=(((x14588*x14602))+(((-1.0)*x14581*x14583*x14594))+((gconst35*x14582))+((sj3*x14596))+(((-1.0)*r22*x14580*x14594))+(((-1.0)*x14603)));
evalcond[7]=((((-1.0)*r22*sj3*x14601))+(((-1.0)*x14588*x14589))+(((-1.0)*x14594*x14596))+(((-1.0)*sj3*x14583*x14600))+((x14582*x14602))+x14585+(((-1.0)*cj1*x14587)));
evalcond[8]=((((-1.0)*x14594*x14597))+((x14595*x14602))+(((-1.0)*r10*sj3*x14581*x14589))+(((-1.0)*r12*sj3*x14601))+(((-1.0)*x14586*x14589))+(((-1.0)*x14603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14604=((1.0)*gconst34);
CheckValue<IkReal> x14605=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14604))+(((-1.0)*gconst35*r21)))),-1);
if(!x14605.valid){
continue;
}
CheckValue<IkReal> x14606 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x14604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14605.value)))+(x14606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14607=IKsin(j4);
IkReal x14608=IKcos(j4);
IkReal x14609=(r21*sj3);
IkReal x14610=(gconst35*r20);
IkReal x14611=(gconst35*r00);
IkReal x14612=(sj1*sj2);
IkReal x14613=(cj3*r11);
IkReal x14614=((1.0)*cj2);
IkReal x14615=(cj3*r21);
IkReal x14616=((1.0)*gconst35);
IkReal x14617=(gconst35*r10);
IkReal x14618=(r01*sj3);
IkReal x14619=(cj3*r01);
IkReal x14620=(gconst34*r00);
IkReal x14621=((1.0)*cj3);
IkReal x14622=(r11*sj3);
IkReal x14623=(gconst34*r20);
IkReal x14624=(gconst34*r10);
IkReal x14625=((1.0)*cj1*sj2);
IkReal x14626=(sj1*x14614);
IkReal x14627=((1.0)*x14608);
IkReal x14628=((1.0)*x14607);
IkReal x14629=(gconst34*x14608);
IkReal x14630=(x14626+x14625);
evalcond[0]=(((x14607*x14610))+(((-1.0)*gconst34*r21*x14628))+(((-1.0)*r22*x14627)));
evalcond[1]=(((x14607*x14617))+(((-1.0)*gconst34*r11*x14628))+(((-1.0)*r12*x14627)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14627))+((x14607*x14611))+(((-1.0)*gconst34*r01*x14628)));
evalcond[3]=(((sj3*x14620))+((x14619*x14629))+(((-1.0)*x14608*x14611*x14621))+(((-1.0)*r02*x14607*x14621))+((gconst35*x14618)));
evalcond[4]=(((x14618*x14629))+(((-1.0)*x14620*x14621))+(((-1.0)*x14616*x14619))+(((-1.0)*r02*sj3*x14628))+(((-1.0)*sj3*x14611*x14627)));
evalcond[5]=(((sj3*x14624))+(((-1.0)*cj3*r10*x14608*x14616))+(((-1.0)*x14612))+(((-1.0)*r12*x14607*x14621))+((cj1*cj2))+((x14613*x14629))+((gconst35*x14622)));
evalcond[6]=(((sj3*x14623))+(((-1.0)*r22*x14607*x14621))+((x14615*x14629))+(((-1.0)*x14630))+(((-1.0)*x14608*x14610*x14621))+((gconst35*x14609)));
evalcond[7]=((((-1.0)*x14615*x14616))+(((-1.0)*x14621*x14623))+(((-1.0)*cj1*x14614))+(((-1.0)*r22*sj3*x14628))+(((-1.0)*sj3*x14610*x14627))+x14612+((x14609*x14629)));
evalcond[8]=((((-1.0)*x14613*x14616))+((x14622*x14629))+(((-1.0)*x14630))+(((-1.0)*x14621*x14624))+(((-1.0)*r12*sj3*x14628))+(((-1.0)*r10*sj3*x14608*x14616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14631=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x14631.valid){
continue;
}
CheckValue<IkReal> x14632 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14631.value)))+(x14632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14633=IKsin(j4);
IkReal x14634=IKcos(j4);
IkReal x14635=(r21*sj3);
IkReal x14636=(gconst35*r20);
IkReal x14637=(gconst35*r00);
IkReal x14638=(sj1*sj2);
IkReal x14639=(cj3*r11);
IkReal x14640=((1.0)*cj2);
IkReal x14641=(cj3*r21);
IkReal x14642=((1.0)*gconst35);
IkReal x14643=(gconst35*r10);
IkReal x14644=(r01*sj3);
IkReal x14645=(cj3*r01);
IkReal x14646=(gconst34*r00);
IkReal x14647=((1.0)*cj3);
IkReal x14648=(r11*sj3);
IkReal x14649=(gconst34*r20);
IkReal x14650=(gconst34*r10);
IkReal x14651=((1.0)*cj1*sj2);
IkReal x14652=(sj1*x14640);
IkReal x14653=((1.0)*x14634);
IkReal x14654=((1.0)*x14633);
IkReal x14655=(gconst34*x14634);
IkReal x14656=(x14652+x14651);
evalcond[0]=(((x14633*x14636))+(((-1.0)*gconst34*r21*x14654))+(((-1.0)*r22*x14653)));
evalcond[1]=((((-1.0)*r12*x14653))+((x14633*x14643))+(((-1.0)*gconst34*r11*x14654)));
evalcond[2]=((-1.0)+((x14633*x14637))+(((-1.0)*gconst34*r01*x14654))+(((-1.0)*r02*x14653)));
evalcond[3]=((((-1.0)*r02*x14633*x14647))+(((-1.0)*x14634*x14637*x14647))+((sj3*x14646))+((gconst35*x14644))+((x14645*x14655)));
evalcond[4]=((((-1.0)*x14646*x14647))+(((-1.0)*x14642*x14645))+(((-1.0)*sj3*x14637*x14653))+((x14644*x14655))+(((-1.0)*r02*sj3*x14654)));
evalcond[5]=(((sj3*x14650))+((x14639*x14655))+((gconst35*x14648))+(((-1.0)*cj3*r10*x14634*x14642))+(((-1.0)*x14638))+((cj1*cj2))+(((-1.0)*r12*x14633*x14647)));
evalcond[6]=(((gconst35*x14635))+((x14641*x14655))+((sj3*x14649))+(((-1.0)*x14634*x14636*x14647))+(((-1.0)*x14656))+(((-1.0)*r22*x14633*x14647)));
evalcond[7]=((((-1.0)*sj3*x14636*x14653))+(((-1.0)*x14641*x14642))+(((-1.0)*cj1*x14640))+((x14635*x14655))+x14638+(((-1.0)*r22*sj3*x14654))+(((-1.0)*x14647*x14649)));
evalcond[8]=((((-1.0)*r12*sj3*x14654))+(((-1.0)*r10*sj3*x14634*x14642))+(((-1.0)*x14656))+(((-1.0)*x14639*x14642))+(((-1.0)*x14647*x14650))+((x14648*x14655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14658 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14658)==0){
continue;
}
IkReal x14657=pow(x14658,-0.5);
CheckValue<IkReal> x14659 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14659.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14659.value));
IkReal gconst37=((-1.0)*r11*x14657);
IkReal gconst38=(r10*x14657);
CheckValue<IkReal> x14660 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14660.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14660.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14663 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14663.valid){
continue;
}
IkReal x14661=((-1.0)*(x14663.value));
IkReal x14662=x14657;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14661;
IkReal gconst36=x14661;
IkReal gconst37=((-1.0)*r11*x14662);
IkReal gconst38=(r10*x14662);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14666 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14666.valid){
continue;
}
IkReal x14664=((-1.0)*(x14666.value));
IkReal x14665=x14657;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14664;
IkReal gconst36=x14664;
IkReal gconst37=((-1.0)*r11*x14665);
IkReal gconst38=(r10*x14665);
CheckValue<IkReal> x14674=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14674.valid){
continue;
}
IkReal x14667=x14674.value;
IkReal x14668=(cj3*x14667);
IkReal x14669=(r00*x14668);
IkReal x14670=(r21*x14668);
IkReal x14671=(r20*x14668);
IkReal x14672=(r01*x14668);
IkReal x14673=(r10*r11*x14668);
j4eval[0]=IKsign((((r10*r11*r21*x14669))+((r01*x14670*(r11*r11)))+((r01*r10*r11*x14671))+((cj3*r02*r22))+((r20*x14669*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14677 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14677.valid){
continue;
}
IkReal x14675=((-1.0)*(x14677.value));
IkReal x14676=x14657;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14675;
IkReal gconst36=x14675;
IkReal gconst37=((-1.0)*r11*x14676);
IkReal gconst38=(r10*x14676);
CheckValue<IkReal> x14685=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14685.valid){
continue;
}
IkReal x14678=x14685.value;
IkReal x14679=(sj3*x14678);
IkReal x14680=(r20*x14679);
IkReal x14681=(r00*x14679);
IkReal x14682=(r01*x14679);
IkReal x14683=(r21*x14679);
IkReal x14684=(r10*r11*x14679);
j4eval[0]=IKsign((((r01*r10*r11*x14680))+((r21*x14682*(r11*r11)))+((r10*r11*r21*x14681))+((r00*x14680*(r10*r10)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14686=gconst37*gconst37;
IkReal x14687=gconst38*gconst38;
IkReal x14688=(cj3*r00);
IkReal x14689=(r01*sj3);
IkReal x14690=((1.0)*gconst37);
IkReal x14691=(gconst38*r20);
IkReal x14692=(r00*sj3);
IkReal x14693=(gconst38*r21);
IkReal x14694=((1.0)*cj3*r01);
IkReal x14695=(r21*x14686);
IkReal x14696=(r20*x14687);
CheckValue<IkReal> x14697=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14690*x14692*x14693))+(((-1.0)*x14689*x14690*x14691))+((x14689*x14695))+((r02*r22*sj3))+((x14692*x14696)))),-1);
if(!x14697.valid){
continue;
}
CheckValue<IkReal> x14698 = IKatan2WithCheck(IkReal(((((-1.0)*gconst38*r22*x14694))+(((-1.0)*r22*x14688*x14690)))),IkReal(((((-1.0)*x14694*x14696))+(((-1.0)*x14688*x14690*x14691))+((x14688*x14695))+((cj3*gconst37*r01*x14693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14697.value)))+(x14698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14699=IKsin(j4);
IkReal x14700=IKcos(j4);
IkReal x14701=(gconst37*r21);
IkReal x14702=(gconst38*sj3);
IkReal x14703=(gconst38*r20);
IkReal x14704=((1.0)*sj1);
IkReal x14705=(gconst37*r01);
IkReal x14706=((1.0)*cj1);
IkReal x14707=(cj3*gconst38);
IkReal x14708=(gconst37*r00);
IkReal x14709=((1.0)*cj3);
IkReal x14710=(gconst37*sj3);
IkReal x14711=(gconst37*r11);
IkReal x14712=(sj2*x14706);
IkReal x14713=(cj2*x14704);
IkReal x14714=((1.0)*x14700);
IkReal x14715=((1.0)*x14699);
IkReal x14716=(gconst38*x14699);
IkReal x14717=(sj3*x14700);
IkReal x14718=(cj3*gconst37*x14700);
IkReal x14719=(x14712+x14713);
evalcond[0]=((((-1.0)*r22*x14714))+(((-1.0)*x14701*x14715))+((x14699*x14703)));
evalcond[1]=(((r10*x14716))+(((-1.0)*x14711*x14715))+(((-1.0)*r12*x14714)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14714))+((r00*x14716))+(((-1.0)*x14705*x14715)));
evalcond[3]=((((-1.0)*r02*x14699*x14709))+((r01*x14702))+(((-1.0)*r00*x14707*x14714))+((cj3*x14700*x14705))+((sj3*x14708)));
evalcond[4]=((((-1.0)*r01*x14707))+(((-1.0)*x14708*x14709))+(((-1.0)*r00*x14702*x14714))+(((-1.0)*r02*sj3*x14715))+((x14705*x14717)));
evalcond[5]=((((-1.0)*r12*x14699*x14709))+(((-1.0)*sj2*x14704))+(((-1.0)*r10*x14707*x14714))+((r11*x14702))+((r10*x14710))+((cj1*cj2))+((cj3*x14700*x14711)));
evalcond[6]=(((r20*x14710))+(((-1.0)*x14700*x14703*x14709))+((r21*x14702))+(((-1.0)*x14719))+((cj3*x14700*x14701))+(((-1.0)*r22*x14699*x14709)));
evalcond[7]=((((-1.0)*r21*x14707))+(((-1.0)*r20*x14702*x14714))+((sj1*sj2))+(((-1.0)*cj2*x14706))+((x14701*x14717))+(((-1.0)*gconst37*r20*x14709))+(((-1.0)*r22*sj3*x14715)));
evalcond[8]=(((r11*x14700*x14710))+(((-1.0)*r10*x14702*x14714))+(((-1.0)*gconst37*r10*x14709))+(((-1.0)*r11*x14707))+(((-1.0)*x14719))+(((-1.0)*r12*sj3*x14715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14720=gconst38*gconst38;
IkReal x14721=gconst37*gconst37;
IkReal x14722=(r01*r20);
IkReal x14723=(gconst37*gconst38);
IkReal x14724=((1.0)*cj3);
IkReal x14725=(r00*sj3);
IkReal x14726=(r01*sj3);
IkReal x14727=(r21*x14721);
CheckValue<IkReal> x14728 = IKatan2WithCheck(IkReal((((gconst37*r22*x14725))+((gconst38*r22*x14726)))),IkReal((((r20*x14723*x14725))+((sj3*x14720*x14722))+(((-1.0)*r21*x14723*x14726))+(((-1.0)*x14725*x14727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14728.valid){
continue;
}
CheckValue<IkReal> x14729=IKPowWithIntegerCheck(IKsign((((cj3*r00*r20*x14720))+(((-1.0)*r00*r21*x14723*x14724))+(((-1.0)*x14722*x14723*x14724))+((cj3*r01*x14727))+((cj3*r02*r22)))),-1);
if(!x14729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14728.value)+(((1.5707963267949)*(x14729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14730=IKsin(j4);
IkReal x14731=IKcos(j4);
IkReal x14732=(gconst37*r21);
IkReal x14733=(gconst38*sj3);
IkReal x14734=(gconst38*r20);
IkReal x14735=((1.0)*sj1);
IkReal x14736=(gconst37*r01);
IkReal x14737=((1.0)*cj1);
IkReal x14738=(cj3*gconst38);
IkReal x14739=(gconst37*r00);
IkReal x14740=((1.0)*cj3);
IkReal x14741=(gconst37*sj3);
IkReal x14742=(gconst37*r11);
IkReal x14743=(sj2*x14737);
IkReal x14744=(cj2*x14735);
IkReal x14745=((1.0)*x14731);
IkReal x14746=((1.0)*x14730);
IkReal x14747=(gconst38*x14730);
IkReal x14748=(sj3*x14731);
IkReal x14749=(cj3*gconst37*x14731);
IkReal x14750=(x14743+x14744);
evalcond[0]=((((-1.0)*r22*x14745))+((x14730*x14734))+(((-1.0)*x14732*x14746)));
evalcond[1]=((((-1.0)*x14742*x14746))+((r10*x14747))+(((-1.0)*r12*x14745)));
evalcond[2]=((-1.0)+(((-1.0)*x14736*x14746))+(((-1.0)*r02*x14745))+((r00*x14747)));
evalcond[3]=((((-1.0)*r02*x14730*x14740))+((r01*x14733))+((cj3*x14731*x14736))+(((-1.0)*r00*x14738*x14745))+((sj3*x14739)));
evalcond[4]=(((x14736*x14748))+(((-1.0)*x14739*x14740))+(((-1.0)*r00*x14733*x14745))+(((-1.0)*r02*sj3*x14746))+(((-1.0)*r01*x14738)));
evalcond[5]=((((-1.0)*sj2*x14735))+((r10*x14741))+(((-1.0)*r10*x14738*x14745))+((cj3*x14731*x14742))+((cj1*cj2))+((r11*x14733))+(((-1.0)*r12*x14730*x14740)));
evalcond[6]=((((-1.0)*x14731*x14734*x14740))+((cj3*x14731*x14732))+(((-1.0)*r22*x14730*x14740))+((r20*x14741))+(((-1.0)*x14750))+((r21*x14733)));
evalcond[7]=(((x14732*x14748))+(((-1.0)*cj2*x14737))+((sj1*sj2))+(((-1.0)*gconst37*r20*x14740))+(((-1.0)*r20*x14733*x14745))+(((-1.0)*r21*x14738))+(((-1.0)*r22*sj3*x14746)));
evalcond[8]=((((-1.0)*r10*x14733*x14745))+(((-1.0)*r12*sj3*x14746))+(((-1.0)*r11*x14738))+(((-1.0)*gconst37*r10*x14740))+(((-1.0)*x14750))+((r11*x14731*x14741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14751=((1.0)*gconst37);
CheckValue<IkReal> x14752 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x14751))+((gconst38*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14752.valid){
continue;
}
CheckValue<IkReal> x14753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14751))+(((-1.0)*gconst38*r21)))),-1);
if(!x14753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14752.value)+(((1.5707963267949)*(x14753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14754=IKsin(j4);
IkReal x14755=IKcos(j4);
IkReal x14756=(gconst37*r21);
IkReal x14757=(gconst38*sj3);
IkReal x14758=(gconst38*r20);
IkReal x14759=((1.0)*sj1);
IkReal x14760=(gconst37*r01);
IkReal x14761=((1.0)*cj1);
IkReal x14762=(cj3*gconst38);
IkReal x14763=(gconst37*r00);
IkReal x14764=((1.0)*cj3);
IkReal x14765=(gconst37*sj3);
IkReal x14766=(gconst37*r11);
IkReal x14767=(sj2*x14761);
IkReal x14768=(cj2*x14759);
IkReal x14769=((1.0)*x14755);
IkReal x14770=((1.0)*x14754);
IkReal x14771=(gconst38*x14754);
IkReal x14772=(sj3*x14755);
IkReal x14773=(cj3*gconst37*x14755);
IkReal x14774=(x14767+x14768);
evalcond[0]=((((-1.0)*r22*x14769))+(((-1.0)*x14756*x14770))+((x14754*x14758)));
evalcond[1]=(((r10*x14771))+(((-1.0)*r12*x14769))+(((-1.0)*x14766*x14770)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14769))+((r00*x14771))+(((-1.0)*x14760*x14770)));
evalcond[3]=((((-1.0)*r00*x14762*x14769))+((cj3*x14755*x14760))+((sj3*x14763))+((r01*x14757))+(((-1.0)*r02*x14754*x14764)));
evalcond[4]=((((-1.0)*r00*x14757*x14769))+(((-1.0)*x14763*x14764))+(((-1.0)*r02*sj3*x14770))+((x14760*x14772))+(((-1.0)*r01*x14762)));
evalcond[5]=((((-1.0)*r10*x14762*x14769))+(((-1.0)*r12*x14754*x14764))+((r10*x14765))+((cj3*x14755*x14766))+(((-1.0)*sj2*x14759))+((cj1*cj2))+((r11*x14757)));
evalcond[6]=(((r20*x14765))+((cj3*x14755*x14756))+(((-1.0)*x14774))+((r21*x14757))+(((-1.0)*x14755*x14758*x14764))+(((-1.0)*r22*x14754*x14764)));
evalcond[7]=((((-1.0)*r21*x14762))+(((-1.0)*cj2*x14761))+((sj1*sj2))+(((-1.0)*r20*x14757*x14769))+(((-1.0)*gconst37*r20*x14764))+(((-1.0)*r22*sj3*x14770))+((x14756*x14772)));
evalcond[8]=(((r11*x14755*x14765))+(((-1.0)*gconst37*r10*x14764))+(((-1.0)*x14774))+(((-1.0)*r11*x14762))+(((-1.0)*r12*sj3*x14770))+(((-1.0)*r10*x14757*x14769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14776 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14776)==0){
continue;
}
IkReal x14775=pow(x14776,-0.5);
CheckValue<IkReal> x14777 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14777.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14777.value))));
IkReal gconst40=((1.0)*r11*x14775);
IkReal gconst41=((-1.0)*r10*x14775);
CheckValue<IkReal> x14778 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14778.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14778.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14781 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14781.valid){
continue;
}
IkReal x14779=((1.0)*(x14781.value));
IkReal x14780=x14775;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14779)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14779)));
IkReal gconst40=((1.0)*r11*x14780);
IkReal gconst41=((-1.0)*r10*x14780);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14782=gconst41*gconst41;
IkReal x14783=gconst40*gconst40;
IkReal x14784=(r01*r21);
IkReal x14785=(gconst41*sj3);
IkReal x14786=((1.0)*gconst40);
IkReal x14787=(gconst40*r00);
IkReal x14788=(r00*r21);
IkReal x14789=(cj3*gconst41);
IkReal x14790=(r20*x14782);
CheckValue<IkReal> x14791 = IKatan2WithCheck(IkReal((((r01*r22*x14785))+((r22*sj3*x14787)))),IkReal((((r20*x14785*x14787))+(((-1.0)*x14784*x14785*x14786))+(((-1.0)*sj3*x14783*x14788))+((r01*sj3*x14790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14791.valid){
continue;
}
CheckValue<IkReal> x14792=IKPowWithIntegerCheck(IKsign((((cj3*r00*x14790))+(((-1.0)*r01*r20*x14786*x14789))+(((-1.0)*x14786*x14788*x14789))+((cj3*x14783*x14784))+((cj3*r02*r22)))),-1);
if(!x14792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14791.value)+(((1.5707963267949)*(x14792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14793=IKsin(j4);
IkReal x14794=IKcos(j4);
IkReal x14795=(gconst40*r01);
IkReal x14796=(cj3*gconst41);
IkReal x14797=(gconst40*sj3);
IkReal x14798=(sj1*sj2);
IkReal x14799=(gconst41*sj3);
IkReal x14800=((1.0)*cj1);
IkReal x14801=(gconst40*r11);
IkReal x14802=(gconst40*r21);
IkReal x14803=(sj2*x14800);
IkReal x14804=((1.0)*cj2*sj1);
IkReal x14805=((1.0)*x14794);
IkReal x14806=((1.0)*x14793);
IkReal x14807=(cj3*x14794);
IkReal x14808=(gconst41*x14793);
IkReal x14809=((1.0)*cj3*gconst40);
IkReal x14810=(x14803+x14804);
evalcond[0]=((((-1.0)*r22*x14805))+(((-1.0)*x14802*x14806))+((r20*x14808)));
evalcond[1]=((((-1.0)*x14801*x14806))+((r10*x14808))+(((-1.0)*r12*x14805)));
evalcond[2]=((-1.0)+(((-1.0)*x14795*x14806))+((r00*x14808))+(((-1.0)*r02*x14805)));
evalcond[3]=(((r00*x14797))+((r01*x14799))+(((-1.0)*cj3*r02*x14806))+((x14795*x14807))+(((-1.0)*r00*x14796*x14805)));
evalcond[4]=((((-1.0)*r00*x14809))+(((-1.0)*r02*sj3*x14806))+(((-1.0)*r01*x14796))+((sj3*x14794*x14795))+(((-1.0)*r00*x14799*x14805)));
evalcond[5]=(((r10*x14797))+(((-1.0)*x14798))+((r11*x14799))+(((-1.0)*cj3*r12*x14806))+((cj1*cj2))+(((-1.0)*r10*x14796*x14805))+((x14801*x14807)));
evalcond[6]=(((x14802*x14807))+((r20*x14797))+(((-1.0)*x14810))+(((-1.0)*r20*x14796*x14805))+(((-1.0)*cj3*r22*x14806))+((r21*x14799)));
evalcond[7]=((((-1.0)*r20*x14809))+(((-1.0)*cj2*x14800))+(((-1.0)*r20*x14799*x14805))+(((-1.0)*r22*sj3*x14806))+x14798+((r21*x14794*x14797))+(((-1.0)*r21*x14796)));
evalcond[8]=(((r11*x14794*x14797))+(((-1.0)*r11*x14796))+(((-1.0)*x14810))+(((-1.0)*r10*x14809))+(((-1.0)*r12*sj3*x14806))+(((-1.0)*r10*x14799*x14805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14811=((1.0)*gconst40);
CheckValue<IkReal> x14812 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x14811))+((gconst41*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14812.valid){
continue;
}
CheckValue<IkReal> x14813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14811))+(((-1.0)*gconst41*r21)))),-1);
if(!x14813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14812.value)+(((1.5707963267949)*(x14813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14814=IKsin(j4);
IkReal x14815=IKcos(j4);
IkReal x14816=(gconst40*r01);
IkReal x14817=(cj3*gconst41);
IkReal x14818=(gconst40*sj3);
IkReal x14819=(sj1*sj2);
IkReal x14820=(gconst41*sj3);
IkReal x14821=((1.0)*cj1);
IkReal x14822=(gconst40*r11);
IkReal x14823=(gconst40*r21);
IkReal x14824=(sj2*x14821);
IkReal x14825=((1.0)*cj2*sj1);
IkReal x14826=((1.0)*x14815);
IkReal x14827=((1.0)*x14814);
IkReal x14828=(cj3*x14815);
IkReal x14829=(gconst41*x14814);
IkReal x14830=((1.0)*cj3*gconst40);
IkReal x14831=(x14824+x14825);
evalcond[0]=((((-1.0)*x14823*x14827))+(((-1.0)*r22*x14826))+((r20*x14829)));
evalcond[1]=(((r10*x14829))+(((-1.0)*x14822*x14827))+(((-1.0)*r12*x14826)));
evalcond[2]=((-1.0)+(((-1.0)*x14816*x14827))+((r00*x14829))+(((-1.0)*r02*x14826)));
evalcond[3]=(((r01*x14820))+((r00*x14818))+(((-1.0)*cj3*r02*x14827))+((x14816*x14828))+(((-1.0)*r00*x14817*x14826)));
evalcond[4]=(((sj3*x14815*x14816))+(((-1.0)*r02*sj3*x14827))+(((-1.0)*r00*x14830))+(((-1.0)*r01*x14817))+(((-1.0)*r00*x14820*x14826)));
evalcond[5]=(((x14822*x14828))+((r10*x14818))+(((-1.0)*cj3*r12*x14827))+(((-1.0)*r10*x14817*x14826))+(((-1.0)*x14819))+((cj1*cj2))+((r11*x14820)));
evalcond[6]=(((r21*x14820))+((x14823*x14828))+(((-1.0)*cj3*r22*x14827))+((r20*x14818))+(((-1.0)*r20*x14817*x14826))+(((-1.0)*x14831)));
evalcond[7]=(x14819+(((-1.0)*r21*x14817))+(((-1.0)*r20*x14830))+(((-1.0)*r22*sj3*x14827))+(((-1.0)*r20*x14820*x14826))+(((-1.0)*cj2*x14821))+((r21*x14815*x14818)));
evalcond[8]=((((-1.0)*r11*x14817))+(((-1.0)*r12*sj3*x14827))+(((-1.0)*r10*x14820*x14826))+(((-1.0)*r10*x14830))+((r11*x14815*x14818))+(((-1.0)*x14831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14832=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14832);
rxp0_2=(py*r00);
rxp1_0=(r21*x14832);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14833=(cj5*r00);
IkReal x14834=(r01*sj5);
j4eval[0]=((((-1.0)*x14834))+x14833);
j4eval[1]=((((-1.0)*sj3*x14833))+((sj3*x14834)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14835=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14835);
rxp0_2=(py*r00);
rxp1_0=(r21*x14835);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14836=(cj5*r00);
IkReal x14837=(r01*sj5);
j4eval[0]=((((-1.0)*x14837))+x14836);
j4eval[1]=((((-1.0)*cj3*x14836))+((cj3*x14837)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14838=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14838);
rxp0_2=(py*r00);
rxp1_0=(r21*x14838);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14839=((1.0)*r00);
CheckValue<IkReal> x14840=IKPowWithIntegerCheck(cj3,-1);
if(!x14840.valid){
continue;
}
CheckValue<IkReal> x14841=IKPowWithIntegerCheck(r12,-1);
if(!x14841.valid){
continue;
}
CheckValue<IkReal> x14842=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14839))),-1);
if(!x14842.valid){
continue;
}
if( IKabs(((x14840.value)*(x14841.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14842.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14839)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14840.value)*(x14841.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14842.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14839))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14840.value)*(x14841.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14842.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14839))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14843=IKsin(j4);
IkReal x14844=IKcos(j4);
IkReal x14845=((1.0)*cj3);
IkReal x14846=(cj5*r21);
IkReal x14847=(sj1*sj2);
IkReal x14848=(cj5*r01);
IkReal x14849=(r20*sj5);
IkReal x14850=((1.0)*cj1);
IkReal x14851=(r01*sj5);
IkReal x14852=(r00*sj5);
IkReal x14853=((1.0)*sj3);
IkReal x14854=(sj2*x14850);
IkReal x14855=((1.0)*cj2*sj1);
IkReal x14856=((1.0)*x14843);
IkReal x14857=(cj5*x14844);
IkReal x14858=(cj5*x14843);
IkReal x14859=(r21*sj5*x14844);
IkReal x14860=(x14855+x14854);
evalcond[0]=((-1.0)*r12*x14844);
evalcond[1]=(((r20*x14858))+(((-1.0)*r21*sj5*x14856)));
evalcond[2]=((-1.0)+(((-1.0)*x14851*x14856))+((r00*x14858)));
evalcond[3]=((((-1.0)*x14847))+((cj1*cj2))+(((-1.0)*r12*x14843*x14845)));
evalcond[4]=((((-1.0)*x14860))+(((-1.0)*r12*x14843*x14853)));
evalcond[5]=((((-1.0)*r00*x14845*x14857))+((sj3*x14852))+((sj3*x14848))+((cj3*x14844*x14851)));
evalcond[6]=(((sj3*x14844*x14851))+(((-1.0)*x14845*x14848))+(((-1.0)*x14845*x14852))+(((-1.0)*r00*x14853*x14857)));
evalcond[7]=(((sj3*x14846))+((sj3*x14849))+(((-1.0)*r20*x14845*x14857))+((cj3*x14859))+(((-1.0)*x14860)));
evalcond[8]=((((-1.0)*cj2*x14850))+(((-1.0)*r20*x14853*x14857))+x14847+((sj3*x14859))+(((-1.0)*x14845*x14849))+(((-1.0)*x14845*x14846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14861=((1.0)*sj5);
IkReal x14862=(cj5*r00);
CheckValue<IkReal> x14863=IKPowWithIntegerCheck((x14862+(((-1.0)*r01*x14861))),-1);
if(!x14863.valid){
continue;
}
CheckValue<IkReal> x14864=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x14862))),-1);
if(!x14864.valid){
continue;
}
if( IKabs(x14863.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14864.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x14861)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14863.value)+IKsqr(((x14864.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x14861))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14863.value, ((x14864.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x14861))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14865=IKsin(j4);
IkReal x14866=IKcos(j4);
IkReal x14867=((1.0)*cj3);
IkReal x14868=(cj5*r21);
IkReal x14869=(sj1*sj2);
IkReal x14870=(cj5*r01);
IkReal x14871=(r20*sj5);
IkReal x14872=((1.0)*cj1);
IkReal x14873=(r01*sj5);
IkReal x14874=(r00*sj5);
IkReal x14875=((1.0)*sj3);
IkReal x14876=(sj2*x14872);
IkReal x14877=((1.0)*cj2*sj1);
IkReal x14878=((1.0)*x14865);
IkReal x14879=(cj5*x14866);
IkReal x14880=(cj5*x14865);
IkReal x14881=(r21*sj5*x14866);
IkReal x14882=(x14877+x14876);
evalcond[0]=((-1.0)*r12*x14866);
evalcond[1]=((((-1.0)*r21*sj5*x14878))+((r20*x14880)));
evalcond[2]=((-1.0)+(((-1.0)*x14873*x14878))+((r00*x14880)));
evalcond[3]=((((-1.0)*r12*x14865*x14867))+((cj1*cj2))+(((-1.0)*x14869)));
evalcond[4]=((((-1.0)*r12*x14865*x14875))+(((-1.0)*x14882)));
evalcond[5]=(((cj3*x14866*x14873))+((sj3*x14870))+((sj3*x14874))+(((-1.0)*r00*x14867*x14879)));
evalcond[6]=((((-1.0)*x14867*x14870))+(((-1.0)*x14867*x14874))+(((-1.0)*r00*x14875*x14879))+((sj3*x14866*x14873)));
evalcond[7]=(((sj3*x14868))+(((-1.0)*x14882))+((cj3*x14881))+((sj3*x14871))+(((-1.0)*r20*x14867*x14879)));
evalcond[8]=(x14869+(((-1.0)*x14867*x14868))+(((-1.0)*x14867*x14871))+(((-1.0)*r20*x14875*x14879))+(((-1.0)*cj2*x14872))+((sj3*x14881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14883=(r01*sj5);
IkReal x14884=(cj5*r00);
CheckValue<IkReal> x14885=IKPowWithIntegerCheck((x14884+(((-1.0)*x14883))),-1);
if(!x14885.valid){
continue;
}
CheckValue<IkReal> x14886=IKPowWithIntegerCheck(((((-1.0)*sj3*x14884))+((sj3*x14883))),-1);
if(!x14886.valid){
continue;
}
if( IKabs(x14885.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14886.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14885.value)+IKsqr(((x14886.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14885.value, ((x14886.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14887=IKsin(j4);
IkReal x14888=IKcos(j4);
IkReal x14889=((1.0)*cj3);
IkReal x14890=(cj5*r21);
IkReal x14891=(sj1*sj2);
IkReal x14892=(cj5*r01);
IkReal x14893=(r20*sj5);
IkReal x14894=((1.0)*cj1);
IkReal x14895=(r01*sj5);
IkReal x14896=(r00*sj5);
IkReal x14897=((1.0)*sj3);
IkReal x14898=(sj2*x14894);
IkReal x14899=((1.0)*cj2*sj1);
IkReal x14900=((1.0)*x14887);
IkReal x14901=(cj5*x14888);
IkReal x14902=(cj5*x14887);
IkReal x14903=(r21*sj5*x14888);
IkReal x14904=(x14899+x14898);
evalcond[0]=((-1.0)*r12*x14888);
evalcond[1]=((((-1.0)*r21*sj5*x14900))+((r20*x14902)));
evalcond[2]=((-1.0)+((r00*x14902))+(((-1.0)*x14895*x14900)));
evalcond[3]=(((cj1*cj2))+(((-1.0)*x14891))+(((-1.0)*r12*x14887*x14889)));
evalcond[4]=((((-1.0)*x14904))+(((-1.0)*r12*x14887*x14897)));
evalcond[5]=(((cj3*x14888*x14895))+((sj3*x14896))+((sj3*x14892))+(((-1.0)*r00*x14889*x14901)));
evalcond[6]=((((-1.0)*r00*x14897*x14901))+((sj3*x14888*x14895))+(((-1.0)*x14889*x14896))+(((-1.0)*x14889*x14892)));
evalcond[7]=(((cj3*x14903))+(((-1.0)*x14904))+(((-1.0)*r20*x14889*x14901))+((sj3*x14893))+((sj3*x14890)));
evalcond[8]=(((sj3*x14903))+x14891+(((-1.0)*r20*x14897*x14901))+(((-1.0)*cj2*x14894))+(((-1.0)*x14889*x14893))+(((-1.0)*x14889*x14890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14905=cj5*cj5;
IkReal x14906=(cj3*r00);
IkReal x14907=(r01*sj3);
IkReal x14908=(r00*sj3);
IkReal x14909=(cj3*r01);
IkReal x14910=(cj5*r20*sj5);
IkReal x14911=(r21*x14905);
IkReal x14912=(r20*x14905);
IkReal x14913=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x14914=IKPowWithIntegerCheck(IKsign((((x14906*x14912))+((r21*x14909))+(((-1.0)*x14906*x14913))+(((-1.0)*x14909*x14910))+(((-1.0)*x14909*x14911))+((cj3*r02*r22)))),-1);
if(!x14914.valid){
continue;
}
CheckValue<IkReal> x14915 = IKatan2WithCheck(IkReal((((r22*sj5*x14908))+((cj5*r22*x14907)))),IkReal(((((-1.0)*x14907*x14913))+((x14907*x14912))+((x14908*x14910))+((x14908*x14911))+(((-1.0)*r21*x14908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14914.value)))+(x14915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14916=IKsin(j4);
IkReal x14917=IKcos(j4);
IkReal x14918=(r11*sj5);
IkReal x14919=(cj5*sj3);
IkReal x14920=(sj1*sj2);
IkReal x14921=(r21*sj5);
IkReal x14922=((1.0)*cj1);
IkReal x14923=(sj3*sj5);
IkReal x14924=(cj3*cj5);
IkReal x14925=(r01*sj5);
IkReal x14926=(sj2*x14922);
IkReal x14927=((1.0)*cj2*sj1);
IkReal x14928=((1.0)*x14917);
IkReal x14929=((1.0)*x14916);
IkReal x14930=(cj3*x14917);
IkReal x14931=((1.0)*x14924);
IkReal x14932=((1.0)*cj3*sj5);
IkReal x14933=(cj5*x14916);
IkReal x14934=(sj3*x14917);
IkReal x14935=(x14927+x14926);
evalcond[0]=((((-1.0)*r22*x14928))+(((-1.0)*x14921*x14929))+((r20*x14933)));
evalcond[1]=((((-1.0)*x14918*x14929))+((r10*x14933))+(((-1.0)*r12*x14928)));
evalcond[2]=((-1.0)+((r00*x14933))+(((-1.0)*r02*x14928))+(((-1.0)*x14925*x14929)));
evalcond[3]=((((-1.0)*r00*x14924*x14928))+((r01*x14919))+(((-1.0)*cj3*r02*x14929))+((r00*x14923))+((x14925*x14930)));
evalcond[4]=(((r01*x14917*x14923))+(((-1.0)*r00*x14919*x14928))+(((-1.0)*r02*sj3*x14929))+(((-1.0)*r01*x14931))+(((-1.0)*r00*x14932)));
evalcond[5]=((((-1.0)*x14920))+((x14918*x14930))+((r11*x14919))+((r10*x14923))+(((-1.0)*cj3*r12*x14929))+(((-1.0)*r10*x14924*x14928))+((cj1*cj2)));
evalcond[6]=(((r21*x14919))+((x14921*x14930))+(((-1.0)*r20*x14924*x14928))+(((-1.0)*x14935))+(((-1.0)*cj3*r22*x14929))+((r20*x14923)));
evalcond[7]=(((x14921*x14934))+x14920+(((-1.0)*cj2*x14922))+(((-1.0)*r22*sj3*x14929))+(((-1.0)*r21*x14931))+(((-1.0)*r20*x14919*x14928))+(((-1.0)*r20*x14932)));
evalcond[8]=(((x14918*x14934))+(((-1.0)*r12*sj3*x14929))+(((-1.0)*r10*x14932))+(((-1.0)*r11*x14931))+(((-1.0)*x14935))+(((-1.0)*r10*x14919*x14928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14936=((1.0)*sj5);
CheckValue<IkReal> x14937=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14936))+(((-1.0)*cj5*r21)))),-1);
if(!x14937.valid){
continue;
}
CheckValue<IkReal> x14938 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14937.value)))+(x14938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14939=IKsin(j4);
IkReal x14940=IKcos(j4);
IkReal x14941=(r11*sj5);
IkReal x14942=(cj5*sj3);
IkReal x14943=(sj1*sj2);
IkReal x14944=(r21*sj5);
IkReal x14945=((1.0)*cj1);
IkReal x14946=(sj3*sj5);
IkReal x14947=(cj3*cj5);
IkReal x14948=(r01*sj5);
IkReal x14949=(sj2*x14945);
IkReal x14950=((1.0)*cj2*sj1);
IkReal x14951=((1.0)*x14940);
IkReal x14952=((1.0)*x14939);
IkReal x14953=(cj3*x14940);
IkReal x14954=((1.0)*x14947);
IkReal x14955=((1.0)*cj3*sj5);
IkReal x14956=(cj5*x14939);
IkReal x14957=(sj3*x14940);
IkReal x14958=(x14949+x14950);
evalcond[0]=((((-1.0)*r22*x14951))+((r20*x14956))+(((-1.0)*x14944*x14952)));
evalcond[1]=((((-1.0)*x14941*x14952))+((r10*x14956))+(((-1.0)*r12*x14951)));
evalcond[2]=((-1.0)+((r00*x14956))+(((-1.0)*r02*x14951))+(((-1.0)*x14948*x14952)));
evalcond[3]=(((r00*x14946))+(((-1.0)*r00*x14947*x14951))+((x14948*x14953))+((r01*x14942))+(((-1.0)*cj3*r02*x14952)));
evalcond[4]=((((-1.0)*r00*x14942*x14951))+((r01*x14940*x14946))+(((-1.0)*r02*sj3*x14952))+(((-1.0)*r01*x14954))+(((-1.0)*r00*x14955)));
evalcond[5]=((((-1.0)*cj3*r12*x14952))+((r10*x14946))+(((-1.0)*r10*x14947*x14951))+(((-1.0)*x14943))+((x14941*x14953))+((cj1*cj2))+((r11*x14942)));
evalcond[6]=((((-1.0)*r20*x14947*x14951))+(((-1.0)*cj3*r22*x14952))+((x14944*x14953))+(((-1.0)*x14958))+((r21*x14942))+((r20*x14946)));
evalcond[7]=((((-1.0)*r21*x14954))+x14943+(((-1.0)*r20*x14955))+((x14944*x14957))+(((-1.0)*cj2*x14945))+(((-1.0)*r22*sj3*x14952))+(((-1.0)*r20*x14942*x14951)));
evalcond[8]=((((-1.0)*r12*sj3*x14952))+(((-1.0)*r11*x14954))+(((-1.0)*x14958))+(((-1.0)*r10*x14942*x14951))+((x14941*x14957))+(((-1.0)*r10*x14955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14959=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14959.valid){
continue;
}
CheckValue<IkReal> x14960 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14959.value)))+(x14960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14961=IKsin(j4);
IkReal x14962=IKcos(j4);
IkReal x14963=(r11*sj5);
IkReal x14964=(cj5*sj3);
IkReal x14965=(sj1*sj2);
IkReal x14966=(r21*sj5);
IkReal x14967=((1.0)*cj1);
IkReal x14968=(sj3*sj5);
IkReal x14969=(cj3*cj5);
IkReal x14970=(r01*sj5);
IkReal x14971=(sj2*x14967);
IkReal x14972=((1.0)*cj2*sj1);
IkReal x14973=((1.0)*x14962);
IkReal x14974=((1.0)*x14961);
IkReal x14975=(cj3*x14962);
IkReal x14976=((1.0)*x14969);
IkReal x14977=((1.0)*cj3*sj5);
IkReal x14978=(cj5*x14961);
IkReal x14979=(sj3*x14962);
IkReal x14980=(x14972+x14971);
evalcond[0]=((((-1.0)*x14966*x14974))+(((-1.0)*r22*x14973))+((r20*x14978)));
evalcond[1]=((((-1.0)*x14963*x14974))+(((-1.0)*r12*x14973))+((r10*x14978)));
evalcond[2]=((-1.0)+(((-1.0)*x14970*x14974))+((r00*x14978))+(((-1.0)*r02*x14973)));
evalcond[3]=(((r01*x14964))+(((-1.0)*cj3*r02*x14974))+(((-1.0)*r00*x14969*x14973))+((x14970*x14975))+((r00*x14968)));
evalcond[4]=((((-1.0)*r02*sj3*x14974))+(((-1.0)*r01*x14976))+(((-1.0)*r00*x14964*x14973))+(((-1.0)*r00*x14977))+((r01*x14962*x14968)));
evalcond[5]=((((-1.0)*x14965))+((r11*x14964))+((x14963*x14975))+(((-1.0)*cj3*r12*x14974))+(((-1.0)*r10*x14969*x14973))+((cj1*cj2))+((r10*x14968)));
evalcond[6]=((((-1.0)*r20*x14969*x14973))+((x14966*x14975))+(((-1.0)*cj3*r22*x14974))+(((-1.0)*x14980))+((r20*x14968))+((r21*x14964)));
evalcond[7]=((((-1.0)*cj2*x14967))+(((-1.0)*r22*sj3*x14974))+x14965+((x14966*x14979))+(((-1.0)*r20*x14964*x14973))+(((-1.0)*r21*x14976))+(((-1.0)*r20*x14977)));
evalcond[8]=((((-1.0)*r10*x14977))+(((-1.0)*r11*x14976))+((x14963*x14979))+(((-1.0)*r10*x14964*x14973))+(((-1.0)*x14980))+(((-1.0)*r12*sj3*x14974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14981=((-1.0)*r10);
IkReal x14983 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14983)==0){
continue;
}
IkReal x14982=pow(x14983,-0.5);
CheckValue<IkReal> x14984 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14981),IKFAST_ATAN2_MAGTHRESH);
if(!x14984.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14984.value));
IkReal gconst13=(r11*x14982);
IkReal gconst14=(x14981*x14982);
CheckValue<IkReal> x14985 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14985.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14985.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14986=((-1.0)*r10);
IkReal x14987=x14982;
CheckValue<IkReal> x14989 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14986),IKFAST_ATAN2_MAGTHRESH);
if(!x14989.valid){
continue;
}
IkReal x14988=((-1.0)*(x14989.value));
sj5=gconst13;
cj5=gconst14;
j5=x14988;
IkReal gconst12=x14988;
IkReal gconst13=(r11*x14987);
IkReal gconst14=(x14986*x14987);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14990=((1.0)*gconst13);
CheckValue<IkReal> x14991 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst14*r00))+(((-1.0)*r11*sj0*x14990))+((gconst14*r10*sj0))+(((-1.0)*cj0*r01*x14990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14991.valid){
continue;
}
CheckValue<IkReal> x14992=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x14992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14991.value)+(((1.5707963267949)*(x14992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14993=IKsin(j4);
IkReal x14994=IKcos(j4);
IkReal x14995=((1.0)*r22);
IkReal x14996=((1.0)*cj3);
IkReal x14997=(gconst13*r20);
IkReal x14998=(gconst13*sj3);
IkReal x14999=(gconst13*r11);
IkReal x15000=(sj1*sj2);
IkReal x15001=(gconst14*r21);
IkReal x15002=(gconst14*r20);
IkReal x15003=(cj2*sj1);
IkReal x15004=(cj1*sj2);
IkReal x15005=(gconst14*sj3);
IkReal x15006=(gconst14*r10);
IkReal x15007=(gconst14*r00);
IkReal x15008=((1.0)*x14993);
IkReal x15009=((1.0)*cj1*cj2);
IkReal x15010=((1.0)*x14994);
IkReal x15011=(cj3*gconst13*x14994);
evalcond[0]=((((-1.0)*gconst13*r21*x15008))+(((-1.0)*x14994*x14995))+((x14993*x15002)));
evalcond[1]=(sj0+((x14993*x15007))+(((-1.0)*r02*x15010))+(((-1.0)*gconst13*r01*x15008)));
evalcond[2]=((((-1.0)*r12*x15010))+(((-1.0)*x14999*x15008))+((x14993*x15006))+(((-1.0)*cj0)));
evalcond[3]=(((sj3*x14997))+(((-1.0)*x14994*x14996*x15002))+((sj3*x15001))+(((-1.0)*x15003))+(((-1.0)*x15004))+((r21*x15011))+(((-1.0)*cj3*x14993*x14995)));
evalcond[4]=((((-1.0)*x14996*x14997))+(((-1.0)*x14996*x15001))+(((-1.0)*sj3*x15002*x15010))+x15000+((r21*x14994*x14998))+(((-1.0)*sj3*x14993*x14995))+(((-1.0)*x15009)));
evalcond[5]=(((r01*x15005))+(((-1.0)*cj0*x15009))+(((-1.0)*x14994*x14996*x15007))+(((-1.0)*r02*x14993*x14996))+((r01*x15011))+((r00*x14998))+((cj0*x15000)));
evalcond[6]=((((-1.0)*x14994*x14996*x15006))+((cj3*x14994*x14999))+(((-1.0)*r12*x14993*x14996))+((r10*x14998))+((r11*x15005))+(((-1.0)*sj0*x15009))+((sj0*x15000)));
evalcond[7]=((((-1.0)*gconst14*r01*x14996))+(((-1.0)*r02*sj3*x15008))+((r01*x14994*x14998))+((cj0*x15004))+((cj0*x15003))+(((-1.0)*gconst13*r00*x14996))+(((-1.0)*r00*x15005*x15010)));
evalcond[8]=((((-1.0)*gconst13*r10*x14996))+(((-1.0)*r12*sj3*x15008))+(((-1.0)*r10*x15005*x15010))+((r11*x14994*x14998))+((sj0*x15003))+((sj0*x15004))+(((-1.0)*gconst14*r11*x14996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15012=((1.0)*gconst13);
CheckValue<IkReal> x15013 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst14*r20))+(((-1.0)*cj0*r21*x15012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15013.valid){
continue;
}
CheckValue<IkReal> x15014=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst14*r01))+(((-1.0)*r00*x15012)))),-1);
if(!x15014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15013.value)+(((1.5707963267949)*(x15014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15015=IKsin(j4);
IkReal x15016=IKcos(j4);
IkReal x15017=((1.0)*r22);
IkReal x15018=((1.0)*cj3);
IkReal x15019=(gconst13*r20);
IkReal x15020=(gconst13*sj3);
IkReal x15021=(gconst13*r11);
IkReal x15022=(sj1*sj2);
IkReal x15023=(gconst14*r21);
IkReal x15024=(gconst14*r20);
IkReal x15025=(cj2*sj1);
IkReal x15026=(cj1*sj2);
IkReal x15027=(gconst14*sj3);
IkReal x15028=(gconst14*r10);
IkReal x15029=(gconst14*r00);
IkReal x15030=((1.0)*x15015);
IkReal x15031=((1.0)*cj1*cj2);
IkReal x15032=((1.0)*x15016);
IkReal x15033=(cj3*gconst13*x15016);
evalcond[0]=(((x15015*x15024))+(((-1.0)*gconst13*r21*x15030))+(((-1.0)*x15016*x15017)));
evalcond[1]=(sj0+(((-1.0)*r02*x15032))+((x15015*x15029))+(((-1.0)*gconst13*r01*x15030)));
evalcond[2]=(((x15015*x15028))+(((-1.0)*r12*x15032))+(((-1.0)*x15021*x15030))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x15033))+(((-1.0)*x15025))+(((-1.0)*x15026))+(((-1.0)*x15016*x15018*x15024))+((sj3*x15019))+(((-1.0)*cj3*x15015*x15017))+((sj3*x15023)));
evalcond[4]=((((-1.0)*x15031))+(((-1.0)*sj3*x15024*x15032))+(((-1.0)*sj3*x15015*x15017))+(((-1.0)*x15018*x15019))+x15022+((r21*x15016*x15020))+(((-1.0)*x15018*x15023)));
evalcond[5]=(((r00*x15020))+((r01*x15033))+(((-1.0)*cj0*x15031))+(((-1.0)*r02*x15015*x15018))+(((-1.0)*x15016*x15018*x15029))+((cj0*x15022))+((r01*x15027)));
evalcond[6]=(((sj0*x15022))+((r10*x15020))+(((-1.0)*x15016*x15018*x15028))+((cj3*x15016*x15021))+(((-1.0)*sj0*x15031))+(((-1.0)*r12*x15015*x15018))+((r11*x15027)));
evalcond[7]=((((-1.0)*gconst13*r00*x15018))+((r01*x15016*x15020))+(((-1.0)*r00*x15027*x15032))+((cj0*x15026))+((cj0*x15025))+(((-1.0)*gconst14*r01*x15018))+(((-1.0)*r02*sj3*x15030)));
evalcond[8]=((((-1.0)*r12*sj3*x15030))+(((-1.0)*gconst13*r10*x15018))+((sj0*x15026))+((sj0*x15025))+(((-1.0)*r10*x15027*x15032))+(((-1.0)*gconst14*r11*x15018))+((r11*x15016*x15020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15034=((-1.0)*r11);
IkReal x15036 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15036)==0){
continue;
}
IkReal x15035=pow(x15036,-0.5);
CheckValue<IkReal> x15037 = IKatan2WithCheck(IkReal(x15034),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15037.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x15037.value))));
IkReal gconst16=(x15034*x15035);
IkReal gconst17=((1.0)*r10*x15035);
CheckValue<IkReal> x15038 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15038.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15038.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x15039=((-1.0)*r11);
CheckValue<IkReal> x15042 = IKatan2WithCheck(IkReal(x15039),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15042.valid){
continue;
}
IkReal x15040=((1.0)*(x15042.value));
IkReal x15041=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15040)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15040)));
IkReal gconst16=(x15039*x15041);
IkReal gconst17=((1.0)*r10*x15041);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15043=((-1.0)*r11);
CheckValue<IkReal> x15046 = IKatan2WithCheck(IkReal(x15043),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15046.valid){
continue;
}
IkReal x15044=((1.0)*(x15046.value));
IkReal x15045=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15044)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15044)));
IkReal gconst16=(x15043*x15045);
IkReal gconst17=((1.0)*r10*x15045);
IkReal x15047=r12*r12;
IkReal x15048=(cj0*r02);
IkReal x15049=x15035;
IkReal x15050=(sj0*x15049);
j4eval[0]=((IKabs((x15048+((r12*sj0)))))+(IKabs(((((-1.0)*x15050))+((x15047*x15050))+((r12*x15048*x15049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15051=((-1.0)*r11);
CheckValue<IkReal> x15054 = IKatan2WithCheck(IkReal(x15051),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15054.valid){
continue;
}
IkReal x15052=((1.0)*(x15054.value));
IkReal x15053=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15052)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15052)));
IkReal gconst16=(x15051*x15053);
IkReal gconst17=((1.0)*r10*x15053);
CheckValue<IkReal> x15058=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15058.valid){
continue;
}
IkReal x15055=x15058.value;
IkReal x15056=(cj3*x15055);
IkReal x15057=((1.0)*x15056);
j4eval[0]=IKsign((((cj3*(r22*r22)))+((x15057*(r10*r10)*(r20*r20)))+((x15057*(r11*r11)*(r21*r21)))+(((2.0)*r10*r11*r20*r21*x15056))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x15059=((-1.0)*r11);
CheckValue<IkReal> x15062 = IKatan2WithCheck(IkReal(x15059),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15062.valid){
continue;
}
IkReal x15060=((1.0)*(x15062.value));
IkReal x15061=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15060)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15060)));
IkReal gconst16=(x15059*x15061);
IkReal gconst17=((1.0)*r10*x15061);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15063=((-1.0)*r11);
CheckValue<IkReal> x15066 = IKatan2WithCheck(IkReal(x15063),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15066.valid){
continue;
}
IkReal x15064=((1.0)*(x15066.value));
IkReal x15065=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15064)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15064)));
IkReal gconst16=(x15063*x15065);
IkReal gconst17=((1.0)*r10*x15065);
IkReal x15067=r12*r12;
IkReal x15068=(cj0*r02);
IkReal x15069=x15035;
IkReal x15070=(sj0*x15069);
j4eval[0]=((IKabs(((((-1.0)*x15070))+((x15067*x15070))+((r12*x15068*x15069)))))+(IKabs((x15068+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15071=((-1.0)*r11);
CheckValue<IkReal> x15074 = IKatan2WithCheck(IkReal(x15071),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15074.valid){
continue;
}
IkReal x15072=((1.0)*(x15074.value));
IkReal x15073=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15072)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15072)));
IkReal gconst16=(x15071*x15073);
IkReal gconst17=((1.0)*r10*x15073);
IkReal x15075=r12*r12;
IkReal x15076=(sj1*sj2);
IkReal x15077=((1.0)*cj1*cj2);
CheckValue<IkReal> x15081=IKPowWithIntegerCheck(((-1.0)+x15075),-1);
if(!x15081.valid){
continue;
}
IkReal x15078=x15081.value;
if((((1.0)+(((-1.0)*x15075)))) < -0.00001)
continue;
IkReal x15079=IKsqrt(((1.0)+(((-1.0)*x15075))));
IkReal x15080=(r12*r22*x15078*x15079);
j4eval[0]=((IKabs(((((-1.0)*x15077*x15080))+((x15076*x15080)))))+(IKabs((((r22*x15076))+(((-1.0)*r22*x15077))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15082=(sj1*sj2);
IkReal x15083=(gconst16*r21);
IkReal x15084=(gconst17*r20);
IkReal x15085=(cj1*cj2);
CheckValue<IkReal> x15086 = IKatan2WithCheck(IkReal((((r22*x15082))+(((-1.0)*r22*x15085)))),IkReal(((((-1.0)*x15084*x15085))+((x15082*x15084))+(((-1.0)*x15082*x15083))+((x15083*x15085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15086.valid){
continue;
}
CheckValue<IkReal> x15087=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x15083*x15083)+(x15084*x15084)+(((-2.0)*x15083*x15084)))),-1);
if(!x15087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15086.value)+(((1.5707963267949)*(x15087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15088=IKsin(j4);
IkReal x15089=IKcos(j4);
IkReal x15090=(cj2*sj1);
IkReal x15091=(cj1*sj2);
IkReal x15092=((1.0)*x15089);
IkReal x15093=(gconst17*x15088);
IkReal x15094=(gconst16*x15089);
IkReal x15095=((1.0)*x15088);
IkReal x15096=(gconst16*x15095);
evalcond[0]=(((r20*x15093))+(((-1.0)*r22*x15092))+(((-1.0)*r21*x15096)));
evalcond[1]=(sj0+(((-1.0)*r01*x15096))+((r00*x15093))+(((-1.0)*r02*x15092)));
evalcond[2]=(((r10*x15093))+(((-1.0)*r12*x15092))+(((-1.0)*r11*x15096))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x15094))+(((-1.0)*gconst17*r20*x15092))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15095)));
evalcond[4]=(((r01*x15094))+(((-1.0)*r02*x15095))+(((-1.0)*gconst17*r00*x15092))+((cj0*x15091))+((cj0*x15090)));
evalcond[5]=(((sj0*x15091))+((sj0*x15090))+((r11*x15094))+(((-1.0)*r12*x15095))+(((-1.0)*gconst17*r10*x15092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15097=((1.0)*gconst16);
CheckValue<IkReal> x15098 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x15097))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*cj0*r01*x15097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15098.valid){
continue;
}
CheckValue<IkReal> x15099=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15098.value)+(((1.5707963267949)*(x15099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15100=IKsin(j4);
IkReal x15101=IKcos(j4);
IkReal x15102=(cj2*sj1);
IkReal x15103=(cj1*sj2);
IkReal x15104=((1.0)*x15101);
IkReal x15105=(gconst17*x15100);
IkReal x15106=(gconst16*x15101);
IkReal x15107=((1.0)*x15100);
IkReal x15108=(gconst16*x15107);
evalcond[0]=((((-1.0)*r22*x15104))+((r20*x15105))+(((-1.0)*r21*x15108)));
evalcond[1]=(sj0+((r00*x15105))+(((-1.0)*r02*x15104))+(((-1.0)*r01*x15108)));
evalcond[2]=((((-1.0)*r11*x15108))+(((-1.0)*r12*x15104))+((r10*x15105))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst17*r20*x15104))+((r21*x15106))+(((-1.0)*cj1*cj2))+(((-1.0)*r22*x15107))+((sj1*sj2)));
evalcond[4]=(((r01*x15106))+(((-1.0)*gconst17*r00*x15104))+((cj0*x15103))+((cj0*x15102))+(((-1.0)*r02*x15107)));
evalcond[5]=((((-1.0)*r12*x15107))+(((-1.0)*gconst17*r10*x15104))+((sj0*x15103))+((sj0*x15102))+((r11*x15106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15109=((1.0)*gconst16);
CheckValue<IkReal> x15110 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15109))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15110.valid){
continue;
}
CheckValue<IkReal> x15111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15109))+(((-1.0)*gconst17*r01)))),-1);
if(!x15111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15110.value)+(((1.5707963267949)*(x15111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15112=IKsin(j4);
IkReal x15113=IKcos(j4);
IkReal x15114=(cj2*sj1);
IkReal x15115=(cj1*sj2);
IkReal x15116=((1.0)*x15113);
IkReal x15117=(gconst17*x15112);
IkReal x15118=(gconst16*x15113);
IkReal x15119=((1.0)*x15112);
IkReal x15120=(gconst16*x15119);
evalcond[0]=(((r20*x15117))+(((-1.0)*r21*x15120))+(((-1.0)*r22*x15116)));
evalcond[1]=(sj0+(((-1.0)*r01*x15120))+(((-1.0)*r02*x15116))+((r00*x15117)));
evalcond[2]=(((r10*x15117))+(((-1.0)*r11*x15120))+(((-1.0)*r12*x15116))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst17*r20*x15116))+(((-1.0)*r22*x15119))+((r21*x15118)));
evalcond[4]=((((-1.0)*r02*x15119))+((r01*x15118))+(((-1.0)*gconst17*r00*x15116))+((cj0*x15114))+((cj0*x15115)));
evalcond[5]=(((sj0*x15114))+((sj0*x15115))+((r11*x15118))+(((-1.0)*r12*x15119))+(((-1.0)*gconst17*r10*x15116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x15121=((-1.0)*r11);
CheckValue<IkReal> x15124 = IKatan2WithCheck(IkReal(x15121),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15124.valid){
continue;
}
IkReal x15122=((1.0)*(x15124.value));
IkReal x15123=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15122)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15122)));
IkReal gconst16=(x15121*x15123);
IkReal gconst17=((1.0)*r10*x15123);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15125=((-1.0)*r11);
CheckValue<IkReal> x15128 = IKatan2WithCheck(IkReal(x15125),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15128.valid){
continue;
}
IkReal x15126=((1.0)*(x15128.value));
IkReal x15127=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15126)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15126)));
IkReal gconst16=(x15125*x15127);
IkReal gconst17=((1.0)*r10*x15127);
IkReal x15129=r12*r12;
IkReal x15130=(cj0*r02);
IkReal x15131=x15035;
IkReal x15132=(sj0*x15131);
j4eval[0]=((IKabs((((x15129*x15132))+(((-1.0)*x15132))+((r12*x15130*x15131)))))+(IKabs((x15130+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15133=((-1.0)*r11);
CheckValue<IkReal> x15136 = IKatan2WithCheck(IkReal(x15133),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15136.valid){
continue;
}
IkReal x15134=((1.0)*(x15136.value));
IkReal x15135=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15134)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15134)));
IkReal gconst16=(x15133*x15135);
IkReal gconst17=((1.0)*r10*x15135);
IkReal x15137=r12*r12;
IkReal x15138=(sj1*sj2);
IkReal x15139=((1.0)+(((-1.0)*x15137)));
IkReal x15140=((1.0)*cj1*cj2);
CheckValue<IkReal> x15147=IKPowWithIntegerCheck(x15139,-1);
if(!x15147.valid){
continue;
}
IkReal x15141=x15147.value;
CheckValue<IkReal> x15148=IKPowWithIntegerCheck(((-1.0)+x15137),-1);
if(!x15148.valid){
continue;
}
IkReal x15142=x15148.value;
IkReal x15143=((1.0)*x15141);
if((x15139) < -0.00001)
continue;
IkReal x15144=IKsqrt(x15139);
IkReal x15145=(r12*r22*x15142*x15144);
IkReal x15146=((((-1.0)*x15143*(r11*r11)*(r21*r21)))+(((-1.0)*x15143*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x15141)));
j4eval[0]=x15146;
j4eval[1]=IKsign(x15146);
j4eval[2]=((IKabs((((r22*x15138))+(((-1.0)*r22*x15140)))))+(IKabs(((((-1.0)*x15140*x15145))+((x15138*x15145))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15149=(sj1*sj2);
IkReal x15150=(gconst16*r21);
IkReal x15151=(gconst17*r20);
IkReal x15152=(cj1*cj2);
CheckValue<IkReal> x15153=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x15151*x15151)))+(((-1.0)*(x15150*x15150)))+(((2.0)*x15150*x15151))+(((-1.0)*(r22*r22))))),-1);
if(!x15153.valid){
continue;
}
CheckValue<IkReal> x15154 = IKatan2WithCheck(IkReal((((r22*x15149))+(((-1.0)*r22*x15152)))),IkReal((((x15149*x15151))+((x15150*x15152))+(((-1.0)*x15149*x15150))+(((-1.0)*x15151*x15152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15153.value)))+(x15154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15155=IKsin(j4);
IkReal x15156=IKcos(j4);
IkReal x15157=(gconst16*r11);
IkReal x15158=(cj2*sj1);
IkReal x15159=(gconst16*r21);
IkReal x15160=(gconst16*r01);
IkReal x15161=(gconst17*r00);
IkReal x15162=(cj1*sj2);
IkReal x15163=((1.0)*x15156);
IkReal x15164=((1.0)*x15155);
IkReal x15165=(gconst17*x15156);
IkReal x15166=(gconst17*x15155);
evalcond[0]=((((-1.0)*x15159*x15164))+((r20*x15166))+(((-1.0)*r22*x15163)));
evalcond[1]=(sj0+(((-1.0)*x15160*x15164))+((x15155*x15161))+(((-1.0)*r02*x15163)));
evalcond[2]=(((r10*x15166))+(((-1.0)*x15157*x15164))+(((-1.0)*r12*x15163))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x15159*x15163))+((r20*x15165))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15155)));
evalcond[4]=((((-1.0)*x15160*x15163))+((cj0*x15158))+((x15156*x15161))+((r02*x15155))+((cj0*x15162)));
evalcond[5]=(((sj0*x15162))+((r10*x15165))+((sj0*x15158))+((r12*x15155))+(((-1.0)*x15157*x15163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15167=((1.0)*gconst16);
CheckValue<IkReal> x15168 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x15167))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*cj0*r01*x15167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15168.valid){
continue;
}
CheckValue<IkReal> x15169=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15168.value)+(((1.5707963267949)*(x15169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15170=IKsin(j4);
IkReal x15171=IKcos(j4);
IkReal x15172=(gconst16*r11);
IkReal x15173=(cj2*sj1);
IkReal x15174=(gconst16*r21);
IkReal x15175=(gconst16*r01);
IkReal x15176=(gconst17*r00);
IkReal x15177=(cj1*sj2);
IkReal x15178=((1.0)*x15171);
IkReal x15179=((1.0)*x15170);
IkReal x15180=(gconst17*x15171);
IkReal x15181=(gconst17*x15170);
evalcond[0]=(((r20*x15181))+(((-1.0)*x15174*x15179))+(((-1.0)*r22*x15178)));
evalcond[1]=(sj0+((x15170*x15176))+(((-1.0)*x15175*x15179))+(((-1.0)*r02*x15178)));
evalcond[2]=((((-1.0)*r12*x15178))+(((-1.0)*x15172*x15179))+((r10*x15181))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x15180))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15174*x15178))+((r22*x15170)));
evalcond[4]=(((cj0*x15173))+((cj0*x15177))+((x15171*x15176))+((r02*x15170))+(((-1.0)*x15175*x15178)));
evalcond[5]=(((sj0*x15177))+((sj0*x15173))+((r12*x15170))+(((-1.0)*x15172*x15178))+((r10*x15180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15182=((1.0)*gconst16);
CheckValue<IkReal> x15183=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x15182)))),-1);
if(!x15183.valid){
continue;
}
CheckValue<IkReal> x15184 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15182))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15183.value)))+(x15184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15185=IKsin(j4);
IkReal x15186=IKcos(j4);
IkReal x15187=(gconst16*r11);
IkReal x15188=(cj2*sj1);
IkReal x15189=(gconst16*r21);
IkReal x15190=(gconst16*r01);
IkReal x15191=(gconst17*r00);
IkReal x15192=(cj1*sj2);
IkReal x15193=((1.0)*x15186);
IkReal x15194=((1.0)*x15185);
IkReal x15195=(gconst17*x15186);
IkReal x15196=(gconst17*x15185);
evalcond[0]=((((-1.0)*r22*x15193))+((r20*x15196))+(((-1.0)*x15189*x15194)));
evalcond[1]=(((x15185*x15191))+(((-1.0)*x15190*x15194))+sj0+(((-1.0)*r02*x15193)));
evalcond[2]=((((-1.0)*r12*x15193))+((r10*x15196))+(((-1.0)*x15187*x15194))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15195))+((r22*x15185))+(((-1.0)*x15189*x15193)));
evalcond[4]=((((-1.0)*x15190*x15193))+((cj0*x15192))+((r02*x15185))+((x15186*x15191))+((cj0*x15188)));
evalcond[5]=(((sj0*x15188))+((r10*x15195))+((r12*x15185))+((sj0*x15192))+(((-1.0)*x15187*x15193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15197=((-1.0)*r11);
CheckValue<IkReal> x15200 = IKatan2WithCheck(IkReal(x15197),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15200.valid){
continue;
}
IkReal x15198=((1.0)*(x15200.value));
IkReal x15199=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15198)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15198)));
IkReal gconst16=(x15197*x15199);
IkReal gconst17=((1.0)*r10*x15199);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15201=gconst17*gconst17;
IkReal x15202=gconst16*gconst16;
IkReal x15203=(cj3*r01);
IkReal x15204=(r01*sj3);
IkReal x15205=(cj3*r00);
IkReal x15206=(r00*sj3);
IkReal x15207=(gconst16*gconst17);
IkReal x15208=((1.0)*r21);
IkReal x15209=(r21*x15202);
IkReal x15210=(r20*x15201);
CheckValue<IkReal> x15211=IKPowWithIntegerCheck(IKsign((((x15203*x15209))+((x15205*x15210))+(((-1.0)*r20*x15203*x15207))+(((-1.0)*x15205*x15207*x15208))+((cj3*r02*r22)))),-1);
if(!x15211.valid){
continue;
}
CheckValue<IkReal> x15212 = IKatan2WithCheck(IkReal((((gconst17*r22*x15204))+((gconst16*r22*x15206)))),IkReal((((x15204*x15210))+((r20*x15206*x15207))+(((-1.0)*x15202*x15206*x15208))+(((-1.0)*x15204*x15207*x15208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15211.value)))+(x15212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15213=IKsin(j4);
IkReal x15214=IKcos(j4);
IkReal x15215=(cj3*gconst17);
IkReal x15216=((1.0)*sj2);
IkReal x15217=((1.0)*r21);
IkReal x15218=(gconst16*r11);
IkReal x15219=(gconst16*r01);
IkReal x15220=(r20*sj3);
IkReal x15221=(gconst17*sj3);
IkReal x15222=((1.0)*cj2);
IkReal x15223=(gconst16*r00);
IkReal x15224=((1.0)*cj3);
IkReal x15225=(gconst16*r10);
IkReal x15226=(cj1*x15216);
IkReal x15227=(sj1*x15222);
IkReal x15228=((1.0)*x15214);
IkReal x15229=((1.0)*x15213);
IkReal x15230=(gconst17*x15213);
IkReal x15231=(cj3*x15214);
IkReal x15232=(sj3*x15214);
IkReal x15233=(gconst16*r21*x15214);
IkReal x15234=(x15227+x15226);
evalcond[0]=((((-1.0)*gconst16*x15213*x15217))+(((-1.0)*r22*x15228))+((r20*x15230)));
evalcond[1]=((((-1.0)*r12*x15228))+(((-1.0)*x15218*x15229))+((r10*x15230)));
evalcond[2]=((-1.0)+((r00*x15230))+(((-1.0)*r02*x15228))+(((-1.0)*x15219*x15229)));
evalcond[3]=(((x15219*x15231))+(((-1.0)*r02*x15213*x15224))+(((-1.0)*r00*x15215*x15228))+((sj3*x15223))+((r01*x15221)));
evalcond[4]=(((x15219*x15232))+(((-1.0)*r01*x15215))+(((-1.0)*r00*x15221*x15228))+(((-1.0)*r02*sj3*x15229))+(((-1.0)*x15223*x15224)));
evalcond[5]=(((x15218*x15231))+(((-1.0)*sj1*x15216))+(((-1.0)*r10*x15215*x15228))+((cj1*cj2))+(((-1.0)*r12*x15213*x15224))+((sj3*x15225))+((r11*x15221)));
evalcond[6]=((((-1.0)*x15234))+(((-1.0)*r20*x15215*x15228))+((gconst16*r21*x15231))+(((-1.0)*r22*x15213*x15224))+((r21*x15221))+((gconst16*x15220)));
evalcond[7]=((((-1.0)*gconst16*r20*x15224))+((sj1*sj2))+(((-1.0)*r22*sj3*x15229))+(((-1.0)*cj1*x15222))+(((-1.0)*gconst17*x15220*x15228))+((gconst16*r21*x15232))+(((-1.0)*x15215*x15217)));
evalcond[8]=(((x15218*x15232))+(((-1.0)*r10*x15221*x15228))+(((-1.0)*r12*sj3*x15229))+(((-1.0)*x15234))+(((-1.0)*x15224*x15225))+(((-1.0)*r11*x15215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15235=((1.0)*gconst16);
CheckValue<IkReal> x15236=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x15235)))),-1);
if(!x15236.valid){
continue;
}
CheckValue<IkReal> x15237 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst17*r10))+(((-1.0)*r11*x15235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15236.value)))+(x15237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15238=IKsin(j4);
IkReal x15239=IKcos(j4);
IkReal x15240=(cj3*gconst17);
IkReal x15241=((1.0)*sj2);
IkReal x15242=((1.0)*r21);
IkReal x15243=(gconst16*r11);
IkReal x15244=(gconst16*r01);
IkReal x15245=(r20*sj3);
IkReal x15246=(gconst17*sj3);
IkReal x15247=((1.0)*cj2);
IkReal x15248=(gconst16*r00);
IkReal x15249=((1.0)*cj3);
IkReal x15250=(gconst16*r10);
IkReal x15251=(cj1*x15241);
IkReal x15252=(sj1*x15247);
IkReal x15253=((1.0)*x15239);
IkReal x15254=((1.0)*x15238);
IkReal x15255=(gconst17*x15238);
IkReal x15256=(cj3*x15239);
IkReal x15257=(sj3*x15239);
IkReal x15258=(gconst16*r21*x15239);
IkReal x15259=(x15251+x15252);
evalcond[0]=((((-1.0)*r22*x15253))+((r20*x15255))+(((-1.0)*gconst16*x15238*x15242)));
evalcond[1]=((((-1.0)*x15243*x15254))+(((-1.0)*r12*x15253))+((r10*x15255)));
evalcond[2]=((-1.0)+((r00*x15255))+(((-1.0)*r02*x15253))+(((-1.0)*x15244*x15254)));
evalcond[3]=(((r01*x15246))+((sj3*x15248))+(((-1.0)*r00*x15240*x15253))+((x15244*x15256))+(((-1.0)*r02*x15238*x15249)));
evalcond[4]=((((-1.0)*r00*x15246*x15253))+(((-1.0)*x15248*x15249))+((x15244*x15257))+(((-1.0)*r02*sj3*x15254))+(((-1.0)*r01*x15240)));
evalcond[5]=(((x15243*x15256))+((sj3*x15250))+(((-1.0)*sj1*x15241))+(((-1.0)*r10*x15240*x15253))+(((-1.0)*r12*x15238*x15249))+((cj1*cj2))+((r11*x15246)));
evalcond[6]=((((-1.0)*r22*x15238*x15249))+(((-1.0)*x15259))+((r21*x15246))+(((-1.0)*r20*x15240*x15253))+((gconst16*r21*x15256))+((gconst16*x15245)));
evalcond[7]=((((-1.0)*x15240*x15242))+((sj1*sj2))+(((-1.0)*gconst17*x15245*x15253))+((gconst16*r21*x15257))+(((-1.0)*cj1*x15247))+(((-1.0)*gconst16*r20*x15249))+(((-1.0)*r22*sj3*x15254)));
evalcond[8]=((((-1.0)*r10*x15246*x15253))+((x15243*x15257))+(((-1.0)*r11*x15240))+(((-1.0)*x15259))+(((-1.0)*r12*sj3*x15254))+(((-1.0)*x15249*x15250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15260=((-1.0)*r11);
IkReal x15261=((-1.0)*r10);
CheckValue<IkReal> x15263 = IKatan2WithCheck(IkReal(x15260),IkReal(x15261),IKFAST_ATAN2_MAGTHRESH);
if(!x15263.valid){
continue;
}
IkReal x15262=((1.0)*(x15263.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15262)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15261);
rxp1_1=(px*r21);
rxp1_2=(px*x15260);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15262)));
IkReal gconst16=x15260;
IkReal gconst17=((1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15264=((-1.0)*r11);
IkReal x15265=((-1.0)*r10);
CheckValue<IkReal> x15267 = IKatan2WithCheck(IkReal(x15264),IkReal(x15265),IKFAST_ATAN2_MAGTHRESH);
if(!x15267.valid){
continue;
}
IkReal x15266=((1.0)*(x15267.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15266)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15265);
rxp1_1=(px*r21);
rxp1_2=(px*x15264);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15266)));
IkReal gconst16=x15264;
IkReal gconst17=((1.0)*r10);
IkReal x15268=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r11*r21*x15268))+(((-1.0)*r10*r20*x15268)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15269=((-1.0)*r11);
IkReal x15270=((-1.0)*r10);
CheckValue<IkReal> x15272 = IKatan2WithCheck(IkReal(x15269),IkReal(x15270),IKFAST_ATAN2_MAGTHRESH);
if(!x15272.valid){
continue;
}
IkReal x15271=((1.0)*(x15272.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15271)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15270);
rxp1_1=(px*r21);
rxp1_2=(px*x15269);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15271)));
IkReal gconst16=x15269;
IkReal gconst17=((1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15274=IKPowWithIntegerCheck(r02,-1);
if(!x15274.valid){
continue;
}
IkReal x15273=x15274.value;
CheckValue<IkReal> x15275=IKPowWithIntegerCheck(sj3,-1);
if(!x15275.valid){
continue;
}
if( IKabs((x15273*(x15275.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x15273)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15273*(x15275.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x15273))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15273*(x15275.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x15273));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15276=IKsin(j4);
IkReal x15277=IKcos(j4);
IkReal x15278=((1.0)*cj1);
IkReal x15279=(cj3*r21);
IkReal x15280=((1.0)*gconst17);
IkReal x15281=(cj0*cj2);
IkReal x15282=(sj1*sj2);
IkReal x15283=(r21*sj3);
IkReal x15284=(cj2*sj0);
IkReal x15285=(r20*sj3);
IkReal x15286=(r11*sj3);
IkReal x15287=(cj3*r11);
IkReal x15288=(cj1*sj2);
IkReal x15289=(cj3*r20);
IkReal x15290=((1.0)*gconst16);
IkReal x15291=(gconst16*x15277);
IkReal x15292=((1.0)*x15276);
IkReal x15293=(r10*x15277);
IkReal x15294=(gconst17*x15276);
evalcond[0]=(sj0+(((-1.0)*r02*x15277)));
evalcond[1]=(((r20*x15294))+(((-1.0)*r21*x15276*x15290)));
evalcond[2]=(((cj0*x15288))+(((-1.0)*r02*sj3*x15292))+((sj1*x15281)));
evalcond[3]=(((r10*x15294))+(((-1.0)*r11*x15276*x15290))+(((-1.0)*cj0)));
evalcond[4]=(((cj0*x15282))+(((-1.0)*cj3*r02*x15292))+(((-1.0)*x15278*x15281)));
evalcond[5]=((((-1.0)*sj2*x15278))+((gconst17*x15283))+(((-1.0)*cj2*sj1))+((gconst16*x15285))+(((-1.0)*x15277*x15280*x15289))+((x15279*x15291)));
evalcond[6]=(x15282+(((-1.0)*cj2*x15278))+((x15283*x15291))+(((-1.0)*x15289*x15290))+(((-1.0)*x15279*x15280))+(((-1.0)*x15277*x15280*x15285)));
evalcond[7]=(((gconst17*x15286))+((sj0*x15282))+((x15287*x15291))+(((-1.0)*x15278*x15284))+((gconst16*r10*sj3))+(((-1.0)*cj3*x15280*x15293)));
evalcond[8]=((((-1.0)*x15280*x15287))+(((-1.0)*cj3*r10*x15290))+((sj0*x15288))+((sj1*x15284))+((x15286*x15291))+(((-1.0)*sj3*x15280*x15293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15295=((1.0)*gconst17);
IkReal x15296=((1.0)*gconst16);
CheckValue<IkReal> x15297=IKPowWithIntegerCheck((((gconst17*r10))+(((-1.0)*r11*x15296))),-1);
if(!x15297.valid){
continue;
}
CheckValue<IkReal> x15298=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15295))+((cj3*gconst16*r21))),-1);
if(!x15298.valid){
continue;
}
if( IKabs((cj0*(x15297.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15298.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x15295))+((cj1*sj2))+(((-1.0)*r20*sj3*x15296)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x15297.value)))+IKsqr(((x15298.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x15295))+((cj1*sj2))+(((-1.0)*r20*sj3*x15296))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x15297.value)), ((x15298.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x15295))+((cj1*sj2))+(((-1.0)*r20*sj3*x15296))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15299=IKsin(j4);
IkReal x15300=IKcos(j4);
IkReal x15301=((1.0)*cj1);
IkReal x15302=(cj3*r21);
IkReal x15303=((1.0)*gconst17);
IkReal x15304=(cj0*cj2);
IkReal x15305=(sj1*sj2);
IkReal x15306=(r21*sj3);
IkReal x15307=(cj2*sj0);
IkReal x15308=(r20*sj3);
IkReal x15309=(r11*sj3);
IkReal x15310=(cj3*r11);
IkReal x15311=(cj1*sj2);
IkReal x15312=(cj3*r20);
IkReal x15313=((1.0)*gconst16);
IkReal x15314=(gconst16*x15300);
IkReal x15315=((1.0)*x15299);
IkReal x15316=(r10*x15300);
IkReal x15317=(gconst17*x15299);
evalcond[0]=((((-1.0)*r02*x15300))+sj0);
evalcond[1]=((((-1.0)*r21*x15299*x15313))+((r20*x15317)));
evalcond[2]=(((cj0*x15311))+((sj1*x15304))+(((-1.0)*r02*sj3*x15315)));
evalcond[3]=(((r10*x15317))+(((-1.0)*r11*x15299*x15313))+(((-1.0)*cj0)));
evalcond[4]=(((cj0*x15305))+(((-1.0)*x15301*x15304))+(((-1.0)*cj3*r02*x15315)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x15302*x15314))+(((-1.0)*x15300*x15303*x15312))+(((-1.0)*sj2*x15301))+((gconst17*x15306))+((gconst16*x15308)));
evalcond[6]=(((x15306*x15314))+(((-1.0)*x15300*x15303*x15308))+(((-1.0)*cj2*x15301))+x15305+(((-1.0)*x15312*x15313))+(((-1.0)*x15302*x15303)));
evalcond[7]=((((-1.0)*x15301*x15307))+((sj0*x15305))+((x15310*x15314))+((gconst16*r10*sj3))+((gconst17*x15309))+(((-1.0)*cj3*x15303*x15316)));
evalcond[8]=(((x15309*x15314))+(((-1.0)*x15303*x15310))+(((-1.0)*cj3*r10*x15313))+((sj1*x15307))+(((-1.0)*sj3*x15303*x15316))+((sj0*x15311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15318=IKPowWithIntegerCheck(((((-1.0)*gconst16*r11))+((gconst17*r10))),-1);
if(!x15318.valid){
continue;
}
CheckValue<IkReal> x15319=IKPowWithIntegerCheck(r02,-1);
if(!x15319.valid){
continue;
}
if( IKabs((cj0*(x15318.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x15319.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x15318.value)))+IKsqr((sj0*(x15319.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x15318.value)), (sj0*(x15319.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15320=IKsin(j4);
IkReal x15321=IKcos(j4);
IkReal x15322=((1.0)*cj1);
IkReal x15323=(cj3*r21);
IkReal x15324=((1.0)*gconst17);
IkReal x15325=(cj0*cj2);
IkReal x15326=(sj1*sj2);
IkReal x15327=(r21*sj3);
IkReal x15328=(cj2*sj0);
IkReal x15329=(r20*sj3);
IkReal x15330=(r11*sj3);
IkReal x15331=(cj3*r11);
IkReal x15332=(cj1*sj2);
IkReal x15333=(cj3*r20);
IkReal x15334=((1.0)*gconst16);
IkReal x15335=(gconst16*x15321);
IkReal x15336=((1.0)*x15320);
IkReal x15337=(r10*x15321);
IkReal x15338=(gconst17*x15320);
evalcond[0]=(sj0+(((-1.0)*r02*x15321)));
evalcond[1]=(((r20*x15338))+(((-1.0)*r21*x15320*x15334)));
evalcond[2]=(((cj0*x15332))+(((-1.0)*r02*sj3*x15336))+((sj1*x15325)));
evalcond[3]=((((-1.0)*r11*x15320*x15334))+((r10*x15338))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x15322*x15325))+(((-1.0)*cj3*r02*x15336))+((cj0*x15326)));
evalcond[5]=((((-1.0)*x15321*x15324*x15333))+((x15323*x15335))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x15322))+((gconst17*x15327))+((gconst16*x15329)));
evalcond[6]=((((-1.0)*x15321*x15324*x15329))+(((-1.0)*cj2*x15322))+((x15327*x15335))+x15326+(((-1.0)*x15323*x15324))+(((-1.0)*x15333*x15334)));
evalcond[7]=((((-1.0)*x15322*x15328))+((x15331*x15335))+(((-1.0)*cj3*x15324*x15337))+((gconst17*x15330))+((sj0*x15326))+((gconst16*r10*sj3)));
evalcond[8]=(((x15330*x15335))+(((-1.0)*sj3*x15324*x15337))+(((-1.0)*cj3*r10*x15334))+((sj0*x15332))+((sj1*x15328))+(((-1.0)*x15324*x15331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15339=((-1.0)*r11);
CheckValue<IkReal> x15342 = IKatan2WithCheck(IkReal(x15339),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15342.valid){
continue;
}
IkReal x15340=((1.0)*(x15342.value));
IkReal x15341=x15035;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15340)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15340)));
IkReal gconst16=(x15339*x15341);
IkReal gconst17=((1.0)*r10*x15341);
IkReal x15343=r12*r12;
IkReal x15344=(cj0*r02);
IkReal x15345=x15035;
IkReal x15346=(sj0*x15345);
j4eval[0]=((IKabs((x15344+((r12*sj0)))))+(IKabs((((r12*x15344*x15345))+((x15343*x15346))+(((-1.0)*x15346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15347=(cj1*cj2);
IkReal x15348=(sj0*sj3);
IkReal x15349=(gconst16*r21);
IkReal x15350=(cj3*r02);
IkReal x15351=(gconst16*r20);
IkReal x15352=(gconst17*r20);
IkReal x15353=(gconst17*sj3);
IkReal x15354=(gconst17*r21);
IkReal x15355=((1.0)*sj3);
IkReal x15356=((1.0)*sj1*sj2);
CheckValue<IkReal> x15357=IKPowWithIntegerCheck((((r00*x15349*x15353))+(((-1.0)*r00*x15352*x15353))+(((-1.0)*gconst16*r01*x15349*x15355))+((r01*x15351*x15353))),-1);
if(!x15357.valid){
continue;
}
CheckValue<IkReal> x15358=IKPowWithIntegerCheck(((((-1.0)*x15352*x15355))+((sj3*x15349))),-1);
if(!x15358.valid){
continue;
}
if( IKabs(((x15357.value)*((((x15350*x15354))+((x15350*x15351))+(((-1.0)*x15348*x15349))+(((-1.0)*r02*x15356))+((x15348*x15352))+((r02*x15347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15358.value)*(((((-1.0)*x15356))+((cj3*x15354))+((cj3*x15351))+x15347)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15357.value)*((((x15350*x15354))+((x15350*x15351))+(((-1.0)*x15348*x15349))+(((-1.0)*r02*x15356))+((x15348*x15352))+((r02*x15347))))))+IKsqr(((x15358.value)*(((((-1.0)*x15356))+((cj3*x15354))+((cj3*x15351))+x15347))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15357.value)*((((x15350*x15354))+((x15350*x15351))+(((-1.0)*x15348*x15349))+(((-1.0)*r02*x15356))+((x15348*x15352))+((r02*x15347))))), ((x15358.value)*(((((-1.0)*x15356))+((cj3*x15354))+((cj3*x15351))+x15347))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15359=IKsin(j4);
IkReal x15360=IKcos(j4);
IkReal x15361=((1.0)*cj1);
IkReal x15362=(gconst17*sj3);
IkReal x15363=(sj1*sj2);
IkReal x15364=(cj2*sj1);
IkReal x15365=(cj1*sj2);
IkReal x15366=(gconst16*sj3);
IkReal x15367=((1.0)*cj3*gconst17);
IkReal x15368=(r00*x15360);
IkReal x15369=((1.0)*x15360);
IkReal x15370=(gconst17*x15359);
IkReal x15371=(r11*x15360);
IkReal x15372=((1.0)*cj3*gconst16);
IkReal x15373=(gconst16*r21*x15360);
IkReal x15374=((1.0)*gconst16*x15359);
IkReal x15375=(gconst16*r01*x15360);
IkReal x15376=((1.0)*cj3*x15359);
IkReal x15377=((1.0)*sj3*x15359);
evalcond[0]=(((r20*x15370))+(((-1.0)*r21*x15374)));
evalcond[1]=(sj0+(((-1.0)*r02*x15369))+((r00*x15370))+(((-1.0)*r01*x15374)));
evalcond[2]=((((-1.0)*r12*x15369))+((r10*x15370))+(((-1.0)*cj0))+(((-1.0)*r11*x15374)));
evalcond[3]=((((-1.0)*r20*x15360*x15367))+(((-1.0)*sj2*x15361))+(((-1.0)*x15364))+((cj3*x15373))+((r20*x15366))+((r21*x15362)));
evalcond[4]=((((-1.0)*r20*x15362*x15369))+(((-1.0)*r20*x15372))+x15363+((r21*x15360*x15366))+(((-1.0)*cj2*x15361))+(((-1.0)*r21*x15367)));
evalcond[5]=(((cj3*x15375))+(((-1.0)*cj0*cj2*x15361))+(((-1.0)*x15367*x15368))+(((-1.0)*r02*x15376))+((r00*x15366))+((cj0*x15363))+((r01*x15362)));
evalcond[6]=(((sj0*x15363))+((r10*x15366))+((cj3*gconst16*x15371))+((r11*x15362))+(((-1.0)*cj2*sj0*x15361))+(((-1.0)*r12*x15376))+(((-1.0)*r10*x15360*x15367)));
evalcond[7]=((((-1.0)*x15362*x15368))+(((-1.0)*r00*x15372))+(((-1.0)*r02*x15377))+(((-1.0)*r01*x15367))+((cj0*x15365))+((cj0*x15364))+((r01*x15360*x15366)));
evalcond[8]=(((sj0*x15365))+((sj0*x15364))+(((-1.0)*r10*x15362*x15369))+(((-1.0)*r11*x15367))+(((-1.0)*r10*x15372))+((x15366*x15371))+(((-1.0)*r12*x15377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15378=((1.0)*gconst16);
CheckValue<IkReal> x15379 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x15378))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*r11*sj0*x15378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15379.valid){
continue;
}
CheckValue<IkReal> x15380=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15379.value)+(((1.5707963267949)*(x15380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15381=IKsin(j4);
IkReal x15382=IKcos(j4);
IkReal x15383=((1.0)*cj1);
IkReal x15384=(gconst17*sj3);
IkReal x15385=(sj1*sj2);
IkReal x15386=(cj2*sj1);
IkReal x15387=(cj1*sj2);
IkReal x15388=(gconst16*sj3);
IkReal x15389=((1.0)*cj3*gconst17);
IkReal x15390=(r00*x15382);
IkReal x15391=((1.0)*x15382);
IkReal x15392=(gconst17*x15381);
IkReal x15393=(r11*x15382);
IkReal x15394=((1.0)*cj3*gconst16);
IkReal x15395=(gconst16*r21*x15382);
IkReal x15396=((1.0)*gconst16*x15381);
IkReal x15397=(gconst16*r01*x15382);
IkReal x15398=((1.0)*cj3*x15381);
IkReal x15399=((1.0)*sj3*x15381);
evalcond[0]=(((r20*x15392))+(((-1.0)*r21*x15396)));
evalcond[1]=(sj0+(((-1.0)*r01*x15396))+(((-1.0)*r02*x15391))+((r00*x15392)));
evalcond[2]=((((-1.0)*r11*x15396))+(((-1.0)*r12*x15391))+((r10*x15392))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x15384))+(((-1.0)*sj2*x15383))+((cj3*x15395))+(((-1.0)*x15386))+(((-1.0)*r20*x15382*x15389))+((r20*x15388)));
evalcond[4]=((((-1.0)*r21*x15389))+(((-1.0)*r20*x15384*x15391))+x15385+((r21*x15382*x15388))+(((-1.0)*r20*x15394))+(((-1.0)*cj2*x15383)));
evalcond[5]=(((cj0*x15385))+((r01*x15384))+(((-1.0)*cj0*cj2*x15383))+(((-1.0)*x15389*x15390))+(((-1.0)*r02*x15398))+((cj3*x15397))+((r00*x15388)));
evalcond[6]=(((cj3*gconst16*x15393))+(((-1.0)*r12*x15398))+((sj0*x15385))+((r10*x15388))+((r11*x15384))+(((-1.0)*cj2*sj0*x15383))+(((-1.0)*r10*x15382*x15389)));
evalcond[7]=(((cj0*x15387))+((cj0*x15386))+(((-1.0)*r02*x15399))+(((-1.0)*r00*x15394))+((r01*x15382*x15388))+(((-1.0)*r01*x15389))+(((-1.0)*x15384*x15390)));
evalcond[8]=((((-1.0)*r12*x15399))+((sj0*x15387))+((sj0*x15386))+(((-1.0)*r10*x15394))+(((-1.0)*r11*x15389))+(((-1.0)*r10*x15384*x15391))+((x15388*x15393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15400=gconst16*gconst16;
IkReal x15401=r21*r21;
IkReal x15402=gconst17*gconst17;
IkReal x15403=r20*r20;
IkReal x15404=(cj1*sj2);
IkReal x15405=(gconst16*r21);
IkReal x15406=((1.0)*r22);
IkReal x15407=(r20*sj3);
IkReal x15408=(gconst17*r20);
IkReal x15409=(cj2*sj1);
IkReal x15410=(gconst17*sj3);
CheckValue<IkReal> x15411 = IKatan2WithCheck(IkReal((((gconst16*r22*x15407))+(((-1.0)*x15404*x15406))+(((-1.0)*x15406*x15409))+((r21*r22*x15410)))),IkReal(((((-1.0)*x15408*x15409))+((gconst16*x15403*x15410))+(((-1.0)*x15404*x15408))+((x15404*x15405))+((r21*x15402*x15407))+(((-1.0)*gconst16*x15401*x15410))+(((-1.0)*r21*x15400*x15407))+((x15405*x15409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15411.valid){
continue;
}
CheckValue<IkReal> x15412=IKPowWithIntegerCheck(IKsign((((cj3*x15402*x15403))+((cj3*x15400*x15401))+(((-2.0)*cj3*x15405*x15408))+((cj3*(r22*r22))))),-1);
if(!x15412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15411.value)+(((1.5707963267949)*(x15412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15413=IKsin(j4);
IkReal x15414=IKcos(j4);
IkReal x15415=(cj3*gconst17);
IkReal x15416=((1.0)*cj1);
IkReal x15417=((1.0)*r21);
IkReal x15418=(gconst17*sj3);
IkReal x15419=(sj1*sj2);
IkReal x15420=(cj2*sj1);
IkReal x15421=(cj1*sj2);
IkReal x15422=(gconst16*sj3);
IkReal x15423=((1.0)*x15414);
IkReal x15424=(gconst17*x15413);
IkReal x15425=(r11*x15414);
IkReal x15426=((1.0)*cj3*gconst16);
IkReal x15427=(gconst16*r21*x15414);
IkReal x15428=((1.0)*gconst16*x15413);
IkReal x15429=((1.0)*cj3*x15413);
IkReal x15430=(gconst16*r01*x15414);
IkReal x15431=((1.0)*sj3*x15413);
evalcond[0]=(((r20*x15424))+(((-1.0)*r22*x15423))+(((-1.0)*gconst16*x15413*x15417)));
evalcond[1]=(sj0+(((-1.0)*r02*x15423))+(((-1.0)*r01*x15428))+((r00*x15424)));
evalcond[2]=(((r10*x15424))+(((-1.0)*r12*x15423))+(((-1.0)*r11*x15428))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x15422))+(((-1.0)*r22*x15429))+(((-1.0)*r20*x15415*x15423))+(((-1.0)*x15420))+((cj3*x15427))+(((-1.0)*sj2*x15416))+((r21*x15418)));
evalcond[4]=((((-1.0)*r22*x15431))+(((-1.0)*r20*x15418*x15423))+(((-1.0)*cj2*x15416))+x15419+((r21*x15414*x15422))+(((-1.0)*r20*x15426))+(((-1.0)*x15415*x15417)));
evalcond[5]=((((-1.0)*r00*x15415*x15423))+(((-1.0)*r02*x15429))+((r01*x15418))+(((-1.0)*cj0*cj2*x15416))+((cj3*x15430))+((r00*x15422))+((cj0*x15419)));
evalcond[6]=(((r11*x15418))+((r10*x15422))+(((-1.0)*r12*x15429))+(((-1.0)*r10*x15415*x15423))+((cj3*gconst16*x15425))+(((-1.0)*cj2*sj0*x15416))+((sj0*x15419)));
evalcond[7]=((((-1.0)*r01*x15415))+((cj0*x15421))+((cj0*x15420))+(((-1.0)*r02*x15431))+((r01*x15414*x15422))+(((-1.0)*r00*x15418*x15423))+(((-1.0)*r00*x15426)));
evalcond[8]=((((-1.0)*r12*x15431))+(((-1.0)*r11*x15415))+((sj0*x15421))+((sj0*x15420))+((x15422*x15425))+(((-1.0)*r10*x15418*x15423))+(((-1.0)*r10*x15426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15432=((1.0)*gconst16);
CheckValue<IkReal> x15433 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x15432))+(((-1.0)*cj0*r01*x15432))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15433.valid){
continue;
}
CheckValue<IkReal> x15434=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15433.value)+(((1.5707963267949)*(x15434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15435=IKsin(j4);
IkReal x15436=IKcos(j4);
IkReal x15437=(cj3*gconst17);
IkReal x15438=((1.0)*cj1);
IkReal x15439=((1.0)*r21);
IkReal x15440=(gconst17*sj3);
IkReal x15441=(sj1*sj2);
IkReal x15442=(cj2*sj1);
IkReal x15443=(cj1*sj2);
IkReal x15444=(gconst16*sj3);
IkReal x15445=((1.0)*x15436);
IkReal x15446=(gconst17*x15435);
IkReal x15447=(r11*x15436);
IkReal x15448=((1.0)*cj3*gconst16);
IkReal x15449=(gconst16*r21*x15436);
IkReal x15450=((1.0)*gconst16*x15435);
IkReal x15451=((1.0)*cj3*x15435);
IkReal x15452=(gconst16*r01*x15436);
IkReal x15453=((1.0)*sj3*x15435);
evalcond[0]=(((r20*x15446))+(((-1.0)*r22*x15445))+(((-1.0)*gconst16*x15435*x15439)));
evalcond[1]=(sj0+((r00*x15446))+(((-1.0)*r01*x15450))+(((-1.0)*r02*x15445)));
evalcond[2]=((((-1.0)*r12*x15445))+(((-1.0)*r11*x15450))+((r10*x15446))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x15444))+(((-1.0)*r22*x15451))+(((-1.0)*sj2*x15438))+(((-1.0)*r20*x15437*x15445))+(((-1.0)*x15442))+((r21*x15440))+((cj3*x15449)));
evalcond[4]=((((-1.0)*r20*x15440*x15445))+(((-1.0)*r22*x15453))+(((-1.0)*x15437*x15439))+((r21*x15436*x15444))+(((-1.0)*r20*x15448))+x15441+(((-1.0)*cj2*x15438)));
evalcond[5]=(((cj3*x15452))+(((-1.0)*r00*x15437*x15445))+((r00*x15444))+((r01*x15440))+((cj0*x15441))+(((-1.0)*r02*x15451))+(((-1.0)*cj0*cj2*x15438)));
evalcond[6]=(((sj0*x15441))+(((-1.0)*r10*x15437*x15445))+(((-1.0)*cj2*sj0*x15438))+((cj3*gconst16*x15447))+((r11*x15440))+(((-1.0)*r12*x15451))+((r10*x15444)));
evalcond[7]=((((-1.0)*r00*x15448))+(((-1.0)*r00*x15440*x15445))+((cj0*x15442))+((cj0*x15443))+(((-1.0)*r02*x15453))+(((-1.0)*r01*x15437))+((r01*x15436*x15444)));
evalcond[8]=(((sj0*x15442))+((sj0*x15443))+((x15444*x15447))+(((-1.0)*r12*x15453))+(((-1.0)*r10*x15440*x15445))+(((-1.0)*r10*x15448))+(((-1.0)*r11*x15437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15454=((1.0)*gconst16);
CheckValue<IkReal> x15455 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15454))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15455.valid){
continue;
}
CheckValue<IkReal> x15456=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x15454)))),-1);
if(!x15456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15455.value)+(((1.5707963267949)*(x15456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15457=IKsin(j4);
IkReal x15458=IKcos(j4);
IkReal x15459=(cj3*gconst17);
IkReal x15460=((1.0)*cj1);
IkReal x15461=((1.0)*r21);
IkReal x15462=(gconst17*sj3);
IkReal x15463=(sj1*sj2);
IkReal x15464=(cj2*sj1);
IkReal x15465=(cj1*sj2);
IkReal x15466=(gconst16*sj3);
IkReal x15467=((1.0)*x15458);
IkReal x15468=(gconst17*x15457);
IkReal x15469=(r11*x15458);
IkReal x15470=((1.0)*cj3*gconst16);
IkReal x15471=(gconst16*r21*x15458);
IkReal x15472=((1.0)*gconst16*x15457);
IkReal x15473=((1.0)*cj3*x15457);
IkReal x15474=(gconst16*r01*x15458);
IkReal x15475=((1.0)*sj3*x15457);
evalcond[0]=((((-1.0)*r22*x15467))+(((-1.0)*gconst16*x15457*x15461))+((r20*x15468)));
evalcond[1]=(sj0+((r00*x15468))+(((-1.0)*r01*x15472))+(((-1.0)*r02*x15467)));
evalcond[2]=((((-1.0)*r11*x15472))+((r10*x15468))+(((-1.0)*r12*x15467))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x15460))+(((-1.0)*r22*x15473))+(((-1.0)*x15464))+((r21*x15462))+(((-1.0)*r20*x15459*x15467))+((r20*x15466))+((cj3*x15471)));
evalcond[4]=((((-1.0)*cj2*x15460))+(((-1.0)*r22*x15475))+(((-1.0)*r20*x15470))+((r21*x15458*x15466))+(((-1.0)*r20*x15462*x15467))+(((-1.0)*x15459*x15461))+x15463);
evalcond[5]=((((-1.0)*r00*x15459*x15467))+((r00*x15466))+((r01*x15462))+(((-1.0)*cj0*cj2*x15460))+((cj3*x15474))+(((-1.0)*r02*x15473))+((cj0*x15463)));
evalcond[6]=((((-1.0)*r10*x15459*x15467))+(((-1.0)*cj2*sj0*x15460))+((sj0*x15463))+((r11*x15462))+((r10*x15466))+((cj3*gconst16*x15469))+(((-1.0)*r12*x15473)));
evalcond[7]=((((-1.0)*r01*x15459))+(((-1.0)*r00*x15462*x15467))+((r01*x15458*x15466))+(((-1.0)*r00*x15470))+(((-1.0)*r02*x15475))+((cj0*x15464))+((cj0*x15465)));
evalcond[8]=((((-1.0)*r10*x15462*x15467))+((sj0*x15464))+((sj0*x15465))+(((-1.0)*r11*x15459))+(((-1.0)*r12*x15475))+(((-1.0)*r10*x15470))+((x15466*x15469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15476=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15476;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x15476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15477=((1.0)*sj5);
IkReal x15478=((((-1.0)*r00*x15477))+(((-1.0)*cj5*r01)));
j4eval[0]=x15478;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x15477))))));
j4eval[2]=IKsign(x15478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15479=cj5*cj5;
IkReal x15480=(cj3*r11*r21);
IkReal x15481=((1.0)*cj3*cj5*sj5);
IkReal x15482=(((cj3*r12*r22))+(((-1.0)*x15479*x15480))+(((-1.0)*r11*r20*x15481))+(((-1.0)*r10*r21*x15481))+x15480+((cj3*r10*r20*x15479)));
j4eval[0]=x15482;
j4eval[1]=IKsign(x15482);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15483=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15483;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x15483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15484=((1.0)*sj5);
IkReal x15485=((((-1.0)*r00*x15484))+(((-1.0)*cj5*r01)));
j4eval[0]=x15485;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x15484)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15486=cj5*cj5;
IkReal x15487=r11*r11;
IkReal x15488=(cj5*r10);
IkReal x15489=(r11*sj5);
IkReal x15490=((((2.0)*x15488*x15489))+((x15486*x15487))+(((-1.0)*x15486*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x15487)));
j4eval[0]=x15490;
j4eval[1]=((IKabs((x15489+(((-1.0)*x15488)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15491=cj5*cj5;
IkReal x15492=r11*r11;
IkReal x15493=(cj5*r10);
IkReal x15494=(r11*sj5);
CheckValue<IkReal> x15495 = IKatan2WithCheck(IkReal((x15494+(((-1.0)*x15493)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15495.valid){
continue;
}
CheckValue<IkReal> x15496=IKPowWithIntegerCheck(IKsign((((x15491*x15492))+(((-1.0)*x15491*(r10*r10)))+(((2.0)*x15493*x15494))+(((-1.0)*(r12*r12)))+(((-1.0)*x15492)))),-1);
if(!x15496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15495.value)+(((1.5707963267949)*(x15496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15497=IKsin(j4);
IkReal x15498=IKcos(j4);
IkReal x15499=(cj5*r00);
IkReal x15500=((1.0)*x15498);
IkReal x15501=(sj5*x15498);
IkReal x15502=(cj5*x15497);
IkReal x15503=((1.0)*x15497);
IkReal x15504=(sj5*x15503);
evalcond[0]=((((-1.0)*r22*x15500))+(((-1.0)*r21*x15504))+((r20*x15502)));
evalcond[1]=(((x15497*x15499))+(((-1.0)*r01*x15504))+(((-1.0)*r02*x15500)));
evalcond[2]=((((-1.0)*cj5*r10*x15500))+((r11*x15501))+(((-1.0)*r12*x15503)));
evalcond[3]=((-1.0)+((r10*x15502))+(((-1.0)*r12*x15500))+(((-1.0)*r11*x15504)));
evalcond[4]=(((cj2*sj1))+((r01*x15501))+((cj1*sj2))+(((-1.0)*r02*x15503))+(((-1.0)*x15499*x15500)));
evalcond[5]=((((-1.0)*r22*x15503))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x15500))+((r21*x15501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15505=((1.0)*sj5);
CheckValue<IkReal> x15506 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x15505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15506.valid){
continue;
}
CheckValue<IkReal> x15507=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15505))+(((-1.0)*cj5*r01)))),-1);
if(!x15507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15506.value)+(((1.5707963267949)*(x15507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15508=IKsin(j4);
IkReal x15509=IKcos(j4);
IkReal x15510=(cj5*r00);
IkReal x15511=((1.0)*x15509);
IkReal x15512=(sj5*x15509);
IkReal x15513=(cj5*x15508);
IkReal x15514=((1.0)*x15508);
IkReal x15515=(sj5*x15514);
evalcond[0]=((((-1.0)*r22*x15511))+(((-1.0)*r21*x15515))+((r20*x15513)));
evalcond[1]=(((x15508*x15510))+(((-1.0)*r02*x15511))+(((-1.0)*r01*x15515)));
evalcond[2]=((((-1.0)*r12*x15514))+((r11*x15512))+(((-1.0)*cj5*r10*x15511)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x15511))+(((-1.0)*r11*x15515))+((r10*x15513)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x15514))+((cj1*sj2))+(((-1.0)*x15510*x15511))+((r01*x15512)));
evalcond[5]=((((-1.0)*r22*x15514))+((r21*x15512))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x15511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15516=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15516.valid){
continue;
}
CheckValue<IkReal> x15517 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15516.value)))+(x15517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15518=IKsin(j4);
IkReal x15519=IKcos(j4);
IkReal x15520=(cj5*r00);
IkReal x15521=((1.0)*x15519);
IkReal x15522=(sj5*x15519);
IkReal x15523=(cj5*x15518);
IkReal x15524=((1.0)*x15518);
IkReal x15525=(sj5*x15524);
evalcond[0]=((((-1.0)*r21*x15525))+((r20*x15523))+(((-1.0)*r22*x15521)));
evalcond[1]=((((-1.0)*r01*x15525))+(((-1.0)*r02*x15521))+((x15518*x15520)));
evalcond[2]=((((-1.0)*r12*x15524))+(((-1.0)*cj5*r10*x15521))+((r11*x15522)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x15525))+((r10*x15523))+(((-1.0)*r12*x15521)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15520*x15521))+((cj1*sj2))+((r01*x15522))+(((-1.0)*r02*x15524)));
evalcond[5]=((((-1.0)*cj5*r20*x15521))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x15522))+(((-1.0)*r22*x15524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15526=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15526;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x15526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15527=((1.0)*sj5);
IkReal x15528=((((-1.0)*r00*x15527))+(((-1.0)*cj5*r01)));
j4eval[0]=x15528;
j4eval[1]=((IKabs(((((-1.0)*r21*x15527))+((cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15529=cj5*cj5;
IkReal x15530=r11*r11;
IkReal x15531=(r11*sj5);
IkReal x15532=(cj5*r10);
IkReal x15533=((r12*r12)+(((-1.0)*x15529*x15530))+((x15529*(r10*r10)))+(((-2.0)*x15531*x15532))+x15530);
j4eval[0]=x15533;
j4eval[1]=IKsign(x15533);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x15531))+x15532))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15534=cj5*cj5;
IkReal x15535=r11*r11;
IkReal x15536=(cj5*r10);
IkReal x15537=(r11*sj5);
CheckValue<IkReal> x15538=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x15534*x15535))+((x15534*(r10*r10)))+x15535+(((-2.0)*x15536*x15537)))),-1);
if(!x15538.valid){
continue;
}
CheckValue<IkReal> x15539 = IKatan2WithCheck(IkReal(((((-1.0)*x15537))+x15536)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x15539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15538.value)))+(x15539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15540=IKcos(j4);
IkReal x15541=IKsin(j4);
IkReal x15542=(cj5*r10);
IkReal x15543=((1.0)*x15540);
IkReal x15544=(cj5*x15541);
IkReal x15545=(cj5*x15540);
IkReal x15546=((1.0)*sj5*x15541);
evalcond[0]=((((-1.0)*r11*sj5*x15543))+((x15540*x15542))+((r12*x15541)));
evalcond[1]=((((-1.0)*r21*x15546))+((r20*x15544))+(((-1.0)*r22*x15543)));
evalcond[2]=(((r00*x15544))+(((-1.0)*r01*x15546))+(((-1.0)*r02*x15543)));
evalcond[3]=((-1.0)+((x15541*x15542))+(((-1.0)*r11*x15546))+(((-1.0)*r12*x15543)));
evalcond[4]=(((r02*x15541))+((cj2*sj1))+(((-1.0)*r01*sj5*x15543))+((cj1*sj2))+((r00*x15545)));
evalcond[5]=(((r20*x15545))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x15543))+((r22*x15541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15547=((1.0)*sj5);
CheckValue<IkReal> x15548 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x15547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15548.valid){
continue;
}
CheckValue<IkReal> x15549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15547))+(((-1.0)*cj5*r01)))),-1);
if(!x15549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15548.value)+(((1.5707963267949)*(x15549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15550=IKcos(j4);
IkReal x15551=IKsin(j4);
IkReal x15552=(cj5*r10);
IkReal x15553=((1.0)*x15550);
IkReal x15554=(cj5*x15551);
IkReal x15555=(cj5*x15550);
IkReal x15556=((1.0)*sj5*x15551);
evalcond[0]=(((x15550*x15552))+((r12*x15551))+(((-1.0)*r11*sj5*x15553)));
evalcond[1]=(((r20*x15554))+(((-1.0)*r21*x15556))+(((-1.0)*r22*x15553)));
evalcond[2]=(((r00*x15554))+(((-1.0)*r01*x15556))+(((-1.0)*r02*x15553)));
evalcond[3]=((-1.0)+((x15551*x15552))+(((-1.0)*r12*x15553))+(((-1.0)*r11*x15556)));
evalcond[4]=(((cj2*sj1))+((r00*x15555))+((cj1*sj2))+(((-1.0)*r01*sj5*x15553))+((r02*x15551)));
evalcond[5]=((((-1.0)*r21*sj5*x15553))+((r22*x15551))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15557=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15557.valid){
continue;
}
CheckValue<IkReal> x15558 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15557.value)))+(x15558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15559=IKcos(j4);
IkReal x15560=IKsin(j4);
IkReal x15561=(cj5*r10);
IkReal x15562=((1.0)*x15559);
IkReal x15563=(cj5*x15560);
IkReal x15564=(cj5*x15559);
IkReal x15565=((1.0)*sj5*x15560);
evalcond[0]=((((-1.0)*r11*sj5*x15562))+((x15559*x15561))+((r12*x15560)));
evalcond[1]=((((-1.0)*r22*x15562))+(((-1.0)*r21*x15565))+((r20*x15563)));
evalcond[2]=((((-1.0)*r02*x15562))+(((-1.0)*r01*x15565))+((r00*x15563)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x15565))+(((-1.0)*r12*x15562))+((x15560*x15561)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x15560))+((r00*x15564))+(((-1.0)*r01*sj5*x15562)));
evalcond[5]=(((r22*x15560))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15564))+(((-1.0)*r21*sj5*x15562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15566=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15566);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15566);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15567=(cj5*r10);
IkReal x15568=(r11*sj5);
j4eval[0]=(x15567+(((-1.0)*x15568)));
j4eval[1]=(((sj3*x15568))+(((-1.0)*sj3*x15567)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15569=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15569);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15569);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15570=(r11*sj5);
IkReal x15571=(cj5*r10);
j4eval[0]=(x15571+(((-1.0)*x15570)));
j4eval[1]=((((-1.0)*cj3*x15571))+((cj3*x15570)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15572=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15572);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15572);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15573=((1.0)*sj3);
CheckValue<IkReal> x15574=IKPowWithIntegerCheck(r22,-1);
if(!x15574.valid){
continue;
}
CheckValue<IkReal> x15575=IKPowWithIntegerCheck(sj3,-1);
if(!x15575.valid){
continue;
}
CheckValue<IkReal> x15576=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))),-1);
if(!x15576.valid){
continue;
}
if( IKabs(((x15574.value)*(x15575.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15576.value)*(((((-1.0)*r10*sj5*x15573))+(((-1.0)*cj5*r11*x15573)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15574.value)*(x15575.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15576.value)*(((((-1.0)*r10*sj5*x15573))+(((-1.0)*cj5*r11*x15573))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15574.value)*(x15575.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15576.value)*(((((-1.0)*r10*sj5*x15573))+(((-1.0)*cj5*r11*x15573))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15577=IKsin(j4);
IkReal x15578=IKcos(j4);
IkReal x15579=(sj1*sj2);
IkReal x15580=(r11*sj5);
IkReal x15581=(r00*sj5);
IkReal x15582=(cj5*r01);
IkReal x15583=((1.0)*cj3);
IkReal x15584=(r10*sj5);
IkReal x15585=((1.0)*cj1);
IkReal x15586=(cj5*r11);
IkReal x15587=((1.0)*cj5);
IkReal x15588=(cj2*sj1);
IkReal x15589=(r01*sj5);
IkReal x15590=(cj2*x15585);
IkReal x15591=(cj3*x15578);
IkReal x15592=((1.0)*x15577);
IkReal x15593=(sj3*x15578);
IkReal x15594=(cj5*x15577);
evalcond[0]=((-1.0)*r22*x15578);
evalcond[1]=((((-1.0)*x15589*x15592))+((r00*x15594)));
evalcond[2]=((-1.0)+(((-1.0)*x15580*x15592))+((r10*x15594)));
evalcond[3]=((((-1.0)*r22*sj3*x15592))+(((-1.0)*x15590))+x15579);
evalcond[4]=((((-1.0)*x15588))+(((-1.0)*sj2*x15585))+(((-1.0)*r22*x15577*x15583)));
evalcond[5]=(((x15580*x15591))+((sj3*x15584))+((sj3*x15586))+(((-1.0)*cj5*r10*x15578*x15583)));
evalcond[6]=(((x15580*x15593))+(((-1.0)*r10*x15587*x15593))+(((-1.0)*x15583*x15586))+(((-1.0)*x15583*x15584)));
evalcond[7]=((((-1.0)*cj5*r00*x15578*x15583))+(((-1.0)*x15590))+((sj3*x15582))+((sj3*x15581))+x15579+((x15589*x15591)));
evalcond[8]=((((-1.0)*r00*x15587*x15593))+((cj1*sj2))+(((-1.0)*x15581*x15583))+(((-1.0)*x15582*x15583))+x15588+((x15589*x15593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15595=(cj5*r10);
IkReal x15596=((1.0)*sj3);
IkReal x15597=(r11*sj5);
CheckValue<IkReal> x15598=IKPowWithIntegerCheck(((((-1.0)*x15597))+x15595),-1);
if(!x15598.valid){
continue;
}
CheckValue<IkReal> x15599=IKPowWithIntegerCheck(((((-1.0)*cj3*x15595))+((cj3*x15597))),-1);
if(!x15599.valid){
continue;
}
if( IKabs(x15598.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15599.value)*(((((-1.0)*r10*sj5*x15596))+(((-1.0)*cj5*r11*x15596)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15598.value)+IKsqr(((x15599.value)*(((((-1.0)*r10*sj5*x15596))+(((-1.0)*cj5*r11*x15596))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15598.value, ((x15599.value)*(((((-1.0)*r10*sj5*x15596))+(((-1.0)*cj5*r11*x15596))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15600=IKsin(j4);
IkReal x15601=IKcos(j4);
IkReal x15602=(sj1*sj2);
IkReal x15603=(r11*sj5);
IkReal x15604=(r00*sj5);
IkReal x15605=(cj5*r01);
IkReal x15606=((1.0)*cj3);
IkReal x15607=(r10*sj5);
IkReal x15608=((1.0)*cj1);
IkReal x15609=(cj5*r11);
IkReal x15610=((1.0)*cj5);
IkReal x15611=(cj2*sj1);
IkReal x15612=(r01*sj5);
IkReal x15613=(cj2*x15608);
IkReal x15614=(cj3*x15601);
IkReal x15615=((1.0)*x15600);
IkReal x15616=(sj3*x15601);
IkReal x15617=(cj5*x15600);
evalcond[0]=((-1.0)*r22*x15601);
evalcond[1]=(((r00*x15617))+(((-1.0)*x15612*x15615)));
evalcond[2]=((-1.0)+((r10*x15617))+(((-1.0)*x15603*x15615)));
evalcond[3]=((((-1.0)*x15613))+(((-1.0)*r22*sj3*x15615))+x15602);
evalcond[4]=((((-1.0)*r22*x15600*x15606))+(((-1.0)*x15611))+(((-1.0)*sj2*x15608)));
evalcond[5]=(((x15603*x15614))+((sj3*x15607))+((sj3*x15609))+(((-1.0)*cj5*r10*x15601*x15606)));
evalcond[6]=((((-1.0)*r10*x15610*x15616))+((x15603*x15616))+(((-1.0)*x15606*x15607))+(((-1.0)*x15606*x15609)));
evalcond[7]=((((-1.0)*x15613))+x15602+(((-1.0)*cj5*r00*x15601*x15606))+((x15612*x15614))+((sj3*x15604))+((sj3*x15605)));
evalcond[8]=(((cj1*sj2))+x15611+(((-1.0)*r00*x15610*x15616))+(((-1.0)*x15604*x15606))+(((-1.0)*x15605*x15606))+((x15612*x15616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15618=(cj5*r10);
IkReal x15619=(r11*sj5);
CheckValue<IkReal> x15620=IKPowWithIntegerCheck(((((-1.0)*x15619))+x15618),-1);
if(!x15620.valid){
continue;
}
CheckValue<IkReal> x15621=IKPowWithIntegerCheck((((sj3*x15619))+(((-1.0)*sj3*x15618))),-1);
if(!x15621.valid){
continue;
}
if( IKabs(x15620.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15621.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15620.value)+IKsqr(((x15621.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15620.value, ((x15621.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15622=IKsin(j4);
IkReal x15623=IKcos(j4);
IkReal x15624=(sj1*sj2);
IkReal x15625=(r11*sj5);
IkReal x15626=(r00*sj5);
IkReal x15627=(cj5*r01);
IkReal x15628=((1.0)*cj3);
IkReal x15629=(r10*sj5);
IkReal x15630=((1.0)*cj1);
IkReal x15631=(cj5*r11);
IkReal x15632=((1.0)*cj5);
IkReal x15633=(cj2*sj1);
IkReal x15634=(r01*sj5);
IkReal x15635=(cj2*x15630);
IkReal x15636=(cj3*x15623);
IkReal x15637=((1.0)*x15622);
IkReal x15638=(sj3*x15623);
IkReal x15639=(cj5*x15622);
evalcond[0]=((-1.0)*r22*x15623);
evalcond[1]=(((r00*x15639))+(((-1.0)*x15634*x15637)));
evalcond[2]=((-1.0)+(((-1.0)*x15625*x15637))+((r10*x15639)));
evalcond[3]=((((-1.0)*r22*sj3*x15637))+x15624+(((-1.0)*x15635)));
evalcond[4]=((((-1.0)*sj2*x15630))+(((-1.0)*r22*x15622*x15628))+(((-1.0)*x15633)));
evalcond[5]=(((sj3*x15631))+((x15625*x15636))+((sj3*x15629))+(((-1.0)*cj5*r10*x15623*x15628)));
evalcond[6]=((((-1.0)*x15628*x15629))+((x15625*x15638))+(((-1.0)*r10*x15632*x15638))+(((-1.0)*x15628*x15631)));
evalcond[7]=(((x15634*x15636))+(((-1.0)*cj5*r00*x15623*x15628))+x15624+((sj3*x15626))+((sj3*x15627))+(((-1.0)*x15635)));
evalcond[8]=(((cj1*sj2))+((x15634*x15638))+x15633+(((-1.0)*x15627*x15628))+(((-1.0)*x15626*x15628))+(((-1.0)*r00*x15632*x15638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15640=cj5*cj5;
IkReal x15641=(r11*sj3);
IkReal x15642=(cj3*r10);
IkReal x15643=(cj3*r11);
IkReal x15644=(r10*sj3);
IkReal x15645=(cj5*r20*sj5);
IkReal x15646=(r21*x15640);
IkReal x15647=(r20*x15640);
IkReal x15648=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x15649 = IKatan2WithCheck(IkReal((((r22*sj5*x15644))+((cj5*r22*x15641)))),IkReal(((((-1.0)*r21*x15644))+((x15644*x15645))+((x15644*x15646))+(((-1.0)*x15641*x15648))+((x15641*x15647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15649.valid){
continue;
}
CheckValue<IkReal> x15650=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x15643*x15646))+(((-1.0)*x15643*x15645))+((x15642*x15647))+((r21*x15643))+(((-1.0)*x15642*x15648)))),-1);
if(!x15650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15649.value)+(((1.5707963267949)*(x15650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15651=IKsin(j4);
IkReal x15652=IKcos(j4);
IkReal x15653=(sj1*sj2);
IkReal x15654=((1.0)*r22);
IkReal x15655=(r11*sj5);
IkReal x15656=((1.0)*cj3);
IkReal x15657=(cj5*r21);
IkReal x15658=(r00*sj5);
IkReal x15659=(cj5*r01);
IkReal x15660=(r10*sj5);
IkReal x15661=((1.0)*cj1);
IkReal x15662=(cj5*r10);
IkReal x15663=(r21*sj5);
IkReal x15664=(r01*sj5);
IkReal x15665=(cj2*sj1);
IkReal x15666=(cj5*r00);
IkReal x15667=(cj5*r20);
IkReal x15668=(r20*sj5);
IkReal x15669=(cj5*r11);
IkReal x15670=(cj2*x15661);
IkReal x15671=((1.0)*x15651);
IkReal x15672=(cj3*x15652);
IkReal x15673=((1.0)*x15652);
IkReal x15674=(sj3*x15652);
evalcond[0]=(((x15651*x15667))+(((-1.0)*x15663*x15671))+(((-1.0)*x15652*x15654)));
evalcond[1]=(((x15651*x15666))+(((-1.0)*x15664*x15671))+(((-1.0)*r02*x15673)));
evalcond[2]=((-1.0)+((x15651*x15662))+(((-1.0)*r12*x15673))+(((-1.0)*x15655*x15671)));
evalcond[3]=(((x15655*x15672))+((sj3*x15660))+((sj3*x15669))+(((-1.0)*r12*x15651*x15656))+(((-1.0)*x15652*x15656*x15662)));
evalcond[4]=((((-1.0)*sj3*x15662*x15673))+(((-1.0)*x15656*x15660))+(((-1.0)*x15656*x15669))+((x15655*x15674))+(((-1.0)*r12*sj3*x15671)));
evalcond[5]=((((-1.0)*x15670))+(((-1.0)*r02*x15651*x15656))+x15653+((sj3*x15659))+((sj3*x15658))+((x15664*x15672))+(((-1.0)*x15652*x15656*x15666)));
evalcond[6]=((((-1.0)*sj2*x15661))+(((-1.0)*cj3*x15651*x15654))+((x15663*x15672))+((sj3*x15668))+(((-1.0)*x15665))+((sj3*x15657))+(((-1.0)*x15652*x15656*x15667)));
evalcond[7]=((((-1.0)*sj3*x15666*x15673))+((cj1*sj2))+(((-1.0)*r02*sj3*x15671))+x15665+(((-1.0)*x15656*x15658))+(((-1.0)*x15656*x15659))+((x15664*x15674)));
evalcond[8]=((((-1.0)*x15670))+((x15663*x15674))+(((-1.0)*x15656*x15668))+x15653+(((-1.0)*x15656*x15657))+(((-1.0)*sj3*x15651*x15654))+(((-1.0)*sj3*x15667*x15673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15675=((1.0)*sj5);
CheckValue<IkReal> x15676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15675))+(((-1.0)*cj5*r01)))),-1);
if(!x15676.valid){
continue;
}
CheckValue<IkReal> x15677 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x15675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15676.value)))+(x15677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15678=IKsin(j4);
IkReal x15679=IKcos(j4);
IkReal x15680=(sj1*sj2);
IkReal x15681=((1.0)*r22);
IkReal x15682=(r11*sj5);
IkReal x15683=((1.0)*cj3);
IkReal x15684=(cj5*r21);
IkReal x15685=(r00*sj5);
IkReal x15686=(cj5*r01);
IkReal x15687=(r10*sj5);
IkReal x15688=((1.0)*cj1);
IkReal x15689=(cj5*r10);
IkReal x15690=(r21*sj5);
IkReal x15691=(r01*sj5);
IkReal x15692=(cj2*sj1);
IkReal x15693=(cj5*r00);
IkReal x15694=(cj5*r20);
IkReal x15695=(r20*sj5);
IkReal x15696=(cj5*r11);
IkReal x15697=(cj2*x15688);
IkReal x15698=((1.0)*x15678);
IkReal x15699=(cj3*x15679);
IkReal x15700=((1.0)*x15679);
IkReal x15701=(sj3*x15679);
evalcond[0]=((((-1.0)*x15690*x15698))+(((-1.0)*x15679*x15681))+((x15678*x15694)));
evalcond[1]=((((-1.0)*r02*x15700))+((x15678*x15693))+(((-1.0)*x15691*x15698)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x15700))+(((-1.0)*x15682*x15698))+((x15678*x15689)));
evalcond[3]=((((-1.0)*x15679*x15683*x15689))+((sj3*x15696))+((x15682*x15699))+((sj3*x15687))+(((-1.0)*r12*x15678*x15683)));
evalcond[4]=((((-1.0)*x15683*x15687))+(((-1.0)*r12*sj3*x15698))+((x15682*x15701))+(((-1.0)*sj3*x15689*x15700))+(((-1.0)*x15683*x15696)));
evalcond[5]=((((-1.0)*x15697))+(((-1.0)*x15679*x15683*x15693))+((x15691*x15699))+(((-1.0)*r02*x15678*x15683))+x15680+((sj3*x15685))+((sj3*x15686)));
evalcond[6]=((((-1.0)*x15679*x15683*x15694))+(((-1.0)*cj3*x15678*x15681))+((sj3*x15695))+((x15690*x15699))+(((-1.0)*sj2*x15688))+(((-1.0)*x15692))+((sj3*x15684)));
evalcond[7]=((((-1.0)*r02*sj3*x15698))+((cj1*sj2))+(((-1.0)*x15683*x15685))+(((-1.0)*x15683*x15686))+x15692+((x15691*x15701))+(((-1.0)*sj3*x15693*x15700)));
evalcond[8]=((((-1.0)*x15697))+(((-1.0)*sj3*x15678*x15681))+(((-1.0)*x15683*x15684))+(((-1.0)*sj3*x15694*x15700))+x15680+((x15690*x15701))+(((-1.0)*x15683*x15695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15702=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15702.valid){
continue;
}
CheckValue<IkReal> x15703 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15702.value)))+(x15703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15704=IKsin(j4);
IkReal x15705=IKcos(j4);
IkReal x15706=(sj1*sj2);
IkReal x15707=((1.0)*r22);
IkReal x15708=(r11*sj5);
IkReal x15709=((1.0)*cj3);
IkReal x15710=(cj5*r21);
IkReal x15711=(r00*sj5);
IkReal x15712=(cj5*r01);
IkReal x15713=(r10*sj5);
IkReal x15714=((1.0)*cj1);
IkReal x15715=(cj5*r10);
IkReal x15716=(r21*sj5);
IkReal x15717=(r01*sj5);
IkReal x15718=(cj2*sj1);
IkReal x15719=(cj5*r00);
IkReal x15720=(cj5*r20);
IkReal x15721=(r20*sj5);
IkReal x15722=(cj5*r11);
IkReal x15723=(cj2*x15714);
IkReal x15724=((1.0)*x15704);
IkReal x15725=(cj3*x15705);
IkReal x15726=((1.0)*x15705);
IkReal x15727=(sj3*x15705);
evalcond[0]=((((-1.0)*x15705*x15707))+((x15704*x15720))+(((-1.0)*x15716*x15724)));
evalcond[1]=((((-1.0)*r02*x15726))+((x15704*x15719))+(((-1.0)*x15717*x15724)));
evalcond[2]=((-1.0)+((x15704*x15715))+(((-1.0)*r12*x15726))+(((-1.0)*x15708*x15724)));
evalcond[3]=((((-1.0)*r12*x15704*x15709))+((x15708*x15725))+((sj3*x15713))+((sj3*x15722))+(((-1.0)*x15705*x15709*x15715)));
evalcond[4]=((((-1.0)*r12*sj3*x15724))+((x15708*x15727))+(((-1.0)*sj3*x15715*x15726))+(((-1.0)*x15709*x15713))+(((-1.0)*x15709*x15722)));
evalcond[5]=((((-1.0)*x15723))+((sj3*x15712))+((sj3*x15711))+x15706+(((-1.0)*r02*x15704*x15709))+(((-1.0)*x15705*x15709*x15719))+((x15717*x15725)));
evalcond[6]=((((-1.0)*x15718))+((sj3*x15710))+(((-1.0)*sj2*x15714))+(((-1.0)*cj3*x15704*x15707))+(((-1.0)*x15705*x15709*x15720))+((sj3*x15721))+((x15716*x15725)));
evalcond[7]=(((cj1*sj2))+(((-1.0)*x15709*x15711))+(((-1.0)*x15709*x15712))+x15718+(((-1.0)*r02*sj3*x15724))+(((-1.0)*sj3*x15719*x15726))+((x15717*x15727)));
evalcond[8]=((((-1.0)*x15723))+(((-1.0)*sj3*x15720*x15726))+(((-1.0)*x15709*x15710))+x15706+(((-1.0)*x15709*x15721))+(((-1.0)*sj3*x15704*x15707))+((x15716*x15727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x15728=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15728;
j4eval[1]=IKsign(x15728);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x15729=((1.0)*sj5);
IkReal x15730=((((-1.0)*r20*x15729))+(((-1.0)*cj5*r21)));
j4eval[0]=x15730;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x15729))+((cj5*r00))))));
j4eval[2]=IKsign(x15730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x15731=cj5*cj5;
IkReal x15732=(cj3*r11*r21);
IkReal x15733=((1.0)*cj3*cj5*sj5);
IkReal x15734=(((cj3*r12*r22))+(((-1.0)*x15731*x15732))+(((-1.0)*r11*r20*x15733))+((cj3*r10*r20*x15731))+x15732+(((-1.0)*r10*r21*x15733)));
j4eval[0]=x15734;
j4eval[1]=IKsign(x15734);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15735=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15735;
j4eval[1]=IKsign(x15735);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15736=((1.0)*sj5);
IkReal x15737=((((-1.0)*r20*x15736))+(((-1.0)*cj5*r21)));
j4eval[0]=x15737;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x15736))+((cj5*r00))))));
j4eval[2]=IKsign(x15737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15738=cj5*cj5;
IkReal x15739=r11*r11;
IkReal x15740=(r11*sj5);
IkReal x15741=(cj5*r10);
IkReal x15742=((r12*r12)+(((-2.0)*x15740*x15741))+x15739+((x15738*(r10*r10)))+(((-1.0)*x15738*x15739)));
j4eval[0]=x15742;
j4eval[1]=IKsign(x15742);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x15741))+x15740))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15743=cj5*cj5;
IkReal x15744=r11*r11;
IkReal x15745=(cj5*r10);
IkReal x15746=(r11*sj5);
CheckValue<IkReal> x15747=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15743*x15744))+(r12*r12)+(((-2.0)*x15745*x15746))+x15744+((x15743*(r10*r10))))),-1);
if(!x15747.valid){
continue;
}
CheckValue<IkReal> x15748 = IKatan2WithCheck(IkReal(((((-1.0)*x15745))+x15746)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15747.value)))+(x15748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15749=IKsin(j4);
IkReal x15750=IKcos(j4);
IkReal x15751=(cj5*r00);
IkReal x15752=((1.0)*cj1);
IkReal x15753=((1.0)*x15750);
IkReal x15754=(sj5*x15750);
IkReal x15755=(cj5*x15749);
IkReal x15756=((1.0)*x15749);
IkReal x15757=(sj5*x15756);
evalcond[0]=((((-1.0)*r22*x15753))+((r20*x15755))+(((-1.0)*r21*x15757)));
evalcond[1]=((((-1.0)*r02*x15753))+((x15749*x15751))+(((-1.0)*r01*x15757)));
evalcond[2]=((((-1.0)*cj5*r10*x15753))+((r11*x15754))+(((-1.0)*r12*x15756)));
evalcond[3]=((1.0)+((r10*x15755))+(((-1.0)*r11*x15757))+(((-1.0)*r12*x15753)));
evalcond[4]=((((-1.0)*cj5*r20*x15753))+(((-1.0)*r22*x15756))+((r21*x15754))+(((-1.0)*cj2*x15752))+((sj1*sj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x15751*x15753))+(((-1.0)*r02*x15756))+((r01*x15754))+(((-1.0)*sj2*x15752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15758=((1.0)*sj5);
CheckValue<IkReal> x15759 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15758))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15759.valid){
continue;
}
CheckValue<IkReal> x15760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15758))+(((-1.0)*cj5*r21)))),-1);
if(!x15760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15759.value)+(((1.5707963267949)*(x15760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15761=IKsin(j4);
IkReal x15762=IKcos(j4);
IkReal x15763=(cj5*r00);
IkReal x15764=((1.0)*cj1);
IkReal x15765=((1.0)*x15762);
IkReal x15766=(sj5*x15762);
IkReal x15767=(cj5*x15761);
IkReal x15768=((1.0)*x15761);
IkReal x15769=(sj5*x15768);
evalcond[0]=((((-1.0)*r22*x15765))+(((-1.0)*r21*x15769))+((r20*x15767)));
evalcond[1]=((((-1.0)*r01*x15769))+(((-1.0)*r02*x15765))+((x15761*x15763)));
evalcond[2]=((((-1.0)*cj5*r10*x15765))+((r11*x15766))+(((-1.0)*r12*x15768)));
evalcond[3]=((1.0)+((r10*x15767))+(((-1.0)*r11*x15769))+(((-1.0)*r12*x15765)));
evalcond[4]=(((r21*x15766))+(((-1.0)*r22*x15768))+(((-1.0)*cj2*x15764))+((sj1*sj2))+(((-1.0)*cj5*r20*x15765)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x15766))+(((-1.0)*r02*x15768))+(((-1.0)*x15763*x15765))+(((-1.0)*sj2*x15764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15770=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15770.valid){
continue;
}
CheckValue<IkReal> x15771 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15770.value)))+(x15771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15772=IKsin(j4);
IkReal x15773=IKcos(j4);
IkReal x15774=(cj5*r00);
IkReal x15775=((1.0)*cj1);
IkReal x15776=((1.0)*x15773);
IkReal x15777=(sj5*x15773);
IkReal x15778=(cj5*x15772);
IkReal x15779=((1.0)*x15772);
IkReal x15780=(sj5*x15779);
evalcond[0]=((((-1.0)*r21*x15780))+(((-1.0)*r22*x15776))+((r20*x15778)));
evalcond[1]=(((x15772*x15774))+(((-1.0)*r01*x15780))+(((-1.0)*r02*x15776)));
evalcond[2]=((((-1.0)*cj5*r10*x15776))+((r11*x15777))+(((-1.0)*r12*x15779)));
evalcond[3]=((1.0)+((r10*x15778))+(((-1.0)*r12*x15776))+(((-1.0)*r11*x15780)));
evalcond[4]=(((r21*x15777))+(((-1.0)*r22*x15779))+((sj1*sj2))+(((-1.0)*cj2*x15775))+(((-1.0)*cj5*r20*x15776)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x15777))+(((-1.0)*r02*x15779))+(((-1.0)*sj2*x15775))+(((-1.0)*x15774*x15776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15781=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15781;
j4eval[1]=IKsign(x15781);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15782=((1.0)*sj5);
IkReal x15783=((((-1.0)*r20*x15782))+(((-1.0)*cj5*r21)));
j4eval[0]=x15783;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x15782))+((cj5*r00))))));
j4eval[2]=IKsign(x15783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15784=(sj1*sj2);
IkReal x15785=(cj1*cj2);
IkReal x15786=(r11*sj5);
IkReal x15787=(cj5*r10);
IkReal x15788=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15788;
j4eval[1]=IKsign(x15788);
j4eval[2]=((IKabs(((((-1.0)*r12*x15784))+((r12*x15785)))))+(IKabs((((x15784*x15787))+((x15785*x15786))+(((-1.0)*x15785*x15787))+(((-1.0)*x15784*x15786))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15789=(sj1*sj2);
IkReal x15790=(cj1*cj2);
IkReal x15791=(cj5*r10);
IkReal x15792=(r11*sj5);
CheckValue<IkReal> x15793 = IKatan2WithCheck(IkReal(((((-1.0)*x15790*x15791))+((x15789*x15791))+((x15790*x15792))+(((-1.0)*x15789*x15792)))),IkReal(((((-1.0)*r12*x15789))+((r12*x15790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15793.valid){
continue;
}
CheckValue<IkReal> x15794=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15793.value)+(((1.5707963267949)*(x15794.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15795=IKcos(j4);
IkReal x15796=IKsin(j4);
IkReal x15797=(cj5*r10);
IkReal x15798=((1.0)*cj1);
IkReal x15799=((1.0)*x15795);
IkReal x15800=(cj5*x15796);
IkReal x15801=(cj5*x15795);
IkReal x15802=((1.0)*sj5*x15796);
evalcond[0]=(((x15795*x15797))+(((-1.0)*r11*sj5*x15799))+((r12*x15796)));
evalcond[1]=((((-1.0)*r22*x15799))+(((-1.0)*r21*x15802))+((r20*x15800)));
evalcond[2]=((((-1.0)*r02*x15799))+(((-1.0)*r01*x15802))+((r00*x15800)));
evalcond[3]=((1.0)+(((-1.0)*r11*x15802))+((x15796*x15797))+(((-1.0)*r12*x15799)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x15799))+(((-1.0)*cj2*x15798))+((r22*x15796))+((r20*x15801)));
evalcond[5]=(((r02*x15796))+(((-1.0)*r01*sj5*x15799))+(((-1.0)*cj2*sj1))+((r00*x15801))+(((-1.0)*sj2*x15798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15803=((1.0)*sj5);
CheckValue<IkReal> x15804 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15803))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15804.valid){
continue;
}
CheckValue<IkReal> x15805=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x15803)))),-1);
if(!x15805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15804.value)+(((1.5707963267949)*(x15805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15806=IKcos(j4);
IkReal x15807=IKsin(j4);
IkReal x15808=(cj5*r10);
IkReal x15809=((1.0)*cj1);
IkReal x15810=((1.0)*x15806);
IkReal x15811=(cj5*x15807);
IkReal x15812=(cj5*x15806);
IkReal x15813=((1.0)*sj5*x15807);
evalcond[0]=(((r12*x15807))+(((-1.0)*r11*sj5*x15810))+((x15806*x15808)));
evalcond[1]=((((-1.0)*r21*x15813))+(((-1.0)*r22*x15810))+((r20*x15811)));
evalcond[2]=((((-1.0)*r01*x15813))+(((-1.0)*r02*x15810))+((r00*x15811)));
evalcond[3]=((1.0)+((x15807*x15808))+(((-1.0)*r12*x15810))+(((-1.0)*r11*x15813)));
evalcond[4]=((((-1.0)*cj2*x15809))+((sj1*sj2))+((r22*x15807))+(((-1.0)*r21*sj5*x15810))+((r20*x15812)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x15807))+(((-1.0)*r01*sj5*x15810))+(((-1.0)*sj2*x15809))+((r00*x15812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15814=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15814.valid){
continue;
}
CheckValue<IkReal> x15815 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15814.value)))+(x15815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15816=IKcos(j4);
IkReal x15817=IKsin(j4);
IkReal x15818=(cj5*r10);
IkReal x15819=((1.0)*cj1);
IkReal x15820=((1.0)*x15816);
IkReal x15821=(cj5*x15817);
IkReal x15822=(cj5*x15816);
IkReal x15823=((1.0)*sj5*x15817);
evalcond[0]=((((-1.0)*r11*sj5*x15820))+((r12*x15817))+((x15816*x15818)));
evalcond[1]=(((r20*x15821))+(((-1.0)*r21*x15823))+(((-1.0)*r22*x15820)));
evalcond[2]=((((-1.0)*r02*x15820))+((r00*x15821))+(((-1.0)*r01*x15823)));
evalcond[3]=((1.0)+(((-1.0)*r11*x15823))+(((-1.0)*r12*x15820))+((x15817*x15818)));
evalcond[4]=((((-1.0)*r21*sj5*x15820))+((r20*x15822))+(((-1.0)*cj2*x15819))+((sj1*sj2))+((r22*x15817)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r00*x15822))+((r02*x15817))+(((-1.0)*sj2*x15819))+(((-1.0)*r01*sj5*x15820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15824=((-1.0)*r20);
IkReal x15826 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15826)==0){
continue;
}
IkReal x15825=pow(x15826,-0.5);
CheckValue<IkReal> x15827 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15824),IKFAST_ATAN2_MAGTHRESH);
if(!x15827.valid){
continue;
}
IkReal gconst54=((-1.0)*(x15827.value));
IkReal gconst55=(r21*x15825);
IkReal gconst56=(x15824*x15825);
CheckValue<IkReal> x15828 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15828.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15828.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15829=((-1.0)*r20);
IkReal x15830=x15825;
CheckValue<IkReal> x15832 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15829),IKFAST_ATAN2_MAGTHRESH);
if(!x15832.valid){
continue;
}
IkReal x15831=((-1.0)*(x15832.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15831;
IkReal gconst54=x15831;
IkReal gconst55=(r21*x15830);
IkReal gconst56=(x15829*x15830);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15833=((-1.0)*r20);
IkReal x15834=x15825;
CheckValue<IkReal> x15836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15833),IKFAST_ATAN2_MAGTHRESH);
if(!x15836.valid){
continue;
}
IkReal x15835=((-1.0)*(x15836.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15835;
IkReal gconst54=x15835;
IkReal gconst55=(r21*x15834);
IkReal gconst56=(x15833*x15834);
CheckValue<IkReal> x15844=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15844.valid){
continue;
}
IkReal x15837=x15844.value;
IkReal x15838=(cj3*x15837);
IkReal x15839=(r11*x15838);
IkReal x15840=(r01*x15838);
IkReal x15841=(r00*x15838);
IkReal x15842=(r10*x15838);
IkReal x15843=(r20*r21*x15838);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x15841*(r20*r20)))+((r01*x15839*(r21*r21)))+((r00*r20*r21*x15839))+((r10*r20*r21*x15840))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15845=((-1.0)*r20);
IkReal x15846=x15825;
CheckValue<IkReal> x15848 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15845),IKFAST_ATAN2_MAGTHRESH);
if(!x15848.valid){
continue;
}
IkReal x15847=((-1.0)*(x15848.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15847;
IkReal gconst54=x15847;
IkReal gconst55=(r21*x15846);
IkReal gconst56=(x15845*x15846);
CheckValue<IkReal> x15856=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15856.valid){
continue;
}
IkReal x15849=x15856.value;
IkReal x15850=(sj3*x15849);
IkReal x15851=(r11*x15850);
IkReal x15852=(r00*x15850);
IkReal x15853=(r01*x15850);
IkReal x15854=(r10*x15850);
IkReal x15855=(r20*r21*x15850);
j4eval[0]=IKsign((((r10*x15852*(r20*r20)))+((r02*r12*sj3))+((r10*r20*r21*x15853))+((r01*x15851*(r21*r21)))+((r00*r20*r21*x15851))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15857=gconst55*gconst55;
IkReal x15858=gconst56*gconst56;
IkReal x15859=(r11*sj3);
IkReal x15860=((1.0)*r00);
IkReal x15861=(gconst55*gconst56);
IkReal x15862=(cj3*r11);
IkReal x15863=(cj3*r10);
IkReal x15864=((1.0)*r02);
IkReal x15865=(r10*sj3);
IkReal x15866=(r01*x15857);
CheckValue<IkReal> x15867 = IKatan2WithCheck(IkReal(((((-1.0)*gconst55*x15863*x15864))+(((-1.0)*gconst56*x15862*x15864)))),IkReal((((r01*x15861*x15862))+(((-1.0)*x15860*x15861*x15863))+((x15863*x15866))+(((-1.0)*x15858*x15860*x15862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15867.valid){
continue;
}
CheckValue<IkReal> x15868=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x15859*x15860*x15861))+(((-1.0)*r01*x15861*x15865))+((r00*x15858*x15865))+((x15859*x15866)))),-1);
if(!x15868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15867.value)+(((1.5707963267949)*(x15868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15869=IKsin(j4);
IkReal x15870=IKcos(j4);
IkReal x15871=((1.0)*sj2);
IkReal x15872=(r00*sj3);
IkReal x15873=(r01*sj3);
IkReal x15874=((1.0)*cj3);
IkReal x15875=(gconst56*sj3);
IkReal x15876=((1.0)*cj2);
IkReal x15877=(gconst55*sj3);
IkReal x15878=(cj3*gconst56);
IkReal x15879=(cj1*x15871);
IkReal x15880=(sj1*x15876);
IkReal x15881=((1.0)*x15870);
IkReal x15882=((1.0)*x15869);
IkReal x15883=(gconst55*x15870);
IkReal x15884=(gconst56*x15869);
IkReal x15885=(x15880+x15879);
evalcond[0]=(((r20*x15884))+(((-1.0)*r22*x15881))+(((-1.0)*gconst55*r21*x15882)));
evalcond[1]=((((-1.0)*r02*x15881))+((r00*x15884))+(((-1.0)*gconst55*r01*x15882)));
evalcond[2]=((1.0)+((r10*x15884))+(((-1.0)*gconst55*r11*x15882))+(((-1.0)*r12*x15881)));
evalcond[3]=(((r11*x15875))+(((-1.0)*r12*x15869*x15874))+((r10*x15877))+((cj3*r11*x15883))+(((-1.0)*gconst56*r10*x15870*x15874)));
evalcond[4]=((((-1.0)*gconst55*r10*x15874))+((r11*x15870*x15877))+(((-1.0)*r12*sj3*x15882))+(((-1.0)*gconst56*r11*x15874))+(((-1.0)*r10*x15875*x15881)));
evalcond[5]=(((gconst55*x15872))+(((-1.0)*r02*x15869*x15874))+((gconst56*x15873))+((cj1*cj2))+(((-1.0)*gconst56*r00*x15870*x15874))+((cj3*r01*x15883))+(((-1.0)*sj1*x15871)));
evalcond[6]=(((cj3*r21*x15883))+(((-1.0)*r22*x15869*x15874))+((r20*x15877))+((r21*x15875))+(((-1.0)*x15885))+(((-1.0)*gconst56*r20*x15870*x15874)));
evalcond[7]=(((r21*x15870*x15877))+(((-1.0)*gconst55*r20*x15874))+(((-1.0)*r20*x15875*x15881))+((sj1*sj2))+(((-1.0)*cj1*x15876))+(((-1.0)*r22*sj3*x15882))+(((-1.0)*gconst56*r21*x15874)));
evalcond[8]=((((-1.0)*gconst56*r01*x15874))+(((-1.0)*gconst55*r00*x15874))+((x15873*x15883))+(((-1.0)*x15885))+(((-1.0)*gconst56*x15872*x15881))+(((-1.0)*r02*sj3*x15882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15886=gconst55*gconst55;
IkReal x15887=gconst56*gconst56;
IkReal x15888=(r11*sj3);
IkReal x15889=(cj3*r01);
IkReal x15890=(gconst55*r10);
IkReal x15891=((1.0)*gconst56);
IkReal x15892=(r00*x15887);
CheckValue<IkReal> x15893=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*gconst55*r00*r11*x15891))+((cj3*r02*r12))+(((-1.0)*x15889*x15890*x15891))+((r11*x15886*x15889))+((cj3*r10*x15892)))),-1);
if(!x15893.valid){
continue;
}
CheckValue<IkReal> x15894 = IKatan2WithCheck(IkReal((((r02*sj3*x15890))+((gconst56*r02*x15888)))),IkReal((((x15888*x15892))+(((-1.0)*r01*r10*sj3*x15886))+((gconst56*r00*sj3*x15890))+(((-1.0)*gconst55*r01*x15888*x15891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15893.value)))+(x15894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15895=IKsin(j4);
IkReal x15896=IKcos(j4);
IkReal x15897=((1.0)*sj2);
IkReal x15898=(r00*sj3);
IkReal x15899=(r01*sj3);
IkReal x15900=((1.0)*cj3);
IkReal x15901=(gconst56*sj3);
IkReal x15902=((1.0)*cj2);
IkReal x15903=(gconst55*sj3);
IkReal x15904=(cj3*gconst56);
IkReal x15905=(cj1*x15897);
IkReal x15906=(sj1*x15902);
IkReal x15907=((1.0)*x15896);
IkReal x15908=((1.0)*x15895);
IkReal x15909=(gconst55*x15896);
IkReal x15910=(gconst56*x15895);
IkReal x15911=(x15905+x15906);
evalcond[0]=((((-1.0)*r22*x15907))+(((-1.0)*gconst55*r21*x15908))+((r20*x15910)));
evalcond[1]=((((-1.0)*gconst55*r01*x15908))+(((-1.0)*r02*x15907))+((r00*x15910)));
evalcond[2]=((1.0)+(((-1.0)*gconst55*r11*x15908))+(((-1.0)*r12*x15907))+((r10*x15910)));
evalcond[3]=((((-1.0)*r12*x15895*x15900))+((r11*x15901))+(((-1.0)*gconst56*r10*x15896*x15900))+((cj3*r11*x15909))+((r10*x15903)));
evalcond[4]=((((-1.0)*gconst56*r11*x15900))+(((-1.0)*r12*sj3*x15908))+(((-1.0)*gconst55*r10*x15900))+((r11*x15896*x15903))+(((-1.0)*r10*x15901*x15907)));
evalcond[5]=((((-1.0)*r02*x15895*x15900))+((gconst56*x15899))+((cj3*r01*x15909))+(((-1.0)*gconst56*r00*x15896*x15900))+((gconst55*x15898))+((cj1*cj2))+(((-1.0)*sj1*x15897)));
evalcond[6]=((((-1.0)*r22*x15895*x15900))+((r21*x15901))+((cj3*r21*x15909))+((r20*x15903))+(((-1.0)*x15911))+(((-1.0)*gconst56*r20*x15896*x15900)));
evalcond[7]=((((-1.0)*cj1*x15902))+(((-1.0)*r20*x15901*x15907))+(((-1.0)*r22*sj3*x15908))+((r21*x15896*x15903))+((sj1*sj2))+(((-1.0)*gconst56*r21*x15900))+(((-1.0)*gconst55*r20*x15900)));
evalcond[8]=((((-1.0)*r02*sj3*x15908))+(((-1.0)*gconst55*r00*x15900))+(((-1.0)*gconst56*x15898*x15907))+(((-1.0)*gconst56*r01*x15900))+(((-1.0)*x15911))+((x15899*x15909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15912=IKPowWithIntegerCheck(IKsign((((gconst56*r01))+((gconst55*r00)))),-1);
if(!x15912.valid){
continue;
}
CheckValue<IkReal> x15913 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst55*r21))+((gconst56*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15912.value)))+(x15913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15914=IKsin(j4);
IkReal x15915=IKcos(j4);
IkReal x15916=((1.0)*sj2);
IkReal x15917=(r00*sj3);
IkReal x15918=(r01*sj3);
IkReal x15919=((1.0)*cj3);
IkReal x15920=(gconst56*sj3);
IkReal x15921=((1.0)*cj2);
IkReal x15922=(gconst55*sj3);
IkReal x15923=(cj3*gconst56);
IkReal x15924=(cj1*x15916);
IkReal x15925=(sj1*x15921);
IkReal x15926=((1.0)*x15915);
IkReal x15927=((1.0)*x15914);
IkReal x15928=(gconst55*x15915);
IkReal x15929=(gconst56*x15914);
IkReal x15930=(x15924+x15925);
evalcond[0]=(((r20*x15929))+(((-1.0)*gconst55*r21*x15927))+(((-1.0)*r22*x15926)));
evalcond[1]=((((-1.0)*gconst55*r01*x15927))+((r00*x15929))+(((-1.0)*r02*x15926)));
evalcond[2]=((1.0)+((r10*x15929))+(((-1.0)*r12*x15926))+(((-1.0)*gconst55*r11*x15927)));
evalcond[3]=(((r10*x15922))+((cj3*r11*x15928))+((r11*x15920))+(((-1.0)*r12*x15914*x15919))+(((-1.0)*gconst56*r10*x15915*x15919)));
evalcond[4]=((((-1.0)*r10*x15920*x15926))+((r11*x15915*x15922))+(((-1.0)*gconst56*r11*x15919))+(((-1.0)*r12*sj3*x15927))+(((-1.0)*gconst55*r10*x15919)));
evalcond[5]=((((-1.0)*r02*x15914*x15919))+(((-1.0)*gconst56*r00*x15915*x15919))+((cj3*r01*x15928))+((gconst56*x15918))+((cj1*cj2))+((gconst55*x15917))+(((-1.0)*sj1*x15916)));
evalcond[6]=(((r20*x15922))+((r21*x15920))+(((-1.0)*gconst56*r20*x15915*x15919))+(((-1.0)*r22*x15914*x15919))+((cj3*r21*x15928))+(((-1.0)*x15930)));
evalcond[7]=(((r21*x15915*x15922))+(((-1.0)*gconst55*r20*x15919))+(((-1.0)*cj1*x15921))+((sj1*sj2))+(((-1.0)*r20*x15920*x15926))+(((-1.0)*r22*sj3*x15927))+(((-1.0)*gconst56*r21*x15919)));
evalcond[8]=((((-1.0)*r02*sj3*x15927))+(((-1.0)*gconst56*x15917*x15926))+(((-1.0)*gconst55*r00*x15919))+((x15918*x15928))+(((-1.0)*x15930))+(((-1.0)*gconst56*r01*x15919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15931=((-1.0)*r21);
IkReal x15933 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15933)==0){
continue;
}
IkReal x15932=pow(x15933,-0.5);
CheckValue<IkReal> x15934 = IKatan2WithCheck(IkReal(x15931),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15934.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x15934.value))));
IkReal gconst58=(x15931*x15932);
IkReal gconst59=((1.0)*r20*x15932);
CheckValue<IkReal> x15935 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15935.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15935.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15936=((-1.0)*r21);
CheckValue<IkReal> x15939 = IKatan2WithCheck(IkReal(x15936),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15939.valid){
continue;
}
IkReal x15937=((1.0)*(x15939.value));
IkReal x15938=x15932;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15937)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15937)));
IkReal gconst58=(x15936*x15938);
IkReal gconst59=((1.0)*r20*x15938);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x15940=((-1.0)*r21);
CheckValue<IkReal> x15943 = IKatan2WithCheck(IkReal(x15940),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15943.valid){
continue;
}
IkReal x15941=((1.0)*(x15943.value));
IkReal x15942=x15932;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15941)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15941)));
IkReal gconst58=(x15940*x15942);
IkReal gconst59=((1.0)*r20*x15942);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15944=((-1.0)*r21);
CheckValue<IkReal> x15947 = IKatan2WithCheck(IkReal(x15944),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15947.valid){
continue;
}
IkReal x15945=((1.0)*(x15947.value));
IkReal x15946=x15932;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15945)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15945)));
IkReal gconst58=(x15944*x15946);
IkReal gconst59=((1.0)*r20*x15946);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15948=gconst59*gconst59;
IkReal x15949=gconst58*gconst58;
IkReal x15950=(r11*sj3);
IkReal x15951=(r10*sj3);
IkReal x15952=(cj3*r10);
IkReal x15953=((1.0)*r21);
IkReal x15954=(gconst58*gconst59);
IkReal x15955=(cj3*r11);
IkReal x15956=(r20*x15948);
CheckValue<IkReal> x15957 = IKatan2WithCheck(IkReal((((gconst58*r22*x15951))+((gconst59*r22*x15950)))),IkReal((((r20*x15951*x15954))+((x15950*x15956))+(((-1.0)*x15949*x15951*x15953))+(((-1.0)*x15950*x15953*x15954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15957.valid){
continue;
}
CheckValue<IkReal> x15958=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r20*x15954*x15955))+((x15952*x15956))+((r21*x15949*x15955))+(((-1.0)*x15952*x15953*x15954)))),-1);
if(!x15958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15957.value)+(((1.5707963267949)*(x15958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15959=IKsin(j4);
IkReal x15960=IKcos(j4);
IkReal x15961=(cj3*gconst59);
IkReal x15962=(gconst58*sj3);
IkReal x15963=(cj3*gconst58);
IkReal x15964=((1.0)*sj1);
IkReal x15965=((1.0)*cj1);
IkReal x15966=(gconst59*sj3);
IkReal x15967=(sj2*x15965);
IkReal x15968=(cj2*x15964);
IkReal x15969=((1.0)*x15960);
IkReal x15970=((1.0)*x15959);
IkReal x15971=(r21*x15960);
IkReal x15972=(r01*x15960);
IkReal x15973=(r11*x15960);
IkReal x15974=(gconst59*x15959);
IkReal x15975=(x15967+x15968);
evalcond[0]=((((-1.0)*gconst58*r21*x15970))+((r20*x15974))+(((-1.0)*r22*x15969)));
evalcond[1]=((((-1.0)*r02*x15969))+((r00*x15974))+(((-1.0)*gconst58*r01*x15970)));
evalcond[2]=((1.0)+(((-1.0)*gconst58*r11*x15970))+((r10*x15974))+(((-1.0)*r12*x15969)));
evalcond[3]=((((-1.0)*r10*x15961*x15969))+((r11*x15966))+((r10*x15962))+((x15963*x15973))+(((-1.0)*cj3*r12*x15970)));
evalcond[4]=((((-1.0)*r11*x15961))+(((-1.0)*r12*sj3*x15970))+(((-1.0)*r10*x15963))+((x15962*x15973))+(((-1.0)*r10*x15966*x15969)));
evalcond[5]=(((r01*x15966))+((r00*x15962))+(((-1.0)*sj2*x15964))+(((-1.0)*cj3*r02*x15970))+((cj1*cj2))+((x15963*x15972))+(((-1.0)*r00*x15961*x15969)));
evalcond[6]=((((-1.0)*cj3*r22*x15970))+((r20*x15962))+(((-1.0)*x15975))+(((-1.0)*r20*x15961*x15969))+((r21*x15966))+((x15963*x15971)));
evalcond[7]=((((-1.0)*r21*x15961))+(((-1.0)*r22*sj3*x15970))+((sj1*sj2))+(((-1.0)*cj2*x15965))+(((-1.0)*r20*x15966*x15969))+(((-1.0)*r20*x15963))+((x15962*x15971)));
evalcond[8]=((((-1.0)*r01*x15961))+(((-1.0)*x15975))+(((-1.0)*r00*x15963))+((x15962*x15972))+(((-1.0)*r02*sj3*x15970))+(((-1.0)*r00*x15966*x15969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15976=((1.0)*gconst58);
CheckValue<IkReal> x15977 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst59*r00))+(((-1.0)*r01*x15976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15977.valid){
continue;
}
CheckValue<IkReal> x15978=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst59*r21))+(((-1.0)*r20*x15976)))),-1);
if(!x15978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15977.value)+(((1.5707963267949)*(x15978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15979=IKsin(j4);
IkReal x15980=IKcos(j4);
IkReal x15981=(cj3*gconst59);
IkReal x15982=(gconst58*sj3);
IkReal x15983=(cj3*gconst58);
IkReal x15984=((1.0)*sj1);
IkReal x15985=((1.0)*cj1);
IkReal x15986=(gconst59*sj3);
IkReal x15987=(sj2*x15985);
IkReal x15988=(cj2*x15984);
IkReal x15989=((1.0)*x15980);
IkReal x15990=((1.0)*x15979);
IkReal x15991=(r21*x15980);
IkReal x15992=(r01*x15980);
IkReal x15993=(r11*x15980);
IkReal x15994=(gconst59*x15979);
IkReal x15995=(x15988+x15987);
evalcond[0]=((((-1.0)*gconst58*r21*x15990))+((r20*x15994))+(((-1.0)*r22*x15989)));
evalcond[1]=((((-1.0)*r02*x15989))+(((-1.0)*gconst58*r01*x15990))+((r00*x15994)));
evalcond[2]=((1.0)+((r10*x15994))+(((-1.0)*gconst58*r11*x15990))+(((-1.0)*r12*x15989)));
evalcond[3]=(((x15983*x15993))+((r10*x15982))+((r11*x15986))+(((-1.0)*r10*x15981*x15989))+(((-1.0)*cj3*r12*x15990)));
evalcond[4]=((((-1.0)*r12*sj3*x15990))+(((-1.0)*r11*x15981))+(((-1.0)*r10*x15986*x15989))+((x15982*x15993))+(((-1.0)*r10*x15983)));
evalcond[5]=((((-1.0)*sj2*x15984))+((r00*x15982))+((x15983*x15992))+(((-1.0)*r00*x15981*x15989))+(((-1.0)*cj3*r02*x15990))+((cj1*cj2))+((r01*x15986)));
evalcond[6]=((((-1.0)*x15995))+((r20*x15982))+((x15983*x15991))+(((-1.0)*r20*x15981*x15989))+(((-1.0)*cj3*r22*x15990))+((r21*x15986)));
evalcond[7]=((((-1.0)*r20*x15986*x15989))+(((-1.0)*r21*x15981))+(((-1.0)*r22*sj3*x15990))+((x15982*x15991))+((sj1*sj2))+(((-1.0)*cj2*x15985))+(((-1.0)*r20*x15983)));
evalcond[8]=((((-1.0)*r01*x15981))+(((-1.0)*r00*x15986*x15989))+(((-1.0)*x15995))+(((-1.0)*r00*x15983))+((x15982*x15992))+(((-1.0)*r02*sj3*x15990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15996 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst58*r21))+((gconst59*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15996.valid){
continue;
}
CheckValue<IkReal> x15997=IKPowWithIntegerCheck(IKsign((((gconst58*r00))+((gconst59*r01)))),-1);
if(!x15997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15996.value)+(((1.5707963267949)*(x15997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15998=IKsin(j4);
IkReal x15999=IKcos(j4);
IkReal x16000=(cj3*gconst59);
IkReal x16001=(gconst58*sj3);
IkReal x16002=(cj3*gconst58);
IkReal x16003=((1.0)*sj1);
IkReal x16004=((1.0)*cj1);
IkReal x16005=(gconst59*sj3);
IkReal x16006=(sj2*x16004);
IkReal x16007=(cj2*x16003);
IkReal x16008=((1.0)*x15999);
IkReal x16009=((1.0)*x15998);
IkReal x16010=(r21*x15999);
IkReal x16011=(r01*x15999);
IkReal x16012=(r11*x15999);
IkReal x16013=(gconst59*x15998);
IkReal x16014=(x16006+x16007);
evalcond[0]=((((-1.0)*gconst58*r21*x16009))+((r20*x16013))+(((-1.0)*r22*x16008)));
evalcond[1]=((((-1.0)*r02*x16008))+((r00*x16013))+(((-1.0)*gconst58*r01*x16009)));
evalcond[2]=((1.0)+(((-1.0)*gconst58*r11*x16009))+(((-1.0)*r12*x16008))+((r10*x16013)));
evalcond[3]=((((-1.0)*cj3*r12*x16009))+((r10*x16001))+((r11*x16005))+((x16002*x16012))+(((-1.0)*r10*x16000*x16008)));
evalcond[4]=((((-1.0)*r12*sj3*x16009))+(((-1.0)*r10*x16005*x16008))+(((-1.0)*r10*x16002))+((x16001*x16012))+(((-1.0)*r11*x16000)));
evalcond[5]=((((-1.0)*r00*x16000*x16008))+(((-1.0)*sj2*x16003))+(((-1.0)*cj3*r02*x16009))+((r01*x16005))+((r00*x16001))+((x16002*x16011))+((cj1*cj2)));
evalcond[6]=((((-1.0)*x16014))+((r20*x16001))+((r21*x16005))+(((-1.0)*r20*x16000*x16008))+((x16002*x16010))+(((-1.0)*cj3*r22*x16009)));
evalcond[7]=((((-1.0)*cj2*x16004))+((sj1*sj2))+(((-1.0)*r20*x16005*x16008))+((x16001*x16010))+(((-1.0)*r21*x16000))+(((-1.0)*r22*sj3*x16009))+(((-1.0)*r20*x16002)));
evalcond[8]=((((-1.0)*x16014))+(((-1.0)*r00*x16005*x16008))+((x16001*x16011))+(((-1.0)*r00*x16002))+(((-1.0)*r02*sj3*x16009))+(((-1.0)*r01*x16000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16016 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x16016)==0){
continue;
}
IkReal x16015=pow(x16016,-0.5);
CheckValue<IkReal> x16017 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16017.valid){
continue;
}
IkReal gconst60=((-1.0)*(x16017.value));
IkReal gconst61=((-1.0)*r01*x16015);
IkReal gconst62=(r00*x16015);
CheckValue<IkReal> x16018 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16018.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x16018.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x16021 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16021.valid){
continue;
}
IkReal x16019=((-1.0)*(x16021.value));
IkReal x16020=x16015;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x16019;
IkReal gconst60=x16019;
IkReal gconst61=((-1.0)*r01*x16020);
IkReal gconst62=(r00*x16020);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x16024 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16024.valid){
continue;
}
IkReal x16022=((-1.0)*(x16024.value));
IkReal x16023=x16015;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x16022;
IkReal gconst60=x16022;
IkReal gconst61=((-1.0)*r01*x16023);
IkReal gconst62=(r00*x16023);
CheckValue<IkReal> x16032=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x16032.valid){
continue;
}
IkReal x16025=x16032.value;
IkReal x16026=(cj3*x16025);
IkReal x16027=(r21*x16026);
IkReal x16028=(r10*x16026);
IkReal x16029=(r11*x16026);
IkReal x16030=(r20*x16026);
IkReal x16031=(r00*r01*x16026);
j4eval[0]=IKsign((((cj3*r12*r22))+((r20*x16028*(r00*r00)))+((r00*r01*r10*x16027))+((r11*x16027*(r01*r01)))+((r00*r01*r20*x16029))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x16035 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16035.valid){
continue;
}
IkReal x16033=((-1.0)*(x16035.value));
IkReal x16034=x16015;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x16033;
IkReal gconst60=x16033;
IkReal gconst61=((-1.0)*r01*x16034);
IkReal gconst62=(r00*x16034);
CheckValue<IkReal> x16043=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x16043.valid){
continue;
}
IkReal x16036=x16043.value;
IkReal x16037=(sj3*x16036);
IkReal x16038=(r11*x16037);
IkReal x16039=(r21*x16037);
IkReal x16040=(r20*x16037);
IkReal x16041=(r10*x16037);
IkReal x16042=(r00*r01*x16037);
j4eval[0]=IKsign((((r21*x16038*(r01*r01)))+((r00*r01*r10*x16039))+((r00*r01*r20*x16038))+((r12*r22*sj3))+((r10*x16040*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16044=gconst61*gconst61;
IkReal x16045=gconst62*gconst62;
IkReal x16046=((1.0)*gconst62);
IkReal x16047=(r10*r21);
IkReal x16048=(gconst61*sj3);
IkReal x16049=(cj3*r11);
IkReal x16050=(cj3*gconst61*r10);
IkReal x16051=(r20*x16045);
CheckValue<IkReal> x16052 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x16050))+(((-1.0)*r22*x16046*x16049)))),IkReal(((((-1.0)*r20*x16046*x16050))+((cj3*x16044*x16047))+(((-1.0)*x16049*x16051))+((gconst61*gconst62*r21*x16049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16052.valid){
continue;
}
CheckValue<IkReal> x16053=IKPowWithIntegerCheck(IKsign((((r11*r21*sj3*x16044))+(((-1.0)*r11*r20*x16046*x16048))+((r12*r22*sj3))+(((-1.0)*x16046*x16047*x16048))+((r10*sj3*x16051)))),-1);
if(!x16053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16052.value)+(((1.5707963267949)*(x16053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16054=IKsin(j4);
IkReal x16055=IKcos(j4);
IkReal x16056=(gconst62*sj3);
IkReal x16057=(gconst61*r11);
IkReal x16058=(gconst61*sj3);
IkReal x16059=((1.0)*cj3);
IkReal x16060=(sj1*sj2);
IkReal x16061=(gconst61*r21);
IkReal x16062=((1.0)*cj1);
IkReal x16063=(gconst61*r01);
IkReal x16064=(cj3*gconst62);
IkReal x16065=(sj2*x16062);
IkReal x16066=((1.0)*cj2*sj1);
IkReal x16067=((1.0)*x16055);
IkReal x16068=((1.0)*x16054);
IkReal x16069=(gconst62*x16054);
IkReal x16070=(cj3*x16055);
IkReal x16071=(x16066+x16065);
evalcond[0]=(((r20*x16069))+(((-1.0)*x16061*x16068))+(((-1.0)*r22*x16067)));
evalcond[1]=(((r00*x16069))+(((-1.0)*x16063*x16068))+(((-1.0)*r02*x16067)));
evalcond[2]=((1.0)+((r10*x16069))+(((-1.0)*r12*x16067))+(((-1.0)*x16057*x16068)));
evalcond[3]=((((-1.0)*gconst62*r10*x16055*x16059))+((r10*x16058))+(((-1.0)*r12*x16054*x16059))+((r11*x16056))+((x16057*x16070)));
evalcond[4]=((((-1.0)*gconst62*r11*x16059))+(((-1.0)*gconst61*r10*x16059))+(((-1.0)*r12*sj3*x16068))+(((-1.0)*r10*x16056*x16067))+((sj3*x16055*x16057)));
evalcond[5]=(((x16063*x16070))+(((-1.0)*gconst62*r00*x16055*x16059))+(((-1.0)*r02*x16054*x16059))+((cj1*cj2))+(((-1.0)*x16060))+((r00*x16058))+((r01*x16056)));
evalcond[6]=((((-1.0)*r22*x16054*x16059))+((r21*x16056))+(((-1.0)*x16071))+(((-1.0)*gconst62*r20*x16055*x16059))+((x16061*x16070))+((r20*x16058)));
evalcond[7]=((((-1.0)*r22*sj3*x16068))+((r21*x16055*x16058))+(((-1.0)*r20*x16056*x16067))+x16060+(((-1.0)*gconst61*r20*x16059))+(((-1.0)*gconst62*r21*x16059))+(((-1.0)*cj2*x16062)));
evalcond[8]=((((-1.0)*r00*x16056*x16067))+(((-1.0)*gconst62*r01*x16059))+(((-1.0)*r02*sj3*x16068))+(((-1.0)*x16071))+(((-1.0)*gconst61*r00*x16059))+((r01*x16055*x16058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16072=gconst62*gconst62;
IkReal x16073=gconst61*gconst61;
IkReal x16074=(r20*sj3);
IkReal x16075=(gconst61*r10);
IkReal x16076=(r22*sj3);
IkReal x16077=(gconst62*r11);
IkReal x16078=(cj3*r21);
IkReal x16079=(cj3*r20);
IkReal x16080=((1.0)*r21*sj3);
CheckValue<IkReal> x16081 = IKatan2WithCheck(IkReal((((x16076*x16077))+((x16075*x16076)))),IkReal(((((-1.0)*r10*x16073*x16080))+(((-1.0)*gconst61*x16077*x16080))+((gconst62*x16074*x16075))+((r11*x16072*x16074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16081.valid){
continue;
}
CheckValue<IkReal> x16082=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((r11*x16073*x16078))+(((-1.0)*gconst62*x16075*x16078))+(((-1.0)*gconst61*x16077*x16079))+((r10*x16072*x16079)))),-1);
if(!x16082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16081.value)+(((1.5707963267949)*(x16082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16083=IKsin(j4);
IkReal x16084=IKcos(j4);
IkReal x16085=(gconst62*sj3);
IkReal x16086=(gconst61*r11);
IkReal x16087=(gconst61*sj3);
IkReal x16088=((1.0)*cj3);
IkReal x16089=(sj1*sj2);
IkReal x16090=(gconst61*r21);
IkReal x16091=((1.0)*cj1);
IkReal x16092=(gconst61*r01);
IkReal x16093=(cj3*gconst62);
IkReal x16094=(sj2*x16091);
IkReal x16095=((1.0)*cj2*sj1);
IkReal x16096=((1.0)*x16084);
IkReal x16097=((1.0)*x16083);
IkReal x16098=(gconst62*x16083);
IkReal x16099=(cj3*x16084);
IkReal x16100=(x16095+x16094);
evalcond[0]=(((r20*x16098))+(((-1.0)*r22*x16096))+(((-1.0)*x16090*x16097)));
evalcond[1]=((((-1.0)*r02*x16096))+(((-1.0)*x16092*x16097))+((r00*x16098)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16096))+(((-1.0)*x16086*x16097))+((r10*x16098)));
evalcond[3]=((((-1.0)*gconst62*r10*x16084*x16088))+(((-1.0)*r12*x16083*x16088))+((r11*x16085))+((r10*x16087))+((x16086*x16099)));
evalcond[4]=((((-1.0)*r12*sj3*x16097))+(((-1.0)*gconst61*r10*x16088))+(((-1.0)*gconst62*r11*x16088))+((sj3*x16084*x16086))+(((-1.0)*r10*x16085*x16096)));
evalcond[5]=((((-1.0)*gconst62*r00*x16084*x16088))+(((-1.0)*x16089))+((x16092*x16099))+(((-1.0)*r02*x16083*x16088))+((cj1*cj2))+((r01*x16085))+((r00*x16087)));
evalcond[6]=((((-1.0)*r22*x16083*x16088))+((x16090*x16099))+((r21*x16085))+((r20*x16087))+(((-1.0)*x16100))+(((-1.0)*gconst62*r20*x16084*x16088)));
evalcond[7]=((((-1.0)*gconst62*r21*x16088))+((r21*x16084*x16087))+(((-1.0)*gconst61*r20*x16088))+(((-1.0)*cj2*x16091))+(((-1.0)*r22*sj3*x16097))+(((-1.0)*r20*x16085*x16096))+x16089);
evalcond[8]=(((r01*x16084*x16087))+(((-1.0)*x16100))+(((-1.0)*gconst62*r01*x16088))+(((-1.0)*r00*x16085*x16096))+(((-1.0)*gconst61*r00*x16088))+(((-1.0)*r02*sj3*x16097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16101=((1.0)*gconst61);
CheckValue<IkReal> x16102=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x16101))+(((-1.0)*gconst62*r21)))),-1);
if(!x16102.valid){
continue;
}
CheckValue<IkReal> x16103 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x16101))+((gconst62*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16102.value)))+(x16103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16104=IKsin(j4);
IkReal x16105=IKcos(j4);
IkReal x16106=(gconst62*sj3);
IkReal x16107=(gconst61*r11);
IkReal x16108=(gconst61*sj3);
IkReal x16109=((1.0)*cj3);
IkReal x16110=(sj1*sj2);
IkReal x16111=(gconst61*r21);
IkReal x16112=((1.0)*cj1);
IkReal x16113=(gconst61*r01);
IkReal x16114=(cj3*gconst62);
IkReal x16115=(sj2*x16112);
IkReal x16116=((1.0)*cj2*sj1);
IkReal x16117=((1.0)*x16105);
IkReal x16118=((1.0)*x16104);
IkReal x16119=(gconst62*x16104);
IkReal x16120=(cj3*x16105);
IkReal x16121=(x16116+x16115);
evalcond[0]=(((r20*x16119))+(((-1.0)*x16111*x16118))+(((-1.0)*r22*x16117)));
evalcond[1]=(((r00*x16119))+(((-1.0)*r02*x16117))+(((-1.0)*x16113*x16118)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16117))+(((-1.0)*x16107*x16118))+((r10*x16119)));
evalcond[3]=(((x16107*x16120))+(((-1.0)*gconst62*r10*x16105*x16109))+((r10*x16108))+((r11*x16106))+(((-1.0)*r12*x16104*x16109)));
evalcond[4]=((((-1.0)*r10*x16106*x16117))+(((-1.0)*gconst61*r10*x16109))+((sj3*x16105*x16107))+(((-1.0)*r12*sj3*x16118))+(((-1.0)*gconst62*r11*x16109)));
evalcond[5]=(((r01*x16106))+(((-1.0)*r02*x16104*x16109))+((x16113*x16120))+(((-1.0)*x16110))+((cj1*cj2))+(((-1.0)*gconst62*r00*x16105*x16109))+((r00*x16108)));
evalcond[6]=((((-1.0)*x16121))+((r21*x16106))+(((-1.0)*gconst62*r20*x16105*x16109))+((r20*x16108))+((x16111*x16120))+(((-1.0)*r22*x16104*x16109)));
evalcond[7]=((((-1.0)*r22*sj3*x16118))+(((-1.0)*gconst62*r21*x16109))+(((-1.0)*cj2*x16112))+(((-1.0)*r20*x16106*x16117))+x16110+(((-1.0)*gconst61*r20*x16109))+((r21*x16105*x16108)));
evalcond[8]=((((-1.0)*x16121))+(((-1.0)*gconst62*r01*x16109))+(((-1.0)*gconst61*r00*x16109))+((r01*x16105*x16108))+(((-1.0)*r02*sj3*x16118))+(((-1.0)*r00*x16106*x16117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16123 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x16123)==0){
continue;
}
IkReal x16122=pow(x16123,-0.5);
CheckValue<IkReal> x16124 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16124.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x16124.value))));
IkReal gconst64=((1.0)*r01*x16122);
IkReal gconst65=((-1.0)*r00*x16122);
CheckValue<IkReal> x16125 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16125.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16125.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x16128 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16128.valid){
continue;
}
IkReal x16126=((1.0)*(x16128.value));
IkReal x16127=x16122;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x16126)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x16126)));
IkReal gconst64=((1.0)*r01*x16127);
IkReal gconst65=((-1.0)*r00*x16127);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x16131 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16131.valid){
continue;
}
IkReal x16129=((1.0)*(x16131.value));
IkReal x16130=x16122;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x16129)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x16129)));
IkReal gconst64=((1.0)*r01*x16130);
IkReal gconst65=((-1.0)*r00*x16130);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16132=gconst65*gconst65;
IkReal x16133=gconst64*gconst64;
IkReal x16134=(r11*r20);
IkReal x16135=(r22*sj3);
IkReal x16136=(gconst64*r10);
IkReal x16137=(gconst65*r11);
IkReal x16138=((1.0)*sj3);
IkReal x16139=((1.0)*cj3*gconst65);
IkReal x16140=(r21*x16133);
CheckValue<IkReal> x16141=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r21*x16136*x16139))+((cj3*r11*x16140))+((cj3*r10*r20*x16132))+(((-1.0)*gconst64*x16134*x16139)))),-1);
if(!x16141.valid){
continue;
}
CheckValue<IkReal> x16142 = IKatan2WithCheck(IkReal((((x16135*x16136))+((x16135*x16137)))),IkReal((((gconst65*r20*sj3*x16136))+((sj3*x16132*x16134))+(((-1.0)*r10*x16138*x16140))+(((-1.0)*gconst64*r21*x16137*x16138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16141.value)))+(x16142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16143=IKsin(j4);
IkReal x16144=IKcos(j4);
IkReal x16145=(gconst65*r10);
IkReal x16146=((1.0)*cj3);
IkReal x16147=(gconst65*r21);
IkReal x16148=(sj1*sj2);
IkReal x16149=(gconst64*r00);
IkReal x16150=(gconst65*sj3);
IkReal x16151=((1.0)*cj2);
IkReal x16152=(cj3*gconst65);
IkReal x16153=(gconst64*sj3);
IkReal x16154=((1.0)*cj1*sj2);
IkReal x16155=(sj1*x16151);
IkReal x16156=((1.0)*x16144);
IkReal x16157=((1.0)*x16143);
IkReal x16158=(gconst65*x16143);
IkReal x16159=(cj3*gconst64*x16144);
IkReal x16160=(x16154+x16155);
evalcond[0]=((((-1.0)*gconst64*r21*x16157))+((r20*x16158))+(((-1.0)*r22*x16156)));
evalcond[1]=((((-1.0)*r02*x16156))+((r00*x16158))+(((-1.0)*gconst64*r01*x16157)));
evalcond[2]=((1.0)+(((-1.0)*gconst64*r11*x16157))+(((-1.0)*r12*x16156))+((x16143*x16145)));
evalcond[3]=((((-1.0)*r12*x16143*x16146))+((r11*x16150))+((r11*x16159))+((r10*x16153))+(((-1.0)*x16144*x16145*x16146)));
evalcond[4]=((((-1.0)*r12*sj3*x16157))+(((-1.0)*gconst64*r10*x16146))+((r11*x16144*x16153))+(((-1.0)*gconst65*r11*x16146))+(((-1.0)*sj3*x16145*x16156)));
evalcond[5]=((((-1.0)*x16148))+(((-1.0)*gconst65*r00*x16144*x16146))+((sj3*x16149))+(((-1.0)*r02*x16143*x16146))+((r01*x16150))+((r01*x16159))+((cj1*cj2)));
evalcond[6]=(((r21*x16159))+((r20*x16153))+((sj3*x16147))+(((-1.0)*r22*x16143*x16146))+(((-1.0)*gconst65*r20*x16144*x16146))+(((-1.0)*x16160)));
evalcond[7]=((((-1.0)*r22*sj3*x16157))+(((-1.0)*gconst64*r20*x16146))+((r21*x16144*x16153))+(((-1.0)*cj1*x16151))+x16148+(((-1.0)*r20*x16150*x16156))+(((-1.0)*x16146*x16147)));
evalcond[8]=((((-1.0)*r00*x16150*x16156))+(((-1.0)*x16146*x16149))+(((-1.0)*r02*sj3*x16157))+((r01*x16144*x16153))+(((-1.0)*x16160))+(((-1.0)*gconst65*r01*x16146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16161=((1.0)*gconst64);
CheckValue<IkReal> x16162=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst65*r21))+(((-1.0)*r20*x16161)))),-1);
if(!x16162.valid){
continue;
}
CheckValue<IkReal> x16163 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst65*r00))+(((-1.0)*r01*x16161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16162.value)))+(x16163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16164=IKsin(j4);
IkReal x16165=IKcos(j4);
IkReal x16166=(gconst65*r10);
IkReal x16167=((1.0)*cj3);
IkReal x16168=(gconst65*r21);
IkReal x16169=(sj1*sj2);
IkReal x16170=(gconst64*r00);
IkReal x16171=(gconst65*sj3);
IkReal x16172=((1.0)*cj2);
IkReal x16173=(cj3*gconst65);
IkReal x16174=(gconst64*sj3);
IkReal x16175=((1.0)*cj1*sj2);
IkReal x16176=(sj1*x16172);
IkReal x16177=((1.0)*x16165);
IkReal x16178=((1.0)*x16164);
IkReal x16179=(gconst65*x16164);
IkReal x16180=(cj3*gconst64*x16165);
IkReal x16181=(x16175+x16176);
evalcond[0]=(((r20*x16179))+(((-1.0)*r22*x16177))+(((-1.0)*gconst64*r21*x16178)));
evalcond[1]=((((-1.0)*r02*x16177))+((r00*x16179))+(((-1.0)*gconst64*r01*x16178)));
evalcond[2]=((1.0)+(((-1.0)*gconst64*r11*x16178))+(((-1.0)*r12*x16177))+((x16164*x16166)));
evalcond[3]=(((r11*x16171))+((r10*x16174))+(((-1.0)*x16165*x16166*x16167))+((r11*x16180))+(((-1.0)*r12*x16164*x16167)));
evalcond[4]=((((-1.0)*sj3*x16166*x16177))+(((-1.0)*gconst65*r11*x16167))+(((-1.0)*gconst64*r10*x16167))+((r11*x16165*x16174))+(((-1.0)*r12*sj3*x16178)));
evalcond[5]=(((r01*x16180))+(((-1.0)*gconst65*r00*x16165*x16167))+(((-1.0)*r02*x16164*x16167))+((r01*x16171))+((sj3*x16170))+((cj1*cj2))+(((-1.0)*x16169)));
evalcond[6]=(((r21*x16180))+((r20*x16174))+((sj3*x16168))+(((-1.0)*x16181))+(((-1.0)*r22*x16164*x16167))+(((-1.0)*gconst65*r20*x16165*x16167)));
evalcond[7]=((((-1.0)*r20*x16171*x16177))+(((-1.0)*cj1*x16172))+(((-1.0)*x16167*x16168))+x16169+(((-1.0)*r22*sj3*x16178))+(((-1.0)*gconst64*r20*x16167))+((r21*x16165*x16174)));
evalcond[8]=((((-1.0)*x16167*x16170))+(((-1.0)*x16181))+(((-1.0)*r00*x16171*x16177))+(((-1.0)*r02*sj3*x16178))+(((-1.0)*gconst65*r01*x16167))+((r01*x16165*x16174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16182=IKPowWithIntegerCheck(IKsign((((gconst64*r00))+((gconst65*r01)))),-1);
if(!x16182.valid){
continue;
}
CheckValue<IkReal> x16183 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst64*r21))+((gconst65*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16182.value)))+(x16183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16184=IKsin(j4);
IkReal x16185=IKcos(j4);
IkReal x16186=(gconst65*r10);
IkReal x16187=((1.0)*cj3);
IkReal x16188=(gconst65*r21);
IkReal x16189=(sj1*sj2);
IkReal x16190=(gconst64*r00);
IkReal x16191=(gconst65*sj3);
IkReal x16192=((1.0)*cj2);
IkReal x16193=(cj3*gconst65);
IkReal x16194=(gconst64*sj3);
IkReal x16195=((1.0)*cj1*sj2);
IkReal x16196=(sj1*x16192);
IkReal x16197=((1.0)*x16185);
IkReal x16198=((1.0)*x16184);
IkReal x16199=(gconst65*x16184);
IkReal x16200=(cj3*gconst64*x16185);
IkReal x16201=(x16196+x16195);
evalcond[0]=((((-1.0)*gconst64*r21*x16198))+(((-1.0)*r22*x16197))+((r20*x16199)));
evalcond[1]=(((r00*x16199))+(((-1.0)*gconst64*r01*x16198))+(((-1.0)*r02*x16197)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16197))+((x16184*x16186))+(((-1.0)*gconst64*r11*x16198)));
evalcond[3]=(((r10*x16194))+(((-1.0)*x16185*x16186*x16187))+((r11*x16191))+((r11*x16200))+(((-1.0)*r12*x16184*x16187)));
evalcond[4]=(((r11*x16185*x16194))+(((-1.0)*sj3*x16186*x16197))+(((-1.0)*gconst65*r11*x16187))+(((-1.0)*gconst64*r10*x16187))+(((-1.0)*r12*sj3*x16198)));
evalcond[5]=((((-1.0)*r02*x16184*x16187))+(((-1.0)*gconst65*r00*x16185*x16187))+((r01*x16191))+(((-1.0)*x16189))+((r01*x16200))+((cj1*cj2))+((sj3*x16190)));
evalcond[6]=((((-1.0)*gconst65*r20*x16185*x16187))+(((-1.0)*x16201))+((sj3*x16188))+((r21*x16200))+(((-1.0)*r22*x16184*x16187))+((r20*x16194)));
evalcond[7]=((((-1.0)*x16187*x16188))+(((-1.0)*r20*x16191*x16197))+x16189+((r21*x16185*x16194))+(((-1.0)*gconst64*r20*x16187))+(((-1.0)*r22*sj3*x16198))+(((-1.0)*cj1*x16192)));
evalcond[8]=((((-1.0)*r02*sj3*x16198))+(((-1.0)*x16201))+(((-1.0)*x16187*x16190))+(((-1.0)*gconst65*r01*x16187))+(((-1.0)*r00*x16191*x16197))+((r01*x16185*x16194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16202=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16202);
rxp1_1=(px*r21);
rxp1_2=(r11*x16202);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x16203=(cj5*r10);
IkReal x16204=(r11*sj5);
j4eval[0]=(x16203+(((-1.0)*x16204)));
j4eval[1]=((((-1.0)*sj3*x16203))+((sj3*x16204)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16205=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16205);
rxp1_1=(px*r21);
rxp1_2=(r11*x16205);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x16206=(r11*sj5);
IkReal x16207=(cj5*r10);
j4eval[0]=(x16207+(((-1.0)*x16206)));
j4eval[1]=(((cj3*x16206))+(((-1.0)*cj3*x16207)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16208=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16208);
rxp1_1=(px*r21);
rxp1_2=(r11*x16208);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16209=((1.0)*r10);
CheckValue<IkReal> x16210=IKPowWithIntegerCheck(cj3,-1);
if(!x16210.valid){
continue;
}
CheckValue<IkReal> x16211=IKPowWithIntegerCheck(r02,-1);
if(!x16211.valid){
continue;
}
CheckValue<IkReal> x16212=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x16209))+((cj3*r11*sj5))),-1);
if(!x16212.valid){
continue;
}
if( IKabs(((x16210.value)*(x16211.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16212.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x16209)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16210.value)*(x16211.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x16212.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x16209))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16210.value)*(x16211.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x16212.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x16209))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16213=IKsin(j4);
IkReal x16214=IKcos(j4);
IkReal x16215=(r11*sj5);
IkReal x16216=(sj1*sj2);
IkReal x16217=((1.0)*cj3);
IkReal x16218=(r10*sj5);
IkReal x16219=(cj5*r10);
IkReal x16220=(r21*sj5);
IkReal x16221=((1.0)*cj1);
IkReal x16222=(cj5*r11);
IkReal x16223=(cj5*r20);
IkReal x16224=(r20*sj5);
IkReal x16225=(cj5*r21);
IkReal x16226=(sj2*x16221);
IkReal x16227=((1.0)*cj2*sj1);
IkReal x16228=((1.0)*x16213);
IkReal x16229=(cj3*x16214);
IkReal x16230=(sj3*x16214);
IkReal x16231=(x16226+x16227);
evalcond[0]=((-1.0)*r02*x16214);
evalcond[1]=((((-1.0)*x16220*x16228))+((x16213*x16223)));
evalcond[2]=((1.0)+((x16213*x16219))+(((-1.0)*x16215*x16228)));
evalcond[3]=((((-1.0)*x16216))+(((-1.0)*r02*x16213*x16217))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*sj3*x16228))+(((-1.0)*x16231)));
evalcond[5]=(((sj3*x16222))+((sj3*x16218))+(((-1.0)*x16214*x16217*x16219))+((x16215*x16229)));
evalcond[6]=((((-1.0)*x16217*x16218))+(((-1.0)*x16217*x16222))+(((-1.0)*x16219*x16230))+((x16215*x16230)));
evalcond[7]=(((sj3*x16224))+((sj3*x16225))+((x16220*x16229))+(((-1.0)*x16231))+(((-1.0)*x16214*x16217*x16223)));
evalcond[8]=((((-1.0)*x16217*x16225))+(((-1.0)*x16217*x16224))+x16216+(((-1.0)*cj2*x16221))+((x16220*x16230))+(((-1.0)*x16223*x16230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16232=(cj5*r10);
IkReal x16233=((1.0)*sj3);
IkReal x16234=(r11*sj5);
CheckValue<IkReal> x16235=IKPowWithIntegerCheck(((((-1.0)*x16234))+x16232),-1);
if(!x16235.valid){
continue;
}
CheckValue<IkReal> x16236=IKPowWithIntegerCheck(((((-1.0)*cj3*x16232))+((cj3*x16234))),-1);
if(!x16236.valid){
continue;
}
if( IKabs(((-1.0)*(x16235.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16236.value)*(((((-1.0)*r10*sj5*x16233))+(((-1.0)*cj5*r11*x16233)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16235.value)))+IKsqr(((x16236.value)*(((((-1.0)*r10*sj5*x16233))+(((-1.0)*cj5*r11*x16233))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16235.value)), ((x16236.value)*(((((-1.0)*r10*sj5*x16233))+(((-1.0)*cj5*r11*x16233))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16237=IKsin(j4);
IkReal x16238=IKcos(j4);
IkReal x16239=(r11*sj5);
IkReal x16240=(sj1*sj2);
IkReal x16241=((1.0)*cj3);
IkReal x16242=(r10*sj5);
IkReal x16243=(cj5*r10);
IkReal x16244=(r21*sj5);
IkReal x16245=((1.0)*cj1);
IkReal x16246=(cj5*r11);
IkReal x16247=(cj5*r20);
IkReal x16248=(r20*sj5);
IkReal x16249=(cj5*r21);
IkReal x16250=(sj2*x16245);
IkReal x16251=((1.0)*cj2*sj1);
IkReal x16252=((1.0)*x16237);
IkReal x16253=(cj3*x16238);
IkReal x16254=(sj3*x16238);
IkReal x16255=(x16251+x16250);
evalcond[0]=((-1.0)*r02*x16238);
evalcond[1]=((((-1.0)*x16244*x16252))+((x16237*x16247)));
evalcond[2]=((1.0)+((x16237*x16243))+(((-1.0)*x16239*x16252)));
evalcond[3]=((((-1.0)*r02*x16237*x16241))+((cj1*cj2))+(((-1.0)*x16240)));
evalcond[4]=((((-1.0)*r02*sj3*x16252))+(((-1.0)*x16255)));
evalcond[5]=(((sj3*x16246))+((sj3*x16242))+(((-1.0)*x16238*x16241*x16243))+((x16239*x16253)));
evalcond[6]=((((-1.0)*x16241*x16246))+(((-1.0)*x16241*x16242))+(((-1.0)*x16243*x16254))+((x16239*x16254)));
evalcond[7]=(((sj3*x16249))+((sj3*x16248))+(((-1.0)*x16238*x16241*x16247))+((x16244*x16253))+(((-1.0)*x16255)));
evalcond[8]=((((-1.0)*x16241*x16248))+(((-1.0)*x16241*x16249))+x16240+(((-1.0)*x16247*x16254))+(((-1.0)*cj2*x16245))+((x16244*x16254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16256=(cj5*r10);
IkReal x16257=(r11*sj5);
CheckValue<IkReal> x16258=IKPowWithIntegerCheck((x16256+(((-1.0)*x16257))),-1);
if(!x16258.valid){
continue;
}
CheckValue<IkReal> x16259=IKPowWithIntegerCheck(((((-1.0)*sj3*x16256))+((sj3*x16257))),-1);
if(!x16259.valid){
continue;
}
if( IKabs(((-1.0)*(x16258.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16259.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16258.value)))+IKsqr(((x16259.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16258.value)), ((x16259.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16260=IKsin(j4);
IkReal x16261=IKcos(j4);
IkReal x16262=(r11*sj5);
IkReal x16263=(sj1*sj2);
IkReal x16264=((1.0)*cj3);
IkReal x16265=(r10*sj5);
IkReal x16266=(cj5*r10);
IkReal x16267=(r21*sj5);
IkReal x16268=((1.0)*cj1);
IkReal x16269=(cj5*r11);
IkReal x16270=(cj5*r20);
IkReal x16271=(r20*sj5);
IkReal x16272=(cj5*r21);
IkReal x16273=(sj2*x16268);
IkReal x16274=((1.0)*cj2*sj1);
IkReal x16275=((1.0)*x16260);
IkReal x16276=(cj3*x16261);
IkReal x16277=(sj3*x16261);
IkReal x16278=(x16274+x16273);
evalcond[0]=((-1.0)*r02*x16261);
evalcond[1]=(((x16260*x16270))+(((-1.0)*x16267*x16275)));
evalcond[2]=((1.0)+(((-1.0)*x16262*x16275))+((x16260*x16266)));
evalcond[3]=((((-1.0)*x16263))+(((-1.0)*r02*x16260*x16264))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x16278))+(((-1.0)*r02*sj3*x16275)));
evalcond[5]=(((sj3*x16269))+((sj3*x16265))+((x16262*x16276))+(((-1.0)*x16261*x16264*x16266)));
evalcond[6]=((((-1.0)*x16264*x16265))+(((-1.0)*x16264*x16269))+(((-1.0)*x16266*x16277))+((x16262*x16277)));
evalcond[7]=((((-1.0)*x16278))+(((-1.0)*x16261*x16264*x16270))+((x16267*x16276))+((sj3*x16271))+((sj3*x16272)));
evalcond[8]=((((-1.0)*x16264*x16271))+(((-1.0)*x16264*x16272))+(((-1.0)*cj2*x16268))+x16263+(((-1.0)*x16270*x16277))+((x16267*x16277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16279=cj5*cj5;
IkReal x16280=(r11*sj3);
IkReal x16281=(cj3*r10);
IkReal x16282=(cj3*r11);
IkReal x16283=(r10*sj3);
IkReal x16284=(cj5*r20*sj5);
IkReal x16285=(r21*x16279);
IkReal x16286=(r20*x16279);
IkReal x16287=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x16288 = IKatan2WithCheck(IkReal((((cj5*r22*x16280))+((r22*sj5*x16283)))),IkReal((((x16283*x16284))+((x16283*x16285))+(((-1.0)*x16280*x16287))+((x16280*x16286))+(((-1.0)*r21*x16283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16288.valid){
continue;
}
CheckValue<IkReal> x16289=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x16282*x16284))+(((-1.0)*x16282*x16285))+(((-1.0)*x16281*x16287))+((x16281*x16286))+((r21*x16282)))),-1);
if(!x16289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16288.value)+(((1.5707963267949)*(x16289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16290=IKsin(j4);
IkReal x16291=IKcos(j4);
IkReal x16292=((1.0)*r22);
IkReal x16293=(cj1*cj2);
IkReal x16294=(r11*sj5);
IkReal x16295=((1.0)*cj3);
IkReal x16296=(cj5*r21);
IkReal x16297=(r00*sj5);
IkReal x16298=(sj1*sj2);
IkReal x16299=(cj5*r01);
IkReal x16300=(r10*sj5);
IkReal x16301=(cj5*r10);
IkReal x16302=(r21*sj5);
IkReal x16303=(r01*sj5);
IkReal x16304=(cj5*r00);
IkReal x16305=(cj5*r20);
IkReal x16306=(r20*sj5);
IkReal x16307=(cj5*r11);
IkReal x16308=((1.0)*cj1*sj2);
IkReal x16309=((1.0)*cj2*sj1);
IkReal x16310=((1.0)*x16290);
IkReal x16311=(cj3*x16291);
IkReal x16312=((1.0)*x16291);
IkReal x16313=(sj3*x16291);
IkReal x16314=(x16309+x16308);
evalcond[0]=((((-1.0)*x16302*x16310))+((x16290*x16305))+(((-1.0)*x16291*x16292)));
evalcond[1]=((((-1.0)*x16303*x16310))+(((-1.0)*r02*x16312))+((x16290*x16304)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16312))+((x16290*x16301))+(((-1.0)*x16294*x16310)));
evalcond[3]=((((-1.0)*r12*x16290*x16295))+((x16294*x16311))+((sj3*x16307))+((sj3*x16300))+(((-1.0)*x16291*x16295*x16301)));
evalcond[4]=((((-1.0)*r12*sj3*x16310))+(((-1.0)*x16295*x16300))+(((-1.0)*x16295*x16307))+(((-1.0)*sj3*x16301*x16312))+((x16294*x16313)));
evalcond[5]=((((-1.0)*x16298))+x16293+((sj3*x16299))+((sj3*x16297))+((x16303*x16311))+(((-1.0)*r02*x16290*x16295))+(((-1.0)*x16291*x16295*x16304)));
evalcond[6]=(((sj3*x16296))+(((-1.0)*cj3*x16290*x16292))+((x16302*x16311))+(((-1.0)*x16314))+((sj3*x16306))+(((-1.0)*x16291*x16295*x16305)));
evalcond[7]=((((-1.0)*x16293))+(((-1.0)*x16295*x16306))+(((-1.0)*sj3*x16290*x16292))+x16298+((x16302*x16313))+(((-1.0)*sj3*x16305*x16312))+(((-1.0)*x16295*x16296)));
evalcond[8]=((((-1.0)*r02*sj3*x16310))+(((-1.0)*sj3*x16304*x16312))+((x16303*x16313))+(((-1.0)*x16314))+(((-1.0)*x16295*x16299))+(((-1.0)*x16295*x16297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16315=((1.0)*sj5);
CheckValue<IkReal> x16316 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x16315))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16316.valid){
continue;
}
CheckValue<IkReal> x16317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x16315))+(((-1.0)*cj5*r21)))),-1);
if(!x16317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16316.value)+(((1.5707963267949)*(x16317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16318=IKsin(j4);
IkReal x16319=IKcos(j4);
IkReal x16320=((1.0)*r22);
IkReal x16321=(cj1*cj2);
IkReal x16322=(r11*sj5);
IkReal x16323=((1.0)*cj3);
IkReal x16324=(cj5*r21);
IkReal x16325=(r00*sj5);
IkReal x16326=(sj1*sj2);
IkReal x16327=(cj5*r01);
IkReal x16328=(r10*sj5);
IkReal x16329=(cj5*r10);
IkReal x16330=(r21*sj5);
IkReal x16331=(r01*sj5);
IkReal x16332=(cj5*r00);
IkReal x16333=(cj5*r20);
IkReal x16334=(r20*sj5);
IkReal x16335=(cj5*r11);
IkReal x16336=((1.0)*cj1*sj2);
IkReal x16337=((1.0)*cj2*sj1);
IkReal x16338=((1.0)*x16318);
IkReal x16339=(cj3*x16319);
IkReal x16340=((1.0)*x16319);
IkReal x16341=(sj3*x16319);
IkReal x16342=(x16336+x16337);
evalcond[0]=((((-1.0)*x16330*x16338))+(((-1.0)*x16319*x16320))+((x16318*x16333)));
evalcond[1]=((((-1.0)*x16331*x16338))+(((-1.0)*r02*x16340))+((x16318*x16332)));
evalcond[2]=((1.0)+(((-1.0)*x16322*x16338))+(((-1.0)*r12*x16340))+((x16318*x16329)));
evalcond[3]=((((-1.0)*r12*x16318*x16323))+((x16322*x16339))+(((-1.0)*x16319*x16323*x16329))+((sj3*x16335))+((sj3*x16328)));
evalcond[4]=((((-1.0)*x16323*x16328))+(((-1.0)*x16323*x16335))+((x16322*x16341))+(((-1.0)*r12*sj3*x16338))+(((-1.0)*sj3*x16329*x16340)));
evalcond[5]=((((-1.0)*x16326))+x16321+(((-1.0)*x16319*x16323*x16332))+((x16331*x16339))+((sj3*x16327))+((sj3*x16325))+(((-1.0)*r02*x16318*x16323)));
evalcond[6]=((((-1.0)*cj3*x16318*x16320))+(((-1.0)*x16342))+(((-1.0)*x16319*x16323*x16333))+((x16330*x16339))+((sj3*x16334))+((sj3*x16324)));
evalcond[7]=((((-1.0)*x16321))+(((-1.0)*x16323*x16324))+(((-1.0)*x16323*x16334))+(((-1.0)*sj3*x16333*x16340))+(((-1.0)*sj3*x16318*x16320))+x16326+((x16330*x16341)));
evalcond[8]=((((-1.0)*x16323*x16325))+(((-1.0)*x16323*x16327))+(((-1.0)*x16342))+(((-1.0)*r02*sj3*x16338))+((x16331*x16341))+(((-1.0)*sj3*x16332*x16340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16343=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x16343.valid){
continue;
}
CheckValue<IkReal> x16344 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16343.value)))+(x16344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16345=IKsin(j4);
IkReal x16346=IKcos(j4);
IkReal x16347=((1.0)*r22);
IkReal x16348=(cj1*cj2);
IkReal x16349=(r11*sj5);
IkReal x16350=((1.0)*cj3);
IkReal x16351=(cj5*r21);
IkReal x16352=(r00*sj5);
IkReal x16353=(sj1*sj2);
IkReal x16354=(cj5*r01);
IkReal x16355=(r10*sj5);
IkReal x16356=(cj5*r10);
IkReal x16357=(r21*sj5);
IkReal x16358=(r01*sj5);
IkReal x16359=(cj5*r00);
IkReal x16360=(cj5*r20);
IkReal x16361=(r20*sj5);
IkReal x16362=(cj5*r11);
IkReal x16363=((1.0)*cj1*sj2);
IkReal x16364=((1.0)*cj2*sj1);
IkReal x16365=((1.0)*x16345);
IkReal x16366=(cj3*x16346);
IkReal x16367=((1.0)*x16346);
IkReal x16368=(sj3*x16346);
IkReal x16369=(x16363+x16364);
evalcond[0]=(((x16345*x16360))+(((-1.0)*x16346*x16347))+(((-1.0)*x16357*x16365)));
evalcond[1]=(((x16345*x16359))+(((-1.0)*x16358*x16365))+(((-1.0)*r02*x16367)));
evalcond[2]=((1.0)+((x16345*x16356))+(((-1.0)*r12*x16367))+(((-1.0)*x16349*x16365)));
evalcond[3]=(((sj3*x16362))+((sj3*x16355))+(((-1.0)*r12*x16345*x16350))+((x16349*x16366))+(((-1.0)*x16346*x16350*x16356)));
evalcond[4]=((((-1.0)*sj3*x16356*x16367))+(((-1.0)*x16350*x16362))+((x16349*x16368))+(((-1.0)*x16350*x16355))+(((-1.0)*r12*sj3*x16365)));
evalcond[5]=((((-1.0)*x16353))+(((-1.0)*r02*x16345*x16350))+((sj3*x16354))+((sj3*x16352))+x16348+(((-1.0)*x16346*x16350*x16359))+((x16358*x16366)));
evalcond[6]=(((sj3*x16361))+((sj3*x16351))+((x16357*x16366))+(((-1.0)*cj3*x16345*x16347))+(((-1.0)*x16346*x16350*x16360))+(((-1.0)*x16369)));
evalcond[7]=((((-1.0)*sj3*x16360*x16367))+(((-1.0)*sj3*x16345*x16347))+x16353+((x16357*x16368))+(((-1.0)*x16350*x16361))+(((-1.0)*x16350*x16351))+(((-1.0)*x16348)));
evalcond[8]=((((-1.0)*sj3*x16359*x16367))+(((-1.0)*x16350*x16352))+(((-1.0)*x16350*x16354))+(((-1.0)*x16369))+(((-1.0)*r02*sj3*x16365))+((x16358*x16368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16370=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16370);
rxp0_2=(py*r00);
rxp1_0=(r21*x16370);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16371=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16371);
rxp0_2=(py*r00);
rxp1_0=(r21*x16371);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16372=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16372);
rxp0_2=(py*r00);
rxp1_0=(r21*x16372);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16373=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16373);
rxp0_2=(py*r00);
rxp1_0=(r21*x16373);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16374=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16374);
rxp0_2=(py*r00);
rxp1_0=(r21*x16374);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16375=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16375);
rxp0_2=(py*r00);
rxp1_0=(r21*x16375);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16378=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x16378.valid){
continue;
}
IkReal x16376=x16378.value;
IkReal x16377=(cj0*x16376);
cj4array[0]=((((-1.0)*sj1*sj2*x16377))+((cj1*cj2*x16377)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16379=IKsin(j4);
IkReal x16380=IKcos(j4);
IkReal x16381=(cj5*r20);
IkReal x16382=((1.0)*x16380);
IkReal x16383=((1.0)*sj5*x16379);
evalcond[0]=((-1.0)*r12*x16379);
evalcond[1]=((((-1.0)*r12*x16382))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x16383))+((x16379*x16381)));
evalcond[3]=(((cj5*r00*x16379))+(((-1.0)*r01*x16383)));
evalcond[4]=((((-1.0)*x16381*x16382))+((r21*sj5*x16380))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16385=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16385.valid){
continue;
}
IkReal x16384=x16385.value;
cj4array[0]=(((cj2*sj1*x16384))+((cj1*sj2*x16384)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16386=IKsin(j4);
IkReal x16387=IKcos(j4);
IkReal x16388=(cj5*r00);
IkReal x16389=(r01*sj5);
IkReal x16390=((1.0)*cj0);
IkReal x16391=((1.0)*x16387);
IkReal x16392=((1.0)*x16386);
evalcond[0]=((-1.0)*r12*x16386);
evalcond[1]=((((-1.0)*x16390))+(((-1.0)*r12*x16391)));
evalcond[2]=(((cj5*r20*x16386))+(((-1.0)*r21*sj5*x16392)));
evalcond[3]=((((-1.0)*x16389*x16392))+((x16386*x16388)));
evalcond[4]=(((x16387*x16389))+((cj0*sj1*sj2))+(((-1.0)*x16388*x16391))+(((-1.0)*cj1*cj2*x16390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16393=IKPowWithIntegerCheck(r12,-1);
if(!x16393.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16393.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16394=IKsin(j4);
IkReal x16395=IKcos(j4);
IkReal x16396=(r01*sj5);
IkReal x16397=((1.0)*cj1);
IkReal x16398=(r21*sj5);
IkReal x16399=((1.0)*x16394);
IkReal x16400=(cj5*x16394);
IkReal x16401=((1.0)*cj5*x16395);
evalcond[0]=((-1.0)*r12*x16394);
evalcond[1]=(((r20*x16400))+(((-1.0)*x16398*x16399)));
evalcond[2]=((((-1.0)*x16396*x16399))+((r00*x16400)));
evalcond[3]=((((-1.0)*sj2*x16397))+(((-1.0)*cj2*sj1))+((x16395*x16398))+(((-1.0)*r20*x16401)));
evalcond[4]=((((-1.0)*cj0*cj2*x16397))+(((-1.0)*r00*x16401))+((x16395*x16396))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16402=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16402);
rxp0_2=(py*r00);
rxp1_0=(r21*x16402);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16403=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16403);
rxp0_2=(py*r00);
rxp1_0=(r21*x16403);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16404=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16404);
rxp0_2=(py*r00);
rxp1_0=(r21*x16404);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16407=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x16407.valid){
continue;
}
IkReal x16405=x16407.value;
IkReal x16406=(cj0*x16405);
cj4array[0]=((((-1.0)*sj1*sj2*x16406))+((cj1*cj2*x16406)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16408=IKsin(j4);
IkReal x16409=IKcos(j4);
IkReal x16410=(cj5*r20);
IkReal x16411=((1.0)*sj5);
evalcond[0]=(r12*x16408);
evalcond[1]=((((-1.0)*r12*x16409))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x16408*x16411))+((x16408*x16410)));
evalcond[3]=(((cj5*r00*x16408))+(((-1.0)*r01*x16408*x16411)));
evalcond[4]=(((x16409*x16410))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x16409*x16411))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16413=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16413.valid){
continue;
}
IkReal x16412=x16413.value;
cj4array[0]=(((cj2*sj1*x16412))+((cj1*sj2*x16412)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16414=IKsin(j4);
IkReal x16415=IKcos(j4);
IkReal x16416=(cj5*r00);
IkReal x16417=((1.0)*cj0);
IkReal x16418=((1.0)*r01*sj5);
evalcond[0]=(r12*x16414);
evalcond[1]=((((-1.0)*r12*x16415))+(((-1.0)*x16417)));
evalcond[2]=(((cj5*r20*x16414))+(((-1.0)*r21*sj5*x16414)));
evalcond[3]=((((-1.0)*x16414*x16418))+((x16414*x16416)));
evalcond[4]=((((-1.0)*x16415*x16418))+((x16415*x16416))+((cj0*sj1*sj2))+(((-1.0)*cj1*cj2*x16417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16419=IKPowWithIntegerCheck(r12,-1);
if(!x16419.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16419.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16420=IKsin(j4);
IkReal x16421=IKcos(j4);
IkReal x16422=((1.0)*cj1);
IkReal x16423=((1.0)*sj5);
IkReal x16424=(cj5*x16421);
IkReal x16425=(cj5*x16420);
evalcond[0]=(r12*x16420);
evalcond[1]=((((-1.0)*r21*x16420*x16423))+((r20*x16425)));
evalcond[2]=(((r00*x16425))+(((-1.0)*r01*x16420*x16423)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*x16421*x16423))+(((-1.0)*sj2*x16422))+((r20*x16424)));
evalcond[4]=((((-1.0)*r01*x16421*x16423))+(((-1.0)*cj0*cj2*x16422))+((r00*x16424))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16426=((-1.0)*r01);
CheckValue<IkReal> x16427 = IKatan2WithCheck(IkReal(r00),IkReal(x16426),IKFAST_ATAN2_MAGTHRESH);
if(!x16427.valid){
continue;
}
IkReal gconst66=((-1.0)*(x16427.value));
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16426;
CheckValue<IkReal> x16428 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16428.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x16428.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16429=((-1.0)*r01);
IkReal x16430=((-1.0)*py);
CheckValue<IkReal> x16432 = IKatan2WithCheck(IkReal(r00),IkReal(x16429),IKFAST_ATAN2_MAGTHRESH);
if(!x16432.valid){
continue;
}
IkReal x16431=((-1.0)*(x16432.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16430);
rxp0_2=(py*r00);
rxp1_0=(r21*x16430);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x16431;
IkReal gconst66=x16431;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16429;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16433=((-1.0)*r01);
IkReal x16434=((-1.0)*py);
CheckValue<IkReal> x16436 = IKatan2WithCheck(IkReal(r00),IkReal(x16433),IKFAST_ATAN2_MAGTHRESH);
if(!x16436.valid){
continue;
}
IkReal x16435=((-1.0)*(x16436.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16434);
rxp0_2=(py*r00);
rxp1_0=(r21*x16434);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x16435;
IkReal gconst66=x16435;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16433;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16437=((-1.0)*r01);
IkReal x16438=((-1.0)*py);
CheckValue<IkReal> x16440 = IKatan2WithCheck(IkReal(r00),IkReal(x16437),IKFAST_ATAN2_MAGTHRESH);
if(!x16440.valid){
continue;
}
IkReal x16439=((-1.0)*(x16440.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16438);
rxp0_2=(py*r00);
rxp1_0=(r21*x16438);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x16439;
IkReal gconst66=x16439;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16437;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r21*sj3))+((r01*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16441=IKPowWithIntegerCheck(r12,-1);
if(!x16441.valid){
continue;
}
CheckValue<IkReal> x16442=IKPowWithIntegerCheck(sj3,-1);
if(!x16442.valid){
continue;
}
CheckValue<IkReal> x16443=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x16443.valid){
continue;
}
if( IKabs(((x16441.value)*(x16442.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16443.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16441.value)*(x16442.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((x16443.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16441.value)*(x16442.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((x16443.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16444=IKsin(j4);
IkReal x16445=IKcos(j4);
IkReal x16446=(gconst67*r21);
IkReal x16447=(r01*sj3);
IkReal x16448=(cj2*sj1);
IkReal x16449=(sj1*sj2);
IkReal x16450=(gconst68*r00);
IkReal x16451=(cj1*sj2);
IkReal x16452=((1.0)*gconst68);
IkReal x16453=(gconst67*sj3);
IkReal x16454=(cj3*r01);
IkReal x16455=((1.0)*x16444);
IkReal x16456=((1.0)*cj1*cj2);
IkReal x16457=(gconst67*x16445);
IkReal x16458=(sj3*x16445);
IkReal x16459=((1.0)*cj3*r20);
IkReal x16460=(gconst68*x16445);
IkReal x16461=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x16445))+(((-1.0)*cj0)));
evalcond[1]=(((gconst68*r20*x16444))+(((-1.0)*x16446*x16455)));
evalcond[2]=(sj0+((x16444*x16450))+(((-1.0)*gconst67*r01*x16455)));
evalcond[3]=(((sj0*x16451))+((sj0*x16448))+(((-1.0)*r12*sj3*x16455)));
evalcond[4]=((((-1.0)*sj0*x16456))+((sj0*x16449))+(((-1.0)*cj3*r12*x16455)));
evalcond[5]=(((cj3*x16445*x16446))+(((-1.0)*x16448))+(((-1.0)*cj3*r20*x16445*x16452))+((gconst68*r21*sj3))+((r20*x16453))+(((-1.0)*x16451)));
evalcond[6]=((((-1.0)*cj3*r21*x16452))+(((-1.0)*x16456))+x16449+((x16446*x16458))+(((-1.0)*gconst67*x16459))+(((-1.0)*r20*x16452*x16458)));
evalcond[7]=(((r00*x16453))+((x16454*x16457))+(((-1.0)*cj0*x16456))+((gconst68*x16447))+(((-1.0)*cj3*x16445*x16450))+((cj0*x16449)));
evalcond[8]=((((-1.0)*gconst67*x16461))+(((-1.0)*x16450*x16458))+((cj0*x16451))+(((-1.0)*x16452*x16454))+((x16447*x16457))+((cj0*x16448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16463=IKPowWithIntegerCheck(r12,-1);
if(!x16463.valid){
continue;
}
IkReal x16462=x16463.value;
CheckValue<IkReal> x16464=IKPowWithIntegerCheck(cj3,-1);
if(!x16464.valid){
continue;
}
if( IKabs((x16462*(x16464.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16462)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16462*(x16464.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x16462))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16462*(x16464.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x16462));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16465=IKsin(j4);
IkReal x16466=IKcos(j4);
IkReal x16467=(gconst67*r21);
IkReal x16468=(r01*sj3);
IkReal x16469=(cj2*sj1);
IkReal x16470=(sj1*sj2);
IkReal x16471=(gconst68*r00);
IkReal x16472=(cj1*sj2);
IkReal x16473=((1.0)*gconst68);
IkReal x16474=(gconst67*sj3);
IkReal x16475=(cj3*r01);
IkReal x16476=((1.0)*x16465);
IkReal x16477=((1.0)*cj1*cj2);
IkReal x16478=(gconst67*x16466);
IkReal x16479=(sj3*x16466);
IkReal x16480=((1.0)*cj3*r20);
IkReal x16481=(gconst68*x16466);
IkReal x16482=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x16466))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16467*x16476))+((gconst68*r20*x16465)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x16476))+((x16465*x16471)));
evalcond[3]=((((-1.0)*r12*sj3*x16476))+((sj0*x16469))+((sj0*x16472)));
evalcond[4]=(((sj0*x16470))+(((-1.0)*sj0*x16477))+(((-1.0)*cj3*r12*x16476)));
evalcond[5]=(((cj3*x16466*x16467))+(((-1.0)*x16472))+(((-1.0)*x16469))+((gconst68*r21*sj3))+(((-1.0)*cj3*r20*x16466*x16473))+((r20*x16474)));
evalcond[6]=((((-1.0)*r20*x16473*x16479))+(((-1.0)*x16477))+x16470+(((-1.0)*cj3*r21*x16473))+((x16467*x16479))+(((-1.0)*gconst67*x16480)));
evalcond[7]=(((gconst68*x16468))+(((-1.0)*cj3*x16466*x16471))+((x16475*x16478))+((r00*x16474))+(((-1.0)*cj0*x16477))+((cj0*x16470)));
evalcond[8]=((((-1.0)*x16473*x16475))+((x16468*x16478))+(((-1.0)*gconst67*x16482))+(((-1.0)*x16471*x16479))+((cj0*x16469))+((cj0*x16472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16484=IKPowWithIntegerCheck(r12,-1);
if(!x16484.valid){
continue;
}
IkReal x16483=x16484.value;
CheckValue<IkReal> x16485=IKPowWithIntegerCheck(sj3,-1);
if(!x16485.valid){
continue;
}
if( IKabs((x16483*(x16485.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16483)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16483*(x16485.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16483))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16483*(x16485.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16483));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16486=IKsin(j4);
IkReal x16487=IKcos(j4);
IkReal x16488=(gconst67*r21);
IkReal x16489=(r01*sj3);
IkReal x16490=(cj2*sj1);
IkReal x16491=(sj1*sj2);
IkReal x16492=(gconst68*r00);
IkReal x16493=(cj1*sj2);
IkReal x16494=((1.0)*gconst68);
IkReal x16495=(gconst67*sj3);
IkReal x16496=(cj3*r01);
IkReal x16497=((1.0)*x16486);
IkReal x16498=((1.0)*cj1*cj2);
IkReal x16499=(gconst67*x16487);
IkReal x16500=(sj3*x16487);
IkReal x16501=((1.0)*cj3*r20);
IkReal x16502=(gconst68*x16487);
IkReal x16503=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x16487))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16488*x16497))+((gconst68*r20*x16486)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x16497))+((x16486*x16492)));
evalcond[3]=(((sj0*x16493))+((sj0*x16490))+(((-1.0)*r12*sj3*x16497)));
evalcond[4]=((((-1.0)*cj3*r12*x16497))+((sj0*x16491))+(((-1.0)*sj0*x16498)));
evalcond[5]=(((cj3*x16487*x16488))+(((-1.0)*cj3*r20*x16487*x16494))+((gconst68*r21*sj3))+(((-1.0)*x16490))+(((-1.0)*x16493))+((r20*x16495)));
evalcond[6]=((((-1.0)*gconst67*x16501))+x16491+(((-1.0)*cj3*r21*x16494))+(((-1.0)*r20*x16494*x16500))+(((-1.0)*x16498))+((x16488*x16500)));
evalcond[7]=(((x16496*x16499))+(((-1.0)*cj3*x16487*x16492))+((gconst68*x16489))+((r00*x16495))+((cj0*x16491))+(((-1.0)*cj0*x16498)));
evalcond[8]=((((-1.0)*gconst67*x16503))+(((-1.0)*x16492*x16500))+((cj0*x16493))+((cj0*x16490))+((x16489*x16499))+(((-1.0)*x16494*x16496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x16504 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16504.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x16504.value))));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
CheckValue<IkReal> x16505 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16505.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16506=((-1.0)*py);
CheckValue<IkReal> x16508 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16508.valid){
continue;
}
IkReal x16507=((1.0)*(x16508.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16506);
rxp0_2=(py*r00);
rxp1_0=(r21*x16506);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16507)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16507)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16509=((-1.0)*py);
CheckValue<IkReal> x16511 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16511.valid){
continue;
}
IkReal x16510=((1.0)*(x16511.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16509);
rxp0_2=(py*r00);
rxp1_0=(r21*x16509);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16510)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16510)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16512=((-1.0)*py);
CheckValue<IkReal> x16514 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16514.valid){
continue;
}
IkReal x16513=((1.0)*(x16514.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16512);
rxp0_2=(py*r00);
rxp1_0=(r21*x16512);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16513)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16513)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
IkReal x16515=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r00*r21*x16515))+(((-1.0)*r01*r20*x16515)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16516=IKPowWithIntegerCheck(r12,-1);
if(!x16516.valid){
continue;
}
CheckValue<IkReal> x16517=IKPowWithIntegerCheck(sj3,-1);
if(!x16517.valid){
continue;
}
CheckValue<IkReal> x16518=IKPowWithIntegerCheck(((((-1.0)*gconst71*r20*sj3))+((gconst70*r21*sj3))),-1);
if(!x16518.valid){
continue;
}
if( IKabs(((x16516.value)*(x16517.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16518.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16516.value)*(x16517.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((x16518.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16516.value)*(x16517.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((x16518.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16519=IKsin(j4);
IkReal x16520=IKcos(j4);
IkReal x16521=(gconst70*r21);
IkReal x16522=(gconst70*r01);
IkReal x16523=(sj1*sj2);
IkReal x16524=((1.0)*cj2);
IkReal x16525=(gconst71*sj3);
IkReal x16526=(cj1*sj2);
IkReal x16527=(gconst70*r00);
IkReal x16528=((1.0)*cj3);
IkReal x16529=(cj2*sj1);
IkReal x16530=(gconst70*r20);
IkReal x16531=((1.0)*x16519);
IkReal x16532=(gconst71*x16528);
IkReal x16533=(r00*x16520);
IkReal x16534=(cj3*x16520);
IkReal x16535=(sj3*x16520);
IkReal x16536=(gconst71*x16519);
evalcond[0]=((((-1.0)*r12*x16520))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x16536))+(((-1.0)*x16521*x16531)));
evalcond[2]=(sj0+(((-1.0)*x16522*x16531))+((r00*x16536)));
evalcond[3]=(((sj0*x16526))+((sj0*x16529))+(((-1.0)*r12*sj3*x16531)));
evalcond[4]=(((sj0*x16523))+(((-1.0)*cj1*sj0*x16524))+(((-1.0)*r12*x16519*x16528)));
evalcond[5]=(((r21*x16525))+(((-1.0)*r20*x16520*x16532))+(((-1.0)*x16526))+((sj3*x16530))+(((-1.0)*sj1*x16524))+((x16521*x16534)));
evalcond[6]=((((-1.0)*cj1*x16524))+x16523+(((-1.0)*r20*x16520*x16525))+(((-1.0)*x16528*x16530))+(((-1.0)*r21*x16532))+((x16521*x16535)));
evalcond[7]=((((-1.0)*x16532*x16533))+(((-1.0)*cj0*cj1*x16524))+((sj3*x16527))+((r01*x16525))+((cj0*x16523))+((x16522*x16534)));
evalcond[8]=((((-1.0)*x16527*x16528))+(((-1.0)*r01*x16532))+(((-1.0)*x16525*x16533))+((cj0*x16526))+((cj0*x16529))+((x16522*x16535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16538=IKPowWithIntegerCheck(r12,-1);
if(!x16538.valid){
continue;
}
IkReal x16537=x16538.value;
CheckValue<IkReal> x16539=IKPowWithIntegerCheck(cj3,-1);
if(!x16539.valid){
continue;
}
if( IKabs((x16537*(x16539.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16537)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16537*(x16539.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x16537))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16537*(x16539.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x16537));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16540=IKsin(j4);
IkReal x16541=IKcos(j4);
IkReal x16542=(gconst70*r21);
IkReal x16543=(gconst70*r01);
IkReal x16544=(sj1*sj2);
IkReal x16545=((1.0)*cj2);
IkReal x16546=(gconst71*sj3);
IkReal x16547=(cj1*sj2);
IkReal x16548=(gconst70*r00);
IkReal x16549=((1.0)*cj3);
IkReal x16550=(cj2*sj1);
IkReal x16551=(gconst70*r20);
IkReal x16552=((1.0)*x16540);
IkReal x16553=(gconst71*x16549);
IkReal x16554=(r00*x16541);
IkReal x16555=(cj3*x16541);
IkReal x16556=(sj3*x16541);
IkReal x16557=(gconst71*x16540);
evalcond[0]=((((-1.0)*r12*x16541))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x16557))+(((-1.0)*x16542*x16552)));
evalcond[2]=(sj0+(((-1.0)*x16543*x16552))+((r00*x16557)));
evalcond[3]=(((sj0*x16547))+(((-1.0)*r12*sj3*x16552))+((sj0*x16550)));
evalcond[4]=(((sj0*x16544))+(((-1.0)*cj1*sj0*x16545))+(((-1.0)*r12*x16540*x16549)));
evalcond[5]=((((-1.0)*x16547))+((x16542*x16555))+((r21*x16546))+(((-1.0)*sj1*x16545))+((sj3*x16551))+(((-1.0)*r20*x16541*x16553)));
evalcond[6]=((((-1.0)*cj1*x16545))+x16544+((x16542*x16556))+(((-1.0)*r20*x16541*x16546))+(((-1.0)*x16549*x16551))+(((-1.0)*r21*x16553)));
evalcond[7]=((((-1.0)*cj0*cj1*x16545))+((sj3*x16548))+(((-1.0)*x16553*x16554))+((x16543*x16555))+((r01*x16546))+((cj0*x16544)));
evalcond[8]=((((-1.0)*x16546*x16554))+((x16543*x16556))+(((-1.0)*x16548*x16549))+((cj0*x16547))+(((-1.0)*r01*x16553))+((cj0*x16550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16559=IKPowWithIntegerCheck(r12,-1);
if(!x16559.valid){
continue;
}
IkReal x16558=x16559.value;
CheckValue<IkReal> x16560=IKPowWithIntegerCheck(sj3,-1);
if(!x16560.valid){
continue;
}
if( IKabs((x16558*(x16560.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16558)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16558*(x16560.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16558))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16558*(x16560.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16558));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16561=IKsin(j4);
IkReal x16562=IKcos(j4);
IkReal x16563=(gconst70*r21);
IkReal x16564=(gconst70*r01);
IkReal x16565=(sj1*sj2);
IkReal x16566=((1.0)*cj2);
IkReal x16567=(gconst71*sj3);
IkReal x16568=(cj1*sj2);
IkReal x16569=(gconst70*r00);
IkReal x16570=((1.0)*cj3);
IkReal x16571=(cj2*sj1);
IkReal x16572=(gconst70*r20);
IkReal x16573=((1.0)*x16561);
IkReal x16574=(gconst71*x16570);
IkReal x16575=(r00*x16562);
IkReal x16576=(cj3*x16562);
IkReal x16577=(sj3*x16562);
IkReal x16578=(gconst71*x16561);
evalcond[0]=((((-1.0)*r12*x16562))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16563*x16573))+((r20*x16578)));
evalcond[2]=(((r00*x16578))+sj0+(((-1.0)*x16564*x16573)));
evalcond[3]=(((sj0*x16571))+((sj0*x16568))+(((-1.0)*r12*sj3*x16573)));
evalcond[4]=((((-1.0)*r12*x16561*x16570))+(((-1.0)*cj1*sj0*x16566))+((sj0*x16565)));
evalcond[5]=((((-1.0)*sj1*x16566))+((x16563*x16576))+(((-1.0)*r20*x16562*x16574))+(((-1.0)*x16568))+((r21*x16567))+((sj3*x16572)));
evalcond[6]=((((-1.0)*r20*x16562*x16567))+(((-1.0)*x16570*x16572))+(((-1.0)*r21*x16574))+x16565+(((-1.0)*cj1*x16566))+((x16563*x16577)));
evalcond[7]=(((r01*x16567))+((cj0*x16565))+((x16564*x16576))+(((-1.0)*x16574*x16575))+(((-1.0)*cj0*cj1*x16566))+((sj3*x16569)));
evalcond[8]=(((cj0*x16571))+((cj0*x16568))+((x16564*x16577))+(((-1.0)*r01*x16574))+(((-1.0)*x16567*x16575))+(((-1.0)*x16569*x16570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16579=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16579);
rxp0_2=(py*r00);
rxp1_0=(r21*x16579);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16580=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16580);
rxp0_2=(py*r00);
rxp1_0=(r21*x16580);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16581=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16581);
rxp0_2=(py*r00);
rxp1_0=(r21*x16581);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16584=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x16584.valid){
continue;
}
IkReal x16582=x16584.value;
IkReal x16583=((1.0)*cj0*x16582);
cj4array[0]=((((-1.0)*cj2*sj1*x16583))+(((-1.0)*cj1*sj2*x16583)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16585=IKsin(j4);
IkReal x16586=IKcos(j4);
IkReal x16587=(cj5*r20);
IkReal x16588=((1.0)*x16586);
IkReal x16589=((1.0)*sj5*x16585);
evalcond[0]=((-1.0)*r12*x16585);
evalcond[1]=((((-1.0)*r12*x16588))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x16589))+((x16585*x16587)));
evalcond[3]=((((-1.0)*r01*x16589))+((cj5*r00*x16585)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x16587*x16588))+((r21*sj5*x16586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16591=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16591.valid){
continue;
}
IkReal x16590=x16591.value;
cj4array[0]=((((-1.0)*sj1*sj2*x16590))+((cj1*cj2*x16590)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16592=IKsin(j4);
IkReal x16593=IKcos(j4);
IkReal x16594=(cj5*r00);
IkReal x16595=(r01*sj5);
IkReal x16596=((1.0)*x16593);
IkReal x16597=((1.0)*x16592);
evalcond[0]=((-1.0)*r12*x16592);
evalcond[1]=((((-1.0)*r12*x16596))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x16597))+((cj5*r20*x16592)));
evalcond[3]=(((x16592*x16594))+(((-1.0)*x16595*x16597)));
evalcond[4]=(((cj0*cj2*sj1))+((x16593*x16595))+(((-1.0)*x16594*x16596))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16598=IKPowWithIntegerCheck(r12,-1);
if(!x16598.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16598.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16599=IKsin(j4);
IkReal x16600=IKcos(j4);
IkReal x16601=(sj5*x16600);
IkReal x16602=(cj5*x16599);
IkReal x16603=((1.0)*sj5*x16599);
IkReal x16604=((1.0)*cj5*x16600);
evalcond[0]=((-1.0)*r12*x16599);
evalcond[1]=((((-1.0)*r21*x16603))+((r20*x16602)));
evalcond[2]=((((-1.0)*r01*x16603))+((r00*x16602)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x16601))+(((-1.0)*r20*x16604)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*r00*x16604))+((cj0*cj1*sj2))+((r01*x16601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16605=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16605);
rxp0_2=(py*r00);
rxp1_0=(r21*x16605);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16606=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16606);
rxp0_2=(py*r00);
rxp1_0=(r21*x16606);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16607=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16607);
rxp0_2=(py*r00);
rxp1_0=(r21*x16607);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16610=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x16610.valid){
continue;
}
IkReal x16608=x16610.value;
IkReal x16609=((1.0)*cj0*x16608);
cj4array[0]=((((-1.0)*cj2*sj1*x16609))+(((-1.0)*cj1*sj2*x16609)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16611=IKsin(j4);
IkReal x16612=IKcos(j4);
IkReal x16613=(cj5*r20);
IkReal x16614=((1.0)*sj5);
evalcond[0]=(r12*x16611);
evalcond[1]=((((-1.0)*r12*x16612))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x16611*x16614))+((x16611*x16613)));
evalcond[3]=((((-1.0)*r01*x16611*x16614))+((cj5*r00*x16611)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x16612*x16614))+((x16612*x16613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16616=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16616.valid){
continue;
}
IkReal x16615=x16616.value;
cj4array[0]=((((-1.0)*sj1*sj2*x16615))+((cj1*cj2*x16615)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16617=IKsin(j4);
IkReal x16618=IKcos(j4);
IkReal x16619=(cj5*r00);
IkReal x16620=((1.0)*r01*sj5);
evalcond[0]=(r12*x16617);
evalcond[1]=((((-1.0)*r12*x16618))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x16617))+((cj5*r20*x16617)));
evalcond[3]=((((-1.0)*x16617*x16620))+((x16617*x16619)));
evalcond[4]=(((x16618*x16619))+(((-1.0)*x16618*x16620))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16621=IKPowWithIntegerCheck(r12,-1);
if(!x16621.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16621.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16622=IKsin(j4);
IkReal x16623=IKcos(j4);
IkReal x16624=(cj5*x16623);
IkReal x16625=((1.0)*r21*sj5);
IkReal x16626=((1.0)*r01*sj5);
IkReal x16627=(cj5*x16622);
evalcond[0]=(r12*x16622);
evalcond[1]=((((-1.0)*x16622*x16625))+((r20*x16627)));
evalcond[2]=((((-1.0)*x16622*x16626))+((r00*x16627)));
evalcond[3]=((((-1.0)*x16623*x16625))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x16624)));
evalcond[4]=((((-1.0)*x16623*x16626))+((r00*x16624))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16629=IKPowWithIntegerCheck(r12,-1);
if(!x16629.valid){
continue;
}
IkReal x16628=x16629.value;
CheckValue<IkReal> x16630=IKPowWithIntegerCheck(sj3,-1);
if(!x16630.valid){
continue;
}
if( IKabs((x16628*(x16630.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16628)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16628*(x16630.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16628))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16628*(x16630.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16628));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16631=IKsin(j4);
IkReal x16632=IKcos(j4);
IkReal x16633=(cj0*cj1);
IkReal x16634=((1.0)*cj2);
IkReal x16635=(cj2*sj1);
IkReal x16636=((1.0)*cj3);
IkReal x16637=(cj5*r21);
IkReal x16638=(sj1*sj2);
IkReal x16639=(cj5*r01);
IkReal x16640=(r20*sj5);
IkReal x16641=(r01*sj5);
IkReal x16642=(cj1*sj2);
IkReal x16643=(r00*sj5);
IkReal x16644=(cj5*r00);
IkReal x16645=(cj5*r20);
IkReal x16646=((1.0)*x16631);
IkReal x16647=((1.0)*x16632);
IkReal x16648=(r21*sj5*x16632);
evalcond[0]=((((-1.0)*r12*x16647))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*sj5*x16646))+((x16631*x16645)));
evalcond[2]=(sj0+((x16631*x16644))+(((-1.0)*x16641*x16646)));
evalcond[3]=(((sj0*x16642))+(((-1.0)*r12*sj3*x16646))+((sj0*x16635)));
evalcond[4]=((((-1.0)*cj1*sj0*x16634))+(((-1.0)*r12*x16631*x16636))+((sj0*x16638)));
evalcond[5]=(((sj3*x16640))+((cj3*x16648))+(((-1.0)*x16642))+(((-1.0)*sj1*x16634))+((sj3*x16637))+(((-1.0)*x16632*x16636*x16645)));
evalcond[6]=(((sj3*x16648))+x16638+(((-1.0)*sj3*x16645*x16647))+(((-1.0)*x16636*x16637))+(((-1.0)*cj1*x16634))+(((-1.0)*x16636*x16640)));
evalcond[7]=(((sj3*x16643))+(((-1.0)*x16633*x16634))+((cj0*x16638))+((cj3*x16632*x16641))+((sj3*x16639))+(((-1.0)*x16632*x16636*x16644)));
evalcond[8]=(((cj0*x16635))+(((-1.0)*sj3*x16644*x16647))+((sj2*x16633))+((sj3*x16632*x16641))+(((-1.0)*x16636*x16639))+(((-1.0)*x16636*x16643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16649=((1.0)*sj5);
IkReal x16650=((1.0)*cj5);
CheckValue<IkReal> x16651=IKPowWithIntegerCheck(((((-1.0)*r01*x16649))+((cj5*r00))),-1);
if(!x16651.valid){
continue;
}
CheckValue<IkReal> x16652=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x16650))),-1);
if(!x16652.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x16651.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16652.value)*((((cj2*sj1))+(((-1.0)*r20*sj3*x16649))+(((-1.0)*r21*sj3*x16650))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x16651.value)))+IKsqr(((x16652.value)*((((cj2*sj1))+(((-1.0)*r20*sj3*x16649))+(((-1.0)*r21*sj3*x16650))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x16651.value)), ((x16652.value)*((((cj2*sj1))+(((-1.0)*r20*sj3*x16649))+(((-1.0)*r21*sj3*x16650))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16653=IKsin(j4);
IkReal x16654=IKcos(j4);
IkReal x16655=(cj0*cj1);
IkReal x16656=((1.0)*cj2);
IkReal x16657=(cj2*sj1);
IkReal x16658=((1.0)*cj3);
IkReal x16659=(cj5*r21);
IkReal x16660=(sj1*sj2);
IkReal x16661=(cj5*r01);
IkReal x16662=(r20*sj5);
IkReal x16663=(r01*sj5);
IkReal x16664=(cj1*sj2);
IkReal x16665=(r00*sj5);
IkReal x16666=(cj5*r00);
IkReal x16667=(cj5*r20);
IkReal x16668=((1.0)*x16653);
IkReal x16669=((1.0)*x16654);
IkReal x16670=(r21*sj5*x16654);
evalcond[0]=((((-1.0)*r12*x16669))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*sj5*x16668))+((x16653*x16667)));
evalcond[2]=(sj0+(((-1.0)*x16663*x16668))+((x16653*x16666)));
evalcond[3]=(((sj0*x16664))+((sj0*x16657))+(((-1.0)*r12*sj3*x16668)));
evalcond[4]=(((sj0*x16660))+(((-1.0)*cj1*sj0*x16656))+(((-1.0)*r12*x16653*x16658)));
evalcond[5]=(((sj3*x16662))+(((-1.0)*x16654*x16658*x16667))+(((-1.0)*sj1*x16656))+((sj3*x16659))+(((-1.0)*x16664))+((cj3*x16670)));
evalcond[6]=(x16660+((sj3*x16670))+(((-1.0)*x16658*x16662))+(((-1.0)*x16658*x16659))+(((-1.0)*cj1*x16656))+(((-1.0)*sj3*x16667*x16669)));
evalcond[7]=(((cj3*x16654*x16663))+((cj0*x16660))+((sj3*x16661))+((sj3*x16665))+(((-1.0)*x16654*x16658*x16666))+(((-1.0)*x16655*x16656)));
evalcond[8]=(((cj0*x16657))+(((-1.0)*x16658*x16665))+(((-1.0)*x16658*x16661))+((sj2*x16655))+(((-1.0)*sj3*x16666*x16669))+((sj3*x16654*x16663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16671=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x16671.valid){
continue;
}
CheckValue<IkReal> x16672=IKPowWithIntegerCheck(r12,-1);
if(!x16672.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x16671.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x16672.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x16671.value)))+IKsqr(((-1.0)*cj0*(x16672.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x16671.value)), ((-1.0)*cj0*(x16672.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16673=IKsin(j4);
IkReal x16674=IKcos(j4);
IkReal x16675=(cj0*cj1);
IkReal x16676=((1.0)*cj2);
IkReal x16677=(cj2*sj1);
IkReal x16678=((1.0)*cj3);
IkReal x16679=(cj5*r21);
IkReal x16680=(sj1*sj2);
IkReal x16681=(cj5*r01);
IkReal x16682=(r20*sj5);
IkReal x16683=(r01*sj5);
IkReal x16684=(cj1*sj2);
IkReal x16685=(r00*sj5);
IkReal x16686=(cj5*r00);
IkReal x16687=(cj5*r20);
IkReal x16688=((1.0)*x16673);
IkReal x16689=((1.0)*x16674);
IkReal x16690=(r21*sj5*x16674);
evalcond[0]=((((-1.0)*r12*x16689))+(((-1.0)*cj0)));
evalcond[1]=(((x16673*x16687))+(((-1.0)*r21*sj5*x16688)));
evalcond[2]=(sj0+(((-1.0)*x16683*x16688))+((x16673*x16686)));
evalcond[3]=(((sj0*x16677))+(((-1.0)*r12*sj3*x16688))+((sj0*x16684)));
evalcond[4]=(((sj0*x16680))+(((-1.0)*r12*x16673*x16678))+(((-1.0)*cj1*sj0*x16676)));
evalcond[5]=((((-1.0)*x16684))+((sj3*x16679))+(((-1.0)*x16674*x16678*x16687))+(((-1.0)*sj1*x16676))+((sj3*x16682))+((cj3*x16690)));
evalcond[6]=((((-1.0)*cj1*x16676))+x16680+(((-1.0)*x16678*x16679))+(((-1.0)*sj3*x16687*x16689))+((sj3*x16690))+(((-1.0)*x16678*x16682)));
evalcond[7]=((((-1.0)*x16674*x16678*x16686))+((cj0*x16680))+((sj3*x16685))+((sj3*x16681))+(((-1.0)*x16675*x16676))+((cj3*x16674*x16683)));
evalcond[8]=(((sj3*x16674*x16683))+((sj2*x16675))+((cj0*x16677))+(((-1.0)*sj3*x16686*x16689))+(((-1.0)*x16678*x16681))+(((-1.0)*x16678*x16685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16691=((1.0)*sj5);
CheckValue<IkReal> x16692=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x16692.valid){
continue;
}
CheckValue<IkReal> x16693 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x16691))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x16691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16692.value)))+(x16693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16694=IKsin(j4);
IkReal x16695=IKcos(j4);
IkReal x16696=(cj5*sj3);
IkReal x16697=(r11*sj5);
IkReal x16698=(cj2*sj1);
IkReal x16699=(sj1*sj2);
IkReal x16700=(r21*sj5);
IkReal x16701=(r01*sj5);
IkReal x16702=(cj1*sj2);
IkReal x16703=(sj3*sj5);
IkReal x16704=(cj3*cj5);
IkReal x16705=((1.0)*x16695);
IkReal x16706=((1.0)*x16694);
IkReal x16707=(cj3*x16695);
IkReal x16708=((1.0)*cj1*cj2);
IkReal x16709=((1.0)*x16704);
IkReal x16710=((1.0)*cj3*sj5);
IkReal x16711=(cj5*x16694);
IkReal x16712=(sj3*x16695);
evalcond[0]=((((-1.0)*x16700*x16706))+(((-1.0)*r22*x16705))+((r20*x16711)));
evalcond[1]=((((-1.0)*x16701*x16706))+sj0+(((-1.0)*r02*x16705))+((r00*x16711)));
evalcond[2]=((((-1.0)*x16697*x16706))+(((-1.0)*r12*x16705))+((r10*x16711))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x16703))+((x16700*x16707))+(((-1.0)*r20*x16704*x16705))+(((-1.0)*x16702))+(((-1.0)*cj3*r22*x16706))+(((-1.0)*x16698))+((r21*x16696)));
evalcond[4]=(x16699+((x16700*x16712))+(((-1.0)*r20*x16696*x16705))+(((-1.0)*r22*sj3*x16706))+(((-1.0)*r21*x16709))+(((-1.0)*x16708))+(((-1.0)*r20*x16710)));
evalcond[5]=(((x16701*x16707))+((cj0*x16699))+(((-1.0)*cj3*r02*x16706))+((r00*x16703))+(((-1.0)*r00*x16704*x16705))+((r01*x16696))+(((-1.0)*cj0*x16708)));
evalcond[6]=(((x16697*x16707))+((r11*x16696))+(((-1.0)*cj3*r12*x16706))+((r10*x16703))+(((-1.0)*sj0*x16708))+(((-1.0)*r10*x16704*x16705))+((sj0*x16699)));
evalcond[7]=(((cj0*x16698))+((cj0*x16702))+((x16701*x16712))+(((-1.0)*r00*x16710))+(((-1.0)*r01*x16709))+(((-1.0)*r02*sj3*x16706))+(((-1.0)*r00*x16696*x16705)));
evalcond[8]=((((-1.0)*r10*x16710))+(((-1.0)*r12*sj3*x16706))+((x16697*x16712))+((sj0*x16702))+(((-1.0)*r11*x16709))+(((-1.0)*r10*x16696*x16705))+((sj0*x16698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16713=((1.0)*sj5);
CheckValue<IkReal> x16714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x16713))+(((-1.0)*cj5*r01)))),-1);
if(!x16714.valid){
continue;
}
CheckValue<IkReal> x16715 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x16713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16714.value)))+(x16715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16716=IKsin(j4);
IkReal x16717=IKcos(j4);
IkReal x16718=(cj5*sj3);
IkReal x16719=(r11*sj5);
IkReal x16720=(cj2*sj1);
IkReal x16721=(sj1*sj2);
IkReal x16722=(r21*sj5);
IkReal x16723=(r01*sj5);
IkReal x16724=(cj1*sj2);
IkReal x16725=(sj3*sj5);
IkReal x16726=(cj3*cj5);
IkReal x16727=((1.0)*x16717);
IkReal x16728=((1.0)*x16716);
IkReal x16729=(cj3*x16717);
IkReal x16730=((1.0)*cj1*cj2);
IkReal x16731=((1.0)*x16726);
IkReal x16732=((1.0)*cj3*sj5);
IkReal x16733=(cj5*x16716);
IkReal x16734=(sj3*x16717);
evalcond[0]=((((-1.0)*x16722*x16728))+((r20*x16733))+(((-1.0)*r22*x16727)));
evalcond[1]=(sj0+(((-1.0)*x16723*x16728))+((r00*x16733))+(((-1.0)*r02*x16727)));
evalcond[2]=((((-1.0)*r12*x16727))+(((-1.0)*x16719*x16728))+((r10*x16733))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x16725))+(((-1.0)*r20*x16726*x16727))+((x16722*x16729))+(((-1.0)*cj3*r22*x16728))+(((-1.0)*x16724))+(((-1.0)*x16720))+((r21*x16718)));
evalcond[4]=(x16721+(((-1.0)*r21*x16731))+(((-1.0)*r20*x16732))+(((-1.0)*r20*x16718*x16727))+(((-1.0)*x16730))+((x16722*x16734))+(((-1.0)*r22*sj3*x16728)));
evalcond[5]=((((-1.0)*r00*x16726*x16727))+((cj0*x16721))+((x16723*x16729))+((r01*x16718))+((r00*x16725))+(((-1.0)*cj3*r02*x16728))+(((-1.0)*cj0*x16730)));
evalcond[6]=((((-1.0)*cj3*r12*x16728))+(((-1.0)*sj0*x16730))+((sj0*x16721))+(((-1.0)*r10*x16726*x16727))+((r11*x16718))+((x16719*x16729))+((r10*x16725)));
evalcond[7]=((((-1.0)*r00*x16732))+((cj0*x16720))+((cj0*x16724))+(((-1.0)*r02*sj3*x16728))+((x16723*x16734))+(((-1.0)*r00*x16718*x16727))+(((-1.0)*r01*x16731)));
evalcond[8]=((((-1.0)*r12*sj3*x16728))+((sj0*x16720))+((sj0*x16724))+(((-1.0)*r10*x16732))+((x16719*x16734))+(((-1.0)*r10*x16718*x16727))+(((-1.0)*r11*x16731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16735=((1.0)*sj5);
CheckValue<IkReal> x16736 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x16735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16736.valid){
continue;
}
CheckValue<IkReal> x16737=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x16735)))),-1);
if(!x16737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16736.value)+(((1.5707963267949)*(x16737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16738=IKsin(j4);
IkReal x16739=IKcos(j4);
IkReal x16740=(cj5*sj3);
IkReal x16741=(r11*sj5);
IkReal x16742=(cj2*sj1);
IkReal x16743=(sj1*sj2);
IkReal x16744=(r21*sj5);
IkReal x16745=(r01*sj5);
IkReal x16746=(cj1*sj2);
IkReal x16747=(sj3*sj5);
IkReal x16748=(cj3*cj5);
IkReal x16749=((1.0)*x16739);
IkReal x16750=((1.0)*x16738);
IkReal x16751=(cj3*x16739);
IkReal x16752=((1.0)*cj1*cj2);
IkReal x16753=((1.0)*x16748);
IkReal x16754=((1.0)*cj3*sj5);
IkReal x16755=(cj5*x16738);
IkReal x16756=(sj3*x16739);
evalcond[0]=((((-1.0)*x16744*x16750))+(((-1.0)*r22*x16749))+((r20*x16755)));
evalcond[1]=(sj0+((r00*x16755))+(((-1.0)*x16745*x16750))+(((-1.0)*r02*x16749)));
evalcond[2]=((((-1.0)*r12*x16749))+(((-1.0)*x16741*x16750))+((r10*x16755))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x16746))+(((-1.0)*x16742))+(((-1.0)*cj3*r22*x16750))+(((-1.0)*r20*x16748*x16749))+((x16744*x16751))+((r20*x16747))+((r21*x16740)));
evalcond[4]=((((-1.0)*r21*x16753))+x16743+(((-1.0)*r20*x16740*x16749))+((x16744*x16756))+(((-1.0)*x16752))+(((-1.0)*r20*x16754))+(((-1.0)*r22*sj3*x16750)));
evalcond[5]=(((r00*x16747))+(((-1.0)*cj0*x16752))+(((-1.0)*cj3*r02*x16750))+((cj0*x16743))+(((-1.0)*r00*x16748*x16749))+((x16745*x16751))+((r01*x16740)));
evalcond[6]=((((-1.0)*cj3*r12*x16750))+((r11*x16740))+((x16741*x16751))+((r10*x16747))+(((-1.0)*r10*x16748*x16749))+((sj0*x16743))+(((-1.0)*sj0*x16752)));
evalcond[7]=((((-1.0)*r00*x16740*x16749))+(((-1.0)*r02*sj3*x16750))+((cj0*x16742))+((cj0*x16746))+(((-1.0)*r00*x16754))+(((-1.0)*r01*x16753))+((x16745*x16756)));
evalcond[8]=((((-1.0)*r10*x16754))+(((-1.0)*r11*x16753))+((x16741*x16756))+(((-1.0)*r12*sj3*x16750))+(((-1.0)*r10*x16740*x16749))+((sj0*x16746))+((sj0*x16742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16757=r21*r21;
IkReal x16758=cj5*cj5;
IkReal x16759=r20*r20;
IkReal x16760=(cj5*r21);
IkReal x16761=(r20*sj5);
IkReal x16762=((1.0)*sj5);
IkReal x16763=(sj1*sj2);
IkReal x16764=(cj3*cj5);
IkReal x16765=(cj1*cj2);
IkReal x16766=(cj5*r20);
IkReal x16767=((1.0)*cj3*r22);
IkReal x16768=(cj3*r20*r21);
IkReal x16769=(sj3*x16757);
CheckValue<IkReal> x16770 = IKatan2WithCheck(IkReal(((((-1.0)*x16760*x16767))+((r22*x16763))+(((-1.0)*x16761*x16767))+(((-1.0)*r22*x16765)))),IkReal((x16768+((sj5*x16757*x16764))+(((-1.0)*x16759*x16762*x16764))+(((-1.0)*x16765*x16766))+((x16763*x16766))+(((-2.0)*x16758*x16768))+(((-1.0)*r21*x16762*x16763))+((r21*sj5*x16765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16770.valid){
continue;
}
CheckValue<IkReal> x16771=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x16769+(((-1.0)*x16758*x16769))+(((-2.0)*sj3*x16760*x16761))+((sj3*x16758*x16759)))),-1);
if(!x16771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16770.value)+(((1.5707963267949)*(x16771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16772=IKsin(j4);
IkReal x16773=IKcos(j4);
IkReal x16774=((1.0)*r22);
IkReal x16775=((1.0)*cj2);
IkReal x16776=(cj5*sj3);
IkReal x16777=((1.0)*r21);
IkReal x16778=(r20*sj5);
IkReal x16779=(cj3*cj5);
IkReal x16780=(r21*sj5*x16773);
IkReal x16781=((1.0)*r20*x16773);
evalcond[0]=(((cj5*r20*x16772))+(((-1.0)*sj5*x16772*x16777))+(((-1.0)*x16773*x16774)));
evalcond[1]=((((-1.0)*x16779*x16781))+(((-1.0)*cj3*x16772*x16774))+((cj3*x16780))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x16775))+((r21*x16776))+((sj3*x16778)));
evalcond[2]=((((-1.0)*cj3*x16778))+(((-1.0)*x16776*x16781))+((sj3*x16780))+((sj1*sj2))+(((-1.0)*sj3*x16772*x16774))+(((-1.0)*cj1*x16775))+(((-1.0)*x16777*x16779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16782=(cj5*sj4);
IkReal x16783=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x16782))+((r01*x16783))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x16782))+(((-1.0)*r11*x16783))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x16782))+((r01*x16783))+((cj4*r02))))+IKsqr((((r10*x16782))+(((-1.0)*r11*x16783))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x16782))+((r01*x16783))+((cj4*r02))), (((r10*x16782))+(((-1.0)*r11*x16783))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16784=IKsin(j0);
IkReal x16785=IKcos(j0);
IkReal x16786=((1.0)*cj3);
IkReal x16787=(cj5*r11);
IkReal x16788=(sj1*sj2);
IkReal x16789=(r02*sj4);
IkReal x16790=(r01*sj5);
IkReal x16791=(cj3*cj4);
IkReal x16792=(cj4*cj5);
IkReal x16793=((1.0)*sj3);
IkReal x16794=(cj5*sj4);
IkReal x16795=(r12*sj4);
IkReal x16796=((1.0)*sj4);
IkReal x16797=(cj5*r01);
IkReal x16798=(cj1*cj2);
IkReal x16799=(cj4*sj3);
IkReal x16800=(r10*sj5);
IkReal x16801=(r00*sj5);
IkReal x16802=(r11*sj5);
IkReal x16803=((1.0)*cj4);
IkReal x16804=(cj2*sj1);
IkReal x16805=((0.712)*x16785);
IkReal x16806=(cj1*x16785);
IkReal x16807=((0.712)*x16784);
IkReal x16808=(cj1*x16784);
evalcond[0]=(x16784+(((-1.0)*r02*x16803))+(((-1.0)*x16790*x16796))+((r00*x16794)));
evalcond[1]=((((-1.0)*x16796*x16802))+((r10*x16794))+(((-1.0)*r12*x16803))+(((-1.0)*x16785)));
evalcond[2]=((((-0.85)*x16806))+(((0.138)*x16801))+((x16788*x16805))+(((-1.0)*px))+(((0.138)*x16797))+(((0.179)*x16784))+(((-1.0)*x16798*x16805)));
evalcond[3]=((((-0.85)*x16808))+(((-0.179)*x16785))+(((0.138)*x16800))+((x16788*x16807))+(((-1.0)*py))+(((0.138)*x16787))+(((-1.0)*x16798*x16807)));
evalcond[4]=(((sj3*x16801))+(((-1.0)*x16785*x16798))+((x16790*x16791))+((sj3*x16797))+(((-1.0)*x16786*x16789))+((x16785*x16788))+(((-1.0)*r00*x16786*x16792)));
evalcond[5]=(((sj3*x16800))+(((-1.0)*x16786*x16795))+((x16791*x16802))+((sj3*x16787))+(((-1.0)*r10*x16786*x16792))+((x16784*x16788))+(((-1.0)*x16784*x16798)));
evalcond[6]=(((sj2*x16806))+(((-1.0)*x16786*x16797))+(((-1.0)*x16789*x16793))+((x16790*x16799))+(((-1.0)*r00*x16792*x16793))+(((-1.0)*x16786*x16801))+((x16785*x16804)));
evalcond[7]=(((sj2*x16808))+(((-1.0)*x16793*x16795))+(((-1.0)*x16786*x16787))+(((-1.0)*x16786*x16800))+(((-1.0)*r10*x16792*x16793))+((x16799*x16802))+((x16784*x16804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16809=r21*r21;
IkReal x16810=cj5*cj5;
IkReal x16811=r20*r20;
IkReal x16812=(cj2*sj1);
IkReal x16813=(cj1*sj2);
IkReal x16814=((1.0)*r22);
IkReal x16815=(r20*r21);
IkReal x16816=((1.0)*sj3);
IkReal x16817=(cj5*sj5);
IkReal x16818=(r22*sj3);
IkReal x16819=(r21*sj5);
IkReal x16820=((1.0)*cj5*r20);
IkReal x16821=(cj3*x16810);
CheckValue<IkReal> x16822=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16809*x16821))+(((-2.0)*cj3*x16815*x16817))+((cj3*x16809))+((cj3*(r22*r22)))+((x16811*x16821)))),-1);
if(!x16822.valid){
continue;
}
CheckValue<IkReal> x16823 = IKatan2WithCheck(IkReal(((((-1.0)*x16812*x16814))+((cj5*r21*x16818))+((r20*sj5*x16818))+(((-1.0)*x16813*x16814)))),IkReal(((((2.0)*sj3*x16810*x16815))+(((-1.0)*x16809*x16816*x16817))+(((-1.0)*x16812*x16820))+(((-1.0)*x16813*x16820))+((x16813*x16819))+(((-1.0)*x16815*x16816))+((sj3*x16811*x16817))+((x16812*x16819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16822.value)))+(x16823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16824=IKsin(j4);
IkReal x16825=IKcos(j4);
IkReal x16826=((1.0)*r22);
IkReal x16827=((1.0)*cj2);
IkReal x16828=(cj5*sj3);
IkReal x16829=((1.0)*r21);
IkReal x16830=(r20*sj5);
IkReal x16831=(cj3*cj5);
IkReal x16832=(r21*sj5*x16825);
IkReal x16833=((1.0)*r20*x16825);
evalcond[0]=(((cj5*r20*x16824))+(((-1.0)*sj5*x16824*x16829))+(((-1.0)*x16825*x16826)));
evalcond[1]=((((-1.0)*sj1*x16827))+((cj3*x16832))+(((-1.0)*cj1*sj2))+(((-1.0)*x16831*x16833))+((sj3*x16830))+((r21*x16828))+(((-1.0)*cj3*x16824*x16826)));
evalcond[2]=((((-1.0)*x16828*x16833))+((sj1*sj2))+(((-1.0)*cj3*x16830))+(((-1.0)*sj3*x16824*x16826))+(((-1.0)*cj1*x16827))+(((-1.0)*x16829*x16831))+((sj3*x16832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16834=(cj5*sj4);
IkReal x16835=(sj4*sj5);
if( IKabs((((r01*x16835))+(((-1.0)*r00*x16834))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x16834))+(((-1.0)*r11*x16835))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x16835))+(((-1.0)*r00*x16834))+((cj4*r02))))+IKsqr((((r10*x16834))+(((-1.0)*r11*x16835))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x16835))+(((-1.0)*r00*x16834))+((cj4*r02))), (((r10*x16834))+(((-1.0)*r11*x16835))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16836=IKsin(j0);
IkReal x16837=IKcos(j0);
IkReal x16838=((1.0)*cj3);
IkReal x16839=(cj5*r11);
IkReal x16840=(sj1*sj2);
IkReal x16841=(r02*sj4);
IkReal x16842=(r01*sj5);
IkReal x16843=(cj3*cj4);
IkReal x16844=(cj4*cj5);
IkReal x16845=((1.0)*sj3);
IkReal x16846=(cj5*sj4);
IkReal x16847=(r12*sj4);
IkReal x16848=((1.0)*sj4);
IkReal x16849=(cj5*r01);
IkReal x16850=(cj1*cj2);
IkReal x16851=(cj4*sj3);
IkReal x16852=(r10*sj5);
IkReal x16853=(r00*sj5);
IkReal x16854=(r11*sj5);
IkReal x16855=((1.0)*cj4);
IkReal x16856=(cj2*sj1);
IkReal x16857=((0.712)*x16837);
IkReal x16858=(cj1*x16837);
IkReal x16859=((0.712)*x16836);
IkReal x16860=(cj1*x16836);
evalcond[0]=(x16836+(((-1.0)*r02*x16855))+((r00*x16846))+(((-1.0)*x16842*x16848)));
evalcond[1]=((((-1.0)*x16837))+((r10*x16846))+(((-1.0)*r12*x16855))+(((-1.0)*x16848*x16854)));
evalcond[2]=((((-1.0)*x16850*x16857))+(((0.138)*x16849))+(((0.179)*x16836))+(((-1.0)*px))+((x16840*x16857))+(((-0.85)*x16858))+(((0.138)*x16853)));
evalcond[3]=((((-0.179)*x16837))+(((0.138)*x16839))+(((-1.0)*x16850*x16859))+(((-1.0)*py))+(((-0.85)*x16860))+((x16840*x16859))+(((0.138)*x16852)));
evalcond[4]=(((sj3*x16849))+((x16842*x16843))+((x16837*x16840))+(((-1.0)*r00*x16838*x16844))+(((-1.0)*x16837*x16850))+(((-1.0)*x16838*x16841))+((sj3*x16853)));
evalcond[5]=(((x16843*x16854))+(((-1.0)*x16836*x16850))+(((-1.0)*x16838*x16847))+((x16836*x16840))+(((-1.0)*r10*x16838*x16844))+((sj3*x16839))+((sj3*x16852)));
evalcond[6]=(((x16837*x16856))+(((-1.0)*r00*x16844*x16845))+(((-1.0)*x16838*x16849))+((x16842*x16851))+(((-1.0)*x16841*x16845))+((sj2*x16858))+(((-1.0)*x16838*x16853)));
evalcond[7]=(((x16836*x16856))+(((-1.0)*x16838*x16839))+((sj2*x16860))+(((-1.0)*x16845*x16847))+((x16851*x16854))+(((-1.0)*r10*x16844*x16845))+(((-1.0)*x16838*x16852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - S20 (1a7b9b9bf08915138064769445751a66)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
